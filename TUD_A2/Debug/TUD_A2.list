
TUD_A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002079c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08020a6c  08020a6c  00030a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000030  08020d00  08020d00  00030d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000030  08020d30  08020d30  00030d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  08020d60  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001544  2400007c  08020ddc  0004007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240015c0  08020ddc  000415c0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000c4a91  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000ac4d  00000000  00000000  00104b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00005660  00000000  00000000  0010f788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005738  00000000  00000000  00114de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003f774  00000000  00000000  0011a520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003b0af  00000000  00000000  00159c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001d360b  00000000  00000000  00194d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0036834e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00019584  00000000  00000000  003683a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08020a54 	.word	0x08020a54

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	08020a54 	.word	0x08020a54

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
 8000324:	2300      	movs	r3, #0
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f805 	bl	8000366 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
    }
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f9e2 	bl	8000764 <_ZNSaIP8AnalogInED1Ev>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f9c5 	bl	8000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffeb 	bl	80003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f000 f9f5 	bl	80007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f9d3 	bl	80007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffeb 	bl	80003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f000 fa04 	bl	8000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f9e2 	bl	8000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffeb 	bl	8000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <_ZN8AnalogIn5startEv>:

vector<AnalogIn*> AnalogIn::all_analog_ins;
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;

void AnalogIn::start() {
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if(timer->State == HAL_TIM_StateTypeDef::HAL_TIM_STATE_READY){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b01      	cmp	r3, #1
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d004      	beq.n	80004a2 <_ZN8AnalogIn5startEv+0x2a>
		HAL_TIM_Base_Start(timer);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4618      	mov	r0, r3
 800049e:	f01e f8cd 	bl	801e63c <HAL_TIM_Base_Start>
	}

	if(adc->State == 1){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	bf0c      	ite	eq
 80004ac:	2301      	moveq	r3, #1
 80004ae:	2300      	movne	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d014      	beq.n	80004e0 <_ZN8AnalogIn5startEv+0x68>
		HAL_ADC_Start_DMA(adc,(uint32_t*) adcs[adc].data, adcs[adc].data_size);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681c      	ldr	r4, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4619      	mov	r1, r3
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004c0:	f000 f9de 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004c4:	4603      	mov	r3, r0
 80004c6:	1d1d      	adds	r5, r3, #4
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004ce:	f000 f9d7 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004d2:	4603      	mov	r3, r0
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	4629      	mov	r1, r5
 80004da:	4620      	mov	r0, r4
 80004dc:	f015 fc26 	bl	8015d2c <HAL_ADC_Start_DMA>
	}
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bdb0      	pop	{r4, r5, r7, pc}
 80004e8:	240000a4 	.word	0x240000a4

080004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>:

AnalogIn::AnalogIn(ADC_HandleTypeDef* adc, TIM_HandleTypeDef* timer, Pin* pin) : adc(adc), timer(timer) {
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b08e      	sub	sp, #56	; 0x38
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	605a      	str	r2, [r3, #4]
	AnalogIn::all_analog_ins.push_back(this);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800050e:	4619      	mov	r1, r3
 8000510:	4823      	ldr	r0, [pc, #140]	; (80005a0 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb4>)
 8000512:	f000 fa13 	bl	800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>
	AnalogIn::analog_in_from_pin[pin] = this;
 8000516:	68fc      	ldr	r4, [r7, #12]
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	4821      	ldr	r0, [pc, #132]	; (80005a4 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb8>)
 800051e:	f000 fa1f 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8000522:	4603      	mov	r3, r0
 8000524:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_INPUT;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2201      	movs	r2, #1
 800052a:	719a      	strb	r2, [r3, #6]

	if(adcs.count(adc) == 0) {
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	4619      	mov	r1, r3
 8000532:	481d      	ldr	r0, [pc, #116]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000534:	f000 fa72 	bl	8000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d011      	beq.n	800056c <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0x80>
		ADC adc_struct;
		adc_struct.data_size = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
		adcs[adc] = adc_struct;
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	4619      	mov	r1, r3
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000554:	f000 f994 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000558:	4603      	mov	r3, r0
 800055a:	461d      	mov	r5, r3
 800055c:	f107 0410 	add.w	r4, r7, #16
 8000560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	602b      	str	r3, [r5, #0]
	}

	adc_index = adcs[adc].data_size;
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000574:	f000 f984 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000578:	4603      	mov	r3, r0
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	611a      	str	r2, [r3, #16]
	adcs[adc].data_size += 1;
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4619      	mov	r1, r3
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000588:	f000 f97a 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 800058c:	4603      	mov	r3, r0
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	3201      	adds	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4618      	mov	r0, r3
 8000598:	3738      	adds	r7, #56	; 0x38
 800059a:	46bd      	mov	sp, r7
 800059c:	bdb0      	pop	{r4, r5, r7, pc}
 800059e:	bf00      	nop
 80005a0:	24000098 	.word	0x24000098
 80005a4:	240000bc 	.word	0x240000bc
 80005a8:	240000a4 	.word	0x240000a4
 80005ac:	00000000 	.word	0x00000000

080005b0 <_ZN8AnalogIn6updateEv>:

float AnalogIn::update() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	voltage = AnalogIn::adcs[adc].data[adc_index] / 65535.0 * 3.3;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4816      	ldr	r0, [pc, #88]	; (8000618 <_ZN8AnalogIn6updateEv+0x68>)
 80005be:	f000 f95f 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80005c2:	4602      	mov	r2, r0
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	ee07 3a90 	vmov	s15, r3
 80005d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005d6:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000608 <_ZN8AnalogIn6updateEv+0x58>
 80005da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005de:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000610 <_ZN8AnalogIn6updateEv+0x60>
 80005e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	edc3 7a05 	vstr	s15, [r3, #20]
	return voltage;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	00000000 	.word	0x00000000
 800060c:	40efffe0 	.word	0x40efffe0
 8000610:	66666666 	.word	0x66666666
 8000614:	400a6666 	.word	0x400a6666
 8000618:	240000a4 	.word	0x240000a4

0800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8000632:	b590      	push	{r4, r7, lr}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ffed 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8000642:	4603      	mov	r3, r0
 8000644:	681c      	ldr	r4, [r3, #0]
 8000646:	6838      	ldr	r0, [r7, #0]
 8000648:	f7ff ffe8 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800064c:	4603      	mov	r3, r0
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	429c      	cmp	r4, r3
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	++_M_current;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	1d1a      	adds	r2, r3, #4
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	return *this;
 8000674:	687b      	ldr	r3, [r7, #4]
      }
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <_ZN8AnalogIn20start_all_analog_insEv>:

void AnalogIn::start_all_analog_ins(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_ZN8AnalogIn20start_all_analog_insEv+0x5c>)
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 f9dc 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 80006ac:	4603      	mov	r3, r0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f9e7 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 80006b6:	4603      	mov	r3, r0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	463a      	mov	r2, r7
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb6 	bl	8000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00e      	beq.n	80006f0 <_ZN8AnalogIn20start_all_analog_insEv+0x54>
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffd4 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 80006da:	4603      	mov	r3, r0
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	60bb      	str	r3, [r7, #8]
		analog_in->start();
 80006e0:	68b8      	ldr	r0, [r7, #8]
 80006e2:	f7ff fec9 	bl	8000478 <_ZN8AnalogIn5startEv>
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffba 	bl	8000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>
 80006ee:	e7e4      	b.n	80006ba <_ZN8AnalogIn20start_all_analog_insEv+0x1e>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	24000098 	.word	0x24000098

080006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>:

void AnalogIn::interrupt_all_analog_ins(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000708:	f000 f9cd 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800070c:	4602      	mov	r2, r0
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4293      	cmp	r3, r2
 8000712:	bf34      	ite	cc
 8000714:	2301      	movcc	r3, #1
 8000716:	2300      	movcs	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00c      	beq.n	8000738 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x3c>
		AnalogIn::all_analog_ins[i]->update();
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000722:	f000 f9d0 	bl	8000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>
 8000726:	4603      	mov	r3, r0
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <_ZN8AnalogIn6updateEv>
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e7e6      	b.n	8000706 <_ZN8AnalogIn24interrupt_all_analog_insEv+0xa>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	24000098 	.word	0x24000098

08000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f9ca 	bl	8000ae6 <_ZNSaIP8AnalogInEC1Ev>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f9d2 	bl	8000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZNSaIP8AnalogInED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000792:	461a      	mov	r2, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f9c6 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fdf8 	bl	8000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f9c9 	bl	8000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f9d1 	bl	8000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3304      	adds	r3, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fdbe 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>:
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f9df 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f9bb 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fde9 	bl	80003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f9d6 	bl	8000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f9de 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd89 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>:
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f9ec 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000864:	4603      	mov	r3, r0
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f9c8 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fdda 	bl	800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f9e1 	bl	8000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>
 8000892:	4603      	mov	r3, r0
 8000894:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f9eb 	bl	8000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>
 800089c:	4603      	mov	r3, r0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f9ee 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d114      	bne.n	80008e0 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x60>
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f9fc 	bl	8000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681c      	ldr	r4, [r3, #0]
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fa02 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 80008ca:	4603      	mov	r3, r0
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4621      	mov	r1, r4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fa08 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x64>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x66>
 80008e4:	2300      	movs	r3, #0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d01b      	beq.n	8000922 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xa2>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80008ea:	687c      	ldr	r4, [r7, #4]
 80008ec:	f107 0208 	add.w	r2, r7, #8
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fa19 	bl	8000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fa04 	bl	8000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000908:	f107 0218 	add.w	r2, r7, #24
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4613      	mov	r3, r2
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xb8>)
 8000916:	6979      	ldr	r1, [r7, #20]
 8000918:	4620      	mov	r0, r4
 800091a:	f000 fa18 	bl	8000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 800091e:	4603      	mov	r3, r0
 8000920:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f9d1 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 800092c:	4603      	mov	r3, r0
 800092e:	3304      	adds	r3, #4
      }
 8000930:	4618      	mov	r0, r3
 8000932:	3724      	adds	r7, #36	; 0x24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	08020c84 	.word	0x08020c84

0800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f000 fa3f 	bl	8000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 fa45 	bl	8000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 fa69 	bl	8000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8000972:	4603      	mov	r3, r0
 8000974:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 fa73 	bl	8000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 800097c:	4603      	mov	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	f107 020c 	add.w	r2, r7, #12
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fa76 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d114      	bne.n	80009c0 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fa84 	bl	8000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fa8a 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 80009aa:	4603      	mov	r3, r0
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4621      	mov	r1, r4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fa90 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d01b      	beq.n	8000a02 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009ca:	687c      	ldr	r4, [r7, #4]
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 faa1 	bl	8000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fa8c 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009e8:	f107 0218 	add.w	r2, r7, #24
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80009f6:	6979      	ldr	r1, [r7, #20]
 80009f8:	4620      	mov	r0, r4
 80009fa:	f000 faa0 	bl	8000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80009fe:	4603      	mov	r3, r0
 8000a00:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fa59 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	3304      	adds	r3, #4
      }
 8000a10:	4618      	mov	r0, r3
 8000a12:	3724      	adds	r7, #36	; 0x24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	08020c84 	.word	0x08020c84

08000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fac5 	bl	8000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>
 8000a30:	4603      	mov	r3, r0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fafe 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fb05 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x3e>
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x40>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fb04 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1d1a      	adds	r2, r3, #4
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 faf3 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	109b      	asrs	r3, r3, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
      }
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_ZNSaIP8AnalogInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fad7 	bl	80010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
	{ }
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
	if (__p)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 faba 	bl	80010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>
      }
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 face 	bl	80010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
      { }
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d012      	beq.n	8000bb0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f000 fabe 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fff0 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f000 fac2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000ba0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fac9 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000bae:	e7e9      	b.n	8000b84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
	}
    }
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fac0 	bl	800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>:
      _Rb_tree_key_compare()
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
      { }
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d012      	beq.n	8000c34 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f000 fab0 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4619      	mov	r1, r3
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fff0 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8000c1e:	6838      	ldr	r0, [r7, #0]
 8000c20:	f000 fab4 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000c24:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fabb 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000c32:	e7e9      	b.n	8000c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 faaf 	bl	80011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fab9 	bl	80011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>:
      key_comp() const
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 faa9 	bl	8001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>
 8000cc4:	bf00      	nop
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}

08000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 faa6 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	bf34      	ite	cc
 8000cfe:	2301      	movcc	r3, #1
 8000d00:	2300      	movcs	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
      }
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fa92 	bl	8001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000d4e:	b5b0      	push	{r4, r5, r7, lr}
 8000d50:	b088      	sub	sp, #32
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fa82 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d62:	4604      	mov	r4, r0
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f000 fa89 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000d6a:	4605      	mov	r5, r0
 8000d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d6e:	f000 fa90 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d72:	4603      	mov	r3, r0
 8000d74:	462a      	mov	r2, r5
 8000d76:	4621      	mov	r1, r4
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 fa95 	bl	80012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8000d7e:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000d80:	69f8      	ldr	r0, [r7, #28]
 8000d82:	f000 fbe3 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f107 0010 	add.w	r0, r7, #16
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	f000 faad 	bl	80012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>

	    if (__res.second)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000d9a:	6939      	ldr	r1, [r7, #16]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 fbe6 	bl	8001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e00b      	b.n	8000dc2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>

	    _M_drop_node(__z);
 8000daa:	69f9      	ldr	r1, [r7, #28]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 f9c5 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fc18 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8000dc0:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdb0      	pop	{r4, r5, r7, pc}

08000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d011      	beq.n	8000e1a <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685d      	ldr	r5, [r3, #4]
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f000 fc06 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4629      	mov	r1, r5
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f000 fc20 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	1d1a      	adds	r2, r3, #4
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	e00c      	b.n	8000e34 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe32 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 8000e20:	4604      	mov	r4, r0
 8000e22:	6838      	ldr	r0, [r7, #0]
 8000e24:	f000 fbf3 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fc20 	bl	8001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fc99 	bl	800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>
 8000e3a:	4603      	mov	r3, r0
#endif
      }
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}

08000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6839      	ldr	r1, [r7, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fca5 	bl	80017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fcaf 	bl	80017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	bf0c      	ite	eq
 8000e92:	2301      	moveq	r3, #1
 8000e94:	2300      	movne	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fc9f 	bl	80017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8000eb4:	bf00      	nop
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}

08000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fc9c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZNKSt4lessIP3PinEclES1_S1_>:
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	bf34      	ite	cc
 8000eee:	2301      	movcc	r3, #1
 8000ef0:	2300      	movcs	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
      }
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>:
	tuple(const _Elements&... __elements)
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fc88 	bl	8001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f3e:	b5b0      	push	{r4, r5, r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f98a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000f52:	4604      	mov	r4, r0
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f000 fc74 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f5e:	f000 f998 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000f62:	4603      	mov	r3, r0
 8000f64:	462a      	mov	r2, r5
 8000f66:	4621      	mov	r1, r4
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fc75 	bl	8001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8000f6e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000f70:	69f8      	ldr	r0, [r7, #28]
 8000f72:	f000 fdc3 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f107 0010 	add.w	r0, r7, #16
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	f000 fc8d 	bl	800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000f8a:	6939      	ldr	r1, [r7, #16]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 fdc6 	bl	8001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e00b      	b.n	8000fb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8000f9a:	69f9      	ldr	r1, [r7, #28]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f901 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fdf8 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
      }
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}

08000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000fba:	b5b0      	push	{r4, r5, r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fdfa 	bl	8001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fe02 	bl	8001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fe08 	bl	8001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f828 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f82f 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000ffc:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d110      	bne.n	8001024 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8001002:	687c      	ldr	r4, [r7, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fe22 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001010:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4629      	mov	r1, r5
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff fe66 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f807 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 800102a:	4603      	mov	r3, r0
 800102c:	e000      	b.n	8001030 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x76>
 800102e:	68bb      	ldr	r3, [r7, #8]
    }
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}

08001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1d1a      	adds	r2, r3, #4
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe0e 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80010d0:	f7ff f926 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 80010da:	69b8      	ldr	r0, [r7, #24]
 80010dc:	f01f fa18 	bl	8020510 <_ZdlPv>
	    return;
 80010e0:	e005      	b.n	80010ee <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	69b9      	ldr	r1, [r7, #24]
 80010e6:	69f8      	ldr	r0, [r7, #28]
 80010e8:	f001 fa62 	bl	80025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fd9e 	bl	8001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fdaf 	bl	8001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fd91 	bl	8001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fda2 	bl	8001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fcf1 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80011d6:	4604      	mov	r4, r0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fda4 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 80011de:	4602      	mov	r2, r0
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4621      	mov	r1, r4
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fdaa 	bl	8001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1d1a      	adds	r2, r3, #4
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9f2 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>:
      key_comp() const
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800121e:	bf00      	nop
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr()
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3310      	adds	r3, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fdb3 	bl	8001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fdb0 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fd8f 	bl	8001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>
 80012bc:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff ffd1 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80012c4:	4604      	mov	r4, r0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffd8 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7ff ffdf 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80012d4:	4603      	mov	r3, r0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	462b      	mov	r3, r5
 80012da:	4622      	mov	r2, r4
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fd8c 	bl	8001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80012e4:	697b      	ldr	r3, [r7, #20]
	}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}

080012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80012ee:	b5b0      	push	{r4, r5, r7, lr}
 80012f0:	b08c      	sub	sp, #48	; 0x30
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fda9 	bl	8001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>
 8001304:	4603      	mov	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001308:	69bc      	ldr	r4, [r7, #24]
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f000 fd0b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001310:	4603      	mov	r3, r0
 8001312:	429c      	cmp	r4, r3
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d032      	beq.n	8001386 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x98>
	  if (size() > 0
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 fda9 	bl	8001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>
 8001326:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001328:	2b00      	cmp	r3, #0
 800132a:	d015      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 800132c:	68bc      	ldr	r4, [r7, #8]
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f000 fdae 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001334:	4603      	mov	r3, r0
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fc8b 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800133e:	4603      	mov	r3, r0
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fcce 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6c>
 8001358:	2300      	movs	r3, #0
	  if (size() > 0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	68b8      	ldr	r0, [r7, #8]
 8001364:	f000 fd94 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001368:	4602      	mov	r2, r0
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 fd99 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001376:	e0e5      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fda8 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8001384:	e0de      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001386:	68bc      	ldr	r4, [r7, #8]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681d      	ldr	r5, [r3, #0]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fc60 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001394:	4603      	mov	r3, r0
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4629      	mov	r1, r5
 800139c:	4620      	mov	r0, r4
 800139e:	f7ff fca4 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d059      	beq.n	800145c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x16e>
	  iterator __before = __pos;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80013ac:	69bc      	ldr	r4, [r7, #24]
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f000 fe1a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429c      	cmp	r4, r3
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00d      	beq.n	80013e2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f000 fe0e 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013cc:	4604      	mov	r4, r0
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f000 fe0a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fe10 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80013e0:	e0b0      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80013e2:	68bc      	ldr	r4, [r7, #8]
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fe22 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fc2e 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80013f8:	4603      	mov	r3, r0
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fc71 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01f      	beq.n	800144e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe7b 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	f107 0214 	add.w	r2, r7, #20
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	4619      	mov	r1, r3
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fd37 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800143a:	e083      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800143c:	f107 0218 	add.w	r2, r7, #24
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fdda 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800144c:	e07a      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fd3d 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800145a:	e073      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800145c:	68bc      	ldr	r4, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fbf7 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001466:	4603      	mov	r3, r0
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fc3a 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d059      	beq.n	8001530 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x242>
	  iterator __after = __pos;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001480:	69bc      	ldr	r4, [r7, #24]
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f000 fd04 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001488:	4603      	mov	r3, r0
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	429c      	cmp	r4, r3
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f000 fcf6 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fcfb 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80014b2:	e047      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80014b4:	68bc      	ldr	r4, [r7, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681d      	ldr	r5, [r3, #0]
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fdc8 	bl	8002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fbc3 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80014ce:	4603      	mov	r3, r0
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4629      	mov	r1, r5
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fc07 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01f      	beq.n	8001522 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe11 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014fe:	f107 0218 	add.w	r2, r7, #24
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	4619      	mov	r1, r3
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fccd 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800150e:	e019      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fd70 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001520:	e010      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fcd3 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800152e:	e009      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fd99 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}

0800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fda4 	bl	80020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 800155a:	4602      	mov	r2, r0
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fdab 	bl	80020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>
 8001568:	4603      	mov	r3, r0
      }
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001572:	b5b0      	push	{r4, r5, r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fbcd 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 800158c:	4602      	mov	r2, r0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4293      	cmp	r3, r2
 8001592:	d012      	beq.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001594:	68fc      	ldr	r4, [r7, #12]
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f7ff ffd8 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800159c:	4603      	mov	r3, r0
 800159e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb57 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015a6:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4629      	mov	r1, r5
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fb9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4c>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4e>
 80015be:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80015c0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80015c6:	7df8      	ldrb	r0, [r7, #23]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	f01f f810 	bl	80205f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f805 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80015e6:	693b      	ldr	r3, [r7, #16]
    }
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}

080015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f7ff ffed 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001634:	4603      	mov	r3, r0
 8001636:	681c      	ldr	r4, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4619      	mov	r1, r3
 800163c:	2004      	movs	r0, #4
 800163e:	f7fe fe77 	bl	8000330 <_ZnwjPv>
 8001642:	4603      	mov	r3, r0
 8001644:	601c      	str	r4, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffd7 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001660:	4603      	mov	r3, r0
 8001662:	4619      	mov	r1, r3
 8001664:	68b8      	ldr	r0, [r7, #8]
 8001666:	f7ff ffdd 	bl	8001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8001682:	2101      	movs	r1, #1
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 fd26 	bl	80020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>
 800168a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff f9e3 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 800169e:	4603      	mov	r3, r0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	f107 0214 	add.w	r2, r7, #20
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fd59 	bl	8002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80016b2:	4603      	mov	r3, r0
 80016b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd67 	bl	800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>
 80016c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80016c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	18d5      	adds	r5, r2, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff9c 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4629      	mov	r1, r5
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff ffb6 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff96 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fd71 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80016fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4621      	mov	r1, r4
 8001702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001704:	f000 fd57 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001708:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3304      	adds	r3, #4
 800170e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff81 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800171a:	4603      	mov	r3, r0
 800171c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fd5c 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8001726:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fd42 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001732:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001734:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8001740:	461a      	mov	r2, r3
 8001742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001744:	f7ff f9ef 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	441a      	add	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
    }
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	08020a6c 	.word	0x08020a6c

0800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff f985 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 800177a:	4603      	mov	r3, r0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fd43 	bl	8002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>
 800178a:	4603      	mov	r3, r0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ff75 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 8001798:	4603      	mov	r3, r0
      }
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fa45 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80017b2:	4604      	mov	r4, r0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fd44 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4621      	mov	r1, r4
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fd4a 	bl	800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f9dc 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80017fa:	bf00      	nop
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr()
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3310      	adds	r3, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fd53 	bl	80022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd50 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fd45 	bl	80022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800186c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f7ff fcf9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001874:	4604      	mov	r4, r0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffe3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800187c:	4605      	mov	r5, r0
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f7ff fd07 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001884:	4603      	mov	r3, r0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	462b      	mov	r3, r5
 800188a:	4622      	mov	r2, r4
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fd42 	bl	8002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8001894:	697b      	ldr	r3, [r7, #20]
	}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bdb0      	pop	{r4, r5, r7, pc}

0800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800189e:	b5b0      	push	{r4, r5, r7, lr}
 80018a0:	b08c      	sub	sp, #48	; 0x30
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd5f 	bl	8002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80018b8:	69bc      	ldr	r4, [r7, #24]
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 fcc1 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	429c      	cmp	r4, r3
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d032      	beq.n	8001936 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f000 fd5f 	bl	8002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 80018d6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 80018dc:	68bc      	ldr	r4, [r7, #8]
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 fd64 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd6b 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80018ee:	4603      	mov	r3, r0
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff faee 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8001908:	2300      	movs	r3, #0
	  if (size() > 0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f000 fd4a 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001918:	4602      	mov	r2, r0
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fac1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001926:	e0e5      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fd54 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001934:	e0de      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001936:	68bc      	ldr	r4, [r7, #8]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681d      	ldr	r5, [r3, #0]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fd40 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001944:	4603      	mov	r3, r0
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4629      	mov	r1, r5
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff fac4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d059      	beq.n	8001a0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800195c:	69bc      	ldr	r4, [r7, #24]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 fdc6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001964:	4603      	mov	r3, r0
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429c      	cmp	r4, r3
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 fdba 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800197c:	4604      	mov	r4, r0
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f000 fdb6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4621      	mov	r1, r4
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fb38 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001990:	e0b0      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001992:	68bc      	ldr	r4, [r7, #8]
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fdb5 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
 800199e:	4603      	mov	r3, r0
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd0e 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80019a8:	4603      	mov	r3, r0
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fa91 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01f      	beq.n	80019fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fbd7 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	f107 0214 	add.w	r2, r7, #20
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fa5f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80019ea:	e083      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 80019ec:	f107 0218 	add.w	r2, r7, #24
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fb02 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80019fc:	e07a      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fce9 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001a0a:	e073      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001a0c:	68bc      	ldr	r4, [r7, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fcd7 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a16:	4603      	mov	r3, r0
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fa5a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d059      	beq.n	8001ae0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001a30:	69bc      	ldr	r4, [r7, #24]
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f000 fcba 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429c      	cmp	r4, r3
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00c      	beq.n	8001a64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 fcac 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fa23 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001a62:	e047      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001a64:	68bc      	ldr	r4, [r7, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd5b 	bl	800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fca3 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4629      	mov	r1, r5
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fa27 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01f      	beq.n	8001ad2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fb6d 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aae:	f107 0218 	add.w	r2, r7, #24
 8001ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9f5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001abe:	e019      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fa98 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001ad0:	e010      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fc7f 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001ade:	e009      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4619      	mov	r1, r3
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fac1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}

08001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fd21 	bl	800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fd28 	bl	8002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>
 8001b18:	4603      	mov	r3, r0
      }
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b22:	b5b0      	push	{r4, r5, r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fb83 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d012      	beq.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b44:	68fc      	ldr	r4, [r7, #12]
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f7ff ffd8 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fc37 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001b56:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff f9bb 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8001b6e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b70:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001b76:	7df8      	ldrb	r0, [r7, #23]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	f01e fd38 	bl	80205f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f805 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8001b96:	693b      	ldr	r3, [r7, #16]
    }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}

08001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
      }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01d      	beq.n	8001c3e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001c02:	68fc      	ldr	r4, [r7, #12]
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7ff fca1 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7ff f868 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f000 fca8 	bl	8002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8001c30:	60b8      	str	r0, [r7, #8]
 8001c32:	e7e3      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001c34:	68b8      	ldr	r0, [r7, #8]
 8001c36:	f000 fcaf 	bl	8002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8001c3a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001c3c:	e7de      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f811 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001c4a:	697b      	ldr	r3, [r7, #20]
    }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fc75 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c8a:	b590      	push	{r4, r7, lr}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fc9a 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	6838      	ldr	r0, [r7, #0]
 8001c9e:	f7ff fac5 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f000 fc9c 	bl	80025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>
      }
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fc85 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fc96 	bl	80025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fca9 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fd8c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f000 fcab 	bl	8002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}

08001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fc94 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2201      	movs	r2, #1
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fca5 	bl	8002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d3e:	b590      	push	{r4, r7, lr}
 8001d40:	b087      	sub	sp, #28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01d      	beq.n	8001d8e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001d52:	68fc      	ldr	r4, [r7, #12]
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff fbf9 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7fe ffc0 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff f9d2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d80:	60b8      	str	r0, [r7, #8]
 8001d82:	e7e3      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f7ff f9c1 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001d8c:	e7de      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fc2b 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001d9a:	697b      	ldr	r3, [r7, #20]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fc7a 	bl	80026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fbf3 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fc65 	bl	80026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2038      	movs	r0, #56	; 0x38
 8001e12:	f7fe fa8d 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fbd9 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	68b8      	ldr	r0, [r7, #8]
 8001e20:	f7ff fa04 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001e24:	4605      	mov	r5, r0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fa1d 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff fa24 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e34:	4680      	mov	r8, r0
 8001e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e38:	f7ff fa2b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4643      	mov	r3, r8
 8001e42:	4632      	mov	r2, r6
 8001e44:	4629      	mov	r1, r5
 8001e46:	4620      	mov	r0, r4
 8001e48:	f000 fc95 	bl	8002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fbc1 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fc76 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7fe fe69 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7ff ff1b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d023      	beq.n	8001f48 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001f04:	68bc      	ldr	r4, [r7, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681d      	ldr	r5, [r3, #0]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fb1d 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001f12:	4603      	mov	r3, r0
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4629      	mov	r1, r5
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe fee5 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x66>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8f7 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001f36:	4603      	mov	r3, r0
 8001f38:	e004      	b.n	8001f44 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x70>
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f8e5 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001f42:	4603      	mov	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001f46:	e7d8      	b.n	8001efa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fb4d 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01d      	beq.n	8001f9a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f000 fc30 	bl	80027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	f107 021c 	add.w	r2, r7, #28
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fe8a 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8001f7e:	f107 0214 	add.w	r2, r7, #20
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fc2c 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001f8e:	e027      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f84c 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001f9a:	68bc      	ldr	r4, [r7, #8]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe58 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe fe9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8001fba:	f107 0214 	add.w	r2, r7, #20
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fc0e 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001fca:	e009      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	f107 0220 	add.w	r2, r7, #32
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f84b 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f000 fbce 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002012:	4603      	mov	r3, r0
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fbc7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002020:	4603      	mov	r3, r0
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f01e fad4 	bl	80205ec <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
	return *this;
 800204a:	687b      	ldr	r3, [r7, #4]
      }
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f01e fac1 	bl	80205e8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
	return *this;
 800206c:	687b      	ldr	r3, [r7, #4]
      }
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f000 fb93 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002088:	4603      	mov	r3, r0
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr() const
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3310      	adds	r3, #16
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fbb2 	bl	8002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fba4 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 80020e8:	4604      	mov	r4, r0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fcdb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	1ae2      	subs	r2, r4, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf34      	ite	cc
 80020fa:	2301      	movcc	r3, #1
 80020fc:	2300      	movcs	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f01e fad1 	bl	80206ac <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7fe fccb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002110:	4604      	mov	r4, r0
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7fe fcc7 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002118:	4603      	mov	r3, r0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	f107 0208 	add.w	r2, r7, #8
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fb93 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800212c:	4603      	mov	r3, r0
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4423      	add	r3, r4
 8002132:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7fe fcb6 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4293      	cmp	r3, r2
 8002140:	d306      	bcc.n	8002150 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb74 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4293      	cmp	r3, r2
 800214e:	d904      	bls.n	800215a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x84>
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb6d 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002156:	4603      	mov	r3, r0
 8002158:	e000      	b.n	800215c <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x86>
 800215a:	697b      	ldr	r3, [r7, #20]
      }
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}

08002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fa54 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8002174:	4603      	mov	r3, r0
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7fe fa4f 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800217e:	4603      	mov	r3, r0
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1ae3      	subs	r3, r4, r3
 8002184:	109b      	asrs	r3, r3, #2
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x1e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb69 	bl	800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>
 80021a8:	4603      	mov	r3, r0
 80021aa:	e000      	b.n	80021ae <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x20>
 80021ac:	2300      	movs	r3, #0
      }
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af02      	add	r7, sp, #8
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80021c4:	f88d 4000 	strb.w	r4, [sp]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fb73 	bl	80028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80021d4:	4603      	mov	r3, r0
      }
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}

080021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb75 	bl	80028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>
    }
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	425b      	negs	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	f107 020c 	add.w	r2, r7, #12
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff25 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800225a:	b590      	push	{r4, r7, lr}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01d      	beq.n	80022aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800226e:	68fc      	ldr	r4, [r7, #12]
 8002270:	68b8      	ldr	r0, [r7, #8]
 8002272:	f7ff fc43 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8002276:	4603      	mov	r3, r0
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4620      	mov	r0, r4
 8002282:	f7fe fe2a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002286:	4603      	mov	r3, r0
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7fe ff78 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800229c:	60b8      	str	r0, [r7, #8]
 800229e:	e7e3      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80022a0:	68b8      	ldr	r0, [r7, #8]
 80022a2:	f7fe ff67 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80022a6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80022a8:	e7de      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fc75 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80022b6:	697b      	ldr	r3, [r7, #20]
    }
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() noexcept
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb28 	bl	800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f99b 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002304:	4603      	mov	r3, r0
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fb13 	bl	8002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af02      	add	r7, sp, #8
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4619      	mov	r1, r3
 800232c:	2018      	movs	r0, #24
 800232e:	f7fd ffff 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f981 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002338:	4604      	mov	r4, r0
 800233a:	68b8      	ldr	r0, [r7, #8]
 800233c:	f7ff fa64 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8002340:	4605      	mov	r5, r0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe ff8f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002348:	4606      	mov	r6, r0
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff fa79 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002350:	4680      	mov	r8, r0
 8002352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002354:	f7fe ff9d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002358:	4603      	mov	r3, r0
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4643      	mov	r3, r8
 800235e:	4632      	mov	r2, r6
 8002360:	4629      	mov	r1, r5
 8002362:	4620      	mov	r0, r4
 8002364:	f000 fb43 	bl	80029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fc0b 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3310      	adds	r3, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fb95 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f7fe fc27 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80023f2:	68b8      	ldr	r0, [r7, #8]
 80023f4:	f7ff ff25 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800240c:	68bc      	ldr	r4, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb71 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800241a:	4603      	mov	r3, r0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4629      	mov	r1, r5
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fd59 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002428:	4603      	mov	r3, r0
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800242e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fea7 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800243e:	4603      	mov	r3, r0
 8002440:	e004      	b.n	800244c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fe95 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800244a:	4603      	mov	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800244e:	e7d8      	b.n	8002402 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fba1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800245e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f000 fadd 	bl	8002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800246c:	4603      	mov	r3, r0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	f107 021c 	add.w	r2, r7, #28
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fcfe 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8002486:	f107 0214 	add.w	r2, r7, #20
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	4619      	mov	r1, r3
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fad9 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 8002496:	e027      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f833 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80024a2:	68bc      	ldr	r4, [r7, #8]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff8c 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80024ac:	4603      	mov	r3, r0
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7fe fd0f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80024c2:	f107 0214 	add.w	r2, r7, #20
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fabb 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 80024d2:	e009      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	f107 0220 	add.w	r2, r7, #32
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff fdc7 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}

080024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	330c      	adds	r3, #12
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f01e f869 	bl	80205ec <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]
	return *this;
 8002520:	687b      	ldr	r3, [r7, #4]
      }
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f01e f856 	bl	80205e8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
	return *this;
 8002542:	687b      	ldr	r3, [r7, #4]
      }
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr() const
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3310      	adds	r3, #16
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa8e 	bl	8002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800255e:	4603      	mov	r3, r0
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>:
      operator()(const _Pair& __x) const
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4619      	mov	r1, r3
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f01d ffa6 	bl	8020514 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f000 fa4f 	bl	8002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>
	}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002614:	f7fd fe84 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800261e:	69b8      	ldr	r0, [r7, #24]
 8002620:	f01d ff76 	bl	8020510 <_ZdlPv>
	    return;
 8002624:	e005      	b.n	8002632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	69b9      	ldr	r1, [r7, #24]
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f000 fb70 	bl	8002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f000 fa23 	bl	8002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>
	}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002680:	f7fd fe4e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800268a:	69b8      	ldr	r0, [r7, #24]
 800268c:	f01d ff40 	bl	8020510 <_ZdlPv>
	    return;
 8002690:	e005      	b.n	800269e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	69b9      	ldr	r1, [r7, #24]
 8002696:	69f8      	ldr	r0, [r7, #28]
 8002698:	f000 fb4c 	bl	8002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() noexcept
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80026ce:	f7fd fe27 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f01d ff18 	bl	8020518 <_Znwj>
 80026e8:	4603      	mov	r3, r0
 80026ea:	e006      	b.n	80026fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb31 	bl	8002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>
 80026f6:	4603      	mov	r3, r0
 80026f8:	bf00      	nop
      { return __a.allocate(__n); }
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f9d1 	bl	8002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8002722:	b5b0      	push	{r4, r5, r7, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f7fe fd98 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fda0 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800273c:	4602      	mov	r2, r0
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffdc 	bl	8002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>
 800274a:	f107 0418 	add.w	r4, r7, #24
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f7fe fd9f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4619      	mov	r1, r3
 8002758:	2028      	movs	r0, #40	; 0x28
 800275a:	f7fd fde9 	bl	8000330 <_ZnwjPv>
 800275e:	4605      	mov	r5, r0
 8002760:	7f3b      	ldrb	r3, [r7, #28]
 8002762:	4622      	mov	r2, r4
 8002764:	7d39      	ldrb	r1, [r7, #20]
 8002766:	4628      	mov	r0, r5
 8002768:	f000 f9dc 	bl	8002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 800276c:	462b      	mov	r3, r5
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}

08002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002776:	b5b0      	push	{r4, r5, r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fd6e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800278a:	4604      	mov	r4, r0
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f7fe fd75 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002792:	4605      	mov	r5, r0
 8002794:	6a38      	ldr	r0, [r7, #32]
 8002796:	f7fe fd7c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800279a:	4603      	mov	r3, r0
 800279c:	462a      	mov	r2, r5
 800279e:	4621      	mov	r1, r4
 80027a0:	68b8      	ldr	r0, [r7, #8]
 80027a2:	f7ff ffbe 	bl	8002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdb0      	pop	{r4, r5, r7, pc}

080027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ff0a 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80027f2:	68b8      	ldr	r0, [r7, #8]
 80027f4:	f000 f9aa 	bl	8002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>
 80027f8:	4603      	mov	r3, r0
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffd4 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002806:	4603      	mov	r3, r0
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f99e 	bl	8002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8002826:	4603      	mov	r3, r0
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f9c2 	bl	8002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8002840:	4603      	mov	r3, r0
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f9a4 	bl	8002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>
 8002848:	4603      	mov	r3, r0
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d201      	bcs.n	800286c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	e000      	b.n	800286e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800286c:	687b      	ldr	r3, [r7, #4]
    }
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800288c:	f7fd fd48 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f01d fe3c 	bl	8020518 <_Znwj>
 80028a0:	4603      	mov	r3, r0
 80028a2:	e006      	b.n	80028b2 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fab0 	bl	8002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	bf00      	nop
      { return __a.allocate(__n); }
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f983 	bl	8002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80028d4:	4603      	mov	r3, r0
      }
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_ZSt10destroy_atIP8AnalogInEvPT_>:
    destroy_at(_Tp* __location)
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
    }
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80028fc:	f7fd fd10 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f983 	bl	8002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>
 800290e:	e003      	b.n	8002918 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f996 	bl	8002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>
    }
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() noexcept
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8002946:	f7fd fceb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4618      	mov	r0, r3
 800295c:	f01d fddc 	bl	8020518 <_Znwj>
 8002960:	4603      	mov	r3, r0
 8002962:	e006      	b.n	8002972 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 faae 	bl	8002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>
 800296e:	4603      	mov	r3, r0
 8002970:	bf00      	nop
      { return __a.allocate(__n); }
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>:
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f965 	bl	8002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800299a:	b5b0      	push	{r4, r5, r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f7fe fc5c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe ff47 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ffdc 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80029c2:	f107 0418 	add.w	r4, r7, #24
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	f7fe fc63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4619      	mov	r1, r3
 80029d0:	2008      	movs	r0, #8
 80029d2:	f7fd fcad 	bl	8000330 <_ZnwjPv>
 80029d6:	4605      	mov	r5, r0
 80029d8:	7f3b      	ldrb	r3, [r7, #28]
 80029da:	4622      	mov	r2, r4
 80029dc:	7d39      	ldrb	r1, [r7, #20]
 80029de:	4628      	mov	r0, r5
 80029e0:	f000 f96c 	bl	8002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80029e4:	462b      	mov	r3, r5
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bdb0      	pop	{r4, r5, r7, pc}

080029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80029ee:	b5b0      	push	{r4, r5, r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7fe fc32 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a02:	4604      	mov	r4, r0
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7fe ff1c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	6a38      	ldr	r0, [r7, #32]
 8002a0e:	f7fe fc40 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a12:	4603      	mov	r3, r0
 8002a14:	462a      	mov	r2, r5
 8002a16:	4621      	mov	r1, r4
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f7ff ffbe 	bl	800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}

08002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8b1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002a54:	68b8      	ldr	r0, [r7, #8]
 8002a56:	f000 f945 	bl	8002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fea3 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f939 	bl	8002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>:
    destroy_at(_Tp* __location)
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
    }
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>:
    destroy_at(_Tp* __location)
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
    }
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002ac4:	687c      	ldr	r4, [r7, #4]
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f000 f968 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f971 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff f96f 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002af6:	68b8      	ldr	r0, [r7, #8]
 8002af8:	f000 f968 	bl	8002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f959 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002b04:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f01d fe53 	bl	80207c0 <memset>
      { }
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	7239      	strb	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002b32:	463a      	mov	r2, r7
 8002b34:	f88d 4000 	strb.w	r4, [sp]
 8002b38:	462b      	mov	r3, r5
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ffd3 	bl	8002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdb0      	pop	{r4, r5, r7, pc}

08002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() const noexcept
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002b80:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002b98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002b9c:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffea 	bl	8002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ba8:	f107 0208 	add.w	r2, r7, #8
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f917 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	681b      	ldr	r3, [r3, #0]
      }
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002bda:	b5b0      	push	{r4, r5, r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f92f 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f000 f92b 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f927 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4629      	mov	r1, r5
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 f92c 	bl	8002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002c0a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}

08002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d00a      	beq.n	8002c3c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f939 	bl	8002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f940 	bl	8002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>
	  for (; __first != __last; ++__first)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	e7f0      	b.n	8002c1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0xa>
	}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002c5a:	b590      	push	{r4, r7, lr}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002c64:	687c      	ldr	r4, [r7, #4]
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f000 f951 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f95a 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fb2d 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f000 f951 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f942 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ca4:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
      { }
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	7239      	strb	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002cca:	463a      	mov	r2, r7
 8002ccc:	f88d 4000 	strb.w	r4, [sp]
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ffd7 	bl	8002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bdb0      	pop	{r4, r5, r7, pc}

08002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() const noexcept
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4619      	mov	r1, r3
 8002d28:	68b8      	ldr	r0, [r7, #8]
 8002d2a:	f01d fbf3 	bl	8020514 <_ZdlPvj>
      }
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	68b8      	ldr	r0, [r7, #8]
 8002d4e:	f01d fbe1 	bl	8020514 <_ZdlPvj>
      }
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8f7 	bl	8002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf8c      	ite	hi
 8002d72:	2301      	movhi	r3, #1
 8002d74:	2300      	movls	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002d7c:	f01d fc93 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f01d fbc4 	bl	8020518 <_Znwj>
 8002d90:	4603      	mov	r3, r0
 8002d92:	bf00      	nop
      }
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f8e4 	bl	8002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8d8 	bl	8002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d201      	bcs.n	8002e00 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	e000      	b.n	8002e02 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002e00:	687b      	ldr	r3, [r7, #4]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8c2 	bl	8002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf8c      	ite	hi
 8002e28:	2301      	movhi	r3, #1
 8002e2a:	2300      	movls	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002e32:	f01d fc38 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f01d fb6c 	bl	8020518 <_Znwj>
 8002e40:	4603      	mov	r3, r0
 8002e42:	bf00      	nop
      }
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	109b      	asrs	r3, r3, #2
 8002e78:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dd06      	ble.n	8002e8e <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f01d fc7f 	bl	802078c <memmove>
      return __result + __count;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>:
    _Destroy(_Tp* __pointer)
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fd0e 	bl	80028de <_ZSt10destroy_atIP8AnalogInEvPT_>
    }
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f870 	bl	8002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf8c      	ite	hi
 8002ee4:	2301      	movhi	r3, #1
 8002ee6:	2300      	movls	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002eee:	f01d fbda 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f01d fb0b 	bl	8020518 <_Znwj>
 8002f02:	4603      	mov	r3, r0
 8002f04:	bf00      	nop
      }
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f85d 	bl	8002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f851 	bl	8002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	02492492 	.word	0x02492492

08002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff01 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv+0x18>)
      }
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	05555555 	.word	0x05555555

08002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff88 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fc1f 	bl	8000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>:
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fbdd 	bl	80007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_Z41__static_initialization_and_destruction_0ii>:
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10d      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003056:	480f      	ldr	r0, [pc, #60]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003058:	f7fd f9b4 	bl	80003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800305c:	480e      	ldr	r0, [pc, #56]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800305e:	f7fd f9d7 	bl	8000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;
 8003062:	480e      	ldr	r0, [pc, #56]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003064:	f7fd f9fa 	bl	800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800307a:	f7ff ffc5 	bl	8003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800307e:	4806      	ldr	r0, [pc, #24]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003080:	f7ff ffcf 	bl	8003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003086:	f000 f80b 	bl	80030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	24000098 	.word	0x24000098
 8003098:	240000a4 	.word	0x240000a4
 800309c:	240000bc 	.word	0x240000bc

080030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f893 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80030b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030ba:	461a      	mov	r2, r3
 80030bc:	4629      	mov	r1, r5
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff f898 	bl	80021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>
      }
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fb57 	bl	800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdb0      	pop	{r4, r5, r7, pc}

080030d6 <_GLOBAL__sub_I__ZN8AnalogIn14all_analog_insE>:
 80030d6:	b580      	push	{r7, lr}
 80030d8:	af00      	add	r7, sp, #0
 80030da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff ffac 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_GLOBAL__sub_D__ZN8AnalogIn14all_analog_insE>:
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff ffa4 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f980 	bl	8003404 <_ZNSaIP9AnalogOutED1Ev>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f963 	bl	80033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>:
      vector() = default;
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ffeb 	bl	800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f993 	bl	8003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f971 	bl	800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ffeb 	bl	800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/AnalogOut.hpp"

vector<AnalogOut*> AnalogOut::all_analog_outs;
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;

AnalogOut::AnalogOut(float max_voltage,TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6178      	str	r0, [r7, #20]
 8003198:	ed87 0a04 	vstr	s0, [r7, #16]
 800319c:	60f9      	str	r1, [r7, #12]
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	607b      	str	r3, [r7, #4]
		: timer(timer), channel(channel), max_voltage(max_voltage) {
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
	AnalogOut::all_analog_outs.push_back(this);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	4619      	mov	r1, r3
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x5c>)
 80031c8:	f000 f975 	bl	80034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>
	AnalogOut::pin_to_analog_out[pin] = this;
 80031cc:	697c      	ldr	r4, [r7, #20]
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4807      	ldr	r0, [pc, #28]	; (80031f0 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x60>)
 80031d4:	f000 f980 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80031d8:	4603      	mov	r3, r0
 80031da:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_OUTPUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	719a      	strb	r2, [r3, #6]
}
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3724      	adds	r7, #36	; 0x24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	240000d4 	.word	0x240000d4
 80031f0:	240000e0 	.word	0x240000e0

080031f4 <_ZN9AnalogOut11set_voltageEf>:

void AnalogOut::set_voltage(float current_voltage){
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	ed87 0a00 	vstr	s0, [r7]
	uint32_t arr = (uint32_t) (current_voltage / max_voltage * timer->Instance->ARR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edd3 7a04 	vldr	s15, [r3, #16]
 8003206:	edd7 6a00 	vldr	s13, [r7]
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003226:	ee17 3a90 	vmov	r3, s15
 800322a:	60fb      	str	r3, [r7, #12]

	switch(channel){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b14      	cmp	r3, #20
 8003232:	d851      	bhi.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <_ZN9AnalogOut11set_voltageEf+0x48>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003291 	.word	0x08003291
 8003240:	080032d9 	.word	0x080032d9
 8003244:	080032d9 	.word	0x080032d9
 8003248:	080032d9 	.word	0x080032d9
 800324c:	0800329d 	.word	0x0800329d
 8003250:	080032d9 	.word	0x080032d9
 8003254:	080032d9 	.word	0x080032d9
 8003258:	080032d9 	.word	0x080032d9
 800325c:	080032a9 	.word	0x080032a9
 8003260:	080032d9 	.word	0x080032d9
 8003264:	080032d9 	.word	0x080032d9
 8003268:	080032d9 	.word	0x080032d9
 800326c:	080032b5 	.word	0x080032b5
 8003270:	080032d9 	.word	0x080032d9
 8003274:	080032d9 	.word	0x080032d9
 8003278:	080032d9 	.word	0x080032d9
 800327c:	080032c1 	.word	0x080032c1
 8003280:	080032d9 	.word	0x080032d9
 8003284:	080032d9 	.word	0x080032d9
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032cd 	.word	0x080032cd
		case(TIM_CHANNEL_1):
				timer->Instance->CCR1 = arr; break;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
 800329a:	e01d      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_2):
				timer->Instance->CCR2 = arr; break;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
 80032a6:	e017      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_3):
				timer->Instance->CCR3 = arr; break;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b2:	e011      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_4):
				timer->Instance->CCR4 = arr; break;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
 80032be:	e00b      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_5):
				timer->Instance->CCR5 = arr; break;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ca:	e005      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_6):
				timer->Instance->CCR6 = arr; break;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d6:	bf00      	nop
	}
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZN9AnalogOut5startEv>:

void AnalogOut::start(){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f01b fb34 	bl	801e964 <HAL_TIM_PWM_Start>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800331a:	b590      	push	{r4, r7, lr}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffed 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800332a:	4603      	mov	r3, r0
 800332c:	681c      	ldr	r4, [r3, #0]
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f7ff ffe8 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003334:	4603      	mov	r3, r0
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429c      	cmp	r4, r3
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}

0800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1d1a      	adds	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]
	return *this;
 800335c:	687b      	ldr	r3, [r7, #4]
      }
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <_ZN9AnalogOut21start_all_analog_outsEv>:

void AnalogOut::stop(){
	HAL_TIM_PWM_Stop(timer, channel);
}

void AnalogOut::start_all_analog_outs(){
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
	for(auto analog_out: all_analog_outs)
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <_ZN9AnalogOut21start_all_analog_outsEv+0x5c>)
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f900 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 8003394:	4603      	mov	r3, r0
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f90b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	463a      	mov	r2, r7
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ffb6 	bl	800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <_ZN9AnalogOut21start_all_analog_outsEv+0x54>
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffd4 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]
		analog_out->start();
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f7ff ff8b 	bl	80032e4 <_ZN9AnalogOut5startEv>
	for(auto analog_out: all_analog_outs)
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffba 	bl	800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>
 80033d6:	e7e4      	b.n	80033a2 <_ZN9AnalogOut21start_all_analog_outsEv+0x1e>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	240000d4 	.word	0x240000d4

080033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8f2 	bl	80035d6 <_ZNSaIP9AnalogOutEC1Ev>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f8fa 	bl	80035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZNSaIP9AnalogOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003432:	461a      	mov	r2, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8ee 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe5a 	bl	80030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8f1 	bl	800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fbc3 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f7fc ff6e 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>:
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8fc 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800349a:	4603      	mov	r3, r0
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8d8 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fe4b 	bl	8003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f000 f8f2 	bl	80036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8f8 	bl	80036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b08b      	sub	sp, #44	; 0x2c
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f91d 	bl	8003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80034ea:	4603      	mov	r3, r0
 80034ec:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f927 	bl	8003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	f107 020c 	add.w	r2, r7, #12
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f92a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f938 	bl	8003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	f107 0308 	add.w	r3, r7, #8
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f93e 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003522:	4603      	mov	r3, r0
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	4621      	mov	r1, r4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fcd4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01b      	beq.n	800357a <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003542:	687c      	ldr	r4, [r7, #4]
 8003544:	f107 0208 	add.w	r2, r7, #8
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f933 	bl	80037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fcd0 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003560:	f107 0218 	add.w	r2, r7, #24
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	4620      	mov	r0, r4
 8003572:	f000 f932 	bl	80037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8003576:	4603      	mov	r3, r0
 8003578:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f90d 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003584:	4603      	mov	r3, r0
 8003586:	3304      	adds	r3, #4
      }
 8003588:	4618      	mov	r0, r3
 800358a:	3724      	adds	r7, #36	; 0x24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	08020c84 	.word	0x08020c84

08003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f956 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f945 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZNSaIP9AnalogOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f949 	bl	8003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
	{ }
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
	if (__p)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f92c 	bl	800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>
      }
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f940 	bl	80038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f000 f93b 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fff0 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f000 f93f 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800367a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f946 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003688:	e7e9      	b.n	800365e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d011      	beq.n	80036fa <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80036d6:	687c      	ldr	r4, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685d      	ldr	r5, [r3, #4]
 80036dc:	6838      	ldr	r0, [r7, #0]
 80036de:	f000 f928 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4629      	mov	r1, r5
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 f942 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	e00c      	b.n	8003714 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff5a 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003700:	4604      	mov	r4, r0
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f000 f915 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4621      	mov	r1, r4
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f942 	bl	8003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9bb 	bl	8003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>
 800371a:	4603      	mov	r3, r0
      }
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bdb0      	pop	{r4, r5, r7, pc}

08003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f9c7 	bl	8003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f9d1 	bl	8003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8003752:	4603      	mov	r3, r0
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f9c1 	bl	8003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8003794:	bf00      	nop
 8003796:	4620      	mov	r0, r4
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}

0800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f9be 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80037da:	b5b0      	push	{r4, r5, r7, lr}
 80037dc:	b088      	sub	sp, #32
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80037ee:	4604      	mov	r4, r0
 80037f0:	6838      	ldr	r0, [r7, #0]
 80037f2:	f7fe f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80037f6:	4605      	mov	r5, r0
 80037f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fa:	f7fd fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037fe:	4603      	mov	r3, r0
 8003800:	462a      	mov	r2, r5
 8003802:	4621      	mov	r1, r4
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f99f 	bl	8003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800380a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800380c:	69f8      	ldr	r0, [r7, #28]
 800380e:	f000 faed 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003812:	4603      	mov	r3, r0
 8003814:	f107 0010 	add.w	r0, r7, #16
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	f000 f9b7 	bl	8003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8003826:	6939      	ldr	r1, [r7, #16]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 faf0 	bl	8003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8003832:	4603      	mov	r3, r0
 8003834:	e00b      	b.n	800384e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f869 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	f107 0318 	add.w	r3, r7, #24
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb22 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 800384c:	69bb      	ldr	r3, [r7, #24]
      }
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bdb0      	pop	{r4, r5, r7, pc}

08003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80038a4:	f7fc fd3c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80038ae:	69b8      	ldr	r0, [r7, #24]
 80038b0:	f01c fe2e 	bl	8020510 <_ZdlPv>
	    return;
 80038b4:	e005      	b.n	80038c2 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	69f8      	ldr	r0, [r7, #28]
 80038bc:	f000 fd64 	bl	8004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fac6 	bl	8003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fad7 	bl	8003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f7ff ffed 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003958:	4603      	mov	r3, r0
 800395a:	681c      	ldr	r4, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4619      	mov	r1, r3
 8003960:	2004      	movs	r0, #4
 8003962:	f7fc fce5 	bl	8000330 <_ZnwjPv>
 8003966:	4603      	mov	r3, r0
 8003968:	601c      	str	r4, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bd90      	pop	{r4, r7, pc}

08003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffd7 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003984:	4603      	mov	r3, r0
 8003986:	4619      	mov	r1, r3
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f7ff ffdd 	bl	8003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80039a4:	4a39      	ldr	r2, [pc, #228]	; (8003a8c <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 faa7 	bl	8003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>
 80039ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fde9 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 80039c2:	4603      	mov	r3, r0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	f107 0214 	add.w	r2, r7, #20
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fada 	bl	8003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80039d6:	4603      	mov	r3, r0
 80039d8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fae8 	bl	8003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>
 80039e4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80039ea:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	18d5      	adds	r5, r2, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff9c 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4629      	mov	r1, r5
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ffb6 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fc78 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a14:	4603      	mov	r3, r0
 8003a16:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 faf2 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a20:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	4621      	mov	r1, r4
 8003a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a28:	f000 fad8 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a2c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3304      	adds	r3, #4
 8003a32:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fc63 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fadd 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a4a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	4620      	mov	r0, r4
 8003a52:	f000 fac3 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a56:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003a58:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003a64:	461a      	mov	r2, r3
 8003a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a68:	f7ff fdd5 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
    }
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	08020a88 	.word	0x08020a88

08003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fd8b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fac4 	bl	8004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fc57 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 8003abc:	4603      	mov	r3, r0
      }
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff fdde 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fac5 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 facb 	bl	8004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}

08003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f9c2 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8003b1e:	bf00      	nop
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr()
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3310      	adds	r3, #16
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fad4 	bl	80040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fad1 	bl	80040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8003b5c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003b5e:	68b8      	ldr	r0, [r7, #8]
 8003b60:	f7fd fb81 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b64:	4604      	mov	r4, r0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fe6b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f7fd fb8f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b74:	4603      	mov	r3, r0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	462b      	mov	r3, r5
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 face 	bl	8004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8003b84:	697b      	ldr	r3, [r7, #20]
	}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}

08003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003b8e:	b5b0      	push	{r4, r5, r7, lr}
 8003b90:	b08c      	sub	sp, #48	; 0x30
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 faeb 	bl	800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ba8:	69bc      	ldr	r4, [r7, #24]
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 fa5c 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d032      	beq.n	8003c26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8003bc0:	68b8      	ldr	r0, [r7, #8]
 8003bc2:	f000 faeb 	bl	800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8003bc6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bcc:	68bc      	ldr	r4, [r7, #8]
 8003bce:	68b8      	ldr	r0, [r7, #8]
 8003bd0:	f000 faf0 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 faf7 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003bde:	4603      	mov	r3, r0
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7fd f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8003bf8:	2300      	movs	r3, #0
	  if (size() > 0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68b8      	ldr	r0, [r7, #8]
 8003c04:	f000 fad6 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7fe f949 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003c16:	e0e5      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fae0 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003c24:	e0de      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003c26:	68bc      	ldr	r4, [r7, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681d      	ldr	r5, [r3, #0]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 facc 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c34:	4603      	mov	r3, r0
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fd f94c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d059      	beq.n	8003cfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003c4c:	69bc      	ldr	r4, [r7, #24]
 8003c4e:	68b8      	ldr	r0, [r7, #8]
 8003c50:	f000 fb52 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c54:	4603      	mov	r3, r0
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003c66:	68b8      	ldr	r0, [r7, #8]
 8003c68:	f000 fb46 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	f000 fb42 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4621      	mov	r1, r4
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7fe f9c0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003c80:	e0b0      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003c82:	68bc      	ldr	r4, [r7, #8]
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fb41 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa9a 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7fd f919 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01f      	beq.n	8003cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fe15 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	f107 0214 	add.w	r2, r7, #20
 8003cce:	f107 0320 	add.w	r3, r7, #32
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7fe f8e7 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003cda:	e083      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8003cdc:	f107 0218 	add.w	r2, r7, #24
 8003ce0:	f107 0318 	add.w	r3, r7, #24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7fe f98a 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003cec:	e07a      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fa75 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003cfa:	e073      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003cfc:	68bc      	ldr	r4, [r7, #8]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa63 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d06:	4603      	mov	r3, r0
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7fd f8e2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d059      	beq.n	8003dd0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003d20:	69bc      	ldr	r4, [r7, #24]
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f000 fa46 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	68b8      	ldr	r0, [r7, #8]
 8003d40:	f000 fa38 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fe f8ab 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003d52:	e047      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8003d54:	68bc      	ldr	r4, [r7, #8]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fae7 	bl	8004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fa2f 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4629      	mov	r1, r5
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7fd f8af 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01f      	beq.n	8003dc2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fdab 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	f107 0218 	add.w	r2, r7, #24
 8003da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7fe f87d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003dae:	e019      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8003db0:	f107 0210 	add.w	r2, r7, #16
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7fe f920 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003dc0:	e010      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa0b 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003dce:	e009      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003dd8:	f107 0318 	add.w	r3, r7, #24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7fe f949 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	3730      	adds	r7, #48	; 0x30
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdb0      	pop	{r4, r5, r7, pc}

08003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 faad 	bl	8004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fab4 	bl	8004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>
 8003e08:	4603      	mov	r3, r0
      }
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003e12:	b5b0      	push	{r4, r5, r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d119      	bne.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f91e 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d012      	beq.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e34:	68fc      	ldr	r4, [r7, #12]
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f7ff ffd8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9c3 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003e46:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7fd f843 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8003e5e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e60:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003e66:	7df8      	ldrb	r0, [r7, #23]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	f01c fbc0 	bl	80205f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f805 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003e86:	693b      	ldr	r3, [r7, #16]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}

08003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003eae:	b590      	push	{r4, r7, lr}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa74 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	6838      	ldr	r0, [r7, #0]
 8003ec2:	f7ff fe33 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 fa76 	bl	80043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa5f 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2201      	movs	r2, #1
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa70 	bl	80043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa82 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa8f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f16:	4603      	mov	r3, r0
 8003f18:	1ae2      	subs	r2, r4, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bf34      	ite	cc
 8003f20:	2301      	movcc	r3, #1
 8003f22:	2300      	movcs	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f01c fbbe 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fa7f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f36:	4604      	mov	r4, r0
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa7b 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	f107 0208 	add.w	r2, r7, #8
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fc80 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8003f52:	4603      	mov	r3, r0
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4423      	add	r3, r4
 8003f58:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa6a 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d306      	bcc.n	8003f76 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa52 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d904      	bls.n	8003f80 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa4b 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	e000      	b.n	8003f82 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 8003f80:	697b      	ldr	r3, [r7, #20]
      }
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}

08003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003f8a:	b590      	push	{r4, r7, lr}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff f9b5 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	681c      	ldr	r4, [r3, #0]
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f7ff f9b0 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1ae3      	subs	r3, r4, r3
 8003faa:	109b      	asrs	r3, r3, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd90      	pop	{r4, r7, pc}

08003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x1e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fa43 	bl	8004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e000      	b.n	8003fd4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x20>
 8003fd2:	2300      	movs	r3, #0
      }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003fea:	f88d 4000 	strb.w	r4, [sp]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fa4d 	bl	8004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8003ffa:	4603      	mov	r3, r0
      }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bd90      	pop	{r4, r7, pc}

08004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fa4f 	bl	80044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>
    }
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	425b      	negs	r3, r3
 800404a:	4413      	add	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	f107 020c 	add.w	r2, r7, #12
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fbfc 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01d      	beq.n	80040d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004094:	68fc      	ldr	r4, [r7, #12]
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	f7ff fea8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800409c:	4603      	mov	r3, r0
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7fc ff17 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d006      	beq.n	80040c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	f7ff fc1b 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80040c2:	60b8      	str	r0, [r7, #8]
 80040c4:	e7e3      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80040c6:	68b8      	ldr	r0, [r7, #8]
 80040c8:	f7ff fc0a 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80040cc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80040ce:	e7de      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff feda 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80040dc:	697b      	ldr	r3, [r7, #20]
    }
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}

080040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa02 	bl	80044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f94d 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800410c:	4603      	mov	r3, r0
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f9fc 	bl	800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>
 8004116:	4603      	mov	r3, r0
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af02      	add	r7, sp, #8
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4619      	mov	r1, r3
 8004134:	2018      	movs	r0, #24
 8004136:	f7fc f8fb 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f933 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8004140:	4604      	mov	r4, r0
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f7ff fcf2 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8004148:	4605      	mov	r5, r0
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd f88b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004150:	4606      	mov	r6, r0
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f7fd fb75 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004158:	4680      	mov	r8, r0
 800415a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415c:	f7fd f899 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004160:	4603      	mov	r3, r0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4643      	mov	r3, r8
 8004166:	4632      	mov	r2, r6
 8004168:	4629      	mov	r1, r5
 800416a:	4620      	mov	r0, r4
 800416c:	f000 fa1c 	bl	80045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fe7f 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3310      	adds	r3, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fe09 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80041da:	4603      	mov	r3, r0
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80041f0:	68b8      	ldr	r0, [r7, #8]
 80041f2:	f7ff fa4e 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80041f6:	4603      	mov	r3, r0
 80041f8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80041fa:	68b8      	ldr	r0, [r7, #8]
 80041fc:	f7ff ff34 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8004200:	4603      	mov	r3, r0
 8004202:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004214:	68bc      	ldr	r4, [r7, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fde5 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8004222:	4603      	mov	r3, r0
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4629      	mov	r1, r5
 800422a:	4620      	mov	r0, r4
 800422c:	f7fc fe55 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fb59 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004246:	4603      	mov	r3, r0
 8004248:	e004      	b.n	8004254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fb47 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004252:	4603      	mov	r3, r0
 8004254:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004256:	e7d8      	b.n	800420a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe15 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01d      	beq.n	80042aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800426e:	68b8      	ldr	r0, [r7, #8]
 8004270:	f000 f9b6 	bl	80045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8004274:	4603      	mov	r3, r0
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	f107 021c 	add.w	r2, r7, #28
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fa6a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800428e:	f107 0214 	add.w	r2, r7, #20
 8004292:	f107 0318 	add.w	r3, r7, #24
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f9b2 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 800429e:	e027      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f833 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80042aa:	68bc      	ldr	r4, [r7, #8]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff8c 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042b4:	4603      	mov	r3, r0
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fc fe0b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80042ca:	f107 0214 	add.w	r2, r7, #20
 80042ce:	f107 0318 	add.w	r3, r7, #24
 80042d2:	4619      	mov	r1, r3
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f994 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 80042da:	e009      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	f107 0220 	add.w	r2, r7, #32
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4619      	mov	r1, r3
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7fd fec3 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdb0      	pop	{r4, r5, r7, pc}

080042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	330c      	adds	r3, #12
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f01c f965 	bl	80205ec <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]
	return *this;
 8004328:	687b      	ldr	r3, [r7, #4]
      }
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f01c f952 	bl	80205e8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
	return *this;
 800434a:	687b      	ldr	r3, [r7, #4]
      }
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr() const
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3310      	adds	r3, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f967 	bl	8004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8004366:	4603      	mov	r3, r0
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4619      	mov	r1, r3
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f01c f8ba 	bl	8020514 <_ZdlPvj>
      }
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f000 f940 	bl	800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>
	}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80043ec:	f7fb ff98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 80043f6:	69b8      	ldr	r0, [r7, #24]
 80043f8:	f01c f88a 	bl	8020510 <_ZdlPv>
	    return;
 80043fc:	e005      	b.n	800440a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	69f8      	ldr	r0, [r7, #28]
 8004404:	f000 f9e1 	bl	80047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f945 	bl	80046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f927 	bl	8004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>
 800442a:	4603      	mov	r3, r0
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	109b      	asrs	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004466:	f7fb ff5b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f01c f84f 	bl	8020518 <_Znwj>
 800447a:	4603      	mov	r3, r0
 800447c:	e006      	b.n	800448c <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9b3 	bl	80047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>
 8004488:	4603      	mov	r3, r0
 800448a:	bf00      	nop
      { return __a.allocate(__n); }
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f90a 	bl	80046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 80044ae:	4603      	mov	r3, r0
      }
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>:
    destroy_at(_Tp* __location)
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    }
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80044d6:	f7fb ff23 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f90a 	bl	80046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>
 80044e8:	e003      	b.n	80044f2 <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x26>
	__destroy(__first, __last);
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f91d 	bl	800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>
    }
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() noexcept
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004520:	f7fb fefe 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4618      	mov	r0, r3
 8004536:	f01b ffef 	bl	8020518 <_Znwj>
 800453a:	4603      	mov	r3, r0
 800453c:	e006      	b.n	800454c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9b1 	bl	80048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>
 8004548:	4603      	mov	r3, r0
 800454a:	bf00      	nop
      { return __a.allocate(__n); }
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7fc fe7f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fd f96a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800456e:	4602      	mov	r2, r0
 8004570:	f107 0318 	add.w	r3, r7, #24
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f9ff 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800457c:	f107 0418 	add.w	r4, r7, #24
 8004580:	6838      	ldr	r0, [r7, #0]
 8004582:	f7fc fe86 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4619      	mov	r1, r3
 800458a:	2008      	movs	r0, #8
 800458c:	f7fb fed0 	bl	8000330 <_ZnwjPv>
 8004590:	4605      	mov	r5, r0
 8004592:	7f3b      	ldrb	r3, [r7, #28]
 8004594:	4622      	mov	r2, r4
 8004596:	7d39      	ldrb	r1, [r7, #20]
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f8ec 	bl	8004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800459e:	462b      	mov	r3, r5
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdb0      	pop	{r4, r5, r7, pc}

080045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc fe55 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80045bc:	4604      	mov	r4, r0
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f7fd f93f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80045c4:	4605      	mov	r5, r0
 80045c6:	6a38      	ldr	r0, [r7, #32]
 80045c8:	f7fc fe63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80045cc:	4603      	mov	r3, r0
 80045ce:	462a      	mov	r2, r5
 80045d0:	4621      	mov	r1, r4
 80045d2:	68b8      	ldr	r0, [r7, #8]
 80045d4:	f7ff ffbe 	bl	8004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bdb0      	pop	{r4, r5, r7, pc}

080045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fc4c 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f000 f8c5 	bl	800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8004614:	4603      	mov	r3, r0
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fe f8c6 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004622:	4603      	mov	r3, r0
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8b9 	bl	80047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 8004642:	4603      	mov	r3, r0
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>:
    destroy_at(_Tp* __location)
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    }
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8004668:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004680:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8004684:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffea 	bl	8004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>
 800468c:	4603      	mov	r3, r0
 800468e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004690:	f107 0208 	add.w	r2, r7, #8
 8004694:	f107 030c 	add.w	r3, r7, #12
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fba3 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80046a0:	4603      	mov	r3, r0
 80046a2:	681b      	ldr	r3, [r3, #0]
      }
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80046c2:	b5b0      	push	{r4, r5, r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8ab 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046d6:	4604      	mov	r4, r0
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f000 f8a7 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046de:	4605      	mov	r5, r0
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8a3 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4629      	mov	r1, r5
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 f8a8 	bl	8004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80046f2:	4603      	mov	r3, r0
    }
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bdb0      	pop	{r4, r5, r7, pc}

080046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d00a      	beq.n	8004724 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8b5 	bl	800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f8bc 	bl	8004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>
	  for (; __first != __last; ++__first)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e7f0      	b.n	8004706 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0xa>
	}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f7fe fbf4 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004756:	4603      	mov	r3, r0
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fbe5 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800475e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
      { }
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8004776:	b5b0      	push	{r4, r5, r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	7239      	strb	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8004784:	463a      	mov	r2, r7
 8004786:	f88d 4000 	strb.w	r4, [sp]
 800478a:	462b      	mov	r3, r5
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff ffd7 	bl	8004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bdb0      	pop	{r4, r5, r7, pc}

0800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() const noexcept
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4619      	mov	r1, r3
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f01b fe96 	bl	8020514 <_ZdlPvj>
      }
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f877 	bl	80048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>
 8004800:	4602      	mov	r2, r0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4293      	cmp	r3, r2
 8004806:	bf8c      	ite	hi
 8004808:	2301      	movhi	r3, #1
 800480a:	2300      	movls	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004812:	f01b ff48 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f01b fe7c 	bl	8020518 <_Znwj>
 8004820:	4603      	mov	r3, r0
 8004822:	bf00      	nop
      }
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>:
    __niter_base(_Iterator __it)
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	109b      	asrs	r3, r3, #2
 8004858:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dd06      	ble.n	800486e <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f01b ff8f 	bl	802078c <memmove>
      return __result + __count;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe0b 	bl	80044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>
    }
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f826 	bl	8004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4293      	cmp	r3, r2
 80048c2:	bf8c      	ite	hi
 80048c4:	2301      	movhi	r3, #1
 80048c6:	2300      	movls	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80048ce:	f01b feea 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4618      	mov	r0, r3
 80048de:	f01b fe1b 	bl	8020518 <_Znwj>
 80048e2:	4603      	mov	r3, r0
 80048e4:	bf00      	nop
      }
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80048f6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv+0x18>)
      }
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	05555555 	.word	0x05555555

08004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fdac 	bl	800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <_Z41__static_initialization_and_destruction_0ii>:
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10a      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004956:	4293      	cmp	r3, r2
 8004958:	d105      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800495c:	f7fe fbe4 	bl	8003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;
 8004960:	480b      	ldr	r0, [pc, #44]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004962:	f7fe fc07 	bl	8003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004972:	4293      	cmp	r3, r2
 8004974:	d105      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004976:	4806      	ldr	r0, [pc, #24]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004978:	f7ff ffd4 	bl	8004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800497c:	4803      	ldr	r0, [pc, #12]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800497e:	f000 f809 	bl	8004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	240000d4 	.word	0x240000d4
 8004990:	240000e0 	.word	0x240000e0

08004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681c      	ldr	r4, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fb2c 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80049ac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049ae:	461a      	mov	r2, r3
 80049b0:	4629      	mov	r1, r5
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fb31 	bl	800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>
      }
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fd2d 	bl	800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}

080049ca <_GLOBAL__sub_I__ZN9AnalogOut15all_analog_outsE>:
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049d2:	2001      	movs	r0, #1
 80049d4:	f7ff ffb4 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049d8:	bd80      	pop	{r7, pc}

080049da <_GLOBAL__sub_D__ZN9AnalogOut15all_analog_outsE>:
 80049da:	b580      	push	{r7, lr}
 80049dc:	af00      	add	r7, sp, #0
 80049de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7ff ffac 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049e8:	bd80      	pop	{r7, pc}

080049ea <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 80049ea:	b580      	push	{r7, lr}
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	f01b fe7d 	bl	80206ec <abort>

080049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffed 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	681c      	ldr	r4, [r3, #0]
 8004a1c:	6838      	ldr	r0, [r7, #0]
 8004a1e:	f7ff ffe8 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a22:	4603      	mov	r3, r0
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429c      	cmp	r4, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd90      	pop	{r4, r7, pc}

08004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
	return *this;
 8004a4a:	687b      	ldr	r3, [r7, #4]
      }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_ZN6Packet5parseEPh>:
            return;
        else
            build(rest...);
    }

    void parse(uint8_t* ptr){
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
        uint8_t* ptr_temp = ptr;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3308      	adds	r3, #8
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	69b8      	ldr	r0, [r7, #24]
 8004a86:	f000 fb54 	bl	8005132 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f000 fb5f 	bl	8005152 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	f107 020c 	add.w	r2, r7, #12
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ffb0 	bl	8004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01d      	beq.n	8004af0 <_ZN6Packet5parseEPh+0x80>
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ffcd 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	617b      	str	r3, [r7, #20]
            field -> parse(ptr_temp);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69f9      	ldr	r1, [r7, #28]
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	4798      	blx	r3
            ptr_temp += field->get_size();
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	4798      	blx	r3
 8004adc:	4602      	mov	r2, r0
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004ae4:	f107 0310 	add.w	r3, r7, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ffa5 	bl	8004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>
 8004aee:	e7d3      	b.n	8004a98 <_ZN6Packet5parseEPh+0x28>
        }
    }
 8004af0:	bf00      	nop
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_ZN6Packet14process_packetEtPh>:
            field -> unparse(ptr_temp);
            ptr_temp += field->get_size();
        }
    }

    static void process_packet(uint16_t id, uint8_t* data) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	80fb      	strh	r3, [r7, #6]
        for(auto& entry : all_packets){
 8004b04:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <_ZN6Packet14process_packetEtPh+0x8c>)
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f000 fb33 	bl	8005174 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f000 fb3b 	bl	800518e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	f107 0208 	add.w	r2, r7, #8
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb3e 	bl	80051a8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f083 0301 	eor.w	r3, r3, #1
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <_ZN6Packet14process_packetEtPh+0x82>
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fb58 	bl	80051f2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8004b42:	6138      	str	r0, [r7, #16]
        	if(entry.second -> id == id){
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	889b      	ldrh	r3, [r3, #4]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d10e      	bne.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
                entry.second->parse(data);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff8a 	bl	8004a70 <_ZN6Packet5parseEPh>
                if(entry.second->callback != nullptr)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
					entry.second->callback();
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	4798      	blx	r3
        for(auto& entry : all_packets){
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb2c 	bl	80051d0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8004b78:	e7d0      	b.n	8004b1c <_ZN6Packet14process_packetEtPh+0x24>
        	}
        }
    }
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	24000194 	.word	0x24000194

08004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>:
#include "Mini-STLIB/Can.hpp"

Can::Can(FDCAN_HandleTypeDef* hdcan) : hdcan(hdcan) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]
	Can::all_cans.push_back(this);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4804      	ldr	r0, [pc, #16]	; (8004bb4 <_ZN3CanC1EP19FDCAN_HandleTypeDef+0x2c>)
 8004ba4:	f000 fb33 	bl	800520e <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>
}
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	240000f8 	.word	0x240000f8

08004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004bce:	b590      	push	{r4, r7, lr}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ffed 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004bde:	4603      	mov	r3, r0
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f7ff ffe8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	429c      	cmp	r4, r3
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}

08004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
	return *this;
 8004c10:	687b      	ldr	r3, [r7, #4]
      }
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <_ZN3Can14start_all_cansEv>:

void Can::start_all_cans() {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
	for(auto can : Can::all_cans)
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <_ZN3Can14start_all_cansEv+0x5c>)
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 faf4 	bl	8005230 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 faff 	bl	8005250 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004c52:	4603      	mov	r3, r0
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	463a      	mov	r2, r7
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff ffb6 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f083 0301 	eor.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00e      	beq.n	8004c8c <_ZN3Can14start_all_cansEv+0x54>
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ffd4 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8004c76:	4603      	mov	r3, r0
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
		can->start();
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f000 f80b 	bl	8004c98 <_ZN3Can5startEv>
	for(auto can : Can::all_cans)
 8004c82:	1d3b      	adds	r3, r7, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ffba 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8004c8a:	e7e4      	b.n	8004c56 <_ZN3Can14start_all_cansEv+0x1e>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	240000f8 	.word	0x240000f8

08004c98 <_ZN3Can5startEv>:

void Can::start(){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	HAL_FDCAN_Start(hdcan);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f014 ffab 	bl	8019c00 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(hdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f015 f998 	bl	8019fe8 <HAL_FDCAN_ActivateNotification>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZN3Can12send_messageEtPhm>:

void Can::send_message(uint16_t id, uint8_t* data, uint32_t size) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f959 	bl	8004f90 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fac5 	bl	8005272 <_ZNKSt8optionalImEcvbEv>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d03c      	beq.n	8004d68 <_ZN3Can12send_messageEtPhm+0xa8>
		TxHeader.Identifier = id;
 8004cee:	897a      	ldrh	r2, [r7, #10]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fad2 	bl	80052a2 <_ZNRSt8optionalImE5valueEv>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d0c:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d1a:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24
		for(int i = 0; i < size; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d90d      	bls.n	8004d56 <_ZN3Can12send_messageEtPhm+0x96>
			TxData[i] = data[i];
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	3350      	adds	r3, #80	; 0x50
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < size; i++)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e7ed      	b.n	8004d32 <_ZN3Can12send_messageEtPhm+0x72>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1d19      	adds	r1, r3, #4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3350      	adds	r3, #80	; 0x50
 8004d62:	461a      	mov	r2, r3
 8004d64:	f014 ff77 	bl	8019c56 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004d68:	bf00      	nop
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZN3Can12send_messageEtm>:

void Can::send_message(uint16_t id, uint32_t size) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004d7e:	f107 0310 	add.w	r3, r7, #16
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f902 	bl	8004f90 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa6e 	bl	8005272 <_ZNKSt8optionalImEcvbEv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d028      	beq.n	8004dee <_ZN3Can12send_messageEtm+0x7e>
		TxHeader.Identifier = id;
 8004d9c:	897a      	ldrh	r2, [r7, #10]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004da2:	f107 0310 	add.w	r3, r7, #16
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa7b 	bl	80052a2 <_ZNRSt8optionalImE5valueEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dba:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dc8:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1d19      	adds	r1, r3, #4
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3350      	adds	r3, #80	; 0x50
 8004de8:	461a      	mov	r2, r3
 8004dea:	f014 ff34 	bl	8019c56 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN3Can18send_error_messageEtPKc>:

void Can::send_error_message(uint16_t id, const char* str){
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	; 0x28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	817b      	strh	r3, [r7, #10]
	size_t message_size = strlen(str);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb fa83 	bl	8000310 <strlen>
 8004e0a:	6238      	str	r0, [r7, #32]
	optional<uint32_t> dlc = get_dlc_from_size(message_size);
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f8bb 	bl	8004f90 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa27 	bl	8005272 <_ZNKSt8optionalImEcvbEv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04d      	beq.n	8004ec6 <_ZN3Can18send_error_messageEtPKc+0xd0>
		size_t str_size = strlen(str);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fb fa70 	bl	8000310 <strlen>
 8004e30:	61f8      	str	r0, [r7, #28]
		TxHeader.Identifier = id;
 8004e32:	897a      	ldrh	r2, [r7, #10]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa30 	bl	80052a2 <_ZNRSt8optionalImE5valueEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e50:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e5e:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
		TxData[0] = ERROR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		memset(TxData + 1, ' ', MAX_MESSAGE_SIZE);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3350      	adds	r3, #80	; 0x50
 8004e7e:	3301      	adds	r3, #1
 8004e80:	2240      	movs	r2, #64	; 0x40
 8004e82:	2120      	movs	r1, #32
 8004e84:	4618      	mov	r0, r3
 8004e86:	f01b fc9b 	bl	80207c0 <memset>
		for(int i = 1; i <= str_size; i++)
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d30e      	bcc.n	8004eb4 <_ZN3Can18send_error_messageEtPKc+0xbe>
			TxData[i] = (uint8_t) str[i-1];
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3350      	adds	r3, #80	; 0x50
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i <= str_size; i++)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb2:	e7ec      	b.n	8004e8e <_ZN3Can18send_error_messageEtPKc+0x98>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3350      	adds	r3, #80	; 0x50
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f014 fec8 	bl	8019c56 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <_ZN3Can15send_ok_messageEv>:

void Can::send_ok_message(){
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	char ok_message[] = "Ok";
 8004ed8:	4a0c      	ldr	r2, [pc, #48]	; (8004f0c <_ZN3Can15send_ok_messageEv+0x3c>)
 8004eda:	f107 030c 	add.w	r3, r7, #12
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	8019      	strh	r1, [r3, #0]
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	0c12      	lsrs	r2, r2, #16
 8004ee8:	701a      	strb	r2, [r3, #0]
	send_message(INFO_MESSAGE,(uint8_t*) ok_message, strlen(ok_message));
 8004eea:	f107 030c 	add.w	r3, r7, #12
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fb fa0e 	bl	8000310 <strlen>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f107 020c 	add.w	r2, r7, #12
 8004efa:	2110      	movs	r1, #16
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fedf 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	08020aa4 	.word	0x08020aa4

08004f10 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004f26:	b590      	push	{r4, r7, lr}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ffed 	bl	8004f10 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004f36:	4603      	mov	r3, r0
 8004f38:	681c      	ldr	r4, [r3, #0]
 8004f3a:	6838      	ldr	r0, [r7, #0]
 8004f3c:	f7ff ffe8 	bl	8004f10 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004f40:	4603      	mov	r3, r0
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	429c      	cmp	r4, r3
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd90      	pop	{r4, r7, pc}

08004f56 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f103 0208 	add.w	r2, r3, #8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
	return *this;
 8004f6a:	687b      	ldr	r3, [r7, #4]
      }
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <_ZN3Can17get_dlc_from_sizeEm>:
		packet->unparse(TxData);
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
	}
}

optional<uint32_t> Can::get_dlc_from_size(uint32_t size){
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
	for(const auto DLC : Can::DLCS){
 8004f9c:	4b1e      	ldr	r3, [pc, #120]	; (8005018 <_ZN3Can17get_dlc_from_sizeEm+0x88>)
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fa2:	f000 f993 	bl	80052cc <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fac:	f000 f99e 	bl	80052ec <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	f107 0214 	add.w	r2, r7, #20
 8004fb8:	f107 0318 	add.w	r3, r7, #24
 8004fbc:	4611      	mov	r1, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff ffb1 	bl	8004f26 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f083 0301 	eor.w	r3, r3, #1
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01d      	beq.n	800500c <_ZN3Can17get_dlc_from_sizeEm+0x7c>
 8004fd0:	f107 0318 	add.w	r3, r7, #24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ffcf 	bl	8004f78 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	f107 031c 	add.w	r3, r7, #28
 8004fe0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fe4:	e883 0003 	stmia.w	r3, {r0, r1}
		if(DLC.size >= size)
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d807      	bhi.n	8005000 <_ZN3Can17get_dlc_from_sizeEm+0x70>
			return DLC.code;
 8004ff0:	f107 031c 	add.w	r3, r7, #28
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f988 	bl	800530e <_ZNSt8optionalImEC1IRKmLb1EEEOT_>
 8004ffe:	e006      	b.n	800500e <_ZN3Can17get_dlc_from_sizeEm+0x7e>
	for(const auto DLC : Can::DLCS){
 8005000:	f107 0318 	add.w	r3, r7, #24
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ffa6 	bl	8004f56 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>
 800500a:	e7d3      	b.n	8004fb4 <_ZN3Can17get_dlc_from_sizeEm+0x24>
	}
}
 800500c:	bf00      	nop
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	3728      	adds	r7, #40	; 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	24000104 	.word	0x24000104

0800501c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>:

void Can::message_received_all_cans(FDCAN_HandleTypeDef* hfdcan,uint32_t RxFifo0ITs){
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	for(auto can : Can::all_cans)
 8005026:	4b1a      	ldr	r3, [pc, #104]	; (8005090 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x74>)
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	6978      	ldr	r0, [r7, #20]
 800502c:	f000 f900 	bl	8005230 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8005030:	4603      	mov	r3, r0
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	6978      	ldr	r0, [r7, #20]
 8005036:	f000 f90b 	bl	8005250 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 800503a:	4603      	mov	r3, r0
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	f107 0208 	add.w	r2, r7, #8
 8005042:	f107 030c 	add.w	r3, r7, #12
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fdc0 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800504e:	4603      	mov	r3, r0
 8005050:	f083 0301 	eor.w	r3, r3, #1
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x6c>
 800505a:	f107 030c 	add.w	r3, r7, #12
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fddd 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005064:	4603      	mov	r3, r0
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	613b      	str	r3, [r7, #16]
		if(can->hdcan == hfdcan)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d103      	bne.n	800507c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x60>
			can->message_received(RxFifo0ITs);
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	6938      	ldr	r0, [r7, #16]
 8005078:	f000 f80c 	bl	8005094 <_ZN3Can16message_receivedEm>
	for(auto can : Can::all_cans)
 800507c:	f107 030c 	add.w	r3, r7, #12
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fdbc 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8005086:	e7da      	b.n	800503e <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x22>
}
 8005088:	bf00      	nop
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	240000f8 	.word	0x240000f8

08005094 <_ZN3Can16message_receivedEm>:

void Can::message_received(uint32_t RxFifo0ITs) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01a      	beq.n	80050de <_ZN3Can16message_receivedEm+0x4a>
		if(HAL_FDCAN_GetRxMessage(hdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6818      	ldr	r0, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3390      	adds	r3, #144	; 0x90
 80050b6:	2140      	movs	r1, #64	; 0x40
 80050b8:	f014 fe28 	bl	8019d0c <HAL_FDCAN_GetRxMessage>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	bf0c      	ite	eq
 80050c2:	2301      	moveq	r3, #1
 80050c4:	2300      	movne	r3, #0
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d008      	beq.n	80050de <_ZN3Can16message_receivedEm+0x4a>
			Packet::process_packet(RxHeader.Identifier, RxData);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	3390      	adds	r3, #144	; 0x90
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f7ff fd0d 	bl	8004af8 <_ZN6Packet14process_packetEtPh>
		}
	}
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f931 	bl	8005356 <_ZNSaIP3CanED1Ev>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 f914 	bl	8005336 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4618      	mov	r0, r3
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>:
      vector() = default;
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff ffeb 	bl	80050fe <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	f107 030c 	add.w	r3, r7, #12
 8005140:	4611      	mov	r1, r2
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f97e 	bl	8005444 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	1d1a      	adds	r2, r3, #4
 800515e:	f107 030c 	add.w	r3, r7, #12
 8005162:	4611      	mov	r1, r2
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f96d 	bl	8005444 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f970 	bl	8005464 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8005184:	4603      	mov	r3, r0
 8005186:	4618      	mov	r0, r3
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800518e:	b580      	push	{r7, lr}
 8005190:	b082      	sub	sp, #8
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4618      	mov	r0, r3
 800519a:	f000 f974 	bl	8005486 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800519e:	4603      	mov	r3, r0
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f01b fa03 	bl	80205e8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80051e2:	4602      	mov	r2, r0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	601a      	str	r2, [r3, #0]
	return *this;
 80051e8:	687b      	ldr	r3, [r7, #4]
      }
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 f952 	bl	80054a8 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8005204:	4603      	mov	r3, r0
 8005206:	4618      	mov	r0, r3
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800520e:	b580      	push	{r7, lr}
 8005210:	b082      	sub	sp, #8
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8005218:	6838      	ldr	r0, [r7, #0]
 800521a:	f000 f953 	bl	80054c4 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>
 800521e:	4603      	mov	r3, r0
 8005220:	4619      	mov	r1, r3
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f959 	bl	80054da <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	f107 030c 	add.w	r3, r7, #12
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f97c 	bl	800553e <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	1d1a      	adds	r2, r3, #4
 800525c:	f107 030c 	add.w	r3, r7, #12
 8005260:	4611      	mov	r1, r2
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f96b 	bl	800553e <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <_ZNKSt8optionalImEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f805 	bl	800528a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005280:	4603      	mov	r3, r0
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	791b      	ldrb	r3, [r3, #4]
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <_ZNRSt8optionalImE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&
      value()&
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff ffed 	bl	800528a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 80052b0:	4603      	mov	r3, r0
	  ? this->_M_get()
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <_ZNRSt8optionalImE5valueEv+0x1e>
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f951 	bl	800555e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>
 80052bc:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 80052be:	e001      	b.n	80052c4 <_ZNRSt8optionalImE5valueEv+0x22>
 80052c0:	f7ff fb93 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	f107 030c 	add.w	r3, r7, #12
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 f94b 	bl	8005578 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	1d1a      	adds	r2, r3, #4
 80052f8:	f107 030c 	add.w	r3, r7, #12
 80052fc:	4611      	mov	r1, r2
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f93a 	bl	8005578 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <_ZNSt8optionalImEC1IRKmLb1EEEOT_>:
	optional(_Up&& __t)
 800530e:	b5b0      	push	{r4, r5, r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 8005318:	687c      	ldr	r4, [r7, #4]
 800531a:	6838      	ldr	r0, [r7, #0]
 800531c:	f000 f93c 	bl	8005598 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	4629      	mov	r1, r5
 8005326:	4620      	mov	r0, r4
 8005328:	f000 f952 	bl	80055d0 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bdb0      	pop	{r4, r5, r7, pc}

08005336 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f95b 	bl	80055fa <_ZNSaIP3CanEC1Ev>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f963 	bl	8005612 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <_ZNSaIP3CanED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005384:	461a      	mov	r2, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f957 	bl	800563a <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      }
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fea9 	bl	80050e6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <_ZNSaI3DLCEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f95a 	bl	8005660 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4618      	mov	r0, r3
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <_ZNSaI3DLCED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 80053cc:	b5b0      	push	{r4, r5, r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	1d38      	adds	r0, r7, #4
 80053d6:	e880 0006 	stmia.w	r0, {r1, r2}
 80053da:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f954 	bl	800568e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 80053e6:	1d3b      	adds	r3, r7, #4
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 f978 	bl	80056de <_ZNKSt16initializer_listI3DLCE5beginEv>
 80053ee:	4604      	mov	r4, r0
 80053f0:	1d3b      	adds	r3, r7, #4
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f97f 	bl	80056f6 <_ZNKSt16initializer_listI3DLCE3endEv>
 80053f8:	4602      	mov	r2, r0
 80053fa:	462b      	mov	r3, r5
 80053fc:	4621      	mov	r1, r4
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f99f 	bl	8005742 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bdb0      	pop	{r4, r5, r7, pc}

0800540e <_ZNSt6vectorI3DLCSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800540e:	b5b0      	push	{r4, r5, r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681c      	ldr	r4, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 f9c7 	bl	80057b4 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 8005426:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005428:	461a      	mov	r2, r3
 800542a:	4629      	mov	r1, r5
 800542c:	4620      	mov	r0, r4
 800542e:	f000 f9cc 	bl	80057ca <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>
      }
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f939 	bl	80056ac <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bdb0      	pop	{r4, r5, r7, pc}

08005444 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	f107 030c 	add.w	r3, r7, #12
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f9b5 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	1d1a      	adds	r2, r3, #4
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f9a4 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr()
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3310      	adds	r3, #16
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f9a5 	bl	8005804 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 80054ba:	4603      	mov	r3, r0
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80054da:	b5b0      	push	{r4, r5, r7, lr}
 80054dc:	b082      	sub	sp, #8
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d011      	beq.n	8005514 <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80054f0:	687c      	ldr	r4, [r7, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685d      	ldr	r5, [r3, #4]
 80054f6:	6838      	ldr	r0, [r7, #0]
 80054f8:	f000 f990 	bl	800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054fc:	4603      	mov	r3, r0
 80054fe:	461a      	mov	r2, r3
 8005500:	4629      	mov	r1, r5
 8005502:	4620      	mov	r0, r4
 8005504:	f000 f9aa 	bl	800585c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	1d1a      	adds	r2, r3, #4
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	e00c      	b.n	800552e <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff fe9b 	bl	8005250 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 800551a:	4604      	mov	r4, r0
 800551c:	6838      	ldr	r0, [r7, #0]
 800551e:	f000 f97d 	bl	800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	4621      	mov	r1, r4
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f9a9 	bl	8005880 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa22 	bl	8005978 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>
 8005534:	4603      	mov	r3, r0
      }
 8005536:	4618      	mov	r0, r3
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bdb0      	pop	{r4, r5, r7, pc}

0800553e <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fa20 	bl	80059ae <_ZNSt22_Optional_payload_baseImE6_M_getEv>
 800556e:	4603      	mov	r3, r0
      }
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 80055ae:	b590      	push	{r4, r7, lr}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	7239      	strb	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	4621      	mov	r1, r4
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fa11 	bl	80059e8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd90      	pop	{r4, r7, pc}

080055d0 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	7239      	strb	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 80055dc:	68fc      	ldr	r4, [r7, #12]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff ffda 	bl	8005598 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80055e4:	4603      	mov	r3, r0
 80055e6:	461a      	mov	r2, r3
 80055e8:	4629      	mov	r1, r5
 80055ea:	4620      	mov	r0, r4
 80055ec:	f7ff ffdf 	bl	80055ae <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bdb0      	pop	{r4, r5, r7, pc}

080055fa <_ZNSaIP3CanEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa08 	bl	8005a18 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	609a      	str	r2, [r3, #8]
	{ }
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	607a      	str	r2, [r7, #4]
	if (__p)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d005      	beq.n	8005658 <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f9eb 	bl	8005a2e <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>
      }
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fe99 	bl	80053b6 <_ZNSaI3DLCED1Ev>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f000 f9e5 	bl	8005a6c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4618      	mov	r0, r3
 80056a6:	3708      	adds	r7, #8
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80056c4:	461a      	mov	r2, r3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9e2 	bl	8005a90 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>
      }
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff ffd1 	bl	8005676 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <_ZNKSt16initializer_listI3DLCE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <_ZNKSt16initializer_listI3DLCE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80056f6:	b590      	push	{r4, r7, lr}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff ffed 	bl	80056de <_ZNKSt16initializer_listI3DLCE5beginEv>
 8005704:	4604      	mov	r4, r0
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f9d5 	bl	8005ab6 <_ZNKSt16initializer_listI3DLCE4sizeEv>
 800570c:	4603      	mov	r3, r0
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4423      	add	r3, r4
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bd90      	pop	{r4, r7, pc}

0800571a <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 800571a:	b5b0      	push	{r4, r5, r7, lr}
 800571c:	b082      	sub	sp, #8
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8005724:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8005726:	1d3b      	adds	r3, r7, #4
 8005728:	4618      	mov	r0, r3
 800572a:	f000 f9d0 	bl	8005ace <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 800572e:	462a      	mov	r2, r5
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	4620      	mov	r0, r4
 8005734:	f000 f9d5 	bl	8005ae2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 8005738:	4603      	mov	r3, r0
    }
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bdb0      	pop	{r4, r5, r7, pc}

08005742 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8005742:	b590      	push	{r4, r7, lr}
 8005744:	b087      	sub	sp, #28
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	68b8      	ldr	r0, [r7, #8]
 8005754:	f7ff ffe1 	bl	800571a <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8005758:	4603      	mov	r3, r0
 800575a:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800575c:	68fc      	ldr	r4, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4618      	mov	r0, r3
 8005762:	f000 f827 	bl	80057b4 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 8005766:	4603      	mov	r3, r0
 8005768:	4619      	mov	r1, r3
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	f000 f9ca 	bl	8005b04 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>
 8005770:	4603      	mov	r3, r0
 8005772:	4619      	mov	r1, r3
 8005774:	4620      	mov	r0, r4
 8005776:	f000 f9ed 	bl	8005b54 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>
 800577a:	4602      	mov	r2, r0
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	441a      	add	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f80d 	bl	80057b4 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 800579a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800579c:	4622      	mov	r2, r4
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	68b8      	ldr	r0, [r7, #8]
 80057a2:	f000 f9eb 	bl	8005b7c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 80057a6:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	605a      	str	r2, [r3, #4]
	}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd90      	pop	{r4, r7, pc}

080057b4 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80057d6:	68b9      	ldr	r1, [r7, #8]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f9e0 	bl	8005b9e <_ZSt8_DestroyIP3DLCEvT_S2_>
    }
 80057de:	bf00      	nop
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80057e6:	b480      	push	{r7}
 80057e8:	b083      	sub	sp, #12
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() noexcept
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f9dc 	bl	8005bca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 8005812:	4603      	mov	r3, r0
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8005832:	b590      	push	{r4, r7, lr}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800583c:	6838      	ldr	r0, [r7, #0]
 800583e:	f7ff ffed 	bl	800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 8005842:	4603      	mov	r3, r0
 8005844:	681c      	ldr	r4, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4619      	mov	r1, r3
 800584a:	2004      	movs	r0, #4
 800584c:	f7fa fd70 	bl	8000330 <_ZnwjPv>
 8005850:	4603      	mov	r3, r0
 8005852:	601c      	str	r4, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	bd90      	pop	{r4, r7, pc}

0800585c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff ffd7 	bl	800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 800586e:	4603      	mov	r3, r0
 8005870:	4619      	mov	r1, r3
 8005872:	68b8      	ldr	r0, [r7, #8]
 8005874:	f7ff ffdd 	bl	8005832 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005880:	b5b0      	push	{r4, r5, r7, lr}
 8005882:	b08c      	sub	sp, #48	; 0x30
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800588c:	4a39      	ldr	r2, [pc, #228]	; (8005974 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800588e:	2101      	movs	r1, #1
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f9a5 	bl	8005be0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>
 8005896:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f7ff fcc3 	bl	8005230 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 80058aa:	4603      	mov	r3, r0
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	f107 0214 	add.w	r2, r7, #20
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f9d8 	bl	8005c6e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80058be:	4603      	mov	r3, r0
 80058c0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 f9e6 	bl	8005c98 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>
 80058cc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80058d2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	18d5      	adds	r5, r2, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff9d 	bl	800581c <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	4629      	mov	r1, r5
 80058e8:	4620      	mov	r0, r4
 80058ea:	f7ff ffb7 	bl	800585c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80058ee:	2300      	movs	r3, #0
 80058f0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058f2:	f107 0308 	add.w	r3, r7, #8
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff f95e 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058fc:	4603      	mov	r3, r0
 80058fe:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 f9f0 	bl	8005ce8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005908:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	4621      	mov	r1, r4
 800590e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005910:	f000 f9d6 	bl	8005cc0 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8005914:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	3304      	adds	r3, #4
 800591a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800591c:	f107 0308 	add.w	r3, r7, #8
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff f949 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005926:	4603      	mov	r3, r0
 8005928:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4618      	mov	r0, r3
 800592e:	f000 f9db 	bl	8005ce8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005932:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005938:	4620      	mov	r0, r4
 800593a:	f000 f9c1 	bl	8005cc0 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800593e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8005940:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800594c:	461a      	mov	r2, r3
 800594e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005950:	f7ff fe73 	bl	800563a <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	441a      	add	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	609a      	str	r2, [r3, #8]
    }
 800596c:	bf00      	nop
 800596e:	3730      	adds	r7, #48	; 0x30
 8005970:	46bd      	mov	sp, r7
 8005972:	bdb0      	pop	{r4, r5, r7, pc}
 8005974:	08020aa8 	.word	0x08020aa8

08005978 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff fc65 	bl	8005250 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8005986:	4603      	mov	r3, r0
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	f107 030c 	add.w	r3, r7, #12
 800598e:	2101      	movs	r1, #1
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f9c2 	bl	8005d1a <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>
 8005996:	4603      	mov	r3, r0
 8005998:	60bb      	str	r3, [r7, #8]
 800599a:	f107 0308 	add.w	r3, r7, #8
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff f93d 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 80059a4:	4603      	mov	r3, r0
      }
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <_ZNSt22_Optional_payload_baseImE6_M_getEv>:
      _M_get() noexcept
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	7239      	strb	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff fde1 	bl	8005598 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80059d6:	4603      	mov	r3, r0
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	601a      	str	r2, [r3, #0]
	    { }
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 80059e8:	b5b0      	push	{r4, r5, r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	7239      	strb	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 80059f4:	68fc      	ldr	r4, [r7, #12]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff fdce 	bl	8005598 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	4629      	mov	r1, r5
 8005a02:	4620      	mov	r0, r4
 8005a04:	f7ff ffde 	bl	80059c4 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	711a      	strb	r2, [r3, #4]
	{ }
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bdb0      	pop	{r4, r5, r7, pc}

08005a18 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>:
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b088      	sub	sp, #32
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005a46:	f7fa fc6b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8005a50:	69b8      	ldr	r0, [r7, #24]
 8005a52:	f01a fd5d 	bl	8020510 <_ZdlPv>
	    return;
 8005a56:	e005      	b.n	8005a64 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	69b9      	ldr	r1, [r7, #24]
 8005a5c:	69f8      	ldr	r0, [r7, #28]
 8005a5e:	f000 faa4 	bl	8005faa <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8005a62:	bf00      	nop
 8005a64:	bf00      	nop
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f967 	bl	8005d4c <_ZNSaI3DLCEC1ERKS0_>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 f971 	bl	8005d68 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3708      	adds	r7, #8
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	if (__p)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 f971 	bl	8005d90 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>
      }
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <_ZNKSt16initializer_listI3DLCE4sizeEv>:
      size() const noexcept { return _M_len; }
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	10db      	asrs	r3, r3, #3
    }
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8005b04:	b590      	push	{r4, r7, lr}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8005b0e:	f107 030c 	add.w	r3, r7, #12
 8005b12:	6839      	ldr	r1, [r7, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 f919 	bl	8005d4c <_ZNSaI3DLCEC1ERKS0_>
 8005b1a:	f107 030c 	add.w	r3, r7, #12
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 f961 	bl	8005de6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>
 8005b24:	4602      	mov	r2, r0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	bf8c      	ite	hi
 8005b2c:	2301      	movhi	r3, #1
 8005b2e:	2300      	movls	r3, #0
 8005b30:	b2dc      	uxtb	r4, r3
 8005b32:	f107 030c 	add.w	r3, r7, #12
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff fc3d 	bl	80053b6 <_ZNSaI3DLCED1Ev>
 8005b3c:	2c00      	cmp	r4, #0
 8005b3e:	d002      	beq.n	8005b46 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8005b40:	4803      	ldr	r0, [pc, #12]	; (8005b50 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8005b42:	f01a fdb3 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	return __n;
 8005b46:	687b      	ldr	r3, [r7, #4]
      }
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd90      	pop	{r4, r7, pc}
 8005b50:	08020ac4 	.word	0x08020ac4

08005b54 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d006      	beq.n	8005b72 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x1e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 f956 	bl	8005e1a <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	e000      	b.n	8005b74 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x20>
 8005b72:	2300      	movs	r3, #0
      }
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f963 	bl	8005e5a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005b94:	4603      	mov	r3, r0
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <_ZSt8_DestroyIP3DLCEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005ba8:	f7fa fbba 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <_ZSt8_DestroyIP3DLCEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f962 	bl	8005e7e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>
 8005bba:	e003      	b.n	8005bc4 <_ZSt8_DestroyIP3DLCEvT_S2_+0x26>
	__destroy(__first, __last);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f975 	bl	8005eae <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>
    }
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() noexcept
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005be0:	b590      	push	{r4, r7, lr}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f969 	bl	8005ec4 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f976 	bl	8005ee6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	1ae2      	subs	r2, r4, r3
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	bf34      	ite	cc
 8005c04:	2301      	movcc	r3, #1
 8005c06:	2300      	movcs	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f01a fd4c 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f966 	bl	8005ee6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f962 	bl	8005ee6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c22:	4603      	mov	r3, r0
 8005c24:	613b      	str	r3, [r7, #16]
 8005c26:	f107 0208 	add.w	r2, r7, #8
 8005c2a:	f107 0310 	add.w	r3, r7, #16
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fc fe0e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8005c36:	4603      	mov	r3, r0
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4423      	add	r3, r4
 8005c3c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f951 	bl	8005ee6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c44:	4602      	mov	r2, r0
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d306      	bcc.n	8005c5a <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f939 	bl	8005ec4 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c52:	4602      	mov	r2, r0
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d904      	bls.n	8005c64 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x84>
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 f932 	bl	8005ec4 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c60:	4603      	mov	r3, r0
 8005c62:	e000      	b.n	8005c66 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x86>
 8005c64:	697b      	ldr	r3, [r7, #20]
      }
 8005c66:	4618      	mov	r0, r3
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}

08005c6e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005c6e:	b590      	push	{r4, r7, lr}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7fe ff9d 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	681c      	ldr	r4, [r3, #0]
 8005c82:	6838      	ldr	r0, [r7, #0]
 8005c84:	f7fe ff98 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	1ae3      	subs	r3, r4, r3
 8005c8e:	109b      	asrs	r3, r3, #2
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd90      	pop	{r4, r7, pc}

08005c98 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d006      	beq.n	8005cb6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x1e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 f92a 	bl	8005f06 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	e000      	b.n	8005cb8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x20>
 8005cb6:	2300      	movs	r3, #0
      }
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005cce:	f88d 4000 	strb.w	r4, [sp]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f934 	bl	8005f46 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8005cde:	4603      	mov	r3, r0
      }
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd90      	pop	{r4, r7, pc}

08005ce8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f936 	bl	8005f7e <_ZSt8_DestroyIPP3CanEvT_S3_>
    }
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	425b      	negs	r3, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	f107 020c 	add.w	r2, r7, #12
 8005d36:	f107 0308 	add.w	r3, r7, #8
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff fbfe 	bl	800553e <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <_ZNSaI3DLCEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f935 	bl	8005fc8 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	609a      	str	r2, [r3, #8]
	{ }
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005da8:	f7fa faba 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8005db2:	69b8      	ldr	r0, [r7, #24]
 8005db4:	f01a fbac 	bl	8020510 <_ZdlPv>
	    return;
 8005db8:	e005      	b.n	8005dc6 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	69b9      	ldr	r1, [r7, #24]
 8005dbe:	69f8      	ldr	r0, [r7, #28]
 8005dc0:	f000 f9a5 	bl	800610e <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005dd6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8005dda:	4618      	mov	r0, r3
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005dee:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005df2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff ffea 	bl	8005dce <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005dfe:	f107 0208 	add.w	r2, r7, #8
 8005e02:	f107 030c 	add.w	r3, r7, #12
 8005e06:	4611      	mov	r1, r2
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fc ffec 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	681b      	ldr	r3, [r3, #0]
      }
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	6039      	str	r1, [r7, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005e2c:	f7fa fa78 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d006      	beq.n	8005e44 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f01a fb6c 	bl	8020518 <_Znwj>
 8005e40:	4603      	mov	r3, r0
 8005e42:	e006      	b.n	8005e52 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005e44:	2200      	movs	r2, #0
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f96f 	bl	800612c <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	bf00      	nop
      { return __a.allocate(__n); }
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b086      	sub	sp, #24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005e66:	2301      	movs	r3, #1
 8005e68:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f8b6 	bl	8005fe0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>
 8005e74:	4603      	mov	r3, r0
    }
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d00a      	beq.n	8005ea6 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f8b5 	bl	8006000 <_ZSt11__addressofI3DLCEPT_RS1_>
 8005e96:	4603      	mov	r3, r0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 f8bc 	bl	8006016 <_ZSt8_DestroyI3DLCEvPT_>
	  for (; __first != __last; ++__first)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	607b      	str	r3, [r7, #4]
 8005ea4:	e7f0      	b.n	8005e88 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0xa>
	}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f8d2 	bl	8006078 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 f8b4 	bl	8006044 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>
 8005edc:	4603      	mov	r3, r0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	109b      	asrs	r3, r3, #2
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005f18:	f7fa fa02 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d006      	beq.n	8005f30 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f01a faf6 	bl	8020518 <_Znwj>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	e006      	b.n	8005f3e <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005f30:	2200      	movs	r2, #0
 8005f32:	68b9      	ldr	r1, [r7, #8]
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f93a 	bl	80061ae <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	bf00      	nop
      { return __a.allocate(__n); }
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	60f8      	str	r0, [r7, #12]
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f897 	bl	800608e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005f60:	4603      	mov	r3, r0
      }
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZSt10destroy_atIP3CanEvPT_>:
    destroy_at(_Tp* __location)
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
    }
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <_ZSt8_DestroyIPP3CanEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005f88:	f7fa f9ca 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <_ZSt8_DestroyIPP3CanEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f897 	bl	80060c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>
 8005f9a:	e003      	b.n	8005fa4 <_ZSt8_DestroyIPP3CanEvT_S3_+0x26>
	__destroy(__first, __last);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f8aa 	bl	80060f8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>
    }
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	68b8      	ldr	r0, [r7, #8]
 8005fbe:	f01a faa9 	bl	8020514 <_ZdlPvj>
      }
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f8ba 	bl	800616a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <_ZSt11__addressofI3DLCEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <_ZSt8_DestroyI3DLCEvPT_>:
    _Destroy(_Tp* __pointer)
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f8bb 	bl	800619a <_ZSt10destroy_atI3DLCEvPT_>
    }
 8006024:	bf00      	nop
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8006034:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800604c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006050:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff ffea 	bl	800602c <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>
 8006058:	4603      	mov	r3, r0
 800605a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800605c:	f107 0208 	add.w	r2, r7, #8
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	4611      	mov	r1, r2
 8006066:	4618      	mov	r0, r3
 8006068:	f7fc febd 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800606c:	4603      	mov	r3, r0
 800606e:	681b      	ldr	r3, [r3, #0]
      }
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800608e:	b5b0      	push	{r4, r5, r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 f8a5 	bl	80061ec <_ZSt12__niter_baseIPP3CanET_S3_>
 80060a2:	4604      	mov	r4, r0
 80060a4:	68b8      	ldr	r0, [r7, #8]
 80060a6:	f000 f8a1 	bl	80061ec <_ZSt12__niter_baseIPP3CanET_S3_>
 80060aa:	4605      	mov	r5, r0
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f89d 	bl	80061ec <_ZSt12__niter_baseIPP3CanET_S3_>
 80060b2:	4602      	mov	r2, r0
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	4629      	mov	r1, r5
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 f8a2 	bl	8006202 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80060be:	4603      	mov	r3, r0
    }
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bdb0      	pop	{r4, r5, r7, pc}

080060c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d00a      	beq.n	80060f0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8af 	bl	800623e <_ZSt11__addressofIP3CanEPT_RS2_>
 80060e0:	4603      	mov	r3, r0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f8b6 	bl	8006254 <_ZSt8_DestroyIP3CanEvPT_>
	  for (; __first != __last; ++__first)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3304      	adds	r3, #4
 80060ec:	607b      	str	r3, [r7, #4]
 80060ee:	e7f0      	b.n	80060d2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0xa>
	}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4619      	mov	r1, r3
 8006120:	68b8      	ldr	r0, [r7, #8]
 8006122:	f01a f9f7 	bl	8020514 <_ZdlPvj>
      }
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f896 	bl	800626a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>
 800613e:	4602      	mov	r2, r0
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	4293      	cmp	r3, r2
 8006144:	bf8c      	ite	hi
 8006146:	2301      	movhi	r3, #1
 8006148:	2300      	movls	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006150:	f01a faa9 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4618      	mov	r0, r3
 800615a:	f01a f9dd 	bl	8020518 <_Znwj>
 800615e:	4603      	mov	r3, r0
 8006160:	bf00      	nop
      }
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800616a:	b590      	push	{r4, r7, lr}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 f883 	bl	8006282 <_ZSt12__miter_baseIPK3DLCET_S3_>
 800617c:	4604      	mov	r4, r0
 800617e:	68b8      	ldr	r0, [r7, #8]
 8006180:	f000 f87f 	bl	8006282 <_ZSt12__miter_baseIPK3DLCET_S3_>
 8006184:	4603      	mov	r3, r0
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4619      	mov	r1, r3
 800618a:	4620      	mov	r0, r4
 800618c:	f000 f884 	bl	8006298 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006190:	4603      	mov	r3, r0
    }
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	bd90      	pop	{r4, r7, pc}

0800619a <_ZSt10destroy_atI3DLCEvPT_>:
    destroy_at(_Tp* __location)
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
    }
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f88f 	bl	80062de <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>
 80061c0:	4602      	mov	r2, r0
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	bf8c      	ite	hi
 80061c8:	2301      	movhi	r3, #1
 80061ca:	2300      	movls	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80061d2:	f01a fa68 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4618      	mov	r0, r3
 80061dc:	f01a f99c 	bl	8020518 <_Znwj>
 80061e0:	4603      	mov	r3, r0
 80061e2:	bf00      	nop
      }
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <_ZSt12__niter_baseIPP3CanET_S3_>:
    __niter_base(_Iterator __it)
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8006202:	b580      	push	{r7, lr}
 8006204:	b086      	sub	sp, #24
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	60b9      	str	r1, [r7, #8]
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	109b      	asrs	r3, r3, #2
 8006218:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	dd06      	ble.n	800622e <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	461a      	mov	r2, r3
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f01a faaf 	bl	802078c <memmove>
      return __result + __count;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	4413      	add	r3, r2
    }
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <_ZSt11__addressofIP3CanEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <_ZSt8_DestroyIP3CanEvPT_>:
    _Destroy(_Tp* __pointer)
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fe84 	bl	8005f6a <_ZSt10destroy_atIP3CanEvPT_>
    }
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006272:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8006276:	4618      	mov	r0, r3
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <_ZSt12__miter_baseIPK3DLCET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
    { return __it; }
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006298:	b5b0      	push	{r4, r5, r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f826 	bl	80062f6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 80062aa:	4604      	mov	r4, r0
 80062ac:	68b8      	ldr	r0, [r7, #8]
 80062ae:	f000 f822 	bl	80062f6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 80062b2:	4605      	mov	r5, r0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f828 	bl	800630c <_ZSt12__niter_baseIP3DLCET_S2_>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	4629      	mov	r1, r5
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 f82d 	bl	8006322 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 80062c8:	4602      	mov	r2, r0
 80062ca:	1d3b      	adds	r3, r7, #4
 80062cc:	4611      	mov	r1, r2
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 f837 	bl	8006342 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>
 80062d4:	4603      	mov	r3, r0
    }
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bdb0      	pop	{r4, r5, r7, pc}

080062de <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80062e6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <_ZSt12__niter_baseIPK3DLCET_S3_>:
    __niter_base(_Iterator __it)
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4618      	mov	r0, r3
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <_ZSt12__niter_baseIP3DLCET_S2_>:
    __niter_base(_Iterator __it)
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f811 	bl	800635a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006338:	4603      	mov	r3, r0
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8006366:	f7f9 ffdb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d006      	beq.n	800637e <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x24>
	  __copy_m(__first, __last, __result);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f80d 	bl	8006394 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>
 800637a:	4603      	mov	r3, r0
 800637c:	e006      	b.n	800638c <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f82b 	bl	80063de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>
 8006388:	4603      	mov	r3, r0
 800638a:	bf00      	nop
    }
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	10db      	asrs	r3, r3, #3
 80063a8:	617b      	str	r3, [r7, #20]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dd0f      	ble.n	80063d0 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x3c>
	      *__result = *__first;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80063b8:	e883 0003 	stmia.w	r3, {r0, r1}
	      ++__first;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3308      	adds	r3, #8
 80063c0:	60fb      	str	r3, [r7, #12]
	      ++__result;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3308      	adds	r3, #8
 80063c6:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	e7ec      	b.n	80063aa <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x16>
	  return __result;
 80063d0:	687b      	ldr	r3, [r7, #4]
	}
 80063d2:	4618      	mov	r0, r3
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80063de:	b580      	push	{r7, lr}
 80063e0:	b086      	sub	sp, #24
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	10db      	asrs	r3, r3, #3
 80063f2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	461a      	mov	r2, r3
 8006400:	68f9      	ldr	r1, [r7, #12]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f01a f9c2 	bl	802078c <memmove>
	  return __result + _Num;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
	}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <_Z41__static_initialization_and_destruction_0ii>:
		{20, FDCAN_DLC_BYTES_20},
		{24, FDCAN_DLC_BYTES_24},
		{32, FDCAN_DLC_BYTES_32},
		{48, FDCAN_DLC_BYTES_48},
		{64, FDCAN_DLC_BYTES_64}
};
 8006418:	b580      	push	{r7, lr}
 800641a:	b0a6      	sub	sp, #152	; 0x98
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d126      	bne.n	8006476 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800642e:	4293      	cmp	r3, r2
 8006430:	d121      	bne.n	8006476 <_Z41__static_initialization_and_destruction_0ii+0x5e>
vector<Can*> Can::all_cans;
 8006432:	481a      	ldr	r0, [pc, #104]	; (800649c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006434:	f7fe fe70 	bl	8005118 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>
const vector<DLC> Can::DLCS = {
 8006438:	4a19      	ldr	r2, [pc, #100]	; (80064a0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800643a:	f107 0314 	add.w	r3, r7, #20
 800643e:	4611      	mov	r1, r2
 8006440:	2280      	movs	r2, #128	; 0x80
 8006442:	4618      	mov	r0, r3
 8006444:	f01a f994 	bl	8020770 <memcpy>
 8006448:	f107 0314 	add.w	r3, r7, #20
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	2310      	movs	r3, #16
 8006450:	613b      	str	r3, [r7, #16]
 8006452:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe ffa1 	bl	800539e <_ZNSaI3DLCEC1Ev>
 800645c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006460:	f107 020c 	add.w	r2, r7, #12
 8006464:	ca06      	ldmia	r2, {r1, r2}
 8006466:	480f      	ldr	r0, [pc, #60]	; (80064a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006468:	f7fe ffb0 	bl	80053cc <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 800646c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe ffa0 	bl	80053b6 <_ZNSaI3DLCED1Ev>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006482:	4293      	cmp	r3, r2
 8006484:	d105      	bne.n	8006492 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8006486:	4807      	ldr	r0, [pc, #28]	; (80064a4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006488:	f7fe ffc1 	bl	800540e <_ZNSt6vectorI3DLCSaIS0_EED1Ev>
vector<Can*> Can::all_cans;
 800648c:	4803      	ldr	r0, [pc, #12]	; (800649c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800648e:	f000 f80b 	bl	80064a8 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>
};
 8006492:	bf00      	nop
 8006494:	3798      	adds	r7, #152	; 0x98
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	240000f8 	.word	0x240000f8
 80064a0:	08020af8 	.word	0x08020af8
 80064a4:	24000104 	.word	0x24000104

080064a8 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80064a8:	b5b0      	push	{r4, r5, r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681c      	ldr	r4, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fc14 	bl	8005ce8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80064c0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80064c2:	461a      	mov	r2, r3
 80064c4:	4629      	mov	r1, r5
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff fc19 	bl	8005cfe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>
      }
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe ff4c 	bl	800536c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bdb0      	pop	{r4, r5, r7, pc}

080064de <_GLOBAL__sub_I__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 80064de:	b580      	push	{r7, lr}
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064e6:	2001      	movs	r0, #1
 80064e8:	f7ff ff96 	bl	8006418 <_Z41__static_initialization_and_destruction_0ii>
 80064ec:	bd80      	pop	{r7, pc}

080064ee <_GLOBAL__sub_D__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 80064ee:	b580      	push	{r7, lr}
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064f6:	2000      	movs	r0, #0
 80064f8:	f7ff ff8e 	bl	8006418 <_Z41__static_initialization_and_destruction_0ii>
 80064fc:	bd80      	pop	{r7, pc}

080064fe <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f89e 	bl	8006648 <_ZNSaIP9DigitalInED1Ev>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4618      	mov	r0, r3
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 f881 	bl	8006628 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4618      	mov	r0, r3
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>:
      vector() = default;
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff ffeb 	bl	8006516 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f8b1 	bl	80066ba <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4618      	mov	r0, r3
 800656e:	f000 f88f 	bl	8006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff ffeb 	bl	8006562 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <_ZN9DigitalInC1EP3Pin>:
#include <Mini-STLIB/DigitalIn.hpp>

vector<DigitalIn*> DigitalIn::all_digital_ins;
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;

DigitalIn::DigitalIn(Pin* pin) : pin(pin) {
 8006598:	b590      	push	{r4, r7, lr}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
 80065a2:	683a      	ldr	r2, [r7, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	721a      	strb	r2, [r3, #8]
	DigitalIn::all_digital_ins.push_back(this);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	f107 030c 	add.w	r3, r7, #12
 80065b6:	4619      	mov	r1, r3
 80065b8:	4809      	ldr	r0, [pc, #36]	; (80065e0 <_ZN9DigitalInC1EP3Pin+0x48>)
 80065ba:	f000 f89e 	bl	80066fa <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>
	DigitalIn::pin_to_digital_in[pin] = this;
 80065be:	687c      	ldr	r4, [r7, #4]
 80065c0:	463b      	mov	r3, r7
 80065c2:	4619      	mov	r1, r3
 80065c4:	4807      	ldr	r0, [pc, #28]	; (80065e4 <_ZN9DigitalInC1EP3Pin+0x4c>)
 80065c6:	f000 f8a9 	bl	800671c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80065ca:	4603      	mov	r3, r0
 80065cc:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_INPUT;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2205      	movs	r2, #5
 80065d2:	719a      	strb	r2, [r3, #6]
}
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4618      	mov	r0, r3
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd90      	pop	{r4, r7, pc}
 80065de:	bf00      	nop
 80065e0:	24000110 	.word	0x24000110
 80065e4:	2400011c 	.word	0x2400011c

080065e8 <_ZN9DigitalIn9get_valueEv>:

DigitalIn::DigitalInState DigitalIn::get_value(){
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	GPIO_PinState hal_state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	889b      	ldrh	r3, [r3, #4]
 80065fc:	4619      	mov	r1, r3
 80065fe:	4610      	mov	r0, r2
 8006600:	f014 fc22 	bl	801ae48 <HAL_GPIO_ReadPin>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
	if(hal_state == GPIO_PIN_SET)
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d103      	bne.n	8006616 <_ZN9DigitalIn9get_valueEv+0x2e>
		state = DigitalIn::HIGH;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	721a      	strb	r2, [r3, #8]
 8006614:	e002      	b.n	800661c <_ZN9DigitalIn9get_valueEv+0x34>
	else
		state = DigitalIn::LOW;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	721a      	strb	r2, [r3, #8]
	return state;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	7a1b      	ldrb	r3, [r3, #8]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f8d1 	bl	80067d8 <_ZNSaIP9DigitalInEC1Ev>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4618      	mov	r0, r3
 800663a:	f000 f8d9 	bl	80067f0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <_ZNSaIP9DigitalInED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8006676:	461a      	mov	r2, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f8cd 	bl	8006818 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff ff3c 	bl	80064fe <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	3708      	adds	r7, #8
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8d0 	bl	800683e <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fa faa1 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3304      	adds	r3, #4
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7f9 fe4c 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>:
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f8db 	bl	8006894 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80066de:	4603      	mov	r3, r0
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f8b7 	bl	8006856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff ff2d 	bl	800654a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8006704:	6838      	ldr	r0, [r7, #0]
 8006706:	f000 f8d1 	bl	80068ac <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>
 800670a:	4603      	mov	r3, r0
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f8d7 	bl	80068c2 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 800671c:	b590      	push	{r4, r7, lr}
 800671e:	b08b      	sub	sp, #44	; 0x2c
 8006720:	af02      	add	r7, sp, #8
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8006726:	6839      	ldr	r1, [r7, #0]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f8fc 	bl	8006926 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 800672e:	4603      	mov	r3, r0
 8006730:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f906 	bl	8006944 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8006738:	4603      	mov	r3, r0
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	f107 020c 	add.w	r2, r7, #12
 8006740:	f107 0308 	add.w	r3, r7, #8
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f000 f909 	bl	800695e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d114      	bne.n	800677c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f917 	bl	8006986 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681c      	ldr	r4, [r3, #0]
 800675c:	f107 0308 	add.w	r3, r7, #8
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f91d 	bl	80069a0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006766:	4603      	mov	r3, r0
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	f107 0310 	add.w	r3, r7, #16
 800676e:	4621      	mov	r1, r4
 8006770:	4618      	mov	r0, r3
 8006772:	f7fa fbb2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 800677c:	2301      	movs	r3, #1
 800677e:	e000      	b.n	8006782 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8006780:	2300      	movs	r3, #0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d01b      	beq.n	80067be <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006786:	687c      	ldr	r4, [r7, #4]
 8006788:	f107 0208 	add.w	r2, r7, #8
 800678c:	f107 0314 	add.w	r3, r7, #20
 8006790:	4611      	mov	r1, r2
 8006792:	4618      	mov	r0, r3
 8006794:	f000 f912 	bl	80069bc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8006798:	f107 0318 	add.w	r3, r7, #24
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fa fbae 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80067a4:	f107 0218 	add.w	r2, r7, #24
 80067a8:	f107 031c 	add.w	r3, r7, #28
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	4613      	mov	r3, r2
 80067b0:	4a08      	ldr	r2, [pc, #32]	; (80067d4 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80067b2:	6979      	ldr	r1, [r7, #20]
 80067b4:	4620      	mov	r0, r4
 80067b6:	f000 f911 	bl	80069dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80067ba:	4603      	mov	r3, r0
 80067bc:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80067be:	f107 0308 	add.w	r3, r7, #8
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 f8ec 	bl	80069a0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 80067c8:	4603      	mov	r3, r0
 80067ca:	3304      	adds	r3, #4
      }
 80067cc:	4618      	mov	r0, r3
 80067ce:	3724      	adds	r7, #36	; 0x24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd90      	pop	{r4, r7, pc}
 80067d4:	08020c84 	.word	0x08020c84

080067d8 <_ZNSaIP9DigitalInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f939 	bl	8006a58 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4618      	mov	r0, r3
 80067ea:	3708      	adds	r7, #8
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	605a      	str	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	609a      	str	r2, [r3, #8]
	{ }
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
	if (__p)
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	4618      	mov	r0, r3
 8006832:	f000 f91c 	bl	8006a6e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>
      }
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f930 	bl	8006aac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d012      	beq.n	800688c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8006866:	6838      	ldr	r0, [r7, #0]
 8006868:	f000 f92b 	bl	8006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800686c:	4603      	mov	r3, r0
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff fff0 	bl	8006856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8006876:	6838      	ldr	r0, [r7, #0]
 8006878:	f000 f92f 	bl	8006ada <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800687c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f936 	bl	8006af2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800688a:	e7e9      	b.n	8006860 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80068c2:	b5b0      	push	{r4, r5, r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d011      	beq.n	80068fc <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80068d8:	687c      	ldr	r4, [r7, #4]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685d      	ldr	r5, [r3, #4]
 80068de:	6838      	ldr	r0, [r7, #0]
 80068e0:	f000 f918 	bl	8006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	4629      	mov	r1, r5
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 f932 	bl	8006b54 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	1d1a      	adds	r2, r3, #4
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	605a      	str	r2, [r3, #4]
 80068fa:	e00c      	b.n	8006916 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f93b 	bl	8006b78 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 8006902:	4604      	mov	r4, r0
 8006904:	6838      	ldr	r0, [r7, #0]
 8006906:	f000 f905 	bl	8006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	4621      	mov	r1, r4
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f943 	bl	8006b9c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f9bc 	bl	8006c94 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>
 800691c:	4603      	mov	r3, r0
      }
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bdb0      	pop	{r4, r5, r7, pc}

08006926 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	4618      	mov	r0, r3
 8006936:	f000 f9c8 	bl	8006cca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 800693a:	4603      	mov	r3, r0
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f9d2 	bl	8006cf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8006954:	4603      	mov	r3, r0
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	4618      	mov	r0, r3
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8006986:	b590      	push	{r4, r7, lr}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4618      	mov	r0, r3
 8006992:	f000 f9c2 	bl	8006d1a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8006996:	bf00      	nop
 8006998:	4620      	mov	r0, r4
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bd90      	pop	{r4, r7, pc}

080069a0 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 f9bf 	bl	8006d30 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 80069b2:	4603      	mov	r3, r0
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80069dc:	b5b0      	push	{r4, r5, r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
 80069e8:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fa fc3b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80069f0:	4604      	mov	r4, r0
 80069f2:	6838      	ldr	r0, [r7, #0]
 80069f4:	f7fa ff25 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80069f8:	4605      	mov	r5, r0
 80069fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069fc:	f7fa fc49 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006a00:	4603      	mov	r3, r0
 8006a02:	462a      	mov	r2, r5
 8006a04:	4621      	mov	r1, r4
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f9a0 	bl	8006d4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8006a0c:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8006a0e:	69f8      	ldr	r0, [r7, #28]
 8006a10:	f000 faee 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8006a14:	4603      	mov	r3, r0
 8006a16:	f107 0010 	add.w	r0, r7, #16
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	68f9      	ldr	r1, [r7, #12]
 8006a1e:	f000 f9b8 	bl	8006d92 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8006a28:	6939      	ldr	r1, [r7, #16]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 faf1 	bl	8007016 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8006a34:	4603      	mov	r3, r0
 8006a36:	e00b      	b.n	8006a50 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8006a38:	69f9      	ldr	r1, [r7, #28]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f859 	bl	8006af2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	f107 0318 	add.w	r3, r7, #24
 8006a46:	4611      	mov	r1, r2
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 fb23 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006a4e:	69bb      	ldr	r3, [r7, #24]
      }
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bdb0      	pop	{r4, r5, r7, pc}

08006a58 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4618      	mov	r0, r3
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b088      	sub	sp, #32
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006a86:	f7f9 fc4b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8006a90:	69b8      	ldr	r0, [r7, #24]
 8006a92:	f019 fd3d 	bl	8020510 <_ZdlPv>
	    return;
 8006a96:	e005      	b.n	8006aa4 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	69b9      	ldr	r1, [r7, #24]
 8006a9c:	69f8      	ldr	r0, [r7, #28]
 8006a9e:	f000 fdac 	bl	80075fa <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8006aa2:	bf00      	nop
 8006aa4:	bf00      	nop
 8006aa6:	3720      	adds	r7, #32
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fad7 	bl	80070b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fae8 	bl	80070dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006b2a:	b590      	push	{r4, r7, lr}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006b34:	6838      	ldr	r0, [r7, #0]
 8006b36:	f7ff ffed 	bl	8006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	681c      	ldr	r4, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4619      	mov	r1, r3
 8006b42:	2004      	movs	r0, #4
 8006b44:	f7f9 fbf4 	bl	8000330 <_ZnwjPv>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	601c      	str	r4, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd90      	pop	{r4, r7, pc}

08006b54 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff ffd7 	bl	8006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b66:	4603      	mov	r3, r0
 8006b68:	4619      	mov	r1, r3
 8006b6a:	68b8      	ldr	r0, [r7, #8]
 8006b6c:	f7ff ffdd 	bl	8006b2a <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8006b70:	bf00      	nop
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fab8 	bl	8007100 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006b9c:	b5b0      	push	{r4, r5, r7, lr}
 8006b9e:	b08c      	sub	sp, #48	; 0x30
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006ba8:	4a39      	ldr	r2, [pc, #228]	; (8006c90 <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8006baa:	2101      	movs	r1, #1
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fab7 	bl	8007120 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>
 8006bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 faf4 	bl	80071ae <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	f107 0214 	add.w	r2, r7, #20
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fafa 	bl	80071ce <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fb08 	bl	80071f8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>
 8006be8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8006bee:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	18d5      	adds	r5, r2, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff ff8b 	bl	8006b14 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	461a      	mov	r2, r3
 8006c02:	4629      	mov	r1, r5
 8006c04:	4620      	mov	r0, r4
 8006c06:	f7ff ffa5 	bl	8006b54 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006c0e:	f107 0308 	add.w	r3, r7, #8
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fb18 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fb1d 	bl	800725e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006c24:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	4621      	mov	r1, r4
 8006c2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c2c:	f000 faf8 	bl	8007220 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006c30:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	3304      	adds	r3, #4
 8006c36:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006c38:	f107 0308 	add.w	r3, r7, #8
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fb03 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006c42:	4603      	mov	r3, r0
 8006c44:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fb08 	bl	800725e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006c4e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c54:	4620      	mov	r0, r4
 8006c56:	f000 fae3 	bl	8007220 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006c5a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8006c5c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c6c:	f7ff fdd4 	bl	8006818 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	69fa      	ldr	r2, [r7, #28]
 8006c82:	441a      	add	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	609a      	str	r2, [r3, #8]
    }
 8006c88:	bf00      	nop
 8006c8a:	3730      	adds	r7, #48	; 0x30
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c90:	08020b78 	.word	0x08020b78

08006c94 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff ff6b 	bl	8006b78 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	f107 030c 	add.w	r3, r7, #12
 8006caa:	2101      	movs	r1, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 faef 	bl	8007290 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	f107 0308 	add.w	r3, r7, #8
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fb01 	bl	80072c2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 8006cc0:	4603      	mov	r3, r0
      }
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8006cca:	b590      	push	{r4, r7, lr}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff fddd 	bl	8006894 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8006cda:	4604      	mov	r4, r0
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fafc 	bl	80072da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fb02 	bl	80072f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd90      	pop	{r4, r7, pc}

08006cf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	1d1a      	adds	r2, r3, #4
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	4611      	mov	r1, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f9c2 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8006d22:	bf00      	nop
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr()
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3310      	adds	r3, #16
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fb0b 	bl	8007358 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8006d42:	4603      	mov	r3, r0
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006d4c:	b5b0      	push	{r4, r5, r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 fb08 	bl	8007370 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8006d60:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006d62:	68b8      	ldr	r0, [r7, #8]
 8006d64:	f7fa fa7f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d68:	4604      	mov	r4, r0
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fa fd69 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006d70:	4605      	mov	r5, r0
 8006d72:	6838      	ldr	r0, [r7, #0]
 8006d74:	f7fa fa8d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	4622      	mov	r2, r4
 8006d80:	6979      	ldr	r1, [r7, #20]
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 fb05 	bl	8007392 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8006d88:	697b      	ldr	r3, [r7, #20]
	}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bdb0      	pop	{r4, r5, r7, pc}

08006d92 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006d92:	b5b0      	push	{r4, r5, r7, lr}
 8006d94:	b08c      	sub	sp, #48	; 0x30
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	60f8      	str	r0, [r7, #12]
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8006da0:	1d3b      	adds	r3, r7, #4
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fb22 	bl	80073ec <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>
 8006da8:	4603      	mov	r3, r0
 8006daa:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8006dac:	69bc      	ldr	r4, [r7, #24]
 8006dae:	68b8      	ldr	r0, [r7, #8]
 8006db0:	f000 fa93 	bl	80072da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006db4:	4603      	mov	r3, r0
 8006db6:	429c      	cmp	r4, r3
 8006db8:	bf0c      	ite	eq
 8006dba:	2301      	moveq	r3, #1
 8006dbc:	2300      	movne	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d032      	beq.n	8006e2a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8006dc4:	68b8      	ldr	r0, [r7, #8]
 8006dc6:	f000 fb22 	bl	800740e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8006dca:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d015      	beq.n	8006dfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006dd0:	68bc      	ldr	r4, [r7, #8]
 8006dd2:	68b8      	ldr	r0, [r7, #8]
 8006dd4:	f000 fb27 	bl	8007426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fb2e 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006de2:	4603      	mov	r3, r0
 8006de4:	6819      	ldr	r1, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	4620      	mov	r0, r4
 8006dee:	f7fa f874 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8006dfc:	2300      	movs	r3, #0
	  if (size() > 0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00c      	beq.n	8006e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8006e02:	2300      	movs	r3, #0
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	68b8      	ldr	r0, [r7, #8]
 8006e08:	f000 fb0d 	bl	8007426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	f107 031c 	add.w	r3, r7, #28
 8006e12:	4619      	mov	r1, r3
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f7fb f847 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006e1a:	e0e5      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	68b9      	ldr	r1, [r7, #8]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fb17 	bl	8007456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006e28:	e0de      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8006e2a:	68bc      	ldr	r4, [r7, #8]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681d      	ldr	r5, [r3, #0]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fb03 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4620      	mov	r0, r4
 8006e42:	f7fa f84a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d059      	beq.n	8006f00 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006e50:	69bc      	ldr	r4, [r7, #24]
 8006e52:	68b8      	ldr	r0, [r7, #8]
 8006e54:	f000 fb89 	bl	800756a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	bf0c      	ite	eq
 8006e60:	2301      	moveq	r3, #1
 8006e62:	2300      	movne	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8006e6a:	68b8      	ldr	r0, [r7, #8]
 8006e6c:	f000 fb7d 	bl	800756a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e70:	4604      	mov	r4, r0
 8006e72:	68b8      	ldr	r0, [r7, #8]
 8006e74:	f000 fb79 	bl	800756a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f7fb f8be 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006e84:	e0b0      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8006e86:	68bc      	ldr	r4, [r7, #8]
 8006e88:	f107 0314 	add.w	r3, r7, #20
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fb78 	bl	8007582 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
 8006e92:	4603      	mov	r3, r0
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fad1 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	6819      	ldr	r1, [r3, #0]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f7fa f817 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01f      	beq.n	8006ef2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff fe04 	bl	8006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bf0c      	ite	eq
 8006ec0:	2301      	moveq	r3, #1
 8006ec2:	2300      	movne	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	623b      	str	r3, [r7, #32]
 8006ece:	f107 0214 	add.w	r2, r7, #20
 8006ed2:	f107 0320 	add.w	r3, r7, #32
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7fa ffe5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006ede:	e083      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8006ee0:	f107 0218 	add.w	r2, r7, #24
 8006ee4:	f107 0318 	add.w	r3, r7, #24
 8006ee8:	4619      	mov	r1, r3
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7fb f888 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006ef0:	e07a      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 faac 	bl	8007456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006efe:	e073      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8006f00:	68bc      	ldr	r4, [r7, #8]
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fa9a 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	6819      	ldr	r1, [r3, #0]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	4620      	mov	r0, r4
 8006f16:	f7f9 ffe0 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d059      	beq.n	8006fd4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8006f24:	69bc      	ldr	r4, [r7, #24]
 8006f26:	68b8      	ldr	r0, [r7, #8]
 8006f28:	f000 fa7d 	bl	8007426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	429c      	cmp	r4, r3
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00c      	beq.n	8006f58 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8006f3e:	2300      	movs	r3, #0
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
 8006f42:	68b8      	ldr	r0, [r7, #8]
 8006f44:	f000 fa6f 	bl	8007426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7fa ffa9 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f56:	e047      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006f58:	68bc      	ldr	r4, [r7, #8]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	681d      	ldr	r5, [r3, #0]
 8006f5e:	f107 0310 	add.w	r3, r7, #16
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fb1e 	bl	80075a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 fa66 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f72:	4603      	mov	r3, r0
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	4629      	mov	r1, r5
 8006f7a:	4620      	mov	r0, r4
 8006f7c:	f7f9 ffad 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01f      	beq.n	8006fc6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7ff fd9a 	bl	8006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bf0c      	ite	eq
 8006f94:	2301      	moveq	r3, #1
 8006f96:	2300      	movne	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa2:	f107 0218 	add.w	r2, r7, #24
 8006fa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006faa:	4619      	mov	r1, r3
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7fa ff7b 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006fb2:	e019      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8006fb4:	f107 0210 	add.w	r2, r7, #16
 8006fb8:	f107 0310 	add.w	r3, r7, #16
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f7fb f81e 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006fc4:	e010      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	68b9      	ldr	r1, [r7, #8]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fa42 	bl	8007456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006fd2:	e009      	b.n	8006fe8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006fdc:	f107 0318 	add.w	r3, r7, #24
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f7fb f847 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	3730      	adds	r7, #48	; 0x30
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bdb0      	pop	{r4, r5, r7, pc}

08006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fae4 	bl	80075c6 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006ffe:	4602      	mov	r2, r0
 8007000:	f107 030c 	add.w	r3, r7, #12
 8007004:	4611      	mov	r1, r2
 8007006:	4618      	mov	r0, r3
 8007008:	f000 faeb 	bl	80075e2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>
 800700c:	4603      	mov	r3, r0
      }
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007016:	b5b0      	push	{r4, r5, r7, lr}
 8007018:	b086      	sub	sp, #24
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
 8007022:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d119      	bne.n	800705e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f955 	bl	80072da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8007030:	4602      	mov	r2, r0
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4293      	cmp	r3, r2
 8007036:	d012      	beq.n	800705e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8007038:	68fc      	ldr	r4, [r7, #12]
 800703a:	6838      	ldr	r0, [r7, #0]
 800703c:	f7ff ffd8 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007040:	4603      	mov	r3, r0
 8007042:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f9fa 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800704a:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	4629      	mov	r1, r5
 8007052:	4620      	mov	r0, r4
 8007054:	f7f9 ff41 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8007062:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8007064:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800706a:	7df8      	ldrb	r0, [r7, #23]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	f019 fabe 	bl	80205f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800707e:	f107 0310 	add.w	r3, r7, #16
 8007082:	6839      	ldr	r1, [r7, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f000 f805 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800708a:	693b      	ldr	r3, [r7, #16]
    }
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bdb0      	pop	{r4, r5, r7, pc}

08007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	601a      	str	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4618      	mov	r0, r3
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80070b2:	b590      	push	{r4, r7, lr}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 faab 	bl	8007618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80070c2:	4604      	mov	r4, r0
 80070c4:	6838      	ldr	r0, [r7, #0]
 80070c6:	f7ff fe33 	bl	8006d30 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 80070ca:	4603      	mov	r3, r0
 80070cc:	4619      	mov	r1, r3
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 faad 	bl	800762e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>
      }
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd90      	pop	{r4, r7, pc}

080070dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 fa96 	bl	8007618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2201      	movs	r2, #1
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 faa7 	bl	8007646 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>
 80070f8:	bf00      	nop
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4618      	mov	r0, r3
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8007120:	b590      	push	{r4, r7, lr}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 faa9 	bl	8007684 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007132:	4604      	mov	r4, r0
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fab6 	bl	80076a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 800713a:	4603      	mov	r3, r0
 800713c:	1ae2      	subs	r2, r4, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	429a      	cmp	r2, r3
 8007142:	bf34      	ite	cc
 8007144:	2301      	movcc	r3, #1
 8007146:	2300      	movcs	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f019 faac 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 faa6 	bl	80076a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 800715a:	4604      	mov	r4, r0
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 faa2 	bl	80076a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007162:	4603      	mov	r3, r0
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	f107 0208 	add.w	r2, r7, #8
 800716a:	f107 0310 	add.w	r3, r7, #16
 800716e:	4611      	mov	r1, r2
 8007170:	4618      	mov	r0, r3
 8007172:	f7fb fb6e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8007176:	4603      	mov	r3, r0
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4423      	add	r3, r4
 800717c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 fa91 	bl	80076a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007184:	4602      	mov	r2, r0
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	4293      	cmp	r3, r2
 800718a:	d306      	bcc.n	800719a <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 fa79 	bl	8007684 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007192:	4602      	mov	r2, r0
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	4293      	cmp	r3, r2
 8007198:	d904      	bls.n	80071a4 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x84>
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 fa72 	bl	8007684 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 80071a0:	4603      	mov	r3, r0
 80071a2:	e000      	b.n	80071a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x86>
 80071a4:	697b      	ldr	r3, [r7, #20]
      }
 80071a6:	4618      	mov	r0, r3
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd90      	pop	{r4, r7, pc}

080071ae <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b084      	sub	sp, #16
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	f107 030c 	add.w	r3, r7, #12
 80071bc:	4611      	mov	r1, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff ff9e 	bl	8007100 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80071ce:	b590      	push	{r4, r7, lr}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f835 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 80071de:	4603      	mov	r3, r0
 80071e0:	681c      	ldr	r4, [r3, #0]
 80071e2:	6838      	ldr	r0, [r7, #0]
 80071e4:	f000 f830 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 80071e8:	4603      	mov	r3, r0
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	1ae3      	subs	r3, r4, r3
 80071ee:	109b      	asrs	r3, r3, #2
 80071f0:	4618      	mov	r0, r3
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd90      	pop	{r4, r7, pc}

080071f8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d006      	beq.n	8007216 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x1e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fa5a 	bl	80076c6 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>
 8007212:	4603      	mov	r3, r0
 8007214:	e000      	b.n	8007218 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x20>
 8007216:	2300      	movs	r3, #0
      }
 8007218:	4618      	mov	r0, r3
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b087      	sub	sp, #28
 8007224:	af02      	add	r7, sp, #8
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800722e:	f88d 4000 	strb.w	r4, [sp]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	68b9      	ldr	r1, [r7, #8]
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 fa64 	bl	8007706 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800723e:	4603      	mov	r3, r0
      }
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	bd90      	pop	{r4, r7, pc}

08007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4618      	mov	r0, r3
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 fa5b 	bl	800773e <_ZSt8_DestroyIPP9DigitalInEvT_S3_>
    }
 8007288:	bf00      	nop
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	425b      	negs	r3, r3
 80072a4:	4413      	add	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	f107 020c 	add.w	r2, r7, #12
 80072ac:	f107 0308 	add.w	r3, r7, #8
 80072b0:	4611      	mov	r1, r2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff ff24 	bl	8007100 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3304      	adds	r3, #4
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80072f2:	b590      	push	{r4, r7, lr}
 80072f4:	b087      	sub	sp, #28
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
 80072fe:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01d      	beq.n	8007342 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8007306:	68fc      	ldr	r4, [r7, #12]
 8007308:	68b8      	ldr	r0, [r7, #8]
 800730a:	f7ff fe71 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800730e:	4603      	mov	r3, r0
 8007310:	6819      	ldr	r1, [r3, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	461a      	mov	r2, r3
 8007318:	4620      	mov	r0, r4
 800731a:	f7f9 fdde 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800731e:	4603      	mov	r3, r0
 8007320:	f083 0301 	eor.w	r3, r3, #1
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d006      	beq.n	8007338 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	607b      	str	r3, [r7, #4]
 800732e:	68b8      	ldr	r0, [r7, #8]
 8007330:	f7ff fbd3 	bl	8006ada <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007334:	60b8      	str	r0, [r7, #8]
 8007336:	e7e3      	b.n	8007300 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8007338:	68b8      	ldr	r0, [r7, #8]
 800733a:	f7ff fbc2 	bl	8006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800733e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8007340:	e7de      	b.n	8007300 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8007342:	f107 0314 	add.w	r3, r7, #20
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff fea3 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800734e:	697b      	ldr	r3, [r7, #20]
    }
 8007350:	4618      	mov	r0, r3
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	bd90      	pop	{r4, r7, pc}

08007358 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() noexcept
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa02 	bl	800776a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007366:	4603      	mov	r3, r0
 8007368:	4618      	mov	r0, r3
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f94d 	bl	8007618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800737e:	4603      	mov	r3, r0
 8007380:	2101      	movs	r1, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f000 f9fc 	bl	8007780 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>
 8007388:	4603      	mov	r3, r0
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8007392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	4619      	mov	r1, r3
 80073a6:	2018      	movs	r0, #24
 80073a8:	f7f8 ffc2 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f933 	bl	8007618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80073b2:	4604      	mov	r4, r0
 80073b4:	68b8      	ldr	r0, [r7, #8]
 80073b6:	f7ff fcbb 	bl	8006d30 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 80073ba:	4605      	mov	r5, r0
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7f9 ff52 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80073c2:	4606      	mov	r6, r0
 80073c4:	6838      	ldr	r0, [r7, #0]
 80073c6:	f7fa fa3c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80073ca:	4680      	mov	r8, r0
 80073cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ce:	f7f9 ff60 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80073d2:	4603      	mov	r3, r0
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	4643      	mov	r3, r8
 80073d8:	4632      	mov	r2, r6
 80073da:	4629      	mov	r1, r5
 80073dc:	4620      	mov	r0, r4
 80073de:	f000 fa1c 	bl	800781a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 80073e2:	bf00      	nop
 80073e4:	3710      	adds	r7, #16
 80073e6:	46bd      	mov	sp, r7
 80073e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073ec <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	f107 030c 	add.w	r3, r7, #12
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fe48 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3310      	adds	r3, #16
 8007432:	4618      	mov	r0, r3
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800743e:	b580      	push	{r7, lr}
 8007440:	b082      	sub	sp, #8
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fdd2 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800744c:	4603      	mov	r3, r0
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007456:	b5b0      	push	{r4, r5, r7, lr}
 8007458:	b08a      	sub	sp, #40	; 0x28
 800745a:	af00      	add	r7, sp, #0
 800745c:	60f8      	str	r0, [r7, #12]
 800745e:	60b9      	str	r1, [r7, #8]
 8007460:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8007462:	68b8      	ldr	r0, [r7, #8]
 8007464:	f7ff fa16 	bl	8006894 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007468:	4603      	mov	r3, r0
 800746a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800746c:	68b8      	ldr	r0, [r7, #8]
 800746e:	f7ff ff34 	bl	80072da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8007472:	4603      	mov	r3, r0
 8007474:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8007476:	2301      	movs	r3, #1
 8007478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d023      	beq.n	80074ca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8007486:	68bc      	ldr	r4, [r7, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681d      	ldr	r5, [r3, #0]
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	4618      	mov	r0, r3
 8007490:	f7ff fdae 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007494:	4603      	mov	r3, r0
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	461a      	mov	r2, r3
 800749a:	4629      	mov	r1, r5
 800749c:	4620      	mov	r0, r4
 800749e:	f7f9 fd1c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80074a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7ff fb11 	bl	8006ada <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80074b8:	4603      	mov	r3, r0
 80074ba:	e004      	b.n	80074c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff faff 	bl	8006ac2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80074c4:	4603      	mov	r3, r0
 80074c6:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80074c8:	e7d8      	b.n	800747c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	f107 0310 	add.w	r3, r7, #16
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7ff fdde 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80074d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01d      	beq.n	800751c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f000 f9b6 	bl	8007852 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 80074e6:	4603      	mov	r3, r0
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	f107 021c 	add.w	r2, r7, #28
 80074ee:	f107 0310 	add.w	r3, r7, #16
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fa32 	bl	800695e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8007500:	f107 0214 	add.w	r2, r7, #20
 8007504:	f107 0318 	add.w	r3, r7, #24
 8007508:	4619      	mov	r1, r3
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f9b2 	bl	8007874 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 8007510:	e027      	b.n	8007562 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8007512:	f107 0310 	add.w	r3, r7, #16
 8007516:	4618      	mov	r0, r3
 8007518:	f000 f833 	bl	8007582 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800751c:	68bc      	ldr	r4, [r7, #8]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff ff8c 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8007526:	4603      	mov	r3, r0
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	4620      	mov	r0, r4
 8007532:	f7f9 fcd2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 800753c:	f107 0214 	add.w	r2, r7, #20
 8007540:	f107 0318 	add.w	r3, r7, #24
 8007544:	4619      	mov	r1, r3
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 f994 	bl	8007874 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 800754c:	e009      	b.n	8007562 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800754e:	2300      	movs	r3, #0
 8007550:	623b      	str	r3, [r7, #32]
 8007552:	f107 0220 	add.w	r2, r7, #32
 8007556:	f107 0310 	add.w	r3, r7, #16
 800755a:	4619      	mov	r1, r3
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f7fa fd8a 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	3728      	adds	r7, #40	; 0x28
 8007566:	46bd      	mov	sp, r7
 8007568:	bdb0      	pop	{r4, r5, r7, pc}

0800756a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800756a:	b480      	push	{r7}
 800756c:	b083      	sub	sp, #12
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	330c      	adds	r3, #12
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f019 f82c 	bl	80205ec <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8007594:	4602      	mov	r2, r0
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	601a      	str	r2, [r3, #0]
	return *this;
 800759a:	687b      	ldr	r3, [r7, #4]
      }
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f019 f819 	bl	80205e8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80075b6:	4602      	mov	r2, r0
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	601a      	str	r2, [r3, #0]
	return *this;
 80075bc:	687b      	ldr	r3, [r7, #4]
      }
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr() const
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3310      	adds	r3, #16
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 f967 	bl	80078a6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 80075d8:	4603      	mov	r3, r0
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>:
      operator()(const _Pair& __x) const
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b084      	sub	sp, #16
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4619      	mov	r1, r3
 800760c:	68b8      	ldr	r0, [r7, #8]
 800760e:	f018 ff81 	bl	8020514 <_ZdlPvj>
      }
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4618      	mov	r0, r3
 8007624:	370c      	adds	r7, #12
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr

0800762e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800762e:	b580      	push	{r7, lr}
 8007630:	b082      	sub	sp, #8
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8007638:	6838      	ldr	r0, [r7, #0]
 800763a:	f000 f940 	bl	80078be <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>
	}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007646:	b580      	push	{r7, lr}
 8007648:	b088      	sub	sp, #32
 800764a:	af00      	add	r7, sp, #0
 800764c:	60f8      	str	r0, [r7, #12]
 800764e:	60b9      	str	r1, [r7, #8]
 8007650:	607a      	str	r2, [r7, #4]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	61fb      	str	r3, [r7, #28]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800765e:	f7f8 fe5f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8007668:	69b8      	ldr	r0, [r7, #24]
 800766a:	f018 ff51 	bl	8020510 <_ZdlPv>
	    return;
 800766e:	e005      	b.n	800767c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	69b9      	ldr	r1, [r7, #24]
 8007674:	69f8      	ldr	r0, [r7, #28]
 8007676:	f000 f9e1 	bl	8007a3c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800767a:	bf00      	nop
 800767c:	bf00      	nop
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f945 	bl	800791e <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007694:	4603      	mov	r3, r0
 8007696:	4618      	mov	r0, r3
 8007698:	f000 f927 	bl	80078ea <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>
 800769c:	4603      	mov	r3, r0
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	109b      	asrs	r3, r3, #2
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	6039      	str	r1, [r7, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80076d8:	f7f8 fe22 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d006      	beq.n	80076f0 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4618      	mov	r0, r3
 80076e8:	f018 ff16 	bl	8020518 <_Znwj>
 80076ec:	4603      	mov	r3, r0
 80076ee:	e006      	b.n	80076fe <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80076f0:	2200      	movs	r2, #0
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 f9b3 	bl	8007a60 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>
 80076fa:	4603      	mov	r3, r0
 80076fc:	bf00      	nop
      { return __a.allocate(__n); }
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	607a      	str	r2, [r7, #4]
 8007712:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	68b9      	ldr	r1, [r7, #8]
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 f90a 	bl	8007934 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>
 8007720:	4603      	mov	r3, r0
      }
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <_ZSt10destroy_atIP9DigitalInEvPT_>:
    destroy_at(_Tp* __location)
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
    }
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <_ZSt8_DestroyIPP9DigitalInEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8007748:	f7f8 fdea 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d004      	beq.n	800775c <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f90a 	bl	800796e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>
 800775a:	e003      	b.n	8007764 <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x26>
	__destroy(__first, __last);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f91d 	bl	800799e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>
    }
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() noexcept
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007792:	f7f8 fdc5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d009      	beq.n	80077b0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	4613      	mov	r3, r2
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	4413      	add	r3, r2
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	4618      	mov	r0, r3
 80077a8:	f018 feb6 	bl	8020518 <_Znwj>
 80077ac:	4603      	mov	r3, r0
 80077ae:	e006      	b.n	80077be <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80077b0:	2200      	movs	r2, #0
 80077b2:	68b9      	ldr	r1, [r7, #8]
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 f9b1 	bl	8007b1c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>
 80077ba:	4603      	mov	r3, r0
 80077bc:	bf00      	nop
      { return __a.allocate(__n); }
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80077c6:	b5b0      	push	{r4, r5, r7, lr}
 80077c8:	b088      	sub	sp, #32
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	607a      	str	r2, [r7, #4]
 80077d2:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80077d4:	68b8      	ldr	r0, [r7, #8]
 80077d6:	f7f9 fd46 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fa f831 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077e0:	4602      	mov	r2, r0
 80077e2:	f107 0318 	add.w	r3, r7, #24
 80077e6:	4611      	mov	r1, r2
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7fb f8c6 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80077ee:	f107 0418 	add.w	r4, r7, #24
 80077f2:	6838      	ldr	r0, [r7, #0]
 80077f4:	f7f9 fd4d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4619      	mov	r1, r3
 80077fc:	2008      	movs	r0, #8
 80077fe:	f7f8 fd97 	bl	8000330 <_ZnwjPv>
 8007802:	4605      	mov	r5, r0
 8007804:	7f3b      	ldrb	r3, [r7, #28]
 8007806:	4622      	mov	r2, r4
 8007808:	7d39      	ldrb	r1, [r7, #20]
 800780a:	4628      	mov	r0, r5
 800780c:	f000 f8ec 	bl	80079e8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8007810:	462b      	mov	r3, r5
 8007812:	4618      	mov	r0, r3
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bdb0      	pop	{r4, r5, r7, pc}

0800781a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800781a:	b5b0      	push	{r4, r5, r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f7f9 fd1c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800782e:	4604      	mov	r4, r0
 8007830:	6838      	ldr	r0, [r7, #0]
 8007832:	f7fa f806 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8007836:	4605      	mov	r5, r0
 8007838:	6a38      	ldr	r0, [r7, #32]
 800783a:	f7f9 fd2a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800783e:	4603      	mov	r3, r0
 8007840:	462a      	mov	r2, r5
 8007842:	4621      	mov	r1, r4
 8007844:	68b8      	ldr	r0, [r7, #8]
 8007846:	f7ff ffbe 	bl	80077c6 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bdb0      	pop	{r4, r5, r7, pc}

08007852 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68da      	ldr	r2, [r3, #12]
 800785e:	f107 030c 	add.w	r3, r7, #12
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fc15 	bl	8007094 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8007880:	68b8      	ldr	r0, [r7, #8]
 8007882:	f000 f8c5 	bl	8007a10 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8007886:	4603      	mov	r3, r0
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7fa ff8d 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8007894:	4603      	mov	r3, r0
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	605a      	str	r2, [r3, #4]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b082      	sub	sp, #8
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8b9 	bl	8007a26 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 80078b4:	4603      	mov	r3, r0
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>:
    destroy_at(_Tp* __location)
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
    }
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80078da:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80078de:	4618      	mov	r0, r3
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80078f2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80078f6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff ffea 	bl	80078d2 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>
 80078fe:	4603      	mov	r3, r0
 8007900:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8007902:	f107 0208 	add.w	r2, r7, #8
 8007906:	f107 030c 	add.w	r3, r7, #12
 800790a:	4611      	mov	r1, r2
 800790c:	4618      	mov	r0, r3
 800790e:	f7fb fa6a 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8007912:	4603      	mov	r3, r0
 8007914:	681b      	ldr	r3, [r3, #0]
      }
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8007934:	b5b0      	push	{r4, r5, r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f8ab 	bl	8007a9e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007948:	4604      	mov	r4, r0
 800794a:	68b8      	ldr	r0, [r7, #8]
 800794c:	f000 f8a7 	bl	8007a9e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007950:	4605      	mov	r5, r0
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f8a3 	bl	8007a9e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007958:	4602      	mov	r2, r0
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	4629      	mov	r1, r5
 800795e:	4620      	mov	r0, r4
 8007960:	f000 f8a8 	bl	8007ab4 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007964:	4603      	mov	r3, r0
    }
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bdb0      	pop	{r4, r5, r7, pc}

0800796e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d00a      	beq.n	8007996 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f8b5 	bl	8007af0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>
 8007986:	4603      	mov	r3, r0
 8007988:	4618      	mov	r0, r3
 800798a:	f000 f8bc 	bl	8007b06 <_ZSt8_DestroyIP9DigitalInEvPT_>
	  for (; __first != __last; ++__first)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	3304      	adds	r3, #4
 8007992:	607b      	str	r3, [r7, #4]
 8007994:	e7f0      	b.n	8007978 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0xa>
	}
 8007996:	bf00      	nop
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80079c2:	68b8      	ldr	r0, [r7, #8]
 80079c4:	f7fb fabb 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80079c8:	4603      	mov	r3, r0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fb faac 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 80079d0:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	605a      	str	r2, [r3, #4]
      { }
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 80079e8:	b5b0      	push	{r4, r5, r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	7239      	strb	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80079f6:	463a      	mov	r2, r7
 80079f8:	f88d 4000 	strb.w	r4, [sp]
 80079fc:	462b      	mov	r3, r5
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7ff ffd7 	bl	80079b4 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bdb0      	pop	{r4, r5, r7, pc}

08007a10 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() const noexcept
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4413      	add	r3, r2
 8007a50:	00db      	lsls	r3, r3, #3
 8007a52:	4619      	mov	r1, r3
 8007a54:	68b8      	ldr	r0, [r7, #8]
 8007a56:	f018 fd5d 	bl	8020514 <_ZdlPvj>
      }
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f877 	bl	8007b60 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>
 8007a72:	4602      	mov	r2, r0
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4293      	cmp	r3, r2
 8007a78:	bf8c      	ite	hi
 8007a7a:	2301      	movhi	r3, #1
 8007a7c:	2300      	movls	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d001      	beq.n	8007a88 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007a84:	f018 fe0f 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f018 fd43 	bl	8020518 <_Znwj>
 8007a92:	4603      	mov	r3, r0
 8007a94:	bf00      	nop
      }
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <_ZSt12__niter_baseIPP9DigitalInET_S3_>:
    __niter_base(_Iterator __it)
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	109b      	asrs	r3, r3, #2
 8007aca:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	dd06      	ble.n	8007ae0 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	68f9      	ldr	r1, [r7, #12]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f018 fe56 	bl	802078c <memmove>
      return __result + __count;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	4413      	add	r3, r2
    }
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <_ZSt8_DestroyIP9DigitalInEvPT_>:
    _Destroy(_Tp* __pointer)
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff fe0b 	bl	800772a <_ZSt10destroy_atIP9DigitalInEvPT_>
    }
 8007b14:	bf00      	nop
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f825 	bl	8007b78 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	4293      	cmp	r3, r2
 8007b34:	bf8c      	ite	hi
 8007b36:	2301      	movhi	r3, #1
 8007b38:	2300      	movls	r3, #0
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007b40:	f018 fdb1 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	4413      	add	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f018 fce2 	bl	8020518 <_Znwj>
 8007b54:	4603      	mov	r3, r0
 8007b56:	bf00      	nop
      }
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b68:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b80:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv+0x18>)
      }
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	05555555 	.word	0x05555555

08007b94 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7fe fd96 	bl	80066d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <_Z41__static_initialization_and_destruction_0ii>:
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d10a      	bne.n	8007bd6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d105      	bne.n	8007bd6 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007bca:	480c      	ldr	r0, [pc, #48]	; (8007bfc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007bcc:	f7fe fcb0 	bl	8006530 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;
 8007bd0:	480b      	ldr	r0, [pc, #44]	; (8007c00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007bd2:	f7fe fcd3 	bl	800657c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d105      	bne.n	8007bf2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007be6:	4806      	ldr	r0, [pc, #24]	; (8007c00 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007be8:	f7ff ffd4 	bl	8007b94 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007bec:	4803      	ldr	r0, [pc, #12]	; (8007bfc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007bee:	f000 f809 	bl	8007c04 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>
}
 8007bf2:	bf00      	nop
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	24000110 	.word	0x24000110
 8007c00:	2400011c 	.word	0x2400011c

08007c04 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007c04:	b5b0      	push	{r4, r5, r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681c      	ldr	r4, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff fb21 	bl	800725e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007c1c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007c1e:	461a      	mov	r2, r3
 8007c20:	4629      	mov	r1, r5
 8007c22:	4620      	mov	r0, r4
 8007c24:	f7ff fb26 	bl	8007274 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>
      }
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fd17 	bl	800665e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bdb0      	pop	{r4, r5, r7, pc}

08007c3a <_GLOBAL__sub_I__ZN9DigitalIn15all_digital_insE>:
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c42:	2001      	movs	r0, #1
 8007c44:	f7ff ffb4 	bl	8007bb0 <_Z41__static_initialization_and_destruction_0ii>
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <_GLOBAL__sub_D__ZN9DigitalIn15all_digital_insE>:
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c52:	2000      	movs	r0, #0
 8007c54:	f7ff ffac 	bl	8007bb0 <_Z41__static_initialization_and_destruction_0ii>
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f8b6 	bl	8007dd4 <_ZNSaIP10DigitalOutED1Ev>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 f899 	bl	8007db4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>:
      vector() = default;
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff ffeb 	bl	8007c72 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f8c9 	bl	8007e46 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b082      	sub	sp, #8
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 f8a7 	bl	8007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff ffeb 	bl	8007cbe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <_ZN10DigitalOutC1EP3Pin>:
#include <Mini-STLIB/DigitalOut.hpp>

vector<DigitalOut*> DigitalOut::all_digital_outs;
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;

DigitalOut::DigitalOut(Pin* pin) : pin(pin) {
 8007cf4:	b590      	push	{r4, r7, lr}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	605a      	str	r2, [r3, #4]
	DigitalOut::all_digital_outs.push_back(this);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	f107 030c 	add.w	r3, r7, #12
 8007d12:	4619      	mov	r1, r3
 8007d14:	4809      	ldr	r0, [pc, #36]	; (8007d3c <_ZN10DigitalOutC1EP3Pin+0x48>)
 8007d16:	f000 f8b6 	bl	8007e86 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>
	DigitalOut::pin_to_digital_out[pin] = this;
 8007d1a:	687c      	ldr	r4, [r7, #4]
 8007d1c:	463b      	mov	r3, r7
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4807      	ldr	r0, [pc, #28]	; (8007d40 <_ZN10DigitalOutC1EP3Pin+0x4c>)
 8007d22:	f000 f8c1 	bl	8007ea8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8007d26:	4603      	mov	r3, r0
 8007d28:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_OUTPUT;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	719a      	strb	r2, [r3, #6]
}
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd90      	pop	{r4, r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	24000134 	.word	0x24000134
 8007d40:	24000140 	.word	0x24000140

08007d44 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>:

void DigitalOut::set_to(DigitalOutState state){
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
	if(state == HIGH)
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d103      	bne.n	8007d5e <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x1a>
		turn_high();
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 f808 	bl	8007d6c <_ZN10DigitalOut9turn_highEv>
	else
		turn_low();
}
 8007d5c:	e002      	b.n	8007d64 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x20>
		turn_low();
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f816 	bl	8007d90 <_ZN10DigitalOut8turn_lowEv>
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <_ZN10DigitalOut9turn_highEv>:

void DigitalOut::turn_high(){
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	6818      	ldr	r0, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	889b      	ldrh	r3, [r3, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	4619      	mov	r1, r3
 8007d84:	f013 f878 	bl	801ae78 <HAL_GPIO_WritePin>
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <_ZN10DigitalOut8turn_lowEv>:

void DigitalOut::turn_low(){
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	889b      	ldrh	r3, [r3, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	4619      	mov	r1, r3
 8007da8:	f013 f866 	bl	801ae78 <HAL_GPIO_WritePin>
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f8d1 	bl	8007f64 <_ZNSaIP10DigitalOutEC1Ev>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 f8d9 	bl	8007f7c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <_ZNSaIP10DigitalOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b082      	sub	sp, #8
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689a      	ldr	r2, [r3, #8]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8007e02:	461a      	mov	r2, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f8cd 	bl	8007fa4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff ff24 	bl	8007c5a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8d0 	bl	8007fca <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7f8 fedb 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3304      	adds	r3, #4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7f8 fa86 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>:
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4618      	mov	r0, r3
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f8db 	bl	8008020 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f8b7 	bl	8007fe2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff ff15 	bl	8007ca6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007e90:	6838      	ldr	r0, [r7, #0]
 8007e92:	f000 f8d1 	bl	8008038 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>
 8007e96:	4603      	mov	r3, r0
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f8d7 	bl	800804e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8007ea8:	b590      	push	{r4, r7, lr}
 8007eaa:	b08b      	sub	sp, #44	; 0x2c
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f8fc 	bl	80080b2 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f906 	bl	80080d0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	f107 020c 	add.w	r2, r7, #12
 8007ecc:	f107 0308 	add.w	r3, r7, #8
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 f909 	bl	80080ea <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d114      	bne.n	8007f08 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 f917 	bl	8008112 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681c      	ldr	r4, [r3, #0]
 8007ee8:	f107 0308 	add.w	r3, r7, #8
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 f91d 	bl	800812c <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	f107 0310 	add.w	r3, r7, #16
 8007efa:	4621      	mov	r1, r4
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7f8 ffec 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01b      	beq.n	8007f4a <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007f12:	687c      	ldr	r4, [r7, #4]
 8007f14:	f107 0208 	add.w	r2, r7, #8
 8007f18:	f107 0314 	add.w	r3, r7, #20
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f912 	bl	8008148 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8007f24:	f107 0318 	add.w	r3, r7, #24
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7f8 ffe8 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007f30:	f107 0218 	add.w	r2, r7, #24
 8007f34:	f107 031c 	add.w	r3, r7, #28
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	4a08      	ldr	r2, [pc, #32]	; (8007f60 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8007f3e:	6979      	ldr	r1, [r7, #20]
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 f911 	bl	8008168 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8007f46:	4603      	mov	r3, r0
 8007f48:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8007f4a:	f107 0308 	add.w	r3, r7, #8
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f8ec 	bl	800812c <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007f54:	4603      	mov	r3, r0
 8007f56:	3304      	adds	r3, #4
      }
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3724      	adds	r7, #36	; 0x24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd90      	pop	{r4, r7, pc}
 8007f60:	08020c84 	.word	0x08020c84

08007f64 <_ZNSaIP10DigitalOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f939 	bl	80081e4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	605a      	str	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	609a      	str	r2, [r3, #8]
	{ }
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
	if (__p)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	68b9      	ldr	r1, [r7, #8]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 f91c 	bl	80081fa <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>
      }
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f930 	bl	8008238 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d012      	beq.n	8008018 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8007ff2:	6838      	ldr	r0, [r7, #0]
 8007ff4:	f000 f92b 	bl	800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff fff0 	bl	8007fe2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8008002:	6838      	ldr	r0, [r7, #0]
 8008004:	f000 f92f 	bl	8008266 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008008:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f936 	bl	800827e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008016:	e7e9      	b.n	8007fec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4618      	mov	r0, r3
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800804e:	b5b0      	push	{r4, r5, r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	429a      	cmp	r2, r3
 8008062:	d011      	beq.n	8008088 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008064:	687c      	ldr	r4, [r7, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685d      	ldr	r5, [r3, #4]
 800806a:	6838      	ldr	r0, [r7, #0]
 800806c:	f000 f918 	bl	80082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	4629      	mov	r1, r5
 8008076:	4620      	mov	r0, r4
 8008078:	f000 f932 	bl	80082e0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	1d1a      	adds	r2, r3, #4
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	605a      	str	r2, [r3, #4]
 8008086:	e00c      	b.n	80080a2 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f93b 	bl	8008304 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 800808e:	4604      	mov	r4, r0
 8008090:	6838      	ldr	r0, [r7, #0]
 8008092:	f000 f905 	bl	80082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008096:	4603      	mov	r3, r0
 8008098:	461a      	mov	r2, r3
 800809a:	4621      	mov	r1, r4
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 f943 	bl	8008328 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f9bc 	bl	8008420 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>
 80080a8:	4603      	mov	r3, r0
      }
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bdb0      	pop	{r4, r5, r7, pc}

080080b2 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b082      	sub	sp, #8
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f9c8 	bl	8008456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 80080c6:	4603      	mov	r3, r0
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 f9d2 	bl	8008484 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80080e0:	4603      	mov	r3, r0
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	4618      	mov	r0, r3
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8008112:	b590      	push	{r4, r7, lr}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	f000 f9c2 	bl	80084a6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8008122:	bf00      	nop
 8008124:	4620      	mov	r0, r4
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	bd90      	pop	{r4, r7, pc}

0800812c <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f9bf 	bl	80084bc <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 800813e:	4603      	mov	r3, r0
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008168:	b5b0      	push	{r4, r5, r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7f9 f875 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800817c:	4604      	mov	r4, r0
 800817e:	6838      	ldr	r0, [r7, #0]
 8008180:	f7f9 fb5f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008184:	4605      	mov	r5, r0
 8008186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008188:	f7f9 f883 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800818c:	4603      	mov	r3, r0
 800818e:	462a      	mov	r2, r5
 8008190:	4621      	mov	r1, r4
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 f9a0 	bl	80084d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8008198:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800819a:	69f8      	ldr	r0, [r7, #28]
 800819c:	f000 faee 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f107 0010 	add.w	r0, r7, #16
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	68f9      	ldr	r1, [r7, #12]
 80081aa:	f000 f9b8 	bl	800851e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d007      	beq.n	80081c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80081b4:	6939      	ldr	r1, [r7, #16]
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 faf1 	bl	80087a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 80081c0:	4603      	mov	r3, r0
 80081c2:	e00b      	b.n	80081dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 f859 	bl	800827e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	f107 0318 	add.w	r3, r7, #24
 80081d2:	4611      	mov	r1, r2
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fb23 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 80081da:	69bb      	ldr	r3, [r7, #24]
      }
 80081dc:	4618      	mov	r0, r3
 80081de:	3720      	adds	r7, #32
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bdb0      	pop	{r4, r5, r7, pc}

080081e4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b088      	sub	sp, #32
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	61fb      	str	r3, [r7, #28]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008212:	f7f8 f885 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800821c:	69b8      	ldr	r0, [r7, #24]
 800821e:	f018 f977 	bl	8020510 <_ZdlPv>
	    return;
 8008222:	e005      	b.n	8008230 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	69b9      	ldr	r1, [r7, #24]
 8008228:	69f8      	ldr	r0, [r7, #28]
 800822a:	f000 fdac 	bl	8008d86 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800822e:	bf00      	nop
 8008230:	bf00      	nop
 8008232:	3720      	adds	r7, #32
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4618      	mov	r0, r3
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	4618      	mov	r0, r3
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	4618      	mov	r0, r3
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fad7 	bl	800883e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fae8 	bl	8008868 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80082b6:	b590      	push	{r4, r7, lr}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80082c0:	6838      	ldr	r0, [r7, #0]
 80082c2:	f7ff ffed 	bl	80082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80082c6:	4603      	mov	r3, r0
 80082c8:	681c      	ldr	r4, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4619      	mov	r1, r3
 80082ce:	2004      	movs	r0, #4
 80082d0:	f7f8 f82e 	bl	8000330 <_ZnwjPv>
 80082d4:	4603      	mov	r3, r0
 80082d6:	601c      	str	r4, [r3, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd90      	pop	{r4, r7, pc}

080082e0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff ffd7 	bl	80082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80082f2:	4603      	mov	r3, r0
 80082f4:	4619      	mov	r1, r3
 80082f6:	68b8      	ldr	r0, [r7, #8]
 80082f8:	f7ff ffdd 	bl	80082b6 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	1d1a      	adds	r2, r3, #4
 8008310:	f107 030c 	add.w	r3, r7, #12
 8008314:	4611      	mov	r1, r2
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fab8 	bl	800888c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8008328:	b5b0      	push	{r4, r5, r7, lr}
 800832a:	b08c      	sub	sp, #48	; 0x30
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8008334:	4a39      	ldr	r2, [pc, #228]	; (800841c <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8008336:	2101      	movs	r1, #1
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 fab7 	bl	80088ac <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>
 800833e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 faf4 	bl	800893a <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>
 8008352:	4603      	mov	r3, r0
 8008354:	617b      	str	r3, [r7, #20]
 8008356:	f107 0214 	add.w	r2, r7, #20
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fafa 	bl	800895a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008366:	4603      	mov	r3, r0
 8008368:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fb08 	bl	8008984 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>
 8008374:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800837a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	18d5      	adds	r5, r2, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ff8b 	bl	80082a0 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 800838a:	4603      	mov	r3, r0
 800838c:	461a      	mov	r2, r3
 800838e:	4629      	mov	r1, r5
 8008390:	4620      	mov	r0, r4
 8008392:	f7ff ffa5 	bl	80082e0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008396:	2300      	movs	r3, #0
 8008398:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800839a:	f107 0308 	add.w	r3, r7, #8
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 fb18 	bl	80089d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 80083a4:	4603      	mov	r3, r0
 80083a6:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fb1d 	bl	80089ea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80083b0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	4621      	mov	r1, r4
 80083b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083b8:	f000 faf8 	bl	80089ac <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80083bc:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	3304      	adds	r3, #4
 80083c2:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80083c4:	f107 0308 	add.w	r3, r7, #8
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 fb03 	bl	80089d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 80083ce:	4603      	mov	r3, r0
 80083d0:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fb08 	bl	80089ea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80083da:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 fae3 	bl	80089ac <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80083e6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80083e8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80083f4:	461a      	mov	r2, r3
 80083f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083f8:	f7ff fdd4 	bl	8007fa4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	69fa      	ldr	r2, [r7, #28]
 800840e:	441a      	add	r2, r3
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	609a      	str	r2, [r3, #8]
    }
 8008414:	bf00      	nop
 8008416:	3730      	adds	r7, #48	; 0x30
 8008418:	46bd      	mov	sp, r7
 800841a:	bdb0      	pop	{r4, r5, r7, pc}
 800841c:	08020b94 	.word	0x08020b94

08008420 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff ff6b 	bl	8008304 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 800842e:	4603      	mov	r3, r0
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	2101      	movs	r1, #1
 8008438:	4618      	mov	r0, r3
 800843a:	f000 faef 	bl	8008a1c <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>
 800843e:	4603      	mov	r3, r0
 8008440:	60bb      	str	r3, [r7, #8]
 8008442:	f107 0308 	add.w	r3, r7, #8
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fb01 	bl	8008a4e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>
 800844c:	4603      	mov	r3, r0
      }
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8008456:	b590      	push	{r4, r7, lr}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7ff fddd 	bl	8008020 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008466:	4604      	mov	r4, r0
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 fafc 	bl	8008a66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800846e:	4602      	mov	r2, r0
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	4621      	mov	r1, r4
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fb02 	bl	8008a7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800847a:	4603      	mov	r3, r0
 800847c:	4618      	mov	r0, r3
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	bd90      	pop	{r4, r7, pc}

08008484 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	1d1a      	adds	r2, r3, #4
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	4611      	mov	r1, r2
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f9c2 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80084ae:	bf00      	nop
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr()
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3310      	adds	r3, #16
 80084c8:	4618      	mov	r0, r3
 80084ca:	f000 fb0b 	bl	8008ae4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 80084ce:	4603      	mov	r3, r0
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80084d8:	b5b0      	push	{r4, r5, r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 fb08 	bl	8008afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 80084ec:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80084ee:	68b8      	ldr	r0, [r7, #8]
 80084f0:	f7f8 feb9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80084f4:	4604      	mov	r4, r0
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7f9 f9a3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80084fc:	4605      	mov	r5, r0
 80084fe:	6838      	ldr	r0, [r7, #0]
 8008500:	f7f8 fec7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008504:	4603      	mov	r3, r0
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	462b      	mov	r3, r5
 800850a:	4622      	mov	r2, r4
 800850c:	6979      	ldr	r1, [r7, #20]
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fb05 	bl	8008b1e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8008514:	697b      	ldr	r3, [r7, #20]
	}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bdb0      	pop	{r4, r5, r7, pc}

0800851e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800851e:	b5b0      	push	{r4, r5, r7, lr}
 8008520:	b08c      	sub	sp, #48	; 0x30
 8008522:	af00      	add	r7, sp, #0
 8008524:	60f8      	str	r0, [r7, #12]
 8008526:	60b9      	str	r1, [r7, #8]
 8008528:	607a      	str	r2, [r7, #4]
 800852a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800852c:	1d3b      	adds	r3, r7, #4
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fb22 	bl	8008b78 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>
 8008534:	4603      	mov	r3, r0
 8008536:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8008538:	69bc      	ldr	r4, [r7, #24]
 800853a:	68b8      	ldr	r0, [r7, #8]
 800853c:	f000 fa93 	bl	8008a66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008540:	4603      	mov	r3, r0
 8008542:	429c      	cmp	r4, r3
 8008544:	bf0c      	ite	eq
 8008546:	2301      	moveq	r3, #1
 8008548:	2300      	movne	r3, #0
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d032      	beq.n	80085b6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8008550:	68b8      	ldr	r0, [r7, #8]
 8008552:	f000 fb22 	bl	8008b9a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8008556:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8008558:	2b00      	cmp	r3, #0
 800855a:	d015      	beq.n	8008588 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800855c:	68bc      	ldr	r4, [r7, #8]
 800855e:	68b8      	ldr	r0, [r7, #8]
 8008560:	f000 fb27 	bl	8008bb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008564:	4603      	mov	r3, r0
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fb2e 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800856e:	4603      	mov	r3, r0
 8008570:	6819      	ldr	r1, [r3, #0]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	4620      	mov	r0, r4
 800857a:	f7f8 fcae 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d001      	beq.n	8008588 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8008584:	2301      	movs	r3, #1
 8008586:	e000      	b.n	800858a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8008588:	2300      	movs	r3, #0
	  if (size() > 0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00c      	beq.n	80085a8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800858e:	2300      	movs	r3, #0
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	68b8      	ldr	r0, [r7, #8]
 8008594:	f000 fb0d 	bl	8008bb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008598:	4602      	mov	r2, r0
 800859a:	f107 031c 	add.w	r3, r7, #28
 800859e:	4619      	mov	r1, r3
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f7f9 fc81 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80085a6:	e0e5      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fb17 	bl	8008be2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 80085b4:	e0de      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80085b6:	68bc      	ldr	r4, [r7, #8]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	681d      	ldr	r5, [r3, #0]
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fb03 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80085c4:	4603      	mov	r3, r0
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	4629      	mov	r1, r5
 80085cc:	4620      	mov	r0, r4
 80085ce:	f7f8 fc84 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d059      	beq.n	800868c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80085dc:	69bc      	ldr	r4, [r7, #24]
 80085de:	68b8      	ldr	r0, [r7, #8]
 80085e0:	f000 fb89 	bl	8008cf6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085e4:	4603      	mov	r3, r0
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	429c      	cmp	r4, r3
 80085ea:	bf0c      	ite	eq
 80085ec:	2301      	moveq	r3, #1
 80085ee:	2300      	movne	r3, #0
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00d      	beq.n	8008612 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80085f6:	68b8      	ldr	r0, [r7, #8]
 80085f8:	f000 fb7d 	bl	8008cf6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085fc:	4604      	mov	r4, r0
 80085fe:	68b8      	ldr	r0, [r7, #8]
 8008600:	f000 fb79 	bl	8008cf6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8008604:	4603      	mov	r3, r0
 8008606:	461a      	mov	r2, r3
 8008608:	4621      	mov	r1, r4
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7f9 fcf8 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008610:	e0b0      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8008612:	68bc      	ldr	r4, [r7, #8]
 8008614:	f107 0314 	add.w	r3, r7, #20
 8008618:	4618      	mov	r0, r3
 800861a:	f000 fb78 	bl	8008d0e <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
 800861e:	4603      	mov	r3, r0
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4618      	mov	r0, r3
 8008624:	f000 fad1 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008628:	4603      	mov	r3, r0
 800862a:	6819      	ldr	r1, [r3, #0]
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	4620      	mov	r0, r4
 8008634:	f7f8 fc51 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01f      	beq.n	800867e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	4618      	mov	r0, r3
 8008642:	f7ff fe04 	bl	800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	bf0c      	ite	eq
 800864c:	2301      	moveq	r3, #1
 800864e:	2300      	movne	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8008656:	2300      	movs	r3, #0
 8008658:	623b      	str	r3, [r7, #32]
 800865a:	f107 0214 	add.w	r2, r7, #20
 800865e:	f107 0320 	add.w	r3, r7, #32
 8008662:	4619      	mov	r1, r3
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f7f9 fc1f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800866a:	e083      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800866c:	f107 0218 	add.w	r2, r7, #24
 8008670:	f107 0318 	add.w	r3, r7, #24
 8008674:	4619      	mov	r1, r3
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f7f9 fcc2 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800867c:	e07a      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 faac 	bl	8008be2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800868a:	e073      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800868c:	68bc      	ldr	r4, [r7, #8]
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fa9a 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008696:	4603      	mov	r3, r0
 8008698:	6819      	ldr	r1, [r3, #0]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	4620      	mov	r0, r4
 80086a2:	f7f8 fc1a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d059      	beq.n	8008760 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80086b0:	69bc      	ldr	r4, [r7, #24]
 80086b2:	68b8      	ldr	r0, [r7, #8]
 80086b4:	f000 fa7d 	bl	8008bb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80086b8:	4603      	mov	r3, r0
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	429c      	cmp	r4, r3
 80086be:	bf0c      	ite	eq
 80086c0:	2301      	moveq	r3, #1
 80086c2:	2300      	movne	r3, #0
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00c      	beq.n	80086e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 80086ca:	2300      	movs	r3, #0
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
 80086ce:	68b8      	ldr	r0, [r7, #8]
 80086d0:	f000 fa6f 	bl	8008bb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80086d4:	4602      	mov	r2, r0
 80086d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086da:	4619      	mov	r1, r3
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f7f9 fbe3 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086e2:	e047      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80086e4:	68bc      	ldr	r4, [r7, #8]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	681d      	ldr	r5, [r3, #0]
 80086ea:	f107 0310 	add.w	r3, r7, #16
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fb1e 	bl	8008d30 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>
 80086f4:	4603      	mov	r3, r0
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fa66 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80086fe:	4603      	mov	r3, r0
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	4629      	mov	r1, r5
 8008706:	4620      	mov	r0, r4
 8008708:	f7f8 fbe7 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d01f      	beq.n	8008752 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fd9a 	bl	800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	bf0c      	ite	eq
 8008720:	2301      	moveq	r3, #1
 8008722:	2300      	movne	r3, #0
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 800872a:	2300      	movs	r3, #0
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
 800872e:	f107 0218 	add.w	r2, r7, #24
 8008732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008736:	4619      	mov	r1, r3
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f7f9 fbb5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800873e:	e019      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8008740:	f107 0210 	add.w	r2, r7, #16
 8008744:	f107 0310 	add.w	r3, r7, #16
 8008748:	4619      	mov	r1, r3
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7f9 fc58 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008750:	e010      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	4618      	mov	r0, r3
 800875a:	f000 fa42 	bl	8008be2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800875e:	e009      	b.n	8008774 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8008760:	2300      	movs	r3, #0
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008764:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008768:	f107 0318 	add.w	r3, r7, #24
 800876c:	4619      	mov	r1, r3
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7f9 fc81 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	3730      	adds	r7, #48	; 0x30
 8008778:	46bd      	mov	sp, r7
 800877a:	bdb0      	pop	{r4, r5, r7, pc}

0800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fae4 	bl	8008d52 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 800878a:	4602      	mov	r2, r0
 800878c:	f107 030c 	add.w	r3, r7, #12
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f000 faeb 	bl	8008d6e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>
 8008798:	4603      	mov	r3, r0
      }
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80087a2:	b5b0      	push	{r4, r5, r7, lr}
 80087a4:	b086      	sub	sp, #24
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	607a      	str	r2, [r7, #4]
 80087ae:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d119      	bne.n	80087ea <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 f955 	bl	8008a66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80087bc:	4602      	mov	r2, r0
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d012      	beq.n	80087ea <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 80087c4:	68fc      	ldr	r4, [r7, #12]
 80087c6:	6838      	ldr	r0, [r7, #0]
 80087c8:	f7ff ffd8 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80087cc:	4603      	mov	r3, r0
 80087ce:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f9fa 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80087d6:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	4629      	mov	r1, r5
 80087de:	4620      	mov	r0, r4
 80087e0:	f7f8 fb7b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 80087ee:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80087f0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80087f6:	7df8      	ldrb	r0, [r7, #23]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6839      	ldr	r1, [r7, #0]
 80087fc:	f017 fef8 	bl	80205f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800880a:	f107 0310 	add.w	r3, r7, #16
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	4618      	mov	r0, r3
 8008812:	f000 f805 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008816:	693b      	ldr	r3, [r7, #16]
    }
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bdb0      	pop	{r4, r5, r7, pc}

08008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4618      	mov	r0, r3
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800883e:	b590      	push	{r4, r7, lr}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 faab 	bl	8008da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800884e:	4604      	mov	r4, r0
 8008850:	6838      	ldr	r0, [r7, #0]
 8008852:	f7ff fe33 	bl	80084bc <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008856:	4603      	mov	r3, r0
 8008858:	4619      	mov	r1, r3
 800885a:	4620      	mov	r0, r4
 800885c:	f000 faad 	bl	8008dba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	bd90      	pop	{r4, r7, pc}

08008868 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa96 	bl	8008da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008878:	4603      	mov	r3, r0
 800887a:	2201      	movs	r2, #1
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	4618      	mov	r0, r3
 8008880:	f000 faa7 	bl	8008dd2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 faa9 	bl	8008e10 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088be:	4604      	mov	r4, r0
 80088c0:	68f8      	ldr	r0, [r7, #12]
 80088c2:	f000 fab6 	bl	8008e32 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088c6:	4603      	mov	r3, r0
 80088c8:	1ae2      	subs	r2, r4, r3
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	bf34      	ite	cc
 80088d0:	2301      	movcc	r3, #1
 80088d2:	2300      	movcs	r3, #0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d002      	beq.n	80088e0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f017 fee6 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 faa6 	bl	8008e32 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088e6:	4604      	mov	r4, r0
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 faa2 	bl	8008e32 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088ee:	4603      	mov	r3, r0
 80088f0:	613b      	str	r3, [r7, #16]
 80088f2:	f107 0208 	add.w	r2, r7, #8
 80088f6:	f107 0310 	add.w	r3, r7, #16
 80088fa:	4611      	mov	r1, r2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7f9 ffa8 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8008902:	4603      	mov	r3, r0
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4423      	add	r3, r4
 8008908:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 fa91 	bl	8008e32 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 8008910:	4602      	mov	r2, r0
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	4293      	cmp	r3, r2
 8008916:	d306      	bcc.n	8008926 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fa79 	bl	8008e10 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 800891e:	4602      	mov	r2, r0
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	4293      	cmp	r3, r2
 8008924:	d904      	bls.n	8008930 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 fa72 	bl	8008e10 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 800892c:	4603      	mov	r3, r0
 800892e:	e000      	b.n	8008932 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 8008930:	697b      	ldr	r3, [r7, #20]
      }
 8008932:	4618      	mov	r0, r3
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	bd90      	pop	{r4, r7, pc}

0800893a <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	f107 030c 	add.w	r3, r7, #12
 8008948:	4611      	mov	r1, r2
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff ff9e 	bl	800888c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800895a:	b590      	push	{r4, r7, lr}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f835 	bl	80089d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800896a:	4603      	mov	r3, r0
 800896c:	681c      	ldr	r4, [r3, #0]
 800896e:	6838      	ldr	r0, [r7, #0]
 8008970:	f000 f830 	bl	80089d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008974:	4603      	mov	r3, r0
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	1ae3      	subs	r3, r4, r3
 800897a:	109b      	asrs	r3, r3, #2
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	bd90      	pop	{r4, r7, pc}

08008984 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x1e>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fa5a 	bl	8008e52 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>
 800899e:	4603      	mov	r3, r0
 80089a0:	e000      	b.n	80089a4 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x20>
 80089a2:	2300      	movs	r3, #0
      }
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80089ac:	b590      	push	{r4, r7, lr}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80089ba:	f88d 4000 	strb.w	r4, [sp]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fa64 	bl	8008e92 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80089ca:	4603      	mov	r3, r0
      }
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd90      	pop	{r4, r7, pc}

080089d4 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4618      	mov	r0, r3
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4618      	mov	r0, r3
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008a0c:	68b9      	ldr	r1, [r7, #8]
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f000 fa5b 	bl	8008eca <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>
    }
 8008a14:	bf00      	nop
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	425b      	negs	r3, r3
 8008a30:	4413      	add	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	f107 020c 	add.w	r2, r7, #12
 8008a38:	f107 0308 	add.w	r3, r7, #8
 8008a3c:	4611      	mov	r1, r2
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7ff ff24 	bl	800888c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	3304      	adds	r3, #4
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008a7e:	b590      	push	{r4, r7, lr}
 8008a80:	b087      	sub	sp, #28
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
 8008a8a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01d      	beq.n	8008ace <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008a92:	68fc      	ldr	r4, [r7, #12]
 8008a94:	68b8      	ldr	r0, [r7, #8]
 8008a96:	f7ff fe71 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6819      	ldr	r1, [r3, #0]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7f8 fa18 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f083 0301 	eor.w	r3, r3, #1
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d006      	beq.n	8008ac4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	607b      	str	r3, [r7, #4]
 8008aba:	68b8      	ldr	r0, [r7, #8]
 8008abc:	f7ff fbd3 	bl	8008266 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008ac0:	60b8      	str	r0, [r7, #8]
 8008ac2:	e7e3      	b.n	8008a8c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8008ac4:	68b8      	ldr	r0, [r7, #8]
 8008ac6:	f7ff fbc2 	bl	800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008aca:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8008acc:	e7de      	b.n	8008a8c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8008ace:	f107 0314 	add.w	r3, r7, #20
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff fea3 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008ada:	697b      	ldr	r3, [r7, #20]
    }
 8008adc:	4618      	mov	r0, r3
 8008ade:	371c      	adds	r7, #28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd90      	pop	{r4, r7, pc}

08008ae4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fa02 	bl	8008ef6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8008af2:	4603      	mov	r3, r0
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f94d 	bl	8008da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 f9fc 	bl	8008f0c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>
 8008b14:	4603      	mov	r3, r0
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8008b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	4619      	mov	r1, r3
 8008b32:	2018      	movs	r0, #24
 8008b34:	f7f7 fbfc 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 f933 	bl	8008da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008b3e:	4604      	mov	r4, r0
 8008b40:	68b8      	ldr	r0, [r7, #8]
 8008b42:	f7ff fcbb 	bl	80084bc <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008b46:	4605      	mov	r5, r0
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7f8 fb8c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	6838      	ldr	r0, [r7, #0]
 8008b52:	f7f8 fe76 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008b56:	4680      	mov	r8, r0
 8008b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b5a:	f7f8 fb9a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	4643      	mov	r3, r8
 8008b64:	4632      	mov	r2, r6
 8008b66:	4629      	mov	r1, r5
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 fa1c 	bl	8008fa6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8008b6e:	bf00      	nop
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b78 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	f107 030c 	add.w	r3, r7, #12
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff fe48 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008b9a:	b480      	push	{r7}
 8008b9c:	b083      	sub	sp, #12
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr

08008bb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3310      	adds	r3, #16
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b082      	sub	sp, #8
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff fdd2 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008be2:	b5b0      	push	{r4, r5, r7, lr}
 8008be4:	b08a      	sub	sp, #40	; 0x28
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8008bee:	68b8      	ldr	r0, [r7, #8]
 8008bf0:	f7ff fa16 	bl	8008020 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8008bf8:	68b8      	ldr	r0, [r7, #8]
 8008bfa:	f7ff ff34 	bl	8008a66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d023      	beq.n	8008c56 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8008c12:	68bc      	ldr	r4, [r7, #8]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681d      	ldr	r5, [r3, #0]
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff fdae 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008c20:	4603      	mov	r3, r0
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	4629      	mov	r1, r5
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f7f8 f956 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8008c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fb11 	bl	8008266 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008c44:	4603      	mov	r3, r0
 8008c46:	e004      	b.n	8008c52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7ff faff 	bl	800824e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008c50:	4603      	mov	r3, r0
 8008c52:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8008c54:	e7d8      	b.n	8008c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	f107 0310 	add.w	r3, r7, #16
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff fdde 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8008c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d01d      	beq.n	8008ca8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8008c6c:	68b8      	ldr	r0, [r7, #8]
 8008c6e:	f000 f9b6 	bl	8008fde <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8008c72:	4603      	mov	r3, r0
 8008c74:	61fb      	str	r3, [r7, #28]
 8008c76:	f107 021c 	add.w	r2, r7, #28
 8008c7a:	f107 0310 	add.w	r3, r7, #16
 8008c7e:	4611      	mov	r1, r2
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff fa32 	bl	80080ea <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d008      	beq.n	8008c9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8008c8c:	f107 0214 	add.w	r2, r7, #20
 8008c90:	f107 0318 	add.w	r3, r7, #24
 8008c94:	4619      	mov	r1, r3
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 f9b2 	bl	8009000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c9c:	e027      	b.n	8008cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8008c9e:	f107 0310 	add.w	r3, r7, #16
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 f833 	bl	8008d0e <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8008ca8:	68bc      	ldr	r4, [r7, #8]
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7ff ff8c 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	6819      	ldr	r1, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f7f8 f90c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d008      	beq.n	8008cda <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8008cc8:	f107 0214 	add.w	r2, r7, #20
 8008ccc:	f107 0318 	add.w	r3, r7, #24
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f000 f994 	bl	8009000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008cd8:	e009      	b.n	8008cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8008cda:	2300      	movs	r3, #0
 8008cdc:	623b      	str	r3, [r7, #32]
 8008cde:	f107 0220 	add.w	r2, r7, #32
 8008ce2:	f107 0310 	add.w	r3, r7, #16
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7f9 f9c4 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	3728      	adds	r7, #40	; 0x28
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bdb0      	pop	{r4, r5, r7, pc}

08008cf6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	330c      	adds	r3, #12
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b082      	sub	sp, #8
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f017 fc66 	bl	80205ec <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8008d20:	4602      	mov	r2, r0
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	601a      	str	r2, [r3, #0]
	return *this;
 8008d26:	687b      	ldr	r3, [r7, #4]
      }
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f017 fc53 	bl	80205e8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8008d42:	4602      	mov	r2, r0
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	601a      	str	r2, [r3, #0]
	return *this;
 8008d48:	687b      	ldr	r3, [r7, #4]
      }
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr() const
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b082      	sub	sp, #8
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	3310      	adds	r3, #16
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f967 	bl	8009032 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 8008d64:	4603      	mov	r3, r0
 8008d66:	4618      	mov	r0, r3
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8008d6e:	b480      	push	{r7}
 8008d70:	b083      	sub	sp, #12
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	370c      	adds	r7, #12
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	60f8      	str	r0, [r7, #12]
 8008d8e:	60b9      	str	r1, [r7, #8]
 8008d90:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	4619      	mov	r1, r3
 8008d98:	68b8      	ldr	r0, [r7, #8]
 8008d9a:	f017 fbbb 	bl	8020514 <_ZdlPvj>
      }
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8008dc4:	6838      	ldr	r0, [r7, #0]
 8008dc6:	f000 f940 	bl	800904a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>
	}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b088      	sub	sp, #32
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	61fb      	str	r3, [r7, #28]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	61bb      	str	r3, [r7, #24]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008dea:	f7f7 fa99 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8008df4:	69b8      	ldr	r0, [r7, #24]
 8008df6:	f017 fb8b 	bl	8020510 <_ZdlPv>
	    return;
 8008dfa:	e005      	b.n	8008e08 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	69b9      	ldr	r1, [r7, #24]
 8008e00:	69f8      	ldr	r0, [r7, #28]
 8008e02:	f000 f9e1 	bl	80091c8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f945 	bl	80090aa <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008e20:	4603      	mov	r3, r0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f927 	bl	8009076 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685a      	ldr	r2, [r3, #4]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	109b      	asrs	r3, r3, #2
 8008e46:	4618      	mov	r0, r3
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008e64:	f7f7 fa5c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d006      	beq.n	8008e7c <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4618      	mov	r0, r3
 8008e74:	f017 fb50 	bl	8020518 <_Znwj>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	e006      	b.n	8008e8a <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	68b9      	ldr	r1, [r7, #8]
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f000 f9b3 	bl	80091ec <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>
 8008e86:	4603      	mov	r3, r0
 8008e88:	bf00      	nop
      { return __a.allocate(__n); }
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	60b9      	str	r1, [r7, #8]
 8008e9c:	607a      	str	r2, [r7, #4]
 8008e9e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f90a 	bl	80090c0 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008eac:	4603      	mov	r3, r0
      }
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <_ZSt10destroy_atIP10DigitalOutEvPT_>:
    destroy_at(_Tp* __location)
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
    }
 8008ebe:	bf00      	nop
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b082      	sub	sp, #8
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8008ed4:	f7f7 fa24 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d004      	beq.n	8008ee8 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8008ede:	6839      	ldr	r1, [r7, #0]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f90a 	bl	80090fa <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>
 8008ee6:	e003      	b.n	8008ef0 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x26>
	__destroy(__first, __last);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f91d 	bl	800912a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>
    }
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() noexcept
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008f1e:	f7f7 f9ff 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d009      	beq.n	8008f3c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008f28:	68ba      	ldr	r2, [r7, #8]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	4413      	add	r3, r2
 8008f30:	00db      	lsls	r3, r3, #3
 8008f32:	4618      	mov	r0, r3
 8008f34:	f017 faf0 	bl	8020518 <_Znwj>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	e006      	b.n	8008f4a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	68b9      	ldr	r1, [r7, #8]
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f000 f9b1 	bl	80092a8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>
 8008f46:	4603      	mov	r3, r0
 8008f48:	bf00      	nop
      { return __a.allocate(__n); }
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008f52:	b5b0      	push	{r4, r5, r7, lr}
 8008f54:	b088      	sub	sp, #32
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	60f8      	str	r0, [r7, #12]
 8008f5a:	60b9      	str	r1, [r7, #8]
 8008f5c:	607a      	str	r2, [r7, #4]
 8008f5e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008f60:	68b8      	ldr	r0, [r7, #8]
 8008f62:	f7f8 f980 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7f8 fc6b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	f107 0318 	add.w	r3, r7, #24
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7f9 fd00 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 8008f7a:	f107 0418 	add.w	r4, r7, #24
 8008f7e:	6838      	ldr	r0, [r7, #0]
 8008f80:	f7f8 f987 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4619      	mov	r1, r3
 8008f88:	2008      	movs	r0, #8
 8008f8a:	f7f7 f9d1 	bl	8000330 <_ZnwjPv>
 8008f8e:	4605      	mov	r5, r0
 8008f90:	7f3b      	ldrb	r3, [r7, #28]
 8008f92:	4622      	mov	r2, r4
 8008f94:	7d39      	ldrb	r1, [r7, #20]
 8008f96:	4628      	mov	r0, r5
 8008f98:	f000 f8ec 	bl	8009174 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8008f9c:	462b      	mov	r3, r5
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bdb0      	pop	{r4, r5, r7, pc}

08008fa6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008fa6:	b5b0      	push	{r4, r5, r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	60f8      	str	r0, [r7, #12]
 8008fae:	60b9      	str	r1, [r7, #8]
 8008fb0:	607a      	str	r2, [r7, #4]
 8008fb2:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7f8 f956 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	6838      	ldr	r0, [r7, #0]
 8008fbe:	f7f8 fc40 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	6a38      	ldr	r0, [r7, #32]
 8008fc6:	f7f8 f964 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	462a      	mov	r2, r5
 8008fce:	4621      	mov	r1, r4
 8008fd0:	68b8      	ldr	r0, [r7, #8]
 8008fd2:	f7ff ffbe 	bl	8008f52 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bdb0      	pop	{r4, r5, r7, pc}

08008fde <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff fc15 	bl	8008820 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800900c:	68b8      	ldr	r0, [r7, #8]
 800900e:	f000 f8c5 	bl	800919c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8009012:	4603      	mov	r3, r0
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7f9 fbc7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8009020:	4603      	mov	r3, r0
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	605a      	str	r2, [r3, #4]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4618      	mov	r0, r3
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}

08009032 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f8b9 	bl	80091b2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8009040:	4603      	mov	r3, r0
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>:
    destroy_at(_Tp* __location)
 800904a:	b480      	push	{r7}
 800904c:	b083      	sub	sp, #12
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
    }
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8009066:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800906a:	4618      	mov	r0, r3
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr

08009076 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800907e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009082:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff ffea 	bl	800905e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>
 800908a:	4603      	mov	r3, r0
 800908c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800908e:	f107 0208 	add.w	r2, r7, #8
 8009092:	f107 030c 	add.w	r3, r7, #12
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7f9 fea4 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800909e:	4603      	mov	r3, r0
 80090a0:	681b      	ldr	r3, [r3, #0]
      }
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80090c0:	b5b0      	push	{r4, r5, r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 f8ab 	bl	800922a <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090d4:	4604      	mov	r4, r0
 80090d6:	68b8      	ldr	r0, [r7, #8]
 80090d8:	f000 f8a7 	bl	800922a <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090dc:	4605      	mov	r5, r0
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f8a3 	bl	800922a <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090e4:	4602      	mov	r2, r0
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	4629      	mov	r1, r5
 80090ea:	4620      	mov	r0, r4
 80090ec:	f000 f8a8 	bl	8009240 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80090f0:	4603      	mov	r3, r0
    }
 80090f2:	4618      	mov	r0, r3
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bdb0      	pop	{r4, r5, r7, pc}

080090fa <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b082      	sub	sp, #8
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
 8009102:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	429a      	cmp	r2, r3
 800910a:	d00a      	beq.n	8009122 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f8b5 	bl	800927c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>
 8009112:	4603      	mov	r3, r0
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f8bc 	bl	8009292 <_ZSt8_DestroyIP10DigitalOutEvPT_>
	  for (; __first != __last; ++__first)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3304      	adds	r3, #4
 800911e:	607b      	str	r3, [r7, #4]
 8009120:	e7f0      	b.n	8009104 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0xa>
	}
 8009122:	bf00      	nop
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800914e:	68b8      	ldr	r0, [r7, #8]
 8009150:	f7f9 fef5 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009154:	4603      	mov	r3, r0
 8009156:	4618      	mov	r0, r3
 8009158:	f7f9 fee6 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800915c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	605a      	str	r2, [r3, #4]
      { }
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8009174:	b5b0      	push	{r4, r5, r7, lr}
 8009176:	b086      	sub	sp, #24
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	7239      	strb	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8009182:	463a      	mov	r2, r7
 8009184:	f88d 4000 	strb.w	r4, [sp]
 8009188:	462b      	mov	r3, r5
 800918a:	6879      	ldr	r1, [r7, #4]
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f7ff ffd7 	bl	8009140 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bdb0      	pop	{r4, r5, r7, pc}

0800919c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4618      	mov	r0, r3
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() const noexcept
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4618      	mov	r0, r3
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	4413      	add	r3, r2
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	4619      	mov	r1, r3
 80091e0:	68b8      	ldr	r0, [r7, #8]
 80091e2:	f017 f997 	bl	8020514 <_ZdlPvj>
      }
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f877 	bl	80092ec <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>
 80091fe:	4602      	mov	r2, r0
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	4293      	cmp	r3, r2
 8009204:	bf8c      	ite	hi
 8009206:	2301      	movhi	r3, #1
 8009208:	2300      	movls	r3, #0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b00      	cmp	r3, #0
 800920e:	d001      	beq.n	8009214 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009210:	f017 fa49 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4618      	mov	r0, r3
 800921a:	f017 f97d 	bl	8020518 <_Znwj>
 800921e:	4603      	mov	r3, r0
 8009220:	bf00      	nop
      }
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <_ZSt12__niter_baseIPP10DigitalOutET_S3_>:
    __niter_base(_Iterator __it)
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4618      	mov	r0, r3
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
 800924c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	109b      	asrs	r3, r3, #2
 8009256:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	2b00      	cmp	r3, #0
 800925c:	dd06      	ble.n	800926c <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	461a      	mov	r2, r3
 8009264:	68f9      	ldr	r1, [r7, #12]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f017 fa90 	bl	802078c <memmove>
      return __result + __count;
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	4413      	add	r3, r2
    }
 8009274:	4618      	mov	r0, r3
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4618      	mov	r0, r3
 8009288:	370c      	adds	r7, #12
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <_ZSt8_DestroyIP10DigitalOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8009292:	b580      	push	{r7, lr}
 8009294:	b082      	sub	sp, #8
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7ff fe0b 	bl	8008eb6 <_ZSt10destroy_atIP10DigitalOutEvPT_>
    }
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f825 	bl	8009304 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>
 80092ba:	4602      	mov	r2, r0
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	4293      	cmp	r3, r2
 80092c0:	bf8c      	ite	hi
 80092c2:	2301      	movhi	r3, #1
 80092c4:	2300      	movls	r3, #0
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80092cc:	f017 f9eb 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	4613      	mov	r3, r2
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	4413      	add	r3, r2
 80092d8:	00db      	lsls	r3, r3, #3
 80092da:	4618      	mov	r0, r3
 80092dc:	f017 f91c 	bl	8020518 <_Znwj>
 80092e0:	4603      	mov	r3, r0
 80092e2:	bf00      	nop
      }
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092f4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800930c:	4b03      	ldr	r3, [pc, #12]	; (800931c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv+0x18>)
      }
 800930e:	4618      	mov	r0, r3
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	05555555 	.word	0x05555555

08009320 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4618      	mov	r0, r3
 800932c:	f7fe fd96 	bl	8007e5c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4618      	mov	r0, r3
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
	...

0800933c <_Z41__static_initialization_and_destruction_0ii>:
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d10a      	bne.n	8009362 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009352:	4293      	cmp	r3, r2
 8009354:	d105      	bne.n	8009362 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009356:	480c      	ldr	r0, [pc, #48]	; (8009388 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009358:	f7fe fc98 	bl	8007c8c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;
 800935c:	480b      	ldr	r0, [pc, #44]	; (800938c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800935e:	f7fe fcbb 	bl	8007cd8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10a      	bne.n	800937e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800936e:	4293      	cmp	r3, r2
 8009370:	d105      	bne.n	800937e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009372:	4806      	ldr	r0, [pc, #24]	; (800938c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009374:	f7ff ffd4 	bl	8009320 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009378:	4803      	ldr	r0, [pc, #12]	; (8009388 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800937a:	f000 f809 	bl	8009390 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>
}
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	24000134 	.word	0x24000134
 800938c:	24000140 	.word	0x24000140

08009390 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009390:	b5b0      	push	{r4, r5, r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681c      	ldr	r4, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff fb21 	bl	80089ea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80093a8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80093aa:	461a      	mov	r2, r3
 80093ac:	4629      	mov	r1, r5
 80093ae:	4620      	mov	r0, r4
 80093b0:	f7ff fb26 	bl	8008a00 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>
      }
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe fd17 	bl	8007dea <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4618      	mov	r0, r3
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bdb0      	pop	{r4, r5, r7, pc}

080093c6 <_GLOBAL__sub_I__ZN10DigitalOut16all_digital_outsE>:
 80093c6:	b580      	push	{r7, lr}
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093ce:	2001      	movs	r0, #1
 80093d0:	f7ff ffb4 	bl	800933c <_Z41__static_initialization_and_destruction_0ii>
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <_GLOBAL__sub_D__ZN10DigitalOut16all_digital_outsE>:
 80093d6:	b580      	push	{r7, lr}
 80093d8:	af00      	add	r7, sp, #0
 80093da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80093de:	2000      	movs	r0, #0
 80093e0:	f7ff ffac 	bl	800933c <_Z41__static_initialization_and_destruction_0ii>
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b082      	sub	sp, #8
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa98 	bl	8009924 <_ZNSaIP12InputCaptureED1Ev>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fa7b 	bl	8009904 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>:
      vector() = default;
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff ffeb 	bl	80093fe <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 faab 	bl	8009996 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fa89 	bl	800996c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4618      	mov	r0, r3
 8009470:	f7ff ffeb 	bl	800944a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <_ZN13MovingAverageILm3EfEC1Ev>:
#include "Mini-STLIB/DataStructures/RingBuffer.hpp"
#include <stdint.h>
#include <cmath>

template<uint32_t BUFFER_SIZE, class BUFFER_TYPE>
class MovingAverage{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4618      	mov	r0, r3
 800948a:	f000 faa4 	bl	80099d6 <_ZN10RingBufferILm3EfEC1Ev>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4618      	mov	r0, r3
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/InputCapture.hpp"

vector<InputCapture*> InputCapture::all_input_captures;
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;

InputCapture::InputCapture(TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8009498:	b590      	push	{r4, r7, lr}
 800949a:	b087      	sub	sp, #28
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
: timer(timer), channel(channel), pin(pin) {
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7ff ffe8 	bl	800947e <_ZN13MovingAverageILm3EfEC1Ev>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	331c      	adds	r3, #28
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff ffe3 	bl	800947e <_ZN13MovingAverageILm3EfEC1Ev>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f04f 32ff 	mov.w	r2, #4294967295
 80094be:	639a      	str	r2, [r3, #56]	; 0x38
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295
 80094c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	641a      	str	r2, [r3, #64]	; 0x40
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	645a      	str	r2, [r3, #68]	; 0x44
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	649a      	str	r2, [r3, #72]	; 0x48
	all_input_captures.push_back(this);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	f107 0314 	add.w	r3, r7, #20
 80094e2:	4619      	mov	r1, r3
 80094e4:	4809      	ldr	r0, [pc, #36]	; (800950c <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x74>)
 80094e6:	f000 fa9c 	bl	8009a22 <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>
	pin_to_input_capture[pin] = this;
 80094ea:	68fc      	ldr	r4, [r7, #12]
 80094ec:	463b      	mov	r3, r7
 80094ee:	4619      	mov	r1, r3
 80094f0:	4807      	ldr	r0, [pc, #28]	; (8009510 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x78>)
 80094f2:	f000 faa7 	bl	8009a44 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80094f6:	4603      	mov	r3, r0
 80094f8:	601c      	str	r4, [r3, #0]
	pin->mode = INPUT_CAPTURE;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2203      	movs	r2, #3
 80094fe:	719a      	strb	r2, [r3, #6]
}
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	4618      	mov	r0, r3
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	bd90      	pop	{r4, r7, pc}
 800950a:	bf00      	nop
 800950c:	24000158 	.word	0x24000158
 8009510:	24000164 	.word	0x24000164

08009514 <_ZN12InputCapture19absolute_differenceEmm>:

uint32_t InputCapture::absolute_difference(uint32_t a, uint32_t b){
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
	int result = a - b;
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	617b      	str	r3, [r7, #20]
	if(result < 0)
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	2b00      	cmp	r3, #0
 800952c:	da09      	bge.n	8009542 <_ZN12InputCapture19absolute_differenceEmm+0x2e>
		result = a + (timer->Instance->ARR - b) + 1;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	1ad2      	subs	r2, r2, r3
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	4413      	add	r3, r2
 800953e:	3301      	adds	r3, #1
 8009540:	617b      	str	r3, [r7, #20]
	return result;
 8009542:	697b      	ldr	r3, [r7, #20]
}
 8009544:	4618      	mov	r0, r3
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <_ZN12InputCapture17channel_is_activeEv>:

bool InputCapture::channel_is_active(){
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
	if(channel == TIM_CHANNEL_1)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955c:	2b00      	cmp	r3, #0
 800955e:	d108      	bne.n	8009572 <_ZN12InputCapture17channel_is_activeEv+0x22>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_1;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009564:	7f1b      	ldrb	r3, [r3, #28]
 8009566:	2b01      	cmp	r3, #1
 8009568:	bf0c      	ite	eq
 800956a:	2301      	moveq	r3, #1
 800956c:	2300      	movne	r3, #0
 800956e:	b2db      	uxtb	r3, r3
 8009570:	e027      	b.n	80095c2 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_2)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009576:	2b04      	cmp	r3, #4
 8009578:	d108      	bne.n	800958c <_ZN12InputCapture17channel_is_activeEv+0x3c>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_2;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	7f1b      	ldrb	r3, [r3, #28]
 8009580:	2b02      	cmp	r3, #2
 8009582:	bf0c      	ite	eq
 8009584:	2301      	moveq	r3, #1
 8009586:	2300      	movne	r3, #0
 8009588:	b2db      	uxtb	r3, r3
 800958a:	e01a      	b.n	80095c2 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_3)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009590:	2b08      	cmp	r3, #8
 8009592:	d108      	bne.n	80095a6 <_ZN12InputCapture17channel_is_activeEv+0x56>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_3;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	7f1b      	ldrb	r3, [r3, #28]
 800959a:	2b04      	cmp	r3, #4
 800959c:	bf0c      	ite	eq
 800959e:	2301      	moveq	r3, #1
 80095a0:	2300      	movne	r3, #0
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	e00d      	b.n	80095c2 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_4)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095aa:	2b0c      	cmp	r3, #12
 80095ac:	d108      	bne.n	80095c0 <_ZN12InputCapture17channel_is_activeEv+0x70>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_4;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	7f1b      	ldrb	r3, [r3, #28]
 80095b4:	2b08      	cmp	r3, #8
 80095b6:	bf0c      	ite	eq
 80095b8:	2301      	moveq	r3, #1
 80095ba:	2300      	movne	r3, #0
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	e000      	b.n	80095c2 <_ZN12InputCapture17channel_is_activeEv+0x72>
	return false;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <_ZN12InputCapture9interruptEv>:

float InputCapture::interrupt() {
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	if(channel_is_active()){
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f7ff ffb9 	bl	8009550 <_ZN12InputCapture17channel_is_activeEv>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 80c6 	beq.w	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
		GPIO_PinState state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095f0:	889b      	ldrh	r3, [r3, #4]
 80095f2:	4619      	mov	r1, r3
 80095f4:	4610      	mov	r0, r2
 80095f6:	f011 fc27 	bl	801ae48 <HAL_GPIO_ReadPin>
 80095fa:	4603      	mov	r3, r0
 80095fc:	77fb      	strb	r3, [r7, #31]

		// Capture first rising edge
		if(rising_edge == -1 && falling_edge == -1 && state ==  GPIO_PIN_SET){
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009606:	d116      	bne.n	8009636 <_ZN12InputCapture9interruptEv+0x66>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009610:	d111      	bne.n	8009636 <_ZN12InputCapture9interruptEv+0x66>
 8009612:	7ffb      	ldrb	r3, [r7, #31]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d10e      	bne.n	8009636 <_ZN12InputCapture9interruptEv+0x66>
			rising_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009620:	4619      	mov	r1, r3
 8009622:	4610      	mov	r0, r2
 8009624:	f016 f842 	bl	801f6ac <HAL_TIM_ReadCapturedValue>
 8009628:	4603      	mov	r3, r0
 800962a:	461a      	mov	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	639a      	str	r2, [r3, #56]	; 0x38
			return frequency;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009634:	e09f      	b.n	8009776 <_ZN12InputCapture9interruptEv+0x1a6>
		}

		// Capture falling edge
		if(rising_edge != -1 && falling_edge == -1 && state ==  GPIO_PIN_RESET){
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963e:	d016      	beq.n	800966e <_ZN12InputCapture9interruptEv+0x9e>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009648:	d111      	bne.n	800966e <_ZN12InputCapture9interruptEv+0x9e>
 800964a:	7ffb      	ldrb	r3, [r7, #31]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10e      	bne.n	800966e <_ZN12InputCapture9interruptEv+0x9e>
			falling_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009658:	4619      	mov	r1, r3
 800965a:	4610      	mov	r0, r2
 800965c:	f016 f826 	bl	801f6ac <HAL_TIM_ReadCapturedValue>
 8009660:	4603      	mov	r3, r0
 8009662:	461a      	mov	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	63da      	str	r2, [r3, #60]	; 0x3c
			return frequency;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800966c:	e083      	b.n	8009776 <_ZN12InputCapture9interruptEv+0x1a6>
		}

		// Capture second rising edge
		if(rising_edge != -1 && falling_edge != -1 && state ==  GPIO_PIN_SET){
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009676:	d07c      	beq.n	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009680:	d077      	beq.n	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
 8009682:	7ffb      	ldrb	r3, [r7, #31]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d174      	bne.n	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
			uint32_t duty_count = absolute_difference(falling_edge, rising_edge);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800968c:	4619      	mov	r1, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	461a      	mov	r2, r3
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff ff3d 	bl	8009514 <_ZN12InputCapture19absolute_differenceEmm>
 800969a:	61b8      	str	r0, [r7, #24]
			uint32_t new_rising_edge	= HAL_TIM_ReadCapturedValue(timer, channel);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a4:	4619      	mov	r1, r3
 80096a6:	4610      	mov	r0, r2
 80096a8:	f016 f800 	bl	801f6ac <HAL_TIM_ReadCapturedValue>
 80096ac:	6178      	str	r0, [r7, #20]
			uint32_t freq_count = absolute_difference(new_rising_edge, rising_edge);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b2:	461a      	mov	r2, r3
 80096b4:	6979      	ldr	r1, [r7, #20]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff ff2c 	bl	8009514 <_ZN12InputCapture19absolute_differenceEmm>
 80096bc:	6138      	str	r0, [r7, #16]

			if(freq_count != 0 && duty_count != 0){
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d056      	beq.n	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d053      	beq.n	8009772 <_ZN12InputCapture9interruptEv+0x1a2>
				float new_duty = ((float) duty_count) / freq_count * 100;
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8009784 <_ZN12InputCapture9interruptEv+0x1b4>
 80096e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096ea:	edc7 7a03 	vstr	s15, [r7, #12]
				float new_freq = ((float) 277777777) / freq_count;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	ee07 3a90 	vmov	s15, r3
 80096f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096f8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8009788 <_ZN12InputCapture9interruptEv+0x1b8>
 80096fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009700:	edc7 7a02 	vstr	s15, [r7, #8]

				DutyAverage.add_value(new_duty);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	ed97 0a03 	vldr	s0, [r7, #12]
 800970a:	4618      	mov	r0, r3
 800970c:	f000 f9f8 	bl	8009b00 <_ZN13MovingAverageILm3EfE9add_valueEf>
				FrequencyAverage.add_value(new_freq);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	331c      	adds	r3, #28
 8009714:	ed97 0a02 	vldr	s0, [r7, #8]
 8009718:	4618      	mov	r0, r3
 800971a:	f000 f9f1 	bl	8009b00 <_ZN13MovingAverageILm3EfE9add_valueEf>
				frequency		= FrequencyAverage.current_value;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	64da      	str	r2, [r3, #76]	; 0x4c
				duty			= DutyAverage.current_value;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	699a      	ldr	r2, [r3, #24]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	651a      	str	r2, [r3, #80]	; 0x50

				frequency_i		= frequency * 10000;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009734:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800978c <_ZN12InputCapture9interruptEv+0x1bc>
 8009738:	ee67 7a87 	vmul.f32	s15, s15, s14
 800973c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009740:	ee17 2a90 	vmov	r2, s15
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	655a      	str	r2, [r3, #84]	; 0x54
				duty_i			= duty * 10000;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800974e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800978c <_ZN12InputCapture9interruptEv+0x1bc>
 8009752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800975a:	ee17 2a90 	vmov	r2, s15
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	659a      	str	r2, [r3, #88]	; 0x58

				rising_edge		= -1;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f04f 32ff 	mov.w	r2, #4294967295
 8009768:	639a      	str	r2, [r3, #56]	; 0x38
				falling_edge	= -1;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f04f 32ff 	mov.w	r2, #4294967295
 8009770:	63da      	str	r2, [r3, #60]	; 0x3c
			}
		}
	}

	return frequency;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eeb0 0a67 	vmov.f32	s0, s15
 800977e:	3720      	adds	r7, #32
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	42c80000 	.word	0x42c80000
 8009788:	4d84746c 	.word	0x4d84746c
 800978c:	461c4000 	.word	0x461c4000

08009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 80097a6:	b590      	push	{r4, r7, lr}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff ffed 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80097b6:	4603      	mov	r3, r0
 80097b8:	681c      	ldr	r4, [r3, #0]
 80097ba:	6838      	ldr	r0, [r7, #0]
 80097bc:	f7ff ffe8 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80097c0:	4603      	mov	r3, r0
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	429c      	cmp	r4, r3
 80097c6:	bf0c      	ite	eq
 80097c8:	2301      	moveq	r3, #1
 80097ca:	2300      	movne	r3, #0
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	4618      	mov	r0, r3
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd90      	pop	{r4, r7, pc}

080097d6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
	++_M_current;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	1d1a      	adds	r2, r3, #4
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	601a      	str	r2, [r3, #0]
	return *this;
 80097e8:	687b      	ldr	r3, [r7, #4]
      }
 80097ea:	4618      	mov	r0, r3
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
	...

08009810 <_ZN12InputCapture24start_all_input_capturesEv>:

void InputCapture::start_all_input_captures(){
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
	for(auto input_capture : InputCapture::all_input_captures)
 8009816:	4b15      	ldr	r3, [pc, #84]	; (800986c <_ZN12InputCapture24start_all_input_capturesEv+0x5c>)
 8009818:	60fb      	str	r3, [r7, #12]
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 f9a6 	bl	8009b6c <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009820:	4603      	mov	r3, r0
 8009822:	607b      	str	r3, [r7, #4]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f9b1 	bl	8009b8c <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800982a:	4603      	mov	r3, r0
 800982c:	603b      	str	r3, [r7, #0]
 800982e:	463a      	mov	r2, r7
 8009830:	1d3b      	adds	r3, r7, #4
 8009832:	4611      	mov	r1, r2
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff ffb6 	bl	80097a6 <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800983a:	4603      	mov	r3, r0
 800983c:	f083 0301 	eor.w	r3, r3, #1
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00e      	beq.n	8009864 <_ZN12InputCapture24start_all_input_capturesEv+0x54>
 8009846:	1d3b      	adds	r3, r7, #4
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff ffd4 	bl	80097f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 800984e:	4603      	mov	r3, r0
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	60bb      	str	r3, [r7, #8]
		input_capture->start();
 8009854:	68b8      	ldr	r0, [r7, #8]
 8009856:	f000 f845 	bl	80098e4 <_ZN12InputCapture5startEv>
	for(auto input_capture : InputCapture::all_input_captures)
 800985a:	1d3b      	adds	r3, r7, #4
 800985c:	4618      	mov	r0, r3
 800985e:	f7ff ffba 	bl	80097d6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 8009862:	e7e4      	b.n	800982e <_ZN12InputCapture24start_all_input_capturesEv+0x1e>
}
 8009864:	bf00      	nop
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	24000158 	.word	0x24000158

08009870 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>:

void InputCapture::interrupt_of_all_input_captures(TIM_HandleTypeDef* timer){
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
	for(auto input_capture : InputCapture::all_input_captures){
 8009878:	4b19      	ldr	r3, [pc, #100]	; (80098e0 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x70>)
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	6978      	ldr	r0, [r7, #20]
 800987e:	f000 f975 	bl	8009b6c <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009882:	4603      	mov	r3, r0
 8009884:	60fb      	str	r3, [r7, #12]
 8009886:	6978      	ldr	r0, [r7, #20]
 8009888:	f000 f980 	bl	8009b8c <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800988c:	4603      	mov	r3, r0
 800988e:	60bb      	str	r3, [r7, #8]
 8009890:	f107 0208 	add.w	r2, r7, #8
 8009894:	f107 030c 	add.w	r3, r7, #12
 8009898:	4611      	mov	r1, r2
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff ff83 	bl	80097a6 <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f083 0301 	eor.w	r3, r3, #1
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d015      	beq.n	80098d8 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x68>
 80098ac:	f107 030c 	add.w	r3, r7, #12
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff ffa0 	bl	80097f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 80098b6:	4603      	mov	r3, r0
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	613b      	str	r3, [r7, #16]
		if(input_capture->timer == timer)
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d102      	bne.n	80098cc <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x5c>
			input_capture->interrupt();
 80098c6:	6938      	ldr	r0, [r7, #16]
 80098c8:	f7ff fe82 	bl	80095d0 <_ZN12InputCapture9interruptEv>
	for(auto input_capture : InputCapture::all_input_captures){
 80098cc:	f107 030c 	add.w	r3, r7, #12
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff ff80 	bl	80097d6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 80098d6:	e7db      	b.n	8009890 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x20>
	}
}
 80098d8:	bf00      	nop
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	24000158 	.word	0x24000158

080098e4 <_ZN12InputCapture5startEv>:
void InputCapture::reset(){
	frequency = 0;
	duty = 0;
}

void InputCapture::start(){
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Start_IT(timer, channel);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f015 f9b2 	bl	801ec60 <HAL_TIM_IC_Start_IT>
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f94e 	bl	8009bae <_ZNSaIP12InputCaptureEC1Ev>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4618      	mov	r0, r3
 8009916:	f000 f956 	bl	8009bc6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <_ZNSaIP12InputCaptureED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4618      	mov	r0, r3
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800993a:	b580      	push	{r7, lr}
 800993c:	b082      	sub	sp, #8
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689a      	ldr	r2, [r3, #8]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8009952:	461a      	mov	r2, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f94a 	bl	8009bee <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      }
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff fd42 	bl	80093e6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f94d 	bl	8009c14 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4618      	mov	r0, r3
 800997e:	f7f7 f933 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3304      	adds	r3, #4
 8009986:	4618      	mov	r0, r3
 8009988:	f7f6 fcde 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4618      	mov	r0, r3
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>:
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f958 	bl	8009c6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80099ba:	4603      	mov	r3, r0
 80099bc:	4619      	mov	r1, r3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f934 	bl	8009c2c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff fd33 	bl	8009432 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <_ZN10RingBufferILm3EfEC1Ev>:
		return value;
	}

public:

	RingBuffer(){
 80099d6:	b480      	push	{r7}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	605a      	str	r2, [r3, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	609a      	str	r2, [r3, #8]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 80099f0:	2300      	movs	r3, #0
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	dc0c      	bgt.n	8009a14 <_ZN10RingBufferILm3EfEC1Ev+0x3e>
			buffer[i] = 0;
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	3302      	adds	r3, #2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4413      	add	r3, r2
 8009a04:	3304      	adds	r3, #4
 8009a06:	f04f 0200 	mov.w	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	e7ef      	b.n	80099f4 <_ZN10RingBufferILm3EfEC1Ev+0x1e>
		}
	}
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8009a2c:	6838      	ldr	r0, [r7, #0]
 8009a2e:	f000 f928 	bl	8009c82 <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>
 8009a32:	4603      	mov	r3, r0
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f92e 	bl	8009c98 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8009a44:	b590      	push	{r4, r7, lr}
 8009a46:	b08b      	sub	sp, #44	; 0x2c
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8009a4e:	6839      	ldr	r1, [r7, #0]
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 f953 	bl	8009cfc <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8009a56:	4603      	mov	r3, r0
 8009a58:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f95d 	bl	8009d1a <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8009a60:	4603      	mov	r3, r0
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	f107 020c 	add.w	r2, r7, #12
 8009a68:	f107 0308 	add.w	r3, r7, #8
 8009a6c:	4611      	mov	r1, r2
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 f960 	bl	8009d34 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d114      	bne.n	8009aa4 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f96e 	bl	8009d5c <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	681c      	ldr	r4, [r3, #0]
 8009a84:	f107 0308 	add.w	r3, r7, #8
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 f974 	bl	8009d76 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	f107 0310 	add.w	r3, r7, #16
 8009a96:	4621      	mov	r1, r4
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7f7 fa1e 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d001      	beq.n	8009aa8 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01b      	beq.n	8009ae6 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8009aae:	687c      	ldr	r4, [r7, #4]
 8009ab0:	f107 0208 	add.w	r2, r7, #8
 8009ab4:	f107 0314 	add.w	r3, r7, #20
 8009ab8:	4611      	mov	r1, r2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 f969 	bl	8009d92 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8009ac0:	f107 0318 	add.w	r3, r7, #24
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7f7 fa1a 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8009acc:	f107 0218 	add.w	r2, r7, #24
 8009ad0:	f107 031c 	add.w	r3, r7, #28
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	4a08      	ldr	r2, [pc, #32]	; (8009afc <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8009ada:	6979      	ldr	r1, [r7, #20]
 8009adc:	4620      	mov	r0, r4
 8009ade:	f000 f968 	bl	8009db2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8009ae6:	f107 0308 	add.w	r3, r7, #8
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 f943 	bl	8009d76 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 8009af0:	4603      	mov	r3, r0
 8009af2:	3304      	adds	r3, #4
      }
 8009af4:	4618      	mov	r0, r3
 8009af6:	3724      	adds	r7, #36	; 0x24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd90      	pop	{r4, r7, pc}
 8009afc:	08020c84 	.word	0x08020c84

08009b00 <_ZN13MovingAverageILm3EfE9add_valueEf>:
private:
	RingBuffer<BUFFER_SIZE, BUFFER_TYPE> ring;

public:
	float current_value;
	float add_value(BUFFER_TYPE value){
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	ed87 0a00 	vstr	s0, [r7]
		BUFFER_TYPE old_value = ring.add_new_value(value);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	ed97 0a00 	vldr	s0, [r7]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 f98b 	bl	8009e2e <_ZN10RingBufferILm3EfE13add_new_valueEf>
 8009b18:	ed87 0a03 	vstr	s0, [r7, #12]
		float temp_value = current_value;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	60bb      	str	r3, [r7, #8]
		current_value -= ((float) old_value) / BUFFER_SIZE;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	ed93 7a06 	vldr	s14, [r3, #24]
 8009b28:	edd7 6a03 	vldr	s13, [r7, #12]
 8009b2c:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8009b30:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	edc3 7a06 	vstr	s15, [r3, #24]
		current_value += ((float) value) / BUFFER_SIZE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	ed93 7a06 	vldr	s14, [r3, #24]
 8009b44:	edd7 6a00 	vldr	s13, [r7]
 8009b48:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8009b4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	edc3 7a06 	vstr	s15, [r3, #24]
		return current_value;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	ee07 3a90 	vmov	s15, r3
	}
 8009b62:	eeb0 0a67 	vmov.f32	s0, s15
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	f107 030c 	add.w	r3, r7, #12
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f000 f975 	bl	8009e6c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	1d1a      	adds	r2, r3, #4
 8009b98:	f107 030c 	add.w	r3, r7, #12
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f964 	bl	8009e6c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <_ZNSaIP12InputCaptureEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f968 	bl	8009e8c <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	605a      	str	r2, [r3, #4]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	609a      	str	r2, [r3, #8]
	{ }
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4618      	mov	r0, r3
 8009be4:	370c      	adds	r7, #12
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	60b9      	str	r1, [r7, #8]
 8009bf8:	607a      	str	r2, [r7, #4]
	if (__p)
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d005      	beq.n	8009c0c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f94b 	bl	8009ea2 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>
      }
 8009c0c:	bf00      	nop
 8009c0e:	3710      	adds	r7, #16
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f95f 	bl	8009ee0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d012      	beq.n	8009c62 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8009c3c:	6838      	ldr	r0, [r7, #0]
 8009c3e:	f000 f95a 	bl	8009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8009c42:	4603      	mov	r3, r0
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff fff0 	bl	8009c2c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8009c4c:	6838      	ldr	r0, [r7, #0]
 8009c4e:	f000 f95e 	bl	8009f0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8009c52:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8009c54:	6839      	ldr	r1, [r7, #0]
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f965 	bl	8009f26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8009c60:	e7e9      	b.n	8009c36 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8009c62:	bf00      	nop
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8009c6a:	b480      	push	{r7}
 8009c6c:	b083      	sub	sp, #12
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	4618      	mov	r0, r3
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8009c98:	b5b0      	push	{r4, r5, r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d011      	beq.n	8009cd2 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009cae:	687c      	ldr	r4, [r7, #4]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	685d      	ldr	r5, [r3, #4]
 8009cb4:	6838      	ldr	r0, [r7, #0]
 8009cb6:	f000 f947 	bl	8009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 f961 	bl	8009f88 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	1d1a      	adds	r2, r3, #4
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	605a      	str	r2, [r3, #4]
 8009cd0:	e00c      	b.n	8009cec <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7ff ff5a 	bl	8009b8c <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009cd8:	4604      	mov	r4, r0
 8009cda:	6838      	ldr	r0, [r7, #0]
 8009cdc:	f000 f934 	bl	8009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f960 	bl	8009fac <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f9d9 	bl	800a0a4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>
 8009cf2:	4603      	mov	r3, r0
      }
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bdb0      	pop	{r4, r5, r7, pc}

08009cfc <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 f9e5 	bl	800a0da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8009d10:	4603      	mov	r3, r0
 8009d12:	4618      	mov	r0, r3
 8009d14:	3708      	adds	r7, #8
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009d1a:	b580      	push	{r7, lr}
 8009d1c:	b082      	sub	sp, #8
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 f9ef 	bl	800a108 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	bf0c      	ite	eq
 8009d4a:	2301      	moveq	r3, #1
 8009d4c:	2300      	movne	r3, #0
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	4618      	mov	r0, r3
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8009d5c:	b590      	push	{r4, r7, lr}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 f9df 	bl	800a12a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8009d6c:	bf00      	nop
 8009d6e:	4620      	mov	r0, r4
 8009d70:	370c      	adds	r7, #12
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd90      	pop	{r4, r7, pc}

08009d76 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4618      	mov	r0, r3
 8009d84:	f000 f9dc 	bl	800a140 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8009d92:	b480      	push	{r7}
 8009d94:	b083      	sub	sp, #12
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009db2:	b5b0      	push	{r4, r5, r7, lr}
 8009db4:	b088      	sub	sp, #32
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	607a      	str	r2, [r7, #4]
 8009dbe:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7f7 fa50 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	6838      	ldr	r0, [r7, #0]
 8009dca:	f7f7 fd3a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009dce:	4605      	mov	r5, r0
 8009dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dd2:	f7f7 fa5e 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	462a      	mov	r2, r5
 8009dda:	4621      	mov	r1, r4
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 f9bd 	bl	800a15c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8009de2:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8009de4:	69f8      	ldr	r0, [r7, #28]
 8009de6:	f000 fb0b 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f107 0010 	add.w	r0, r7, #16
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	f000 f9d5 	bl	800a1a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d007      	beq.n	8009e0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8009dfe:	6939      	ldr	r1, [r7, #16]
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	69fb      	ldr	r3, [r7, #28]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 fb0e 	bl	800a426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	e00b      	b.n	8009e26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8009e0e:	69f9      	ldr	r1, [r7, #28]
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 f888 	bl	8009f26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	f107 0318 	add.w	r3, r7, #24
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 fb40 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009e24:	69bb      	ldr	r3, [r7, #24]
      }
 8009e26:	4618      	mov	r0, r3
 8009e28:	3720      	adds	r7, #32
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bdb0      	pop	{r4, r5, r7, pc}

08009e2e <_ZN10RingBufferILm3EfE13add_new_valueEf>:

	BUFFER_TYPE add_new_value(BUFFER_TYPE value){
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	ed87 0a00 	vstr	s0, [r7]
		BUFFER_TYPE old_value = 0;
 8009e3a:	f04f 0300 	mov.w	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
	    if(count == BUFFER_SIZE){
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2b03      	cmp	r3, #3
 8009e46:	d104      	bne.n	8009e52 <_ZN10RingBufferILm3EfE13add_new_valueEf+0x24>
	        old_value = pop_value();
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fb3b 	bl	800a4c4 <_ZN10RingBufferILm3EfE9pop_valueEv>
 8009e4e:	ed87 0a03 	vstr	s0, [r7, #12]
	    }
		push_value(value);
 8009e52:	ed97 0a00 	vldr	s0, [r7]
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fb6c 	bl	800a534 <_ZN10RingBufferILm3EfE10push_valueEf>
		return old_value;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	ee07 3a90 	vmov	s15, r3
	}
 8009e62:	eeb0 0a67 	vmov.f32	s0, s15
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b088      	sub	sp, #32
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	607a      	str	r2, [r7, #4]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	61fb      	str	r3, [r7, #28]
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	61bb      	str	r3, [r7, #24]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009eba:	f7f6 fa31 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d003      	beq.n	8009ecc <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8009ec4:	69b8      	ldr	r0, [r7, #24]
 8009ec6:	f016 fb23 	bl	8020510 <_ZdlPv>
	    return;
 8009eca:	e005      	b.n	8009ed8 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	69b9      	ldr	r1, [r7, #24]
 8009ed0:	69f8      	ldr	r0, [r7, #28]
 8009ed2:	f000 fdd0 	bl	800aa76 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8009ed6:	bf00      	nop
 8009ed8:	bf00      	nop
 8009eda:	3720      	adds	r7, #32
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4618      	mov	r0, r3
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009ef6:	b480      	push	{r7}
 8009ef8:	b083      	sub	sp, #12
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	4618      	mov	r0, r3
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b082      	sub	sp, #8
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fb32 	bl	800a59c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fb43 	bl	800a5c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr

08009f5e <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8009f5e:	b590      	push	{r4, r7, lr}
 8009f60:	b083      	sub	sp, #12
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8009f68:	6838      	ldr	r0, [r7, #0]
 8009f6a:	f7ff ffed 	bl	8009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	681c      	ldr	r4, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4619      	mov	r1, r3
 8009f76:	2004      	movs	r0, #4
 8009f78:	f7f6 f9da 	bl	8000330 <_ZnwjPv>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	601c      	str	r4, [r3, #0]
 8009f80:	4618      	mov	r0, r3
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd90      	pop	{r4, r7, pc}

08009f88 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ffd7 	bl	8009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	68b8      	ldr	r0, [r7, #8]
 8009fa0:	f7ff ffdd 	bl	8009f5e <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8009fa4:	bf00      	nop
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009fac:	b5b0      	push	{r4, r5, r7, lr}
 8009fae:	b08c      	sub	sp, #48	; 0x30
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8009fb8:	4a39      	ldr	r2, [pc, #228]	; (800a0a0 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8009fba:	2101      	movs	r1, #1
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 fb14 	bl	800a5ea <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>
 8009fc2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff fdcb 	bl	8009b6c <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	617b      	str	r3, [r7, #20]
 8009fda:	f107 0214 	add.w	r2, r7, #20
 8009fde:	f107 0308 	add.w	r3, r7, #8
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 fb47 	bl	800a678 <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8009fea:	4603      	mov	r3, r0
 8009fec:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 fb55 	bl	800a6a2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>
 8009ff8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009ffe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800a004:	69fa      	ldr	r2, [r7, #28]
 800a006:	18d5      	adds	r5, r2, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff ff9d 	bl	8009f48 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 800a00e:	4603      	mov	r3, r0
 800a010:	461a      	mov	r2, r3
 800a012:	4629      	mov	r1, r5
 800a014:	4620      	mov	r0, r4
 800a016:	f7ff ffb7 	bl	8009f88 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800a01a:	2300      	movs	r3, #0
 800a01c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800a01e:	f107 0308 	add.w	r3, r7, #8
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff fbb4 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a028:	4603      	mov	r3, r0
 800a02a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 fb5f 	bl	800a6f2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800a034:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	4621      	mov	r1, r4
 800a03a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a03c:	f000 fb45 	bl	800a6ca <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800a040:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	3304      	adds	r3, #4
 800a046:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800a048:	f107 0308 	add.w	r3, r7, #8
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7ff fb9f 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a052:	4603      	mov	r3, r0
 800a054:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 fb4a 	bl	800a6f2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800a05e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800a060:	69ba      	ldr	r2, [r7, #24]
 800a062:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a064:	4620      	mov	r0, r4
 800a066:	f000 fb30 	bl	800a6ca <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800a06a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800a06c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	689a      	ldr	r2, [r3, #8]
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800a078:	461a      	mov	r2, r3
 800a07a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a07c:	f7ff fdb7 	bl	8009bee <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	69fa      	ldr	r2, [r7, #28]
 800a084:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	69ba      	ldr	r2, [r7, #24]
 800a08a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800a08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	69fa      	ldr	r2, [r7, #28]
 800a092:	441a      	add	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	609a      	str	r2, [r3, #8]
    }
 800a098:	bf00      	nop
 800a09a:	3730      	adds	r7, #48	; 0x30
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bdb0      	pop	{r4, r5, r7, pc}
 800a0a0:	08020bb0 	.word	0x08020bb0

0800a0a4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff fd6d 	bl	8009b8c <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	60fb      	str	r3, [r7, #12]
 800a0b6:	f107 030c 	add.w	r3, r7, #12
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f000 fb31 	bl	800a724 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	60bb      	str	r3, [r7, #8]
 800a0c6:	f107 0308 	add.w	r3, r7, #8
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7ff fb93 	bl	80097f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 800a0d0:	4603      	mov	r3, r0
      }
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 800a0da:	b590      	push	{r4, r7, lr}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff fdc0 	bl	8009c6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fb32 	bl	800a756 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 fb38 	bl	800a76e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800a0fe:	4603      	mov	r3, r0
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	bd90      	pop	{r4, r7, pc}

0800a108 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	1d1a      	adds	r2, r3, #4
 800a114:	f107 030c 	add.w	r3, r7, #12
 800a118:	4611      	mov	r1, r2
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f9c2 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800a132:	bf00      	nop
 800a134:	4618      	mov	r0, r3
 800a136:	370c      	adds	r7, #12
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr

0800a140 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr()
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3310      	adds	r3, #16
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 fb41 	bl	800a7d4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 800a152:	4603      	mov	r3, r0
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800a15c:	b5b0      	push	{r4, r5, r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af02      	add	r7, sp, #8
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f000 fb3e 	bl	800a7ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800a170:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800a172:	68b8      	ldr	r0, [r7, #8]
 800a174:	f7f7 f877 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a178:	4604      	mov	r4, r0
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7f7 fb61 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a180:	4605      	mov	r5, r0
 800a182:	6838      	ldr	r0, [r7, #0]
 800a184:	f7f7 f885 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a188:	4603      	mov	r3, r0
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	462b      	mov	r3, r5
 800a18e:	4622      	mov	r2, r4
 800a190:	6979      	ldr	r1, [r7, #20]
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 fb3b 	bl	800a80e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 800a198:	697b      	ldr	r3, [r7, #20]
	}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3718      	adds	r7, #24
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bdb0      	pop	{r4, r5, r7, pc}

0800a1a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a1a2:	b5b0      	push	{r4, r5, r7, lr}
 800a1a4:	b08c      	sub	sp, #48	; 0x30
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	60f8      	str	r0, [r7, #12]
 800a1aa:	60b9      	str	r1, [r7, #8]
 800a1ac:	607a      	str	r2, [r7, #4]
 800a1ae:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800a1b0:	1d3b      	adds	r3, r7, #4
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f000 fb58 	bl	800a868 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800a1bc:	69bc      	ldr	r4, [r7, #24]
 800a1be:	68b8      	ldr	r0, [r7, #8]
 800a1c0:	f000 fac9 	bl	800a756 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	429c      	cmp	r4, r3
 800a1c8:	bf0c      	ite	eq
 800a1ca:	2301      	moveq	r3, #1
 800a1cc:	2300      	movne	r3, #0
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d032      	beq.n	800a23a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 800a1d4:	68b8      	ldr	r0, [r7, #8]
 800a1d6:	f000 fb58 	bl	800a88a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 800a1da:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d015      	beq.n	800a20c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800a1e0:	68bc      	ldr	r4, [r7, #8]
 800a1e2:	68b8      	ldr	r0, [r7, #8]
 800a1e4:	f000 fb5d 	bl	800a8a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fb64 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	6819      	ldr	r1, [r3, #0]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f7f6 fe6c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800a208:	2301      	movs	r3, #1
 800a20a:	e000      	b.n	800a20e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 800a20c:	2300      	movs	r3, #0
	  if (size() > 0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00c      	beq.n	800a22c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800a212:	2300      	movs	r3, #0
 800a214:	61fb      	str	r3, [r7, #28]
 800a216:	68b8      	ldr	r0, [r7, #8]
 800a218:	f000 fb43 	bl	800a8a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a21c:	4602      	mov	r2, r0
 800a21e:	f107 031c 	add.w	r3, r7, #28
 800a222:	4619      	mov	r1, r3
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f7f7 fe3f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a22a:	e0e5      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	68b9      	ldr	r1, [r7, #8]
 800a232:	4618      	mov	r0, r3
 800a234:	f000 fb4d 	bl	800a8d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a238:	e0de      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800a23a:	68bc      	ldr	r4, [r7, #8]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681d      	ldr	r5, [r3, #0]
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 fb39 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a248:	4603      	mov	r3, r0
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	4629      	mov	r1, r5
 800a250:	4620      	mov	r0, r4
 800a252:	f7f6 fe42 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d059      	beq.n	800a310 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800a260:	69bc      	ldr	r4, [r7, #24]
 800a262:	68b8      	ldr	r0, [r7, #8]
 800a264:	f000 fbbf 	bl	800a9e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a268:	4603      	mov	r3, r0
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	429c      	cmp	r4, r3
 800a26e:	bf0c      	ite	eq
 800a270:	2301      	moveq	r3, #1
 800a272:	2300      	movne	r3, #0
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00d      	beq.n	800a296 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 800a27a:	68b8      	ldr	r0, [r7, #8]
 800a27c:	f000 fbb3 	bl	800a9e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a280:	4604      	mov	r4, r0
 800a282:	68b8      	ldr	r0, [r7, #8]
 800a284:	f000 fbaf 	bl	800a9e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a288:	4603      	mov	r3, r0
 800a28a:	461a      	mov	r2, r3
 800a28c:	4621      	mov	r1, r4
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f7f7 feb6 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a294:	e0b0      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800a296:	68bc      	ldr	r4, [r7, #8]
 800a298:	f107 0314 	add.w	r3, r7, #20
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fbae 	bl	800a9fe <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fb07 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f7f6 fe0f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d01f      	beq.n	800a302 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7ff fe16 	bl	8009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bf0c      	ite	eq
 800a2d0:	2301      	moveq	r3, #1
 800a2d2:	2300      	movne	r3, #0
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 800a2da:	2300      	movs	r3, #0
 800a2dc:	623b      	str	r3, [r7, #32]
 800a2de:	f107 0214 	add.w	r2, r7, #20
 800a2e2:	f107 0320 	add.w	r3, r7, #32
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f7f7 fddd 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a2ee:	e083      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800a2f0:	f107 0218 	add.w	r2, r7, #24
 800a2f4:	f107 0318 	add.w	r3, r7, #24
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f7f7 fe80 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a300:	e07a      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	68b9      	ldr	r1, [r7, #8]
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 fae2 	bl	800a8d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a30e:	e073      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800a310:	68bc      	ldr	r4, [r7, #8]
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	4618      	mov	r0, r3
 800a316:	f000 fad0 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a31a:	4603      	mov	r3, r0
 800a31c:	6819      	ldr	r1, [r3, #0]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	4620      	mov	r0, r4
 800a326:	f7f6 fdd8 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d059      	beq.n	800a3e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800a334:	69bc      	ldr	r4, [r7, #24]
 800a336:	68b8      	ldr	r0, [r7, #8]
 800a338:	f000 fab3 	bl	800a8a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a33c:	4603      	mov	r3, r0
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	429c      	cmp	r4, r3
 800a342:	bf0c      	ite	eq
 800a344:	2301      	moveq	r3, #1
 800a346:	2300      	movne	r3, #0
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00c      	beq.n	800a368 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800a34e:	2300      	movs	r3, #0
 800a350:	627b      	str	r3, [r7, #36]	; 0x24
 800a352:	68b8      	ldr	r0, [r7, #8]
 800a354:	f000 faa5 	bl	800a8a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a358:	4602      	mov	r2, r0
 800a35a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a35e:	4619      	mov	r1, r3
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f7f7 fda1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a366:	e047      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800a368:	68bc      	ldr	r4, [r7, #8]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681d      	ldr	r5, [r3, #0]
 800a36e:	f107 0310 	add.w	r3, r7, #16
 800a372:	4618      	mov	r0, r3
 800a374:	f000 fb54 	bl	800aa20 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>
 800a378:	4603      	mov	r3, r0
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 fa9c 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a382:	4603      	mov	r3, r0
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	4629      	mov	r1, r5
 800a38a:	4620      	mov	r0, r4
 800a38c:	f7f6 fda5 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d01f      	beq.n	800a3d6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff fdac 	bl	8009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	bf0c      	ite	eq
 800a3a4:	2301      	moveq	r3, #1
 800a3a6:	2300      	movne	r3, #0
 800a3a8:	b2db      	uxtb	r3, r3
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00a      	beq.n	800a3c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3b2:	f107 0218 	add.w	r2, r7, #24
 800a3b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f7f7 fd73 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a3c2:	e019      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 800a3c4:	f107 0210 	add.w	r2, r7, #16
 800a3c8:	f107 0310 	add.w	r3, r7, #16
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	68f8      	ldr	r0, [r7, #12]
 800a3d0:	f7f7 fe16 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a3d4:	e010      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	68b9      	ldr	r1, [r7, #8]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f000 fa78 	bl	800a8d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a3e2:	e009      	b.n	800a3f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3e8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a3ec:	f107 0318 	add.w	r3, r7, #24
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	68f8      	ldr	r0, [r7, #12]
 800a3f4:	f7f7 fe3f 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	3730      	adds	r7, #48	; 0x30
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bdb0      	pop	{r4, r5, r7, pc}

0800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fb1a 	bl	800aa42 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a40e:	4602      	mov	r2, r0
 800a410:	f107 030c 	add.w	r3, r7, #12
 800a414:	4611      	mov	r1, r2
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fb21 	bl	800aa5e <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>
 800a41c:	4603      	mov	r3, r0
      }
 800a41e:	4618      	mov	r0, r3
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a426:	b5b0      	push	{r4, r5, r7, lr}
 800a428:	b086      	sub	sp, #24
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	607a      	str	r2, [r7, #4]
 800a432:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d119      	bne.n	800a46e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f000 f98b 	bl	800a756 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a440:	4602      	mov	r2, r0
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4293      	cmp	r3, r2
 800a446:	d012      	beq.n	800a46e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 800a448:	68fc      	ldr	r4, [r7, #12]
 800a44a:	6838      	ldr	r0, [r7, #0]
 800a44c:	f7ff ffd8 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a450:	4603      	mov	r3, r0
 800a452:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fa30 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a45a:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	4629      	mov	r1, r5
 800a462:	4620      	mov	r0, r4
 800a464:	f7f6 fd39 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800a46e:	2301      	movs	r3, #1
 800a470:	e000      	b.n	800a474 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 800a472:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a474:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800a47a:	7df8      	ldrb	r0, [r7, #23]
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	f016 f8b6 	bl	80205f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	1c5a      	adds	r2, r3, #1
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800a48e:	f107 0310 	add.w	r3, r7, #16
 800a492:	6839      	ldr	r1, [r7, #0]
 800a494:	4618      	mov	r0, r3
 800a496:	f000 f805 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a49a:	693b      	ldr	r3, [r7, #16]
    }
 800a49c:	4618      	mov	r0, r3
 800a49e:	3718      	adds	r7, #24
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bdb0      	pop	{r4, r5, r7, pc}

0800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	601a      	str	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <_ZN10RingBufferILm3EfE9pop_valueEv>:
	BUFFER_TYPE pop_value(){
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
		if(count == 0)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <_ZN10RingBufferILm3EfE9pop_valueEv+0x16>
			return 0;				// Trying to pop with buffer empty
 800a4d4:	f04f 0300 	mov.w	r3, #0
 800a4d8:	e020      	b.n	800a51c <_ZN10RingBufferILm3EfE9pop_valueEv+0x58>
		BUFFER_TYPE value = buffer[initial_pointer];
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	3302      	adds	r3, #2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]
		initial_pointer ++;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	601a      	str	r2, [r3, #0]
		initial_pointer %= BUFFER_SIZE;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	4b0c      	ldr	r3, [pc, #48]	; (800a530 <_ZN10RingBufferILm3EfE9pop_valueEv+0x6c>)
 800a4fe:	fba3 2301 	umull	r2, r3, r3, r1
 800a502:	085a      	lsrs	r2, r3, #1
 800a504:	4613      	mov	r3, r2
 800a506:	005b      	lsls	r3, r3, #1
 800a508:	4413      	add	r3, r2
 800a50a:	1aca      	subs	r2, r1, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	601a      	str	r2, [r3, #0]
		count --;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	1e5a      	subs	r2, r3, #1
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	609a      	str	r2, [r3, #8]
		return value;
 800a51a:	68fb      	ldr	r3, [r7, #12]
	}
 800a51c:	ee07 3a90 	vmov	s15, r3
 800a520:	eeb0 0a67 	vmov.f32	s0, s15
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	aaaaaaab 	.word	0xaaaaaaab

0800a534 <_ZN10RingBufferILm3EfE10push_valueEf>:
	void push_value(BUFFER_TYPE value){
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	ed87 0a00 	vstr	s0, [r7]
		if(count == BUFFER_SIZE)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	2b03      	cmp	r3, #3
 800a546:	d020      	beq.n	800a58a <_ZN10RingBufferILm3EfE10push_valueEf+0x56>
		buffer[end_pointer] = value;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	3302      	adds	r3, #2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	4413      	add	r3, r2
 800a554:	3304      	adds	r3, #4
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	601a      	str	r2, [r3, #0]
		end_pointer ++;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	605a      	str	r2, [r3, #4]
    	end_pointer %= BUFFER_SIZE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	4619      	mov	r1, r3
 800a56a:	4b0b      	ldr	r3, [pc, #44]	; (800a598 <_ZN10RingBufferILm3EfE10push_valueEf+0x64>)
 800a56c:	fba3 2301 	umull	r2, r3, r3, r1
 800a570:	085a      	lsrs	r2, r3, #1
 800a572:	4613      	mov	r3, r2
 800a574:	005b      	lsls	r3, r3, #1
 800a576:	4413      	add	r3, r2
 800a578:	1aca      	subs	r2, r1, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	605a      	str	r2, [r3, #4]
		count ++;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	609a      	str	r2, [r3, #8]
 800a588:	e000      	b.n	800a58c <_ZN10RingBufferILm3EfE10push_valueEf+0x58>
			return;					// Trying to push with buffer full
 800a58a:	bf00      	nop
	}
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	aaaaaaab 	.word	0xaaaaaaab

0800a59c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a59c:	b590      	push	{r4, r7, lr}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fa74 	bl	800aa94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	6838      	ldr	r0, [r7, #0]
 800a5b0:	f7ff fdc6 	bl	800a140 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f000 fa76 	bl	800aaaa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>
      }
 800a5be:	bf00      	nop
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd90      	pop	{r4, r7, pc}

0800a5c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b082      	sub	sp, #8
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fa5f 	bl	800aa94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2201      	movs	r2, #1
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 fa70 	bl	800aac2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>
 800a5e2:	bf00      	nop
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800a5ea:	b590      	push	{r4, r7, lr}
 800a5ec:	b087      	sub	sp, #28
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 fa82 	bl	800ab00 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a5fc:	4604      	mov	r4, r0
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 fa8f 	bl	800ab22 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a604:	4603      	mov	r3, r0
 800a606:	1ae2      	subs	r2, r4, r3
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	bf34      	ite	cc
 800a60e:	2301      	movcc	r3, #1
 800a610:	2300      	movcs	r3, #0
 800a612:	b2db      	uxtb	r3, r3
 800a614:	2b00      	cmp	r3, #0
 800a616:	d002      	beq.n	800a61e <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f016 f847 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f000 fa7f 	bl	800ab22 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a624:	4604      	mov	r4, r0
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 fa7b 	bl	800ab22 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a62c:	4603      	mov	r3, r0
 800a62e:	613b      	str	r3, [r7, #16]
 800a630:	f107 0208 	add.w	r2, r7, #8
 800a634:	f107 0310 	add.w	r3, r7, #16
 800a638:	4611      	mov	r1, r2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7f8 f909 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800a640:	4603      	mov	r3, r0
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4423      	add	r3, r4
 800a646:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fa6a 	bl	800ab22 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a64e:	4602      	mov	r2, r0
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	4293      	cmp	r3, r2
 800a654:	d306      	bcc.n	800a664 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 fa52 	bl	800ab00 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a65c:	4602      	mov	r2, r0
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	4293      	cmp	r3, r2
 800a662:	d904      	bls.n	800a66e <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x84>
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 fa4b 	bl	800ab00 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a66a:	4603      	mov	r3, r0
 800a66c:	e000      	b.n	800a670 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x86>
 800a66e:	697b      	ldr	r3, [r7, #20]
      }
 800a670:	4618      	mov	r0, r3
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	bd90      	pop	{r4, r7, pc}

0800a678 <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a678:	b590      	push	{r4, r7, lr}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff f884 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a688:	4603      	mov	r3, r0
 800a68a:	681c      	ldr	r4, [r3, #0]
 800a68c:	6838      	ldr	r0, [r7, #0]
 800a68e:	f7ff f87f 	bl	8009790 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a692:	4603      	mov	r3, r0
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	1ae3      	subs	r3, r4, r3
 800a698:	109b      	asrs	r3, r3, #2
 800a69a:	4618      	mov	r0, r3
 800a69c:	370c      	adds	r7, #12
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd90      	pop	{r4, r7, pc}

0800a6a2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d006      	beq.n	800a6c0 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x1e>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f000 fa43 	bl	800ab42 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	e000      	b.n	800a6c2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x20>
 800a6c0:	2300      	movs	r3, #0
      }
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800a6ca:	b590      	push	{r4, r7, lr}
 800a6cc:	b087      	sub	sp, #28
 800a6ce:	af02      	add	r7, sp, #8
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	607a      	str	r2, [r7, #4]
 800a6d6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800a6d8:	f88d 4000 	strb.w	r4, [sp]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	68b9      	ldr	r1, [r7, #8]
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 fa4d 	bl	800ab82 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800a6e8:	4603      	mov	r3, r0
      }
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3714      	adds	r7, #20
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd90      	pop	{r4, r7, pc}

0800a6f2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f000 fa4f 	bl	800abba <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>
    }
 800a71c:	bf00      	nop
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	425b      	negs	r3, r3
 800a738:	4413      	add	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	f107 020c 	add.w	r2, r7, #12
 800a740:	f107 0308 	add.w	r3, r7, #8
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f7ff fb90 	bl	8009e6c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3304      	adds	r3, #4
 800a762:	4618      	mov	r0, r3
 800a764:	370c      	adds	r7, #12
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr

0800a76e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a76e:	b590      	push	{r4, r7, lr}
 800a770:	b087      	sub	sp, #28
 800a772:	af00      	add	r7, sp, #0
 800a774:	60f8      	str	r0, [r7, #12]
 800a776:	60b9      	str	r1, [r7, #8]
 800a778:	607a      	str	r2, [r7, #4]
 800a77a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d01d      	beq.n	800a7be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800a782:	68fc      	ldr	r4, [r7, #12]
 800a784:	68b8      	ldr	r0, [r7, #8]
 800a786:	f7ff fe3b 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a78a:	4603      	mov	r3, r0
 800a78c:	6819      	ldr	r1, [r3, #0]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	4620      	mov	r0, r4
 800a796:	f7f6 fba0 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a79a:	4603      	mov	r3, r0
 800a79c:	f083 0301 	eor.w	r3, r3, #1
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d006      	beq.n	800a7b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	607b      	str	r3, [r7, #4]
 800a7aa:	68b8      	ldr	r0, [r7, #8]
 800a7ac:	f7ff fbaf 	bl	8009f0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a7b0:	60b8      	str	r0, [r7, #8]
 800a7b2:	e7e3      	b.n	800a77c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 800a7b4:	68b8      	ldr	r0, [r7, #8]
 800a7b6:	f7ff fb9e 	bl	8009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a7ba:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800a7bc:	e7de      	b.n	800a77c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 800a7be:	f107 0314 	add.w	r3, r7, #20
 800a7c2:	6879      	ldr	r1, [r7, #4]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff fe6d 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a7ca:	697b      	ldr	r3, [r7, #20]
    }
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	371c      	adds	r7, #28
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd90      	pop	{r4, r7, pc}

0800a7d4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() noexcept
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fa02 	bl	800abe6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f94d 	bl	800aa94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2101      	movs	r1, #1
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 f9fc 	bl	800abfc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>
 800a804:	4603      	mov	r3, r0
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800a80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af02      	add	r7, sp, #8
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	4619      	mov	r1, r3
 800a822:	2018      	movs	r0, #24
 800a824:	f7f5 fd84 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 f933 	bl	800aa94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a82e:	4604      	mov	r4, r0
 800a830:	68b8      	ldr	r0, [r7, #8]
 800a832:	f7ff fc85 	bl	800a140 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a836:	4605      	mov	r5, r0
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7f6 fd14 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a83e:	4606      	mov	r6, r0
 800a840:	6838      	ldr	r0, [r7, #0]
 800a842:	f7f6 fffe 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a846:	4680      	mov	r8, r0
 800a848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a84a:	f7f6 fd22 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a84e:	4603      	mov	r3, r0
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	4643      	mov	r3, r8
 800a854:	4632      	mov	r2, r6
 800a856:	4629      	mov	r1, r5
 800a858:	4620      	mov	r0, r4
 800a85a:	f000 fa1c 	bl	800ac96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a868 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	f107 030c 	add.w	r3, r7, #12
 800a878:	4611      	mov	r1, r2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fe12 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a88a:	b480      	push	{r7}
 800a88c:	b083      	sub	sp, #12
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	695b      	ldr	r3, [r3, #20]
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800a8a2:	b480      	push	{r7}
 800a8a4:	b083      	sub	sp, #12
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	3310      	adds	r3, #16
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7ff fd9c 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a8d2:	b5b0      	push	{r4, r5, r7, lr}
 800a8d4:	b08a      	sub	sp, #40	; 0x28
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	60f8      	str	r0, [r7, #12]
 800a8da:	60b9      	str	r1, [r7, #8]
 800a8dc:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800a8de:	68b8      	ldr	r0, [r7, #8]
 800a8e0:	f7ff f9c3 	bl	8009c6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800a8e8:	68b8      	ldr	r0, [r7, #8]
 800a8ea:	f7ff ff34 	bl	800a756 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d023      	beq.n	800a946 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800a902:	68bc      	ldr	r4, [r7, #8]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681d      	ldr	r5, [r3, #0]
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7ff fd78 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a910:	4603      	mov	r3, r0
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	461a      	mov	r2, r3
 800a916:	4629      	mov	r1, r5
 800a918:	4620      	mov	r0, r4
 800a91a:	f7f6 fade 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a91e:	4603      	mov	r3, r0
 800a920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800a924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d005      	beq.n	800a938 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff faed 	bl	8009f0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a934:	4603      	mov	r3, r0
 800a936:	e004      	b.n	800a942 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff fadb 	bl	8009ef6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a940:	4603      	mov	r3, r0
 800a942:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800a944:	e7d8      	b.n	800a8f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	f107 0310 	add.w	r3, r7, #16
 800a94c:	4611      	mov	r1, r2
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff fda8 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800a954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01d      	beq.n	800a998 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800a95c:	68b8      	ldr	r0, [r7, #8]
 800a95e:	f000 f9b6 	bl	800acce <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800a962:	4603      	mov	r3, r0
 800a964:	61fb      	str	r3, [r7, #28]
 800a966:	f107 021c 	add.w	r2, r7, #28
 800a96a:	f107 0310 	add.w	r3, r7, #16
 800a96e:	4611      	mov	r1, r2
 800a970:	4618      	mov	r0, r3
 800a972:	f7ff f9df 	bl	8009d34 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d008      	beq.n	800a98e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800a97c:	f107 0214 	add.w	r2, r7, #20
 800a980:	f107 0318 	add.w	r3, r7, #24
 800a984:	4619      	mov	r1, r3
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f000 f9b2 	bl	800acf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a98c:	e027      	b.n	800a9de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 800a98e:	f107 0310 	add.w	r3, r7, #16
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f833 	bl	800a9fe <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800a998:	68bc      	ldr	r4, [r7, #8]
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff ff8c 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	6819      	ldr	r1, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f7f6 fa94 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d008      	beq.n	800a9ca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 800a9b8:	f107 0214 	add.w	r2, r7, #20
 800a9bc:	f107 0318 	add.w	r3, r7, #24
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f000 f994 	bl	800acf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a9c8:	e009      	b.n	800a9de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	623b      	str	r3, [r7, #32]
 800a9ce:	f107 0220 	add.w	r2, r7, #32
 800a9d2:	f107 0310 	add.w	r3, r7, #16
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f7f7 fb4c 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	3728      	adds	r7, #40	; 0x28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bdb0      	pop	{r4, r5, r7, pc}

0800a9e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800a9e6:	b480      	push	{r7}
 800a9e8:	b083      	sub	sp, #12
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	330c      	adds	r3, #12
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f015 fdee 	bl	80205ec <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800aa10:	4602      	mov	r2, r0
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	601a      	str	r2, [r3, #0]
	return *this;
 800aa16:	687b      	ldr	r3, [r7, #4]
      }
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f015 fddb 	bl	80205e8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800aa32:	4602      	mov	r2, r0
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	601a      	str	r2, [r3, #0]
	return *this;
 800aa38:	687b      	ldr	r3, [r7, #4]
      }
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr() const
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	3310      	adds	r3, #16
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 f967 	bl	800ad22 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 800aa54:	4603      	mov	r3, r0
 800aa56:	4618      	mov	r0, r3
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>:
      operator()(const _Pair& __x) const
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b084      	sub	sp, #16
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4619      	mov	r1, r3
 800aa88:	68b8      	ldr	r0, [r7, #8]
 800aa8a:	f015 fd43 	bl	8020514 <_ZdlPvj>
      }
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b082      	sub	sp, #8
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800aab4:	6838      	ldr	r0, [r7, #0]
 800aab6:	f000 f940 	bl	800ad3a <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>
	}
 800aaba:	bf00      	nop
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b088      	sub	sp, #32
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	60f8      	str	r0, [r7, #12]
 800aaca:	60b9      	str	r1, [r7, #8]
 800aacc:	607a      	str	r2, [r7, #4]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	61fb      	str	r3, [r7, #28]
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	61bb      	str	r3, [r7, #24]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800aada:	f7f5 fc21 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d003      	beq.n	800aaec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800aae4:	69b8      	ldr	r0, [r7, #24]
 800aae6:	f015 fd13 	bl	8020510 <_ZdlPv>
	    return;
 800aaea:	e005      	b.n	800aaf8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	69b9      	ldr	r1, [r7, #24]
 800aaf0:	69f8      	ldr	r0, [r7, #28]
 800aaf2:	f000 f9e1 	bl	800aeb8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800aaf6:	bf00      	nop
 800aaf8:	bf00      	nop
 800aafa:	3720      	adds	r7, #32
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 f945 	bl	800ad9a <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800ab10:	4603      	mov	r3, r0
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f927 	bl	800ad66 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	109b      	asrs	r3, r3, #2
 800ab36:	4618      	mov	r0, r3
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b084      	sub	sp, #16
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ab54:	f7f5 fbe4 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d006      	beq.n	800ab6c <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4618      	mov	r0, r3
 800ab64:	f015 fcd8 	bl	8020518 <_Znwj>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	e006      	b.n	800ab7a <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 f9b3 	bl	800aedc <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>
 800ab76:	4603      	mov	r3, r0
 800ab78:	bf00      	nop
      { return __a.allocate(__n); }
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	607a      	str	r2, [r7, #4]
 800ab8e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	68b9      	ldr	r1, [r7, #8]
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f000 f90a 	bl	800adb0 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>
 800ab9c:	4603      	mov	r3, r0
      }
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <_ZSt10destroy_atIP12InputCaptureEvPT_>:
    destroy_at(_Tp* __location)
 800aba6:	b480      	push	{r7}
 800aba8:	b083      	sub	sp, #12
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
    }
 800abae:	bf00      	nop
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr

0800abba <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800abba:	b580      	push	{r7, lr}
 800abbc:	b082      	sub	sp, #8
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800abc4:	f7f5 fbac 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d004      	beq.n	800abd8 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f90a 	bl	800adea <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>
 800abd6:	e003      	b.n	800abe0 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x26>
	__destroy(__first, __last);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 f91d 	bl	800ae1a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>
    }
 800abe0:	3708      	adds	r7, #8
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() noexcept
 800abe6:	b480      	push	{r7}
 800abe8:	b083      	sub	sp, #12
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	60fb      	str	r3, [r7, #12]
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ac0e:	f7f5 fb87 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d009      	beq.n	800ac2c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	4413      	add	r3, r2
 800ac20:	00db      	lsls	r3, r3, #3
 800ac22:	4618      	mov	r0, r3
 800ac24:	f015 fc78 	bl	8020518 <_Znwj>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	e006      	b.n	800ac3a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	68b9      	ldr	r1, [r7, #8]
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f000 f9b1 	bl	800af98 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>
 800ac36:	4603      	mov	r3, r0
 800ac38:	bf00      	nop
      { return __a.allocate(__n); }
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800ac42:	b5b0      	push	{r4, r5, r7, lr}
 800ac44:	b088      	sub	sp, #32
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	60f8      	str	r0, [r7, #12]
 800ac4a:	60b9      	str	r1, [r7, #8]
 800ac4c:	607a      	str	r2, [r7, #4]
 800ac4e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800ac50:	68b8      	ldr	r0, [r7, #8]
 800ac52:	f7f6 fb08 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7f6 fdf3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	f107 0318 	add.w	r3, r7, #24
 800ac62:	4611      	mov	r1, r2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7f7 fe88 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800ac6a:	f107 0418 	add.w	r4, r7, #24
 800ac6e:	6838      	ldr	r0, [r7, #0]
 800ac70:	f7f6 fb0f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	4619      	mov	r1, r3
 800ac78:	2008      	movs	r0, #8
 800ac7a:	f7f5 fb59 	bl	8000330 <_ZnwjPv>
 800ac7e:	4605      	mov	r5, r0
 800ac80:	7f3b      	ldrb	r3, [r7, #28]
 800ac82:	4622      	mov	r2, r4
 800ac84:	7d39      	ldrb	r1, [r7, #20]
 800ac86:	4628      	mov	r0, r5
 800ac88:	f000 f8ec 	bl	800ae64 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800ac8c:	462b      	mov	r3, r5
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3720      	adds	r7, #32
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bdb0      	pop	{r4, r5, r7, pc}

0800ac96 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800ac96:	b5b0      	push	{r4, r5, r7, lr}
 800ac98:	b084      	sub	sp, #16
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	60f8      	str	r0, [r7, #12]
 800ac9e:	60b9      	str	r1, [r7, #8]
 800aca0:	607a      	str	r2, [r7, #4]
 800aca2:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f7f6 fade 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800acaa:	4604      	mov	r4, r0
 800acac:	6838      	ldr	r0, [r7, #0]
 800acae:	f7f6 fdc8 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800acb2:	4605      	mov	r5, r0
 800acb4:	6a38      	ldr	r0, [r7, #32]
 800acb6:	f7f6 faec 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800acba:	4603      	mov	r3, r0
 800acbc:	462a      	mov	r2, r5
 800acbe:	4621      	mov	r1, r4
 800acc0:	68b8      	ldr	r0, [r7, #8]
 800acc2:	f7ff ffbe 	bl	800ac42 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bdb0      	pop	{r4, r5, r7, pc}

0800acce <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68da      	ldr	r2, [r3, #12]
 800acda:	f107 030c 	add.w	r3, r7, #12
 800acde:	4611      	mov	r1, r2
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7ff fbdf 	bl	800a4a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800acfc:	68b8      	ldr	r0, [r7, #8]
 800acfe:	f000 f8c5 	bl	800ae8c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>
 800ad02:	4603      	mov	r3, r0
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7f7 fd4f 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800ad10:	4603      	mov	r3, r0
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	605a      	str	r2, [r3, #4]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f8b9 	bl	800aea2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800ad30:	4603      	mov	r3, r0
 800ad32:	4618      	mov	r0, r3
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>:
    destroy_at(_Tp* __location)
 800ad3a:	b480      	push	{r7}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
    }
 800ad42:	bf00      	nop
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800ad56:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b084      	sub	sp, #16
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800ad6e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800ad72:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff ffea 	bl	800ad4e <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800ad7e:	f107 0208 	add.w	r2, r7, #8
 800ad82:	f107 030c 	add.w	r3, r7, #12
 800ad86:	4611      	mov	r1, r2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7f8 f82c 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	681b      	ldr	r3, [r3, #0]
      }
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4618      	mov	r0, r3
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800adb0:	b5b0      	push	{r4, r5, r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f000 f8ab 	bl	800af1a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800adc4:	4604      	mov	r4, r0
 800adc6:	68b8      	ldr	r0, [r7, #8]
 800adc8:	f000 f8a7 	bl	800af1a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800adcc:	4605      	mov	r5, r0
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f8a3 	bl	800af1a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800add4:	4602      	mov	r2, r0
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	4629      	mov	r1, r5
 800adda:	4620      	mov	r0, r4
 800addc:	f000 f8a8 	bl	800af30 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ade0:	4603      	mov	r3, r0
    }
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bdb0      	pop	{r4, r5, r7, pc}

0800adea <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800adea:	b580      	push	{r7, lr}
 800adec:	b082      	sub	sp, #8
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d00a      	beq.n	800ae12 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f8b5 	bl	800af6c <_ZSt11__addressofIP12InputCaptureEPT_RS2_>
 800ae02:	4603      	mov	r3, r0
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 f8bc 	bl	800af82 <_ZSt8_DestroyIP12InputCaptureEvPT_>
	  for (; __first != __last; ++__first)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	607b      	str	r3, [r7, #4]
 800ae10:	e7f0      	b.n	800adf4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0xa>
	}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800ae3e:	68b8      	ldr	r0, [r7, #8]
 800ae40:	f7f8 f87d 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ae44:	4603      	mov	r3, r0
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7f8 f86e 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800ae4c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	605a      	str	r2, [r3, #4]
      { }
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 800ae64:	b5b0      	push	{r4, r5, r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	7239      	strb	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800ae72:	463a      	mov	r2, r7
 800ae74:	f88d 4000 	strb.w	r4, [sp]
 800ae78:	462b      	mov	r3, r5
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f7ff ffd7 	bl	800ae30 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	4618      	mov	r0, r3
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bdb0      	pop	{r4, r5, r7, pc}

0800ae8c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	4618      	mov	r0, r3
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() const noexcept
 800aea2:	b480      	push	{r7}
 800aea4:	b083      	sub	sp, #12
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	4613      	mov	r3, r2
 800aec8:	005b      	lsls	r3, r3, #1
 800aeca:	4413      	add	r3, r2
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	4619      	mov	r1, r3
 800aed0:	68b8      	ldr	r0, [r7, #8]
 800aed2:	f015 fb1f 	bl	8020514 <_ZdlPvj>
      }
 800aed6:	3710      	adds	r7, #16
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800aee8:	68f8      	ldr	r0, [r7, #12]
 800aeea:	f000 f877 	bl	800afdc <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>
 800aeee:	4602      	mov	r2, r0
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	4293      	cmp	r3, r2
 800aef4:	bf8c      	ite	hi
 800aef6:	2301      	movhi	r3, #1
 800aef8:	2300      	movls	r3, #0
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800af00:	f015 fbd1 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4618      	mov	r0, r3
 800af0a:	f015 fb05 	bl	8020518 <_Znwj>
 800af0e:	4603      	mov	r3, r0
 800af10:	bf00      	nop
      }
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>:
    __niter_base(_Iterator __it)
 800af1a:	b480      	push	{r7}
 800af1c:	b083      	sub	sp, #12
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
    { return __it; }
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4618      	mov	r0, r3
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	1ad3      	subs	r3, r2, r3
 800af44:	109b      	asrs	r3, r3, #2
 800af46:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd06      	ble.n	800af5c <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	461a      	mov	r2, r3
 800af54:	68f9      	ldr	r1, [r7, #12]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f015 fc18 	bl	802078c <memmove>
      return __result + __count;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	687a      	ldr	r2, [r7, #4]
 800af62:	4413      	add	r3, r2
    }
 800af64:	4618      	mov	r0, r3
 800af66:	3718      	adds	r7, #24
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <_ZSt11__addressofIP12InputCaptureEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4618      	mov	r0, r3
 800af78:	370c      	adds	r7, #12
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <_ZSt8_DestroyIP12InputCaptureEvPT_>:
    _Destroy(_Tp* __pointer)
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff fe0b 	bl	800aba6 <_ZSt10destroy_atIP12InputCaptureEvPT_>
    }
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f000 f825 	bl	800aff4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>
 800afaa:	4602      	mov	r2, r0
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	4293      	cmp	r3, r2
 800afb0:	bf8c      	ite	hi
 800afb2:	2301      	movhi	r3, #1
 800afb4:	2300      	movls	r3, #0
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800afbc:	f015 fb73 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	4613      	mov	r3, r2
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	4413      	add	r3, r2
 800afc8:	00db      	lsls	r3, r3, #3
 800afca:	4618      	mov	r0, r3
 800afcc:	f015 faa4 	bl	8020518 <_Znwj>
 800afd0:	4603      	mov	r3, r0
 800afd2:	bf00      	nop
      }
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800afe4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800affc:	4b03      	ldr	r3, [pc, #12]	; (800b00c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv+0x18>)
      }
 800affe:	4618      	mov	r0, r3
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	05555555 	.word	0x05555555

0800b010 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fcc6 	bl	80099ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <_Z41__static_initialization_and_destruction_0ii>:

void InputCapture::stop(){
	HAL_TIM_IC_Stop_IT(timer, channel);
}
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d10a      	bne.n	800b052 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b042:	4293      	cmp	r3, r2
 800b044:	d105      	bne.n	800b052 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<InputCapture*> InputCapture::all_input_captures;
 800b046:	480c      	ldr	r0, [pc, #48]	; (800b078 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800b048:	f7fe f9e6 	bl	8009418 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;
 800b04c:	480b      	ldr	r0, [pc, #44]	; (800b07c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800b04e:	f7fe fa09 	bl	8009464 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <_Z41__static_initialization_and_destruction_0ii+0x42>
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b05e:	4293      	cmp	r3, r2
 800b060:	d105      	bne.n	800b06e <_Z41__static_initialization_and_destruction_0ii+0x42>
 800b062:	4806      	ldr	r0, [pc, #24]	; (800b07c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800b064:	f7ff ffd4 	bl	800b010 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<InputCapture*> InputCapture::all_input_captures;
 800b068:	4803      	ldr	r0, [pc, #12]	; (800b078 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800b06a:	f000 f809 	bl	800b080 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>
}
 800b06e:	bf00      	nop
 800b070:	3708      	adds	r7, #8
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	24000158 	.word	0x24000158
 800b07c:	24000164 	.word	0x24000164

0800b080 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800b080:	b5b0      	push	{r4, r5, r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681c      	ldr	r4, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4618      	mov	r0, r3
 800b094:	f7ff fb2d 	bl	800a6f2 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800b098:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b09a:	461a      	mov	r2, r3
 800b09c:	4629      	mov	r1, r5
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f7ff fb32 	bl	800a708 <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>
      }
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7fe fc47 	bl	800993a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bdb0      	pop	{r4, r5, r7, pc}

0800b0b6 <_GLOBAL__sub_I__ZN12InputCapture18all_input_capturesE>:
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0be:	2001      	movs	r0, #1
 800b0c0:	f7ff ffb4 	bl	800b02c <_Z41__static_initialization_and_destruction_0ii>
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <_GLOBAL__sub_D__ZN12InputCapture18all_input_capturesE>:
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0ce:	2000      	movs	r0, #0
 800b0d0:	f7ff ffac 	bl	800b02c <_Z41__static_initialization_and_destruction_0ii>
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f82f 	bl	800b142 <_ZNSaIP6StreamED1Ev>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b082      	sub	sp, #8
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f000 f812 	bl	800b122 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4618      	mov	r0, r3
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>:
      vector() = default;
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4618      	mov	r0, r3
 800b114:	f7ff ffeb 	bl	800b0ee <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800b122:	b580      	push	{r7, lr}
 800b124:	b082      	sub	sp, #8
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f82d 	bl	800b18a <_ZNSaIP6StreamEC1Ev>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	4618      	mov	r0, r3
 800b134:	f000 f835 	bl	800b1a2 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4618      	mov	r0, r3
 800b13c:	3708      	adds	r7, #8
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <_ZNSaIP6StreamED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b142:	b480      	push	{r7}
 800b144:	b083      	sub	sp, #12
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4618      	mov	r0, r3
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr

0800b158 <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689a      	ldr	r2, [r3, #8]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800b170:	461a      	mov	r2, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f829 	bl	800b1ca <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      }
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff ffab 	bl	800b0d6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4618      	mov	r0, r3
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <_ZNSaIP6StreamEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b082      	sub	sp, #8
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f82c 	bl	800b1f0 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b1a2:	b480      	push	{r7}
 800b1a4:	b083      	sub	sp, #12
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	605a      	str	r2, [r3, #4]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	609a      	str	r2, [r3, #8]
	{ }
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	370c      	adds	r7, #12
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	607a      	str	r2, [r7, #4]
	if (__p)
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d005      	beq.n	800b1e8 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	68b9      	ldr	r1, [r7, #8]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 f80f 	bl	800b206 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>
      }
 800b1e8:	bf00      	nop
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	370c      	adds	r7, #12
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b206:	b580      	push	{r7, lr}
 800b208:	b088      	sub	sp, #32
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	60f8      	str	r0, [r7, #12]
 800b20e:	60b9      	str	r1, [r7, #8]
 800b210:	607a      	str	r2, [r7, #4]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	61fb      	str	r3, [r7, #28]
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	61bb      	str	r3, [r7, #24]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b21e:	f7f5 f87f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d003      	beq.n	800b230 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800b228:	69b8      	ldr	r0, [r7, #24]
 800b22a:	f015 f971 	bl	8020510 <_ZdlPv>
	    return;
 800b22e:	e005      	b.n	800b23c <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	69b9      	ldr	r1, [r7, #24]
 800b234:	69f8      	ldr	r0, [r7, #28]
 800b236:	f000 f83e 	bl	800b2b6 <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800b23a:	bf00      	nop
 800b23c:	bf00      	nop
 800b23e:	3720      	adds	r7, #32
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4618      	mov	r0, r3
 800b250:	370c      	adds	r7, #12
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr

0800b25a <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b084      	sub	sp, #16
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800b266:	68b9      	ldr	r1, [r7, #8]
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f000 f80e 	bl	800b28a <_ZSt8_DestroyIPP6StreamEvT_S3_>
    }
 800b26e:	bf00      	nop
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <_ZSt10destroy_atIP6StreamEvPT_>:
    destroy_at(_Tp* __location)
 800b276:	b480      	push	{r7}
 800b278:	b083      	sub	sp, #12
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
    }
 800b27e:	bf00      	nop
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <_ZSt8_DestroyIPP6StreamEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b082      	sub	sp, #8
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800b294:	f7f5 f844 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d004      	beq.n	800b2a8 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f817 	bl	800b2d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>
 800b2a6:	e003      	b.n	800b2b0 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x26>
	__destroy(__first, __last);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f82a 	bl	800b304 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>
    }
 800b2b0:	3708      	adds	r7, #8
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b084      	sub	sp, #16
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	60f8      	str	r0, [r7, #12]
 800b2be:	60b9      	str	r1, [r7, #8]
 800b2c0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	68b8      	ldr	r0, [r7, #8]
 800b2ca:	f015 f923 	bl	8020514 <_ZdlPvj>
      }
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d00a      	beq.n	800b2fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 f817 	bl	800b31a <_ZSt11__addressofIP6StreamEPT_RS2_>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 f81e 	bl	800b330 <_ZSt8_DestroyIP6StreamEvPT_>
	  for (; __first != __last; ++__first)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	607b      	str	r3, [r7, #4]
 800b2fa:	e7f0      	b.n	800b2de <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0xa>
	}
 800b2fc:	bf00      	nop
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
 800b30e:	bf00      	nop
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <_ZSt11__addressofIP6StreamEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b31a:	b480      	push	{r7}
 800b31c:	b083      	sub	sp, #12
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4618      	mov	r0, r3
 800b326:	370c      	adds	r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <_ZSt8_DestroyIP6StreamEvPT_>:
    _Destroy(_Tp* __pointer)
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff ff9c 	bl	800b276 <_ZSt10destroy_atIP6StreamEvPT_>
    }
 800b33e:	bf00      	nop
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Stream.hpp"

vector<Stream*> Stream::streams;
uint8_t Stream::current_id = 0b1000000;
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d107      	bne.n	800b368 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b35e:	4293      	cmp	r3, r2
 800b360:	d102      	bne.n	800b368 <_Z41__static_initialization_and_destruction_0ii+0x20>
vector<Stream*> Stream::streams;
 800b362:	4809      	ldr	r0, [pc, #36]	; (800b388 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b364:	f7ff fed0 	bl	800b108 <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d107      	bne.n	800b37e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b374:	4293      	cmp	r3, r2
 800b376:	d102      	bne.n	800b37e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b378:	4803      	ldr	r0, [pc, #12]	; (800b388 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b37a:	f000 f807 	bl	800b38c <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>
uint8_t Stream::current_id = 0b1000000;
 800b37e:	bf00      	nop
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	2400017c 	.word	0x2400017c

0800b38c <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800b38c:	b5b0      	push	{r4, r5, r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681c      	ldr	r4, [r3, #0]
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff ff50 	bl	800b244 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 800b3a4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f7ff ff55 	bl	800b25a <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>
      }
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff fed0 	bl	800b158 <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3708      	adds	r7, #8
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bdb0      	pop	{r4, r5, r7, pc}

0800b3c2 <_GLOBAL__sub_I__ZN6Stream7streamsE>:
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b3ca:	2001      	movs	r0, #1
 800b3cc:	f7ff ffbc 	bl	800b348 <_Z41__static_initialization_and_destruction_0ii>
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <_GLOBAL__sub_D__ZN6Stream7streamsE>:
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b3da:	2000      	movs	r0, #0
 800b3dc:	f7ff ffb4 	bl	800b348 <_Z41__static_initialization_and_destruction_0ii>
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b082      	sub	sp, #8
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f82f 	bl	800b44e <_ZNSaIP5TimerED1Ev>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	4618      	mov	r0, r3
 800b406:	f000 f812 	bl	800b42e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>:
      vector() = default;
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4618      	mov	r0, r3
 800b420:	f7ff ffeb 	bl	800b3fa <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800b42e:	b580      	push	{r7, lr}
 800b430:	b082      	sub	sp, #8
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f82d 	bl	800b496 <_ZNSaIP5TimerEC1Ev>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 f835 	bl	800b4ae <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <_ZNSaIP5TimerED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b44e:	b480      	push	{r7}
 800b450:	b083      	sub	sp, #12
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4618      	mov	r0, r3
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	689a      	ldr	r2, [r3, #8]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800b47c:	461a      	mov	r2, r3
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f829 	bl	800b4d6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      }
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff ffab 	bl	800b3e2 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <_ZNSaIP5TimerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b496:	b580      	push	{r7, lr}
 800b498:	b082      	sub	sp, #8
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f82c 	bl	800b4fc <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	601a      	str	r2, [r3, #0]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	605a      	str	r2, [r3, #4]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	609a      	str	r2, [r3, #8]
	{ }
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	370c      	adds	r7, #12
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	60f8      	str	r0, [r7, #12]
 800b4de:	60b9      	str	r1, [r7, #8]
 800b4e0:	607a      	str	r2, [r7, #4]
	if (__p)
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d005      	beq.n	800b4f4 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	687a      	ldr	r2, [r7, #4]
 800b4ec:	68b9      	ldr	r1, [r7, #8]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 f80f 	bl	800b512 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>
      }
 800b4f4:	bf00      	nop
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4618      	mov	r0, r3
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b512:	b580      	push	{r7, lr}
 800b514:	b088      	sub	sp, #32
 800b516:	af00      	add	r7, sp, #0
 800b518:	60f8      	str	r0, [r7, #12]
 800b51a:	60b9      	str	r1, [r7, #8]
 800b51c:	607a      	str	r2, [r7, #4]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	61fb      	str	r3, [r7, #28]
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	61bb      	str	r3, [r7, #24]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b52a:	f7f4 fef9 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d003      	beq.n	800b53c <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800b534:	69b8      	ldr	r0, [r7, #24]
 800b536:	f014 ffeb 	bl	8020510 <_ZdlPv>
	    return;
 800b53a:	e005      	b.n	800b548 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	69b9      	ldr	r1, [r7, #24]
 800b540:	69f8      	ldr	r0, [r7, #28]
 800b542:	f000 f83e 	bl	800b5c2 <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800b546:	bf00      	nop
 800b548:	bf00      	nop
 800b54a:	3720      	adds	r7, #32
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4618      	mov	r0, r3
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	60f8      	str	r0, [r7, #12]
 800b56e:	60b9      	str	r1, [r7, #8]
 800b570:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800b572:	68b9      	ldr	r1, [r7, #8]
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f000 f80e 	bl	800b596 <_ZSt8_DestroyIPP5TimerEvT_S3_>
    }
 800b57a:	bf00      	nop
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}

0800b582 <_ZSt10destroy_atIP5TimerEvPT_>:
    destroy_at(_Tp* __location)
 800b582:	b480      	push	{r7}
 800b584:	b083      	sub	sp, #12
 800b586:	af00      	add	r7, sp, #0
 800b588:	6078      	str	r0, [r7, #4]
    }
 800b58a:	bf00      	nop
 800b58c:	370c      	adds	r7, #12
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr

0800b596 <_ZSt8_DestroyIPP5TimerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b596:	b580      	push	{r7, lr}
 800b598:	b082      	sub	sp, #8
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800b5a0:	f7f4 febe 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d004      	beq.n	800b5b4 <_ZSt8_DestroyIPP5TimerEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800b5aa:	6839      	ldr	r1, [r7, #0]
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f817 	bl	800b5e0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>
 800b5b2:	e003      	b.n	800b5bc <_ZSt8_DestroyIPP5TimerEvT_S3_+0x26>
	__destroy(__first, __last);
 800b5b4:	6839      	ldr	r1, [r7, #0]
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f82a 	bl	800b610 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>
    }
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b084      	sub	sp, #16
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	60f8      	str	r0, [r7, #12]
 800b5ca:	60b9      	str	r1, [r7, #8]
 800b5cc:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	68b8      	ldr	r0, [r7, #8]
 800b5d6:	f014 ff9d 	bl	8020514 <_ZdlPvj>
      }
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d00a      	beq.n	800b608 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f817 	bl	800b626 <_ZSt11__addressofIP5TimerEPT_RS2_>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 f81e 	bl	800b63c <_ZSt8_DestroyIP5TimerEvPT_>
	  for (; __first != __last; ++__first)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	3304      	adds	r3, #4
 800b604:	607b      	str	r3, [r7, #4]
 800b606:	e7f0      	b.n	800b5ea <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0xa>
	}
 800b608:	bf00      	nop
 800b60a:	3708      	adds	r7, #8
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
 800b61a:	bf00      	nop
 800b61c:	370c      	adds	r7, #12
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr

0800b626 <_ZSt11__addressofIP5TimerEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b626:	b480      	push	{r7}
 800b628:	b083      	sub	sp, #12
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4618      	mov	r0, r3
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <_ZSt8_DestroyIP5TimerEvPT_>:
    _Destroy(_Tp* __pointer)
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff ff9c 	bl	800b582 <_ZSt10destroy_atIP5TimerEvPT_>
    }
 800b64a:	bf00      	nop
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Timer.hpp"

vector<Timer*> Timer::all_timers;
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d107      	bne.n	800b674 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d102      	bne.n	800b674 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b66e:	4809      	ldr	r0, [pc, #36]	; (800b694 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b670:	f7ff fed0 	bl	800b414 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d107      	bne.n	800b68a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b680:	4293      	cmp	r3, r2
 800b682:	d102      	bne.n	800b68a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b684:	4803      	ldr	r0, [pc, #12]	; (800b694 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b686:	f000 f807 	bl	800b698 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>
 800b68a:	bf00      	nop
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	24000188 	.word	0x24000188

0800b698 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800b698:	b5b0      	push	{r4, r5, r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681c      	ldr	r4, [r3, #0]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff ff50 	bl	800b550 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 800b6b0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f7ff ff55 	bl	800b566 <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>
      }
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff fed0 	bl	800b464 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bdb0      	pop	{r4, r5, r7, pc}

0800b6ce <_GLOBAL__sub_I__ZN5Timer10all_timersE>:
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b6d6:	2001      	movs	r0, #1
 800b6d8:	f7ff ffbc 	bl	800b654 <_Z41__static_initialization_and_destruction_0ii>
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <_GLOBAL__sub_D__ZN5Timer10all_timersE>:
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	f7ff ffb4 	bl	800b654 <_Z41__static_initialization_and_destruction_0ii>
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b082      	sub	sp, #8
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f834 	bl	800b764 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 800b706:	b580      	push	{r7, lr}
 800b708:	b082      	sub	sp, #8
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4618      	mov	r0, r3
 800b712:	f000 f812 	bl	800b73a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>:
      map() = default;
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7ff ffeb 	bl	800b706 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4618      	mov	r0, r3
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b082      	sub	sp, #8
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f82e 	bl	800b7a4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f000 f836 	bl	800b7bc <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	3304      	adds	r3, #4
 800b754:	4618      	mov	r0, r3
 800b756:	f7f4 fdf7 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	4618      	mov	r0, r3
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4618      	mov	r0, r3
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b082      	sub	sp, #8
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f844 	bl	800b810 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 800b788:	4603      	mov	r3, r0
 800b78a:	4619      	mov	r1, r3
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 f820 	bl	800b7d2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff ffaa 	bl	800b6ee <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4618      	mov	r0, r3
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f83b 	bl	800b828 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>:
      _Rb_tree_key_compare()
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
      { }
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	370c      	adds	r7, #12
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b084      	sub	sp, #16
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d012      	beq.n	800b808 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 800b7e2:	6838      	ldr	r0, [r7, #0]
 800b7e4:	f000 f82b 	bl	800b83e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff fff0 	bl	800b7d2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 800b7f2:	6838      	ldr	r0, [r7, #0]
 800b7f4:	f000 f82f 	bl	800b856 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b7f8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800b7fa:	6839      	ldr	r1, [r7, #0]
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f836 	bl	800b86e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800b806:	e7e9      	b.n	800b7dc <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 800b808:	bf00      	nop
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	4618      	mov	r0, r3
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4618      	mov	r0, r3
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b83e:	b480      	push	{r7}
 800b840:	b083      	sub	sp, #12
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	4618      	mov	r0, r3
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b856:	b480      	push	{r7}
 800b858:	b083      	sub	sp, #12
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	4618      	mov	r0, r3
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b86e:	b580      	push	{r7, lr}
 800b870:	b082      	sub	sp, #8
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800b878:	6839      	ldr	r1, [r7, #0]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f808 	bl	800b890 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f819 	bl	800b8ba <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 800b888:	bf00      	nop
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b890:	b590      	push	{r4, r7, lr}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f81f 	bl	800b8de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	6838      	ldr	r0, [r7, #0]
 800b8a4:	f7f9 fe00 	bl	80054a8 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f000 f821 	bl	800b8f4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>
      }
 800b8b2:	bf00      	nop
 800b8b4:	370c      	adds	r7, #12
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd90      	pop	{r4, r7, pc}

0800b8ba <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b082      	sub	sp, #8
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f80a 	bl	800b8de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 f81b 	bl	800b90c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>
 800b8d6:	bf00      	nop
 800b8d8:	3708      	adds	r7, #8
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800b8de:	b480      	push	{r7}
 800b8e0:	b083      	sub	sp, #12
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800b8fe:	6838      	ldr	r0, [r7, #0]
 800b900:	f000 f823 	bl	800b94a <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>
	}
 800b904:	bf00      	nop
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b088      	sub	sp, #32
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	61fb      	str	r3, [r7, #28]
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	61bb      	str	r3, [r7, #24]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b924:	f7f4 fcfc 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d003      	beq.n	800b936 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 800b92e:	69b8      	ldr	r0, [r7, #24]
 800b930:	f014 fdee 	bl	8020510 <_ZdlPv>
	    return;
 800b934:	e005      	b.n	800b942 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	69b9      	ldr	r1, [r7, #24]
 800b93a:	69f8      	ldr	r0, [r7, #28]
 800b93c:	f000 f80f 	bl	800b95e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 800b940:	bf00      	nop
 800b942:	bf00      	nop
 800b944:	3720      	adds	r7, #32
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>:
    destroy_at(_Tp* __location)
 800b94a:	b480      	push	{r7}
 800b94c:	b083      	sub	sp, #12
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
    }
 800b952:	bf00      	nop
 800b954:	370c      	adds	r7, #12
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 800b95e:	b580      	push	{r7, lr}
 800b960:	b084      	sub	sp, #16
 800b962:	af00      	add	r7, sp, #0
 800b964:	60f8      	str	r0, [r7, #12]
 800b966:	60b9      	str	r1, [r7, #8]
 800b968:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	4613      	mov	r3, r2
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	4413      	add	r3, r2
 800b972:	00db      	lsls	r3, r3, #3
 800b974:	4619      	mov	r1, r3
 800b976:	68b8      	ldr	r0, [r7, #8]
 800b978:	f014 fdcc 	bl	8020514 <_ZdlPvj>
      }
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>:
      ~map() = default;
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7ff fef4 	bl	800b77a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4618      	mov	r0, r3
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Models/Packet.hpp"

map<uint16_t, Packet*> Packet::all_packets;
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d107      	bne.n	800b9bc <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d102      	bne.n	800b9bc <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b9b6:	4809      	ldr	r0, [pc, #36]	; (800b9dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b9b8:	f7ff feb2 	bl	800b720 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d107      	bne.n	800b9d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d102      	bne.n	800b9d2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b9cc:	4803      	ldr	r0, [pc, #12]	; (800b9dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b9ce:	f7ff ffd8 	bl	800b982 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>
 800b9d2:	bf00      	nop
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	24000194 	.word	0x24000194

0800b9e0 <_GLOBAL__sub_I__ZN6Packet11all_packetsE>:
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b9e8:	2001      	movs	r0, #1
 800b9ea:	f7ff ffd7 	bl	800b99c <_Z41__static_initialization_and_destruction_0ii>
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <_GLOBAL__sub_D__ZN6Packet11all_packetsE>:
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	f7ff ffcf 	bl	800b99c <_Z41__static_initialization_and_destruction_0ii>
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f86f 	bl	800baec <_ZNSaIP3PinED1Ev>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4618      	mov	r0, r3
 800ba24:	f000 f852 	bl	800bacc <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>:
      vector() = default;
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b082      	sub	sp, #8
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff ffeb 	bl	800ba18 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4618      	mov	r0, r3
 800ba46:	3708      	adds	r7, #8
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>:
#include "Mini-STLIB/Models/Pin.hpp"

vector<Pin*> Pin::all_pins;

Pin::Pin(GPIO_TypeDef* port, uint16_t pin) : port(port), pin(pin) {
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	4613      	mov	r3, r2
 800ba58:	80fb      	strh	r3, [r7, #6]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	601a      	str	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	88fa      	ldrh	r2, [r7, #6]
 800ba64:	809a      	strh	r2, [r3, #4]
	Pin::all_pins.push_back(this);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	617b      	str	r3, [r7, #20]
 800ba6a:	f107 0314 	add.w	r3, r7, #20
 800ba6e:	4619      	mov	r1, r3
 800ba70:	4803      	ldr	r0, [pc, #12]	; (800ba80 <_ZN3PinC1EP12GPIO_TypeDeft+0x34>)
 800ba72:	f000 f85f 	bl	800bb34 <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>
}
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3718      	adds	r7, #24
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	240001ac 	.word	0x240001ac

0800ba84 <_ZN3Pin15get_pin_from_idEt>:

optional<Pin*> Pin::get_pin_from_id(uint16_t id){
 800ba84:	b590      	push	{r4, r7, lr}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	807b      	strh	r3, [r7, #2]
	if(id < Pin::all_pins.size())
 800ba90:	887c      	ldrh	r4, [r7, #2]
 800ba92:	480d      	ldr	r0, [pc, #52]	; (800bac8 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800ba94:	f000 f85f 	bl	800bb56 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	429c      	cmp	r4, r3
 800ba9c:	bf34      	ite	cc
 800ba9e:	2301      	movcc	r3, #1
 800baa0:	2300      	movcs	r3, #0
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00a      	beq.n	800babe <_ZN3Pin15get_pin_from_idEt+0x3a>
		return Pin::all_pins[id];
 800baa8:	887b      	ldrh	r3, [r7, #2]
 800baaa:	4619      	mov	r1, r3
 800baac:	4806      	ldr	r0, [pc, #24]	; (800bac8 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800baae:	f000 f862 	bl	800bb76 <_ZNSt6vectorIP3PinSaIS1_EEixEj>
 800bab2:	4603      	mov	r3, r0
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 f86d 	bl	800bb96 <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>
 800babc:	e000      	b.n	800bac0 <_ZN3Pin15get_pin_from_idEt+0x3c>
}
 800babe:	bf00      	nop
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	370c      	adds	r7, #12
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd90      	pop	{r4, r7, pc}
 800bac8:	240001ac 	.word	0x240001ac

0800bacc <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 f872 	bl	800bbbe <_ZNSaIP3PinEC1Ev>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4618      	mov	r0, r3
 800bade:	f000 f87a 	bl	800bbd6 <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4618      	mov	r0, r3
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <_ZNSaIP3PinED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	4618      	mov	r0, r3
 800baf8:	370c      	adds	r7, #12
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr

0800bb02 <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	689a      	ldr	r2, [r3, #8]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	1ad3      	subs	r3, r2, r3
 800bb18:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f86e 	bl	800bbfe <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      }
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4618      	mov	r0, r3
 800bb26:	f7ff ff6b 	bl	800ba00 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800bb3e:	6838      	ldr	r0, [r7, #0]
 800bb40:	f000 f870 	bl	800bc24 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800bb44:	4603      	mov	r3, r0
 800bb46:	4619      	mov	r1, r3
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f876 	bl	800bc3a <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800bb4e:	bf00      	nop
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800bb56:	b480      	push	{r7}
 800bb58:	b083      	sub	sp, #12
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	685a      	ldr	r2, [r3, #4]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	1ad3      	subs	r3, r2, r3
 800bb68:	109b      	asrs	r3, r3, #2
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	370c      	adds	r7, #12
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr

0800bb76 <_ZNSt6vectorIP3PinSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681a      	ldr	r2, [r3, #0]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4413      	add	r3, r2
      }
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800bb96:	b5b0      	push	{r4, r5, r7, lr}
 800bb98:	b082      	sub	sp, #8
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800bba0:	687c      	ldr	r4, [r7, #4]
 800bba2:	6838      	ldr	r0, [r7, #0]
 800bba4:	f000 f87b 	bl	800bc9e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	461a      	mov	r2, r3
 800bbac:	4629      	mov	r1, r5
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f000 f891 	bl	800bcd6 <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bdb0      	pop	{r4, r5, r7, pc}

0800bbbe <_ZNSaIP3PinEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f89a 	bl	800bd00 <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	605a      	str	r2, [r3, #4]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	609a      	str	r2, [r3, #8]
	{ }
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800bbfe:	b580      	push	{r7, lr}
 800bc00:	b084      	sub	sp, #16
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	60f8      	str	r0, [r7, #12]
 800bc06:	60b9      	str	r1, [r7, #8]
 800bc08:	607a      	str	r2, [r7, #4]
	if (__p)
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d005      	beq.n	800bc1c <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	68b9      	ldr	r1, [r7, #8]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 f87d 	bl	800bd16 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>
      }
 800bc1c:	bf00      	nop
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800bc3a:	b5b0      	push	{r4, r5, r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d011      	beq.n	800bc74 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800bc50:	687c      	ldr	r4, [r7, #4]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	685d      	ldr	r5, [r3, #4]
 800bc56:	6838      	ldr	r0, [r7, #0]
 800bc58:	f000 f87c 	bl	800bd54 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	461a      	mov	r2, r3
 800bc60:	4629      	mov	r1, r5
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 f896 	bl	800bd94 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	1d1a      	adds	r2, r3, #4
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	605a      	str	r2, [r3, #4]
 800bc72:	e00c      	b.n	800bc8e <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f89f 	bl	800bdb8 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	6838      	ldr	r0, [r7, #0]
 800bc7e:	f000 f869 	bl	800bd54 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800bc82:	4603      	mov	r3, r0
 800bc84:	461a      	mov	r2, r3
 800bc86:	4621      	mov	r1, r4
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 f8a7 	bl	800bddc <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 f920 	bl	800bed4 <_ZNSt6vectorIP3PinSaIS1_EE4backEv>
 800bc94:	4603      	mov	r3, r0
      }
 800bc96:	4618      	mov	r0, r3
 800bc98:	3708      	adds	r7, #8
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bdb0      	pop	{r4, r5, r7, pc}

0800bc9e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bc9e:	b480      	push	{r7}
 800bca0:	b083      	sub	sp, #12
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800bcb4:	b590      	push	{r4, r7, lr}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	7239      	strb	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f000 f931 	bl	800bf2e <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3714      	adds	r7, #20
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd90      	pop	{r4, r7, pc}

0800bcd6 <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800bcd6:	b5b0      	push	{r4, r5, r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	60f8      	str	r0, [r7, #12]
 800bcde:	7239      	strb	r1, [r7, #8]
 800bce0:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800bce2:	68fc      	ldr	r4, [r7, #12]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f7ff ffda 	bl	800bc9e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800bcea:	4603      	mov	r3, r0
 800bcec:	461a      	mov	r2, r3
 800bcee:	4629      	mov	r1, r5
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f7ff ffdf 	bl	800bcb4 <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bdb0      	pop	{r4, r5, r7, pc}

0800bd00 <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	370c      	adds	r7, #12
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b088      	sub	sp, #32
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	60b9      	str	r1, [r7, #8]
 800bd20:	607a      	str	r2, [r7, #4]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	61fb      	str	r3, [r7, #28]
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	61bb      	str	r3, [r7, #24]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800bd2e:	f7f4 faf7 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d003      	beq.n	800bd40 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800bd38:	69b8      	ldr	r0, [r7, #24]
 800bd3a:	f014 fbe9 	bl	8020510 <_ZdlPv>
	    return;
 800bd3e:	e005      	b.n	800bd4c <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	69b9      	ldr	r1, [r7, #24]
 800bd44:	69f8      	ldr	r0, [r7, #28]
 800bd46:	f000 f9f7 	bl	800c138 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800bd4a:	bf00      	nop
 800bd4c:	bf00      	nop
 800bd4e:	3720      	adds	r7, #32
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800bd6a:	b590      	push	{r4, r7, lr}
 800bd6c:	b083      	sub	sp, #12
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800bd74:	6838      	ldr	r0, [r7, #0]
 800bd76:	f7ff ffed 	bl	800bd54 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	681c      	ldr	r4, [r3, #0]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4619      	mov	r1, r3
 800bd82:	2004      	movs	r0, #4
 800bd84:	f7f4 fad4 	bl	8000330 <_ZnwjPv>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	601c      	str	r4, [r3, #0]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd90      	pop	{r4, r7, pc}

0800bd94 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b084      	sub	sp, #16
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7ff ffd7 	bl	800bd54 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800bda6:	4603      	mov	r3, r0
 800bda8:	4619      	mov	r1, r3
 800bdaa:	68b8      	ldr	r0, [r7, #8]
 800bdac:	f7ff ffdd 	bl	800bd6a <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800bdb0:	bf00      	nop
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	1d1a      	adds	r2, r3, #4
 800bdc4:	f107 030c 	add.w	r3, r7, #12
 800bdc8:	4611      	mov	r1, r2
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 f8c7 	bl	800bf5e <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
	...

0800bddc <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800bddc:	b5b0      	push	{r4, r5, r7, lr}
 800bdde:	b08c      	sub	sp, #48	; 0x30
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800bde8:	4a39      	ldr	r2, [pc, #228]	; (800bed0 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800bdea:	2101      	movs	r1, #1
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f000 f8c6 	bl	800bf7e <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>
 800bdf2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f000 f903 	bl	800c00c <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>
 800be06:	4603      	mov	r3, r0
 800be08:	617b      	str	r3, [r7, #20]
 800be0a:	f107 0214 	add.w	r2, r7, #20
 800be0e:	f107 0308 	add.w	r3, r7, #8
 800be12:	4611      	mov	r1, r2
 800be14:	4618      	mov	r0, r3
 800be16:	f000 f909 	bl	800c02c <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800be1a:	4603      	mov	r3, r0
 800be1c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be22:	4618      	mov	r0, r3
 800be24:	f000 f917 	bl	800c056 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>
 800be28:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800be2e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800be30:	6a3b      	ldr	r3, [r7, #32]
 800be32:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800be34:	69fa      	ldr	r2, [r7, #28]
 800be36:	18d5      	adds	r5, r2, r3
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff ff8b 	bl	800bd54 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800be3e:	4603      	mov	r3, r0
 800be40:	461a      	mov	r2, r3
 800be42:	4629      	mov	r1, r5
 800be44:	4620      	mov	r0, r4
 800be46:	f7ff ffa5 	bl	800bd94 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800be4a:	2300      	movs	r3, #0
 800be4c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800be4e:	f107 0308 	add.w	r3, r7, #8
 800be52:	4618      	mov	r0, r3
 800be54:	f000 f927 	bl	800c0a6 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800be58:	4603      	mov	r3, r0
 800be5a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 f92c 	bl	800c0bc <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800be64:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800be66:	69fa      	ldr	r2, [r7, #28]
 800be68:	4621      	mov	r1, r4
 800be6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be6c:	f000 f907 	bl	800c07e <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800be70:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	3304      	adds	r3, #4
 800be76:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800be78:	f107 0308 	add.w	r3, r7, #8
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 f912 	bl	800c0a6 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800be82:	4603      	mov	r3, r0
 800be84:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 f917 	bl	800c0bc <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800be8e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800be90:	69ba      	ldr	r2, [r7, #24]
 800be92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be94:	4620      	mov	r0, r4
 800be96:	f000 f8f2 	bl	800c07e <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800be9a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800be9c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	689a      	ldr	r2, [r3, #8]
 800bea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800bea8:	461a      	mov	r2, r3
 800beaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800beac:	f7ff fea7 	bl	800bbfe <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	69fa      	ldr	r2, [r7, #28]
 800beb4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	69ba      	ldr	r2, [r7, #24]
 800beba:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800bebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	69fa      	ldr	r2, [r7, #28]
 800bec2:	441a      	add	r2, r3
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	609a      	str	r2, [r3, #8]
    }
 800bec8:	bf00      	nop
 800beca:	3730      	adds	r7, #48	; 0x30
 800becc:	46bd      	mov	sp, r7
 800bece:	bdb0      	pop	{r4, r5, r7, pc}
 800bed0:	08020bcc 	.word	0x08020bcc

0800bed4 <_ZNSt6vectorIP3PinSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f7ff ff6b 	bl	800bdb8 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800bee2:	4603      	mov	r3, r0
 800bee4:	60fb      	str	r3, [r7, #12]
 800bee6:	f107 030c 	add.w	r3, r7, #12
 800beea:	2101      	movs	r1, #1
 800beec:	4618      	mov	r0, r3
 800beee:	f000 f8fe 	bl	800c0ee <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>
 800bef2:	4603      	mov	r3, r0
 800bef4:	60bb      	str	r3, [r7, #8]
 800bef6:	f107 0308 	add.w	r3, r7, #8
 800befa:	4618      	mov	r0, r3
 800befc:	f000 f910 	bl	800c120 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>
 800bf00:	4603      	mov	r3, r0
      }
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b084      	sub	sp, #16
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	60f8      	str	r0, [r7, #12]
 800bf12:	7239      	strb	r1, [r7, #8]
 800bf14:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f7ff fec1 	bl	800bc9e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	601a      	str	r2, [r3, #0]
	    { }
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 800bf2e:	b5b0      	push	{r4, r5, r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	60f8      	str	r0, [r7, #12]
 800bf36:	7239      	strb	r1, [r7, #8]
 800bf38:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 800bf3a:	68fc      	ldr	r4, [r7, #12]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f7ff feae 	bl	800bc9e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800bf42:	4603      	mov	r3, r0
 800bf44:	461a      	mov	r2, r3
 800bf46:	4629      	mov	r1, r5
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f7ff ffde 	bl	800bf0a <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2201      	movs	r2, #1
 800bf52:	711a      	strb	r2, [r3, #4]
	{ }
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bdb0      	pop	{r4, r5, r7, pc}

0800bf5e <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800bf5e:	b480      	push	{r7}
 800bf60:	b083      	sub	sp, #12
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
 800bf66:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4618      	mov	r0, r3
 800bf74:	370c      	adds	r7, #12
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800bf7e:	b590      	push	{r4, r7, lr}
 800bf80:	b087      	sub	sp, #28
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	60f8      	str	r0, [r7, #12]
 800bf86:	60b9      	str	r1, [r7, #8]
 800bf88:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f000 f8e3 	bl	800c156 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800bf90:	4604      	mov	r4, r0
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	f7ff fddf 	bl	800bb56 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	1ae2      	subs	r2, r4, r3
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	bf34      	ite	cc
 800bfa2:	2301      	movcc	r3, #1
 800bfa4:	2300      	movcs	r3, #0
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f014 fb7d 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f7ff fdcf 	bl	800bb56 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800bfb8:	4604      	mov	r4, r0
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f7ff fdcb 	bl	800bb56 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	613b      	str	r3, [r7, #16]
 800bfc4:	f107 0208 	add.w	r2, r7, #8
 800bfc8:	f107 0310 	add.w	r3, r7, #16
 800bfcc:	4611      	mov	r1, r2
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7f6 fc3f 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4423      	add	r3, r4
 800bfda:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f7ff fdba 	bl	800bb56 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d306      	bcc.n	800bff8 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 f8b3 	bl	800c156 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800bff0:	4602      	mov	r2, r0
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d904      	bls.n	800c002 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x84>
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f000 f8ac 	bl	800c156 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800bffe:	4603      	mov	r3, r0
 800c000:	e000      	b.n	800c004 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x86>
 800c002:	697b      	ldr	r3, [r7, #20]
      }
 800c004:	4618      	mov	r0, r3
 800c006:	371c      	adds	r7, #28
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd90      	pop	{r4, r7, pc}

0800c00c <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	f107 030c 	add.w	r3, r7, #12
 800c01a:	4611      	mov	r1, r2
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff ff9e 	bl	800bf5e <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	4618      	mov	r0, r3
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800c02c:	b590      	push	{r4, r7, lr}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 f835 	bl	800c0a6 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800c03c:	4603      	mov	r3, r0
 800c03e:	681c      	ldr	r4, [r3, #0]
 800c040:	6838      	ldr	r0, [r7, #0]
 800c042:	f000 f830 	bl	800c0a6 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800c046:	4603      	mov	r3, r0
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	1ae3      	subs	r3, r4, r3
 800c04c:	109b      	asrs	r3, r3, #2
 800c04e:	4618      	mov	r0, r3
 800c050:	370c      	adds	r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	bd90      	pop	{r4, r7, pc}

0800c056 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800c056:	b580      	push	{r7, lr}
 800c058:	b082      	sub	sp, #8
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d006      	beq.n	800c074 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x1e>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 f884 	bl	800c178 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>
 800c070:	4603      	mov	r3, r0
 800c072:	e000      	b.n	800c076 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x20>
 800c074:	2300      	movs	r3, #0
      }
 800c076:	4618      	mov	r0, r3
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800c07e:	b590      	push	{r4, r7, lr}
 800c080:	b087      	sub	sp, #28
 800c082:	af02      	add	r7, sp, #8
 800c084:	60f8      	str	r0, [r7, #12]
 800c086:	60b9      	str	r1, [r7, #8]
 800c088:	607a      	str	r2, [r7, #4]
 800c08a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800c08c:	f88d 4000 	strb.w	r4, [sp]
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	68b9      	ldr	r1, [r7, #8]
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f000 f88e 	bl	800c1b8 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800c09c:	4603      	mov	r3, r0
      }
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd90      	pop	{r4, r7, pc}

0800c0a6 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800c0a6:	b480      	push	{r7}
 800c0a8:	b083      	sub	sp, #12
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b084      	sub	sp, #16
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	60f8      	str	r0, [r7, #12]
 800c0da:	60b9      	str	r1, [r7, #8]
 800c0dc:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c0de:	68b9      	ldr	r1, [r7, #8]
 800c0e0:	68f8      	ldr	r0, [r7, #12]
 800c0e2:	f000 f885 	bl	800c1f0 <_ZSt8_DestroyIPP3PinEvT_S3_>
    }
 800c0e6:	bf00      	nop
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	425b      	negs	r3, r3
 800c102:	4413      	add	r3, r2
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	f107 020c 	add.w	r2, r7, #12
 800c10a:	f107 0308 	add.w	r3, r7, #8
 800c10e:	4611      	mov	r1, r2
 800c110:	4618      	mov	r0, r3
 800c112:	f7ff ff24 	bl	800bf5e <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	4618      	mov	r0, r3
 800c11a:	3710      	adds	r7, #16
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4618      	mov	r0, r3
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4619      	mov	r1, r3
 800c14a:	68b8      	ldr	r0, [r7, #8]
 800c14c:	f014 f9e2 	bl	8020514 <_ZdlPvj>
      }
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}

0800c156 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800c156:	b580      	push	{r7, lr}
 800c158:	b082      	sub	sp, #8
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4618      	mov	r0, r3
 800c162:	f000 f881 	bl	800c268 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800c166:	4603      	mov	r3, r0
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 f863 	bl	800c234 <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>
 800c16e:	4603      	mov	r3, r0
 800c170:	4618      	mov	r0, r3
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	60fb      	str	r3, [r7, #12]
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800c18a:	f7f4 f8c9 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d006      	beq.n	800c1a2 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4618      	mov	r0, r3
 800c19a:	f014 f9bd 	bl	8020518 <_Znwj>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	e006      	b.n	800c1b0 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f000 f8a9 	bl	800c2fe <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	bf00      	nop
      { return __a.allocate(__n); }
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
 800c1c4:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	68b9      	ldr	r1, [r7, #8]
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 f856 	bl	800c27e <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>
 800c1d2:	4603      	mov	r3, r0
      }
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <_ZSt10destroy_atIP3PinEvPT_>:
    destroy_at(_Tp* __location)
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
    }
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <_ZSt8_DestroyIPP3PinEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c1fa:	f7f4 f891 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d004      	beq.n	800c20e <_ZSt8_DestroyIPP3PinEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 f856 	bl	800c2b8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>
 800c20c:	e003      	b.n	800c216 <_ZSt8_DestroyIPP3PinEvT_S3_+0x26>
	__destroy(__first, __last);
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 f869 	bl	800c2e8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>
    }
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800c21c:	b480      	push	{r7}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800c224:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800c228:	4618      	mov	r0, r3
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800c23c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800c240:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f7ff ffea 	bl	800c21c <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>
 800c248:	4603      	mov	r3, r0
 800c24a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800c24c:	f107 0208 	add.w	r2, r7, #8
 800c250:	f107 030c 	add.w	r3, r7, #12
 800c254:	4611      	mov	r1, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f7f6 fdc5 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800c25c:	4603      	mov	r3, r0
 800c25e:	681b      	ldr	r3, [r3, #0]
      }
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4618      	mov	r0, r3
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr

0800c27e <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800c27e:	b5b0      	push	{r4, r5, r7, lr}
 800c280:	b084      	sub	sp, #16
 800c282:	af00      	add	r7, sp, #0
 800c284:	60f8      	str	r0, [r7, #12]
 800c286:	60b9      	str	r1, [r7, #8]
 800c288:	607a      	str	r2, [r7, #4]
 800c28a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f000 f855 	bl	800c33c <_ZSt12__niter_baseIPP3PinET_S3_>
 800c292:	4604      	mov	r4, r0
 800c294:	68b8      	ldr	r0, [r7, #8]
 800c296:	f000 f851 	bl	800c33c <_ZSt12__niter_baseIPP3PinET_S3_>
 800c29a:	4605      	mov	r5, r0
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 f84d 	bl	800c33c <_ZSt12__niter_baseIPP3PinET_S3_>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	f000 f852 	bl	800c352 <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800c2ae:	4603      	mov	r3, r0
    }
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bdb0      	pop	{r4, r5, r7, pc}

0800c2b8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d00a      	beq.n	800c2e0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f85f 	bl	800c38e <_ZSt11__addressofIP3PinEPT_RS2_>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 f866 	bl	800c3a4 <_ZSt8_DestroyIP3PinEvPT_>
	  for (; __first != __last; ++__first)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	3304      	adds	r3, #4
 800c2dc:	607b      	str	r3, [r7, #4]
 800c2de:	e7f0      	b.n	800c2c2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0xa>
	}
 800c2e0:	bf00      	nop
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
 800c2f2:	bf00      	nop
 800c2f4:	370c      	adds	r7, #12
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b084      	sub	sp, #16
 800c302:	af00      	add	r7, sp, #0
 800c304:	60f8      	str	r0, [r7, #12]
 800c306:	60b9      	str	r1, [r7, #8]
 800c308:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f000 f855 	bl	800c3ba <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>
 800c310:	4602      	mov	r2, r0
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	4293      	cmp	r3, r2
 800c316:	bf8c      	ite	hi
 800c318:	2301      	movhi	r3, #1
 800c31a:	2300      	movls	r3, #0
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d001      	beq.n	800c326 <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800c322:	f014 f9c0 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4618      	mov	r0, r3
 800c32c:	f014 f8f4 	bl	8020518 <_Znwj>
 800c330:	4603      	mov	r3, r0
 800c332:	bf00      	nop
      }
 800c334:	4618      	mov	r0, r3
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <_ZSt12__niter_baseIPP3PinET_S3_>:
    __niter_base(_Iterator __it)
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
    { return __it; }
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4618      	mov	r0, r3
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800c352:	b580      	push	{r7, lr}
 800c354:	b086      	sub	sp, #24
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	60b9      	str	r1, [r7, #8]
 800c35c:	607a      	str	r2, [r7, #4]
 800c35e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	1ad3      	subs	r3, r2, r3
 800c366:	109b      	asrs	r3, r3, #2
 800c368:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	dd06      	ble.n	800c37e <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	461a      	mov	r2, r3
 800c376:	68f9      	ldr	r1, [r7, #12]
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f014 fa07 	bl	802078c <memmove>
      return __result + __count;
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	4413      	add	r3, r2
    }
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}

0800c38e <_ZSt11__addressofIP3PinEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c38e:	b480      	push	{r7}
 800c390:	b083      	sub	sp, #12
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4618      	mov	r0, r3
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <_ZSt8_DestroyIP3PinEvPT_>:
    _Destroy(_Tp* __pointer)
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f7ff ff15 	bl	800c1dc <_ZSt10destroy_atIP3PinEvPT_>
    }
 800c3b2:	bf00      	nop
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800c3ba:	b480      	push	{r7}
 800c3bc:	b083      	sub	sp, #12
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800c3c2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	370c      	adds	r7, #12
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
	...

0800c3d4 <_Z41__static_initialization_and_destruction_0ii>:
Pin PF10(GPIOF, GPIO_PIN_10);
Pin PF11(GPIOF, GPIO_PIN_11);
Pin PF12(GPIOF, GPIO_PIN_12);
Pin PF13(GPIOF, GPIO_PIN_13);
Pin PF14(GPIOF, GPIO_PIN_14);
Pin PF15(GPIOF, GPIO_PIN_15);
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	f040 82ad 	bne.w	800c940 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	f040 82a7 	bne.w	800c940 <_Z41__static_initialization_and_destruction_0ii+0x56c>
vector<Pin*> Pin::all_pins;
 800c3f2:	48ba      	ldr	r0, [pc, #744]	; (800c6dc <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800c3f4:	f7ff fb1d 	bl	800ba32 <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>
Pin PA0(GPIOA, GPIO_PIN_0);
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	49b9      	ldr	r1, [pc, #740]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c3fc:	48b9      	ldr	r0, [pc, #740]	; (800c6e4 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800c3fe:	f7ff fb25 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA1(GPIOA, GPIO_PIN_1);
 800c402:	2202      	movs	r2, #2
 800c404:	49b6      	ldr	r1, [pc, #728]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c406:	48b8      	ldr	r0, [pc, #736]	; (800c6e8 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800c408:	f7ff fb20 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA2(GPIOA, GPIO_PIN_2);
 800c40c:	2204      	movs	r2, #4
 800c40e:	49b4      	ldr	r1, [pc, #720]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c410:	48b6      	ldr	r0, [pc, #728]	; (800c6ec <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800c412:	f7ff fb1b 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA3(GPIOA, GPIO_PIN_3);
 800c416:	2208      	movs	r2, #8
 800c418:	49b1      	ldr	r1, [pc, #708]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c41a:	48b5      	ldr	r0, [pc, #724]	; (800c6f0 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800c41c:	f7ff fb16 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA4(GPIOA, GPIO_PIN_4);
 800c420:	2210      	movs	r2, #16
 800c422:	49af      	ldr	r1, [pc, #700]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c424:	48b3      	ldr	r0, [pc, #716]	; (800c6f4 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800c426:	f7ff fb11 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA5(GPIOA, GPIO_PIN_5);
 800c42a:	2220      	movs	r2, #32
 800c42c:	49ac      	ldr	r1, [pc, #688]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c42e:	48b2      	ldr	r0, [pc, #712]	; (800c6f8 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800c430:	f7ff fb0c 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA6(GPIOA, GPIO_PIN_6);
 800c434:	2240      	movs	r2, #64	; 0x40
 800c436:	49aa      	ldr	r1, [pc, #680]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c438:	48b0      	ldr	r0, [pc, #704]	; (800c6fc <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800c43a:	f7ff fb07 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA7(GPIOA, GPIO_PIN_7);
 800c43e:	2280      	movs	r2, #128	; 0x80
 800c440:	49a7      	ldr	r1, [pc, #668]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c442:	48af      	ldr	r0, [pc, #700]	; (800c700 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800c444:	f7ff fb02 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA8(GPIOA, GPIO_PIN_8);
 800c448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c44c:	49a4      	ldr	r1, [pc, #656]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c44e:	48ad      	ldr	r0, [pc, #692]	; (800c704 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800c450:	f7ff fafc 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA9(GPIOA, GPIO_PIN_9);
 800c454:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c458:	49a1      	ldr	r1, [pc, #644]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c45a:	48ab      	ldr	r0, [pc, #684]	; (800c708 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800c45c:	f7ff faf6 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA10(GPIOA, GPIO_PIN_10);
 800c460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c464:	499e      	ldr	r1, [pc, #632]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c466:	48a9      	ldr	r0, [pc, #676]	; (800c70c <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800c468:	f7ff faf0 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA11(GPIOA, GPIO_PIN_11);
 800c46c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c470:	499b      	ldr	r1, [pc, #620]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c472:	48a7      	ldr	r0, [pc, #668]	; (800c710 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800c474:	f7ff faea 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA12(GPIOA, GPIO_PIN_12);
 800c478:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c47c:	4998      	ldr	r1, [pc, #608]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c47e:	48a5      	ldr	r0, [pc, #660]	; (800c714 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800c480:	f7ff fae4 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA13(GPIOA, GPIO_PIN_13);
 800c484:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c488:	4995      	ldr	r1, [pc, #596]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c48a:	48a3      	ldr	r0, [pc, #652]	; (800c718 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800c48c:	f7ff fade 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA14(GPIOA, GPIO_PIN_14);
 800c490:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c494:	4992      	ldr	r1, [pc, #584]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c496:	48a1      	ldr	r0, [pc, #644]	; (800c71c <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800c498:	f7ff fad8 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA15(GPIOA, GPIO_PIN_15);
 800c49c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c4a0:	498f      	ldr	r1, [pc, #572]	; (800c6e0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800c4a2:	489f      	ldr	r0, [pc, #636]	; (800c720 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800c4a4:	f7ff fad2 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB0(GPIOB, GPIO_PIN_0);
 800c4a8:	2201      	movs	r2, #1
 800c4aa:	499e      	ldr	r1, [pc, #632]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c4ac:	489e      	ldr	r0, [pc, #632]	; (800c728 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800c4ae:	f7ff facd 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB1(GPIOB, GPIO_PIN_1);
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	499b      	ldr	r1, [pc, #620]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c4b6:	489d      	ldr	r0, [pc, #628]	; (800c72c <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800c4b8:	f7ff fac8 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB2(GPIOB, GPIO_PIN_2);
 800c4bc:	2204      	movs	r2, #4
 800c4be:	4999      	ldr	r1, [pc, #612]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c4c0:	489b      	ldr	r0, [pc, #620]	; (800c730 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800c4c2:	f7ff fac3 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB3(GPIOB, GPIO_PIN_3);
 800c4c6:	2208      	movs	r2, #8
 800c4c8:	4996      	ldr	r1, [pc, #600]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c4ca:	489a      	ldr	r0, [pc, #616]	; (800c734 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800c4cc:	f7ff fabe 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB4(GPIOB, GPIO_PIN_4);
 800c4d0:	2210      	movs	r2, #16
 800c4d2:	4994      	ldr	r1, [pc, #592]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c4d4:	4898      	ldr	r0, [pc, #608]	; (800c738 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800c4d6:	f7ff fab9 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB5(GPIOB, GPIO_PIN_5);
 800c4da:	2220      	movs	r2, #32
 800c4dc:	4991      	ldr	r1, [pc, #580]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c4de:	4897      	ldr	r0, [pc, #604]	; (800c73c <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800c4e0:	f7ff fab4 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB6(GPIOB, GPIO_PIN_6);
 800c4e4:	2240      	movs	r2, #64	; 0x40
 800c4e6:	498f      	ldr	r1, [pc, #572]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c4e8:	4895      	ldr	r0, [pc, #596]	; (800c740 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800c4ea:	f7ff faaf 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB7(GPIOB, GPIO_PIN_7);
 800c4ee:	2280      	movs	r2, #128	; 0x80
 800c4f0:	498c      	ldr	r1, [pc, #560]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c4f2:	4894      	ldr	r0, [pc, #592]	; (800c744 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800c4f4:	f7ff faaa 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB8(GPIOB, GPIO_PIN_8);
 800c4f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4fc:	4989      	ldr	r1, [pc, #548]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c4fe:	4892      	ldr	r0, [pc, #584]	; (800c748 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800c500:	f7ff faa4 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB9(GPIOB, GPIO_PIN_9);
 800c504:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c508:	4986      	ldr	r1, [pc, #536]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c50a:	4890      	ldr	r0, [pc, #576]	; (800c74c <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800c50c:	f7ff fa9e 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB10(GPIOB, GPIO_PIN_10);
 800c510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c514:	4983      	ldr	r1, [pc, #524]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c516:	488e      	ldr	r0, [pc, #568]	; (800c750 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800c518:	f7ff fa98 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB11(GPIOB, GPIO_PIN_11);
 800c51c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c520:	4980      	ldr	r1, [pc, #512]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c522:	488c      	ldr	r0, [pc, #560]	; (800c754 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800c524:	f7ff fa92 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB12(GPIOB, GPIO_PIN_12);
 800c528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c52c:	497d      	ldr	r1, [pc, #500]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c52e:	488a      	ldr	r0, [pc, #552]	; (800c758 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800c530:	f7ff fa8c 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB13(GPIOB, GPIO_PIN_13);
 800c534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c538:	497a      	ldr	r1, [pc, #488]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c53a:	4888      	ldr	r0, [pc, #544]	; (800c75c <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800c53c:	f7ff fa86 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB14(GPIOB, GPIO_PIN_14);
 800c540:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c544:	4977      	ldr	r1, [pc, #476]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c546:	4886      	ldr	r0, [pc, #536]	; (800c760 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800c548:	f7ff fa80 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB15(GPIOB, GPIO_PIN_15);
 800c54c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c550:	4974      	ldr	r1, [pc, #464]	; (800c724 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800c552:	4884      	ldr	r0, [pc, #528]	; (800c764 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800c554:	f7ff fa7a 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC0(GPIOC, GPIO_PIN_0);
 800c558:	2201      	movs	r2, #1
 800c55a:	4983      	ldr	r1, [pc, #524]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c55c:	4883      	ldr	r0, [pc, #524]	; (800c76c <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800c55e:	f7ff fa75 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC1(GPIOC, GPIO_PIN_1);
 800c562:	2202      	movs	r2, #2
 800c564:	4980      	ldr	r1, [pc, #512]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c566:	4882      	ldr	r0, [pc, #520]	; (800c770 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800c568:	f7ff fa70 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC2(GPIOC, GPIO_PIN_2);
 800c56c:	2204      	movs	r2, #4
 800c56e:	497e      	ldr	r1, [pc, #504]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c570:	4880      	ldr	r0, [pc, #512]	; (800c774 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800c572:	f7ff fa6b 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC3(GPIOC, GPIO_PIN_3);
 800c576:	2208      	movs	r2, #8
 800c578:	497b      	ldr	r1, [pc, #492]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c57a:	487f      	ldr	r0, [pc, #508]	; (800c778 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800c57c:	f7ff fa66 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC4(GPIOC, GPIO_PIN_4);
 800c580:	2210      	movs	r2, #16
 800c582:	4979      	ldr	r1, [pc, #484]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c584:	487d      	ldr	r0, [pc, #500]	; (800c77c <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800c586:	f7ff fa61 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC5(GPIOC, GPIO_PIN_5);
 800c58a:	2220      	movs	r2, #32
 800c58c:	4976      	ldr	r1, [pc, #472]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c58e:	487c      	ldr	r0, [pc, #496]	; (800c780 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800c590:	f7ff fa5c 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC6(GPIOC, GPIO_PIN_6);
 800c594:	2240      	movs	r2, #64	; 0x40
 800c596:	4974      	ldr	r1, [pc, #464]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c598:	487a      	ldr	r0, [pc, #488]	; (800c784 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800c59a:	f7ff fa57 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC7(GPIOC, GPIO_PIN_7);
 800c59e:	2280      	movs	r2, #128	; 0x80
 800c5a0:	4971      	ldr	r1, [pc, #452]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c5a2:	4879      	ldr	r0, [pc, #484]	; (800c788 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800c5a4:	f7ff fa52 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC8(GPIOC, GPIO_PIN_8);
 800c5a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5ac:	496e      	ldr	r1, [pc, #440]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c5ae:	4877      	ldr	r0, [pc, #476]	; (800c78c <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800c5b0:	f7ff fa4c 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC9(GPIOC, GPIO_PIN_9);
 800c5b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5b8:	496b      	ldr	r1, [pc, #428]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c5ba:	4875      	ldr	r0, [pc, #468]	; (800c790 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800c5bc:	f7ff fa46 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC10(GPIOC, GPIO_PIN_10);
 800c5c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5c4:	4968      	ldr	r1, [pc, #416]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c5c6:	4873      	ldr	r0, [pc, #460]	; (800c794 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800c5c8:	f7ff fa40 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC11(GPIOC, GPIO_PIN_11);
 800c5cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5d0:	4965      	ldr	r1, [pc, #404]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c5d2:	4871      	ldr	r0, [pc, #452]	; (800c798 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800c5d4:	f7ff fa3a 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC12(GPIOC, GPIO_PIN_12);
 800c5d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c5dc:	4962      	ldr	r1, [pc, #392]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c5de:	486f      	ldr	r0, [pc, #444]	; (800c79c <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800c5e0:	f7ff fa34 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC13(GPIOC, GPIO_PIN_13);
 800c5e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c5e8:	495f      	ldr	r1, [pc, #380]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c5ea:	486d      	ldr	r0, [pc, #436]	; (800c7a0 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800c5ec:	f7ff fa2e 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC14(GPIOC, GPIO_PIN_14);
 800c5f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c5f4:	495c      	ldr	r1, [pc, #368]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c5f6:	486b      	ldr	r0, [pc, #428]	; (800c7a4 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800c5f8:	f7ff fa28 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC15(GPIOC, GPIO_PIN_15);
 800c5fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c600:	4959      	ldr	r1, [pc, #356]	; (800c768 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800c602:	4869      	ldr	r0, [pc, #420]	; (800c7a8 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800c604:	f7ff fa22 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD0(GPIOD, GPIO_PIN_0);
 800c608:	2201      	movs	r2, #1
 800c60a:	4968      	ldr	r1, [pc, #416]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c60c:	4868      	ldr	r0, [pc, #416]	; (800c7b0 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800c60e:	f7ff fa1d 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD1(GPIOD, GPIO_PIN_1);
 800c612:	2202      	movs	r2, #2
 800c614:	4965      	ldr	r1, [pc, #404]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c616:	4867      	ldr	r0, [pc, #412]	; (800c7b4 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800c618:	f7ff fa18 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD2(GPIOD, GPIO_PIN_2);
 800c61c:	2204      	movs	r2, #4
 800c61e:	4963      	ldr	r1, [pc, #396]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c620:	4865      	ldr	r0, [pc, #404]	; (800c7b8 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800c622:	f7ff fa13 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD3(GPIOD, GPIO_PIN_3);
 800c626:	2208      	movs	r2, #8
 800c628:	4960      	ldr	r1, [pc, #384]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c62a:	4864      	ldr	r0, [pc, #400]	; (800c7bc <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800c62c:	f7ff fa0e 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD4(GPIOD, GPIO_PIN_4);
 800c630:	2210      	movs	r2, #16
 800c632:	495e      	ldr	r1, [pc, #376]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c634:	4862      	ldr	r0, [pc, #392]	; (800c7c0 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800c636:	f7ff fa09 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD5(GPIOD, GPIO_PIN_5);
 800c63a:	2220      	movs	r2, #32
 800c63c:	495b      	ldr	r1, [pc, #364]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c63e:	4861      	ldr	r0, [pc, #388]	; (800c7c4 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800c640:	f7ff fa04 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD6(GPIOD, GPIO_PIN_6);
 800c644:	2240      	movs	r2, #64	; 0x40
 800c646:	4959      	ldr	r1, [pc, #356]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c648:	485f      	ldr	r0, [pc, #380]	; (800c7c8 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800c64a:	f7ff f9ff 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD7(GPIOD, GPIO_PIN_7);
 800c64e:	2280      	movs	r2, #128	; 0x80
 800c650:	4956      	ldr	r1, [pc, #344]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c652:	485e      	ldr	r0, [pc, #376]	; (800c7cc <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800c654:	f7ff f9fa 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD8(GPIOD, GPIO_PIN_8);
 800c658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c65c:	4953      	ldr	r1, [pc, #332]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c65e:	485c      	ldr	r0, [pc, #368]	; (800c7d0 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800c660:	f7ff f9f4 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD9(GPIOD, GPIO_PIN_9);
 800c664:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c668:	4950      	ldr	r1, [pc, #320]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c66a:	485a      	ldr	r0, [pc, #360]	; (800c7d4 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800c66c:	f7ff f9ee 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD10(GPIOD, GPIO_PIN_10);
 800c670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c674:	494d      	ldr	r1, [pc, #308]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c676:	4858      	ldr	r0, [pc, #352]	; (800c7d8 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800c678:	f7ff f9e8 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD11(GPIOD, GPIO_PIN_11);
 800c67c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c680:	494a      	ldr	r1, [pc, #296]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c682:	4856      	ldr	r0, [pc, #344]	; (800c7dc <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800c684:	f7ff f9e2 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD12(GPIOD, GPIO_PIN_12);
 800c688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c68c:	4947      	ldr	r1, [pc, #284]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c68e:	4854      	ldr	r0, [pc, #336]	; (800c7e0 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800c690:	f7ff f9dc 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD13(GPIOD, GPIO_PIN_13);
 800c694:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c698:	4944      	ldr	r1, [pc, #272]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c69a:	4852      	ldr	r0, [pc, #328]	; (800c7e4 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800c69c:	f7ff f9d6 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD14(GPIOD, GPIO_PIN_14);
 800c6a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c6a4:	4941      	ldr	r1, [pc, #260]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c6a6:	4850      	ldr	r0, [pc, #320]	; (800c7e8 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800c6a8:	f7ff f9d0 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD15(GPIOD, GPIO_PIN_15);
 800c6ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c6b0:	493e      	ldr	r1, [pc, #248]	; (800c7ac <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800c6b2:	484e      	ldr	r0, [pc, #312]	; (800c7ec <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800c6b4:	f7ff f9ca 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE0(GPIOE, GPIO_PIN_0);
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	494d      	ldr	r1, [pc, #308]	; (800c7f0 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800c6bc:	484d      	ldr	r0, [pc, #308]	; (800c7f4 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800c6be:	f7ff f9c5 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE1(GPIOE, GPIO_PIN_1);
 800c6c2:	2202      	movs	r2, #2
 800c6c4:	494a      	ldr	r1, [pc, #296]	; (800c7f0 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800c6c6:	484c      	ldr	r0, [pc, #304]	; (800c7f8 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800c6c8:	f7ff f9c0 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE2(GPIOE, GPIO_PIN_2);
 800c6cc:	2204      	movs	r2, #4
 800c6ce:	4948      	ldr	r1, [pc, #288]	; (800c7f0 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800c6d0:	484a      	ldr	r0, [pc, #296]	; (800c7fc <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800c6d2:	f7ff f9bb 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE3(GPIOE, GPIO_PIN_3);
 800c6d6:	2208      	movs	r2, #8
 800c6d8:	e092      	b.n	800c800 <_Z41__static_initialization_and_destruction_0ii+0x42c>
 800c6da:	bf00      	nop
 800c6dc:	240001ac 	.word	0x240001ac
 800c6e0:	58020000 	.word	0x58020000
 800c6e4:	240001b8 	.word	0x240001b8
 800c6e8:	240001c0 	.word	0x240001c0
 800c6ec:	240001c8 	.word	0x240001c8
 800c6f0:	240001d0 	.word	0x240001d0
 800c6f4:	240001d8 	.word	0x240001d8
 800c6f8:	240001e0 	.word	0x240001e0
 800c6fc:	240001e8 	.word	0x240001e8
 800c700:	240001f0 	.word	0x240001f0
 800c704:	240001f8 	.word	0x240001f8
 800c708:	24000200 	.word	0x24000200
 800c70c:	24000208 	.word	0x24000208
 800c710:	24000210 	.word	0x24000210
 800c714:	24000218 	.word	0x24000218
 800c718:	24000220 	.word	0x24000220
 800c71c:	24000228 	.word	0x24000228
 800c720:	24000230 	.word	0x24000230
 800c724:	58020400 	.word	0x58020400
 800c728:	24000238 	.word	0x24000238
 800c72c:	24000240 	.word	0x24000240
 800c730:	24000248 	.word	0x24000248
 800c734:	24000250 	.word	0x24000250
 800c738:	24000258 	.word	0x24000258
 800c73c:	24000260 	.word	0x24000260
 800c740:	24000268 	.word	0x24000268
 800c744:	24000270 	.word	0x24000270
 800c748:	24000278 	.word	0x24000278
 800c74c:	24000280 	.word	0x24000280
 800c750:	24000288 	.word	0x24000288
 800c754:	24000290 	.word	0x24000290
 800c758:	24000298 	.word	0x24000298
 800c75c:	240002a0 	.word	0x240002a0
 800c760:	240002a8 	.word	0x240002a8
 800c764:	240002b0 	.word	0x240002b0
 800c768:	58020800 	.word	0x58020800
 800c76c:	240002b8 	.word	0x240002b8
 800c770:	240002c0 	.word	0x240002c0
 800c774:	240002c8 	.word	0x240002c8
 800c778:	240002d0 	.word	0x240002d0
 800c77c:	240002d8 	.word	0x240002d8
 800c780:	240002e0 	.word	0x240002e0
 800c784:	240002e8 	.word	0x240002e8
 800c788:	240002f0 	.word	0x240002f0
 800c78c:	240002f8 	.word	0x240002f8
 800c790:	24000300 	.word	0x24000300
 800c794:	24000308 	.word	0x24000308
 800c798:	24000310 	.word	0x24000310
 800c79c:	24000318 	.word	0x24000318
 800c7a0:	24000320 	.word	0x24000320
 800c7a4:	24000328 	.word	0x24000328
 800c7a8:	24000330 	.word	0x24000330
 800c7ac:	58020c00 	.word	0x58020c00
 800c7b0:	24000338 	.word	0x24000338
 800c7b4:	24000340 	.word	0x24000340
 800c7b8:	24000348 	.word	0x24000348
 800c7bc:	24000350 	.word	0x24000350
 800c7c0:	24000358 	.word	0x24000358
 800c7c4:	24000360 	.word	0x24000360
 800c7c8:	24000368 	.word	0x24000368
 800c7cc:	24000370 	.word	0x24000370
 800c7d0:	24000378 	.word	0x24000378
 800c7d4:	24000380 	.word	0x24000380
 800c7d8:	24000388 	.word	0x24000388
 800c7dc:	24000390 	.word	0x24000390
 800c7e0:	24000398 	.word	0x24000398
 800c7e4:	240003a0 	.word	0x240003a0
 800c7e8:	240003a8 	.word	0x240003a8
 800c7ec:	240003b0 	.word	0x240003b0
 800c7f0:	58021000 	.word	0x58021000
 800c7f4:	240003b8 	.word	0x240003b8
 800c7f8:	240003c0 	.word	0x240003c0
 800c7fc:	240003c8 	.word	0x240003c8
 800c800:	4957      	ldr	r1, [pc, #348]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c802:	4858      	ldr	r0, [pc, #352]	; (800c964 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800c804:	f7ff f922 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE4(GPIOE, GPIO_PIN_4);
 800c808:	2210      	movs	r2, #16
 800c80a:	4955      	ldr	r1, [pc, #340]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c80c:	4856      	ldr	r0, [pc, #344]	; (800c968 <_Z41__static_initialization_and_destruction_0ii+0x594>)
 800c80e:	f7ff f91d 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE5(GPIOE, GPIO_PIN_5);
 800c812:	2220      	movs	r2, #32
 800c814:	4952      	ldr	r1, [pc, #328]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c816:	4855      	ldr	r0, [pc, #340]	; (800c96c <_Z41__static_initialization_and_destruction_0ii+0x598>)
 800c818:	f7ff f918 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE6(GPIOE, GPIO_PIN_6);
 800c81c:	2240      	movs	r2, #64	; 0x40
 800c81e:	4950      	ldr	r1, [pc, #320]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c820:	4853      	ldr	r0, [pc, #332]	; (800c970 <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 800c822:	f7ff f913 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE7(GPIOE, GPIO_PIN_7);
 800c826:	2280      	movs	r2, #128	; 0x80
 800c828:	494d      	ldr	r1, [pc, #308]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c82a:	4852      	ldr	r0, [pc, #328]	; (800c974 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 800c82c:	f7ff f90e 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE8(GPIOE, GPIO_PIN_8);
 800c830:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c834:	494a      	ldr	r1, [pc, #296]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c836:	4850      	ldr	r0, [pc, #320]	; (800c978 <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 800c838:	f7ff f908 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE9(GPIOE, GPIO_PIN_9);
 800c83c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c840:	4947      	ldr	r1, [pc, #284]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c842:	484e      	ldr	r0, [pc, #312]	; (800c97c <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 800c844:	f7ff f902 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE10(GPIOE, GPIO_PIN_10);
 800c848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c84c:	4944      	ldr	r1, [pc, #272]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c84e:	484c      	ldr	r0, [pc, #304]	; (800c980 <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 800c850:	f7ff f8fc 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE11(GPIOE, GPIO_PIN_11);
 800c854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c858:	4941      	ldr	r1, [pc, #260]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c85a:	484a      	ldr	r0, [pc, #296]	; (800c984 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 800c85c:	f7ff f8f6 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE12(GPIOE, GPIO_PIN_12);
 800c860:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c864:	493e      	ldr	r1, [pc, #248]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c866:	4848      	ldr	r0, [pc, #288]	; (800c988 <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 800c868:	f7ff f8f0 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE13(GPIOE, GPIO_PIN_13);
 800c86c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c870:	493b      	ldr	r1, [pc, #236]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c872:	4846      	ldr	r0, [pc, #280]	; (800c98c <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 800c874:	f7ff f8ea 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE14(GPIOE, GPIO_PIN_14);
 800c878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c87c:	4938      	ldr	r1, [pc, #224]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c87e:	4844      	ldr	r0, [pc, #272]	; (800c990 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800c880:	f7ff f8e4 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE15(GPIOE, GPIO_PIN_15);
 800c884:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c888:	4935      	ldr	r1, [pc, #212]	; (800c960 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800c88a:	4842      	ldr	r0, [pc, #264]	; (800c994 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800c88c:	f7ff f8de 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF0(GPIOF, GPIO_PIN_0);
 800c890:	2201      	movs	r2, #1
 800c892:	4941      	ldr	r1, [pc, #260]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c894:	4841      	ldr	r0, [pc, #260]	; (800c99c <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800c896:	f7ff f8d9 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF1(GPIOF, GPIO_PIN_1);
 800c89a:	2202      	movs	r2, #2
 800c89c:	493e      	ldr	r1, [pc, #248]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c89e:	4840      	ldr	r0, [pc, #256]	; (800c9a0 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800c8a0:	f7ff f8d4 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF2(GPIOF, GPIO_PIN_2);
 800c8a4:	2204      	movs	r2, #4
 800c8a6:	493c      	ldr	r1, [pc, #240]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c8a8:	483e      	ldr	r0, [pc, #248]	; (800c9a4 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800c8aa:	f7ff f8cf 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF3(GPIOF, GPIO_PIN_3);
 800c8ae:	2208      	movs	r2, #8
 800c8b0:	4939      	ldr	r1, [pc, #228]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c8b2:	483d      	ldr	r0, [pc, #244]	; (800c9a8 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800c8b4:	f7ff f8ca 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF4(GPIOF, GPIO_PIN_4);
 800c8b8:	2210      	movs	r2, #16
 800c8ba:	4937      	ldr	r1, [pc, #220]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c8bc:	483b      	ldr	r0, [pc, #236]	; (800c9ac <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800c8be:	f7ff f8c5 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF5(GPIOF, GPIO_PIN_5);
 800c8c2:	2220      	movs	r2, #32
 800c8c4:	4934      	ldr	r1, [pc, #208]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c8c6:	483a      	ldr	r0, [pc, #232]	; (800c9b0 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800c8c8:	f7ff f8c0 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF6(GPIOF, GPIO_PIN_6);
 800c8cc:	2240      	movs	r2, #64	; 0x40
 800c8ce:	4932      	ldr	r1, [pc, #200]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c8d0:	4838      	ldr	r0, [pc, #224]	; (800c9b4 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800c8d2:	f7ff f8bb 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF7(GPIOF, GPIO_PIN_7);
 800c8d6:	2280      	movs	r2, #128	; 0x80
 800c8d8:	492f      	ldr	r1, [pc, #188]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c8da:	4837      	ldr	r0, [pc, #220]	; (800c9b8 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800c8dc:	f7ff f8b6 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF8(GPIOF, GPIO_PIN_8);
 800c8e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c8e4:	492c      	ldr	r1, [pc, #176]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c8e6:	4835      	ldr	r0, [pc, #212]	; (800c9bc <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800c8e8:	f7ff f8b0 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF9(GPIOF, GPIO_PIN_9);
 800c8ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8f0:	4929      	ldr	r1, [pc, #164]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c8f2:	4833      	ldr	r0, [pc, #204]	; (800c9c0 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800c8f4:	f7ff f8aa 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF10(GPIOF, GPIO_PIN_10);
 800c8f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c8fc:	4926      	ldr	r1, [pc, #152]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c8fe:	4831      	ldr	r0, [pc, #196]	; (800c9c4 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800c900:	f7ff f8a4 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF11(GPIOF, GPIO_PIN_11);
 800c904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c908:	4923      	ldr	r1, [pc, #140]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c90a:	482f      	ldr	r0, [pc, #188]	; (800c9c8 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800c90c:	f7ff f89e 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF12(GPIOF, GPIO_PIN_12);
 800c910:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c914:	4920      	ldr	r1, [pc, #128]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c916:	482d      	ldr	r0, [pc, #180]	; (800c9cc <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800c918:	f7ff f898 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF13(GPIOF, GPIO_PIN_13);
 800c91c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c920:	491d      	ldr	r1, [pc, #116]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c922:	482b      	ldr	r0, [pc, #172]	; (800c9d0 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800c924:	f7ff f892 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF14(GPIOF, GPIO_PIN_14);
 800c928:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c92c:	491a      	ldr	r1, [pc, #104]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c92e:	4829      	ldr	r0, [pc, #164]	; (800c9d4 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800c930:	f7ff f88c 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF15(GPIOF, GPIO_PIN_15);
 800c934:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c938:	4917      	ldr	r1, [pc, #92]	; (800c998 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800c93a:	4827      	ldr	r0, [pc, #156]	; (800c9d8 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800c93c:	f7ff f886 	bl	800ba4c <_ZN3PinC1EP12GPIO_TypeDeft>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d107      	bne.n	800c956 <_Z41__static_initialization_and_destruction_0ii+0x582>
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d102      	bne.n	800c956 <_Z41__static_initialization_and_destruction_0ii+0x582>
vector<Pin*> Pin::all_pins;
 800c950:	4822      	ldr	r0, [pc, #136]	; (800c9dc <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800c952:	f000 f845 	bl	800c9e0 <_ZNSt6vectorIP3PinSaIS1_EED1Ev>
Pin PF15(GPIOF, GPIO_PIN_15);
 800c956:	bf00      	nop
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	58021000 	.word	0x58021000
 800c964:	240003d0 	.word	0x240003d0
 800c968:	240003d8 	.word	0x240003d8
 800c96c:	240003e0 	.word	0x240003e0
 800c970:	240003e8 	.word	0x240003e8
 800c974:	240003f0 	.word	0x240003f0
 800c978:	240003f8 	.word	0x240003f8
 800c97c:	24000400 	.word	0x24000400
 800c980:	24000408 	.word	0x24000408
 800c984:	24000410 	.word	0x24000410
 800c988:	24000418 	.word	0x24000418
 800c98c:	24000420 	.word	0x24000420
 800c990:	24000428 	.word	0x24000428
 800c994:	24000430 	.word	0x24000430
 800c998:	58021400 	.word	0x58021400
 800c99c:	24000438 	.word	0x24000438
 800c9a0:	24000440 	.word	0x24000440
 800c9a4:	24000448 	.word	0x24000448
 800c9a8:	24000450 	.word	0x24000450
 800c9ac:	24000458 	.word	0x24000458
 800c9b0:	24000460 	.word	0x24000460
 800c9b4:	24000468 	.word	0x24000468
 800c9b8:	24000470 	.word	0x24000470
 800c9bc:	24000478 	.word	0x24000478
 800c9c0:	24000480 	.word	0x24000480
 800c9c4:	24000488 	.word	0x24000488
 800c9c8:	24000490 	.word	0x24000490
 800c9cc:	24000498 	.word	0x24000498
 800c9d0:	240004a0 	.word	0x240004a0
 800c9d4:	240004a8 	.word	0x240004a8
 800c9d8:	240004b0 	.word	0x240004b0
 800c9dc:	240001ac 	.word	0x240001ac

0800c9e0 <_ZNSt6vectorIP3PinSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c9e0:	b5b0      	push	{r4, r5, r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681c      	ldr	r4, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7ff fb62 	bl	800c0bc <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800c9f8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	4620      	mov	r0, r4
 800ca00:	f7ff fb67 	bl	800c0d2 <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>
      }
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7ff f87b 	bl	800bb02 <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bdb0      	pop	{r4, r5, r7, pc}

0800ca16 <_GLOBAL__sub_I__ZN3Pin8all_pinsE>:
 800ca16:	b580      	push	{r7, lr}
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ca1e:	2001      	movs	r0, #1
 800ca20:	f7ff fcd8 	bl	800c3d4 <_Z41__static_initialization_and_destruction_0ii>
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <_GLOBAL__sub_D__ZN3Pin8all_pinsE>:
 800ca26:	b580      	push	{r7, lr}
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ca2e:	2000      	movs	r0, #0
 800ca30:	f7ff fcd0 	bl	800c3d4 <_Z41__static_initialization_and_destruction_0ii>
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800ca36:	b480      	push	{r7}
 800ca38:	b083      	sub	sp, #12
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4618      	mov	r0, r3
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4618      	mov	r0, r3
 800ca58:	370c      	adds	r7, #12
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800ca62:	b480      	push	{r7}
 800ca64:	b083      	sub	sp, #12
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	609a      	str	r2, [r3, #8]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4618      	mov	r0, r3
 800ca74:	370c      	adds	r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b082      	sub	sp, #8
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	689b      	ldr	r3, [r3, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d005      	beq.n	800ca9a <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	689b      	ldr	r3, [r3, #8]
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	2203      	movs	r2, #3
 800ca98:	4798      	blx	r3
    }
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	bf0c      	ite	eq
 800cab4:	2301      	moveq	r3, #1
 800cab6:	2300      	movne	r3, #0
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	4618      	mov	r0, r3
 800cabc:	370c      	adds	r7, #12
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <_ZN5Timer3minEff>:
	OPERATION_MODE current_operation_mode;
	UNITS current_units;
	uint32_t current_value;
	function<void()> current_func;

	float min(float n1, float n2){
 800cac6:	b480      	push	{r7}
 800cac8:	b085      	sub	sp, #20
 800caca:	af00      	add	r7, sp, #0
 800cacc:	60f8      	str	r0, [r7, #12]
 800cace:	ed87 0a02 	vstr	s0, [r7, #8]
 800cad2:	edc7 0a01 	vstr	s1, [r7, #4]
		if(n1 < n2)
 800cad6:	ed97 7a02 	vldr	s14, [r7, #8]
 800cada:	edd7 7a01 	vldr	s15, [r7, #4]
 800cade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae6:	d501      	bpl.n	800caec <_ZN5Timer3minEff+0x26>
			return n1;
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	e000      	b.n	800caee <_ZN5Timer3minEff+0x28>
		return n2;
 800caec:	687b      	ldr	r3, [r7, #4]
	}
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eeb0 0a67 	vmov.f32	s0, s15
 800caf6:	3714      	adds	r7, #20
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <_ZN5Timer9interruptEv>:

	void interrupt() {
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
		switch(current_operation_mode) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d002      	beq.n	800cb16 <_ZN5Timer9interruptEv+0x16>
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d003      	beq.n	800cb1c <_ZN5Timer9interruptEv+0x1c>
			stop_all();
		case CYCLIC:
			current_func();
			break;
		}
	}
 800cb14:	e008      	b.n	800cb28 <_ZN5Timer9interruptEv+0x28>
			stop_all();
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f96a 	bl	800cdf0 <_ZN5Timer8stop_allEv>
			current_func();
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	3308      	adds	r3, #8
 800cb20:	4618      	mov	r0, r3
 800cb22:	f002 fa74 	bl	800f00e <_ZNKSt8functionIFvvEEclEv>
			break;
 800cb26:	bf00      	nop
	}
 800cb28:	bf00      	nop
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <_ZN5Timer10to_secondsENS_5UNITSE>:

	static uint32_t to_seconds(UNITS units){
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	4603      	mov	r3, r0
 800cb38:	71fb      	strb	r3, [r7, #7]
		if(units == SECONDS)
 800cb3a:	79fb      	ldrb	r3, [r7, #7]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d101      	bne.n	800cb44 <_ZN5Timer10to_secondsENS_5UNITSE+0x14>
			return 1;
 800cb40:	2301      	movs	r3, #1
 800cb42:	e010      	b.n	800cb66 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MILLISECONDS)
 800cb44:	79fb      	ldrb	r3, [r7, #7]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d102      	bne.n	800cb50 <_ZN5Timer10to_secondsENS_5UNITSE+0x20>
			return 1000;
 800cb4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb4e:	e00a      	b.n	800cb66 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MICROSEONDS)
 800cb50:	79fb      	ldrb	r3, [r7, #7]
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d101      	bne.n	800cb5a <_ZN5Timer10to_secondsENS_5UNITSE+0x2a>
			return 1000000;
 800cb56:	4b07      	ldr	r3, [pc, #28]	; (800cb74 <_ZN5Timer10to_secondsENS_5UNITSE+0x44>)
 800cb58:	e005      	b.n	800cb66 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == NANOSECONDS)
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	2b03      	cmp	r3, #3
 800cb5e:	d101      	bne.n	800cb64 <_ZN5Timer10to_secondsENS_5UNITSE+0x34>
			return 1000000000;
 800cb60:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <_ZN5Timer10to_secondsENS_5UNITSE+0x48>)
 800cb62:	e000      	b.n	800cb66 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		return 0;
 800cb64:	2300      	movs	r3, #0
	}
 800cb66:	4618      	mov	r0, r3
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	000f4240 	.word	0x000f4240
 800cb78:	3b9aca00 	.word	0x3b9aca00

0800cb7c <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff ff79 	bl	800ca7e <_ZNSt14_Function_baseD1Ev>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
	...

0800cb98 <_ZN5TimerC1EP17TIM_HandleTypeDef>:

public:
	TIM_HandleTypeDef* timer;
	uint32_t frequency;

	Timer(TIM_HandleTypeDef* timer) : timer(timer){
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	3308      	adds	r3, #8
 800cba6:	4618      	mov	r0, r3
 800cba8:	f002 fa47 	bl	800f03a <_ZNSt8functionIFvvEEC1Ev>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	619a      	str	r2, [r3, #24]
		Timer::all_timers.push_back(this);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	60fb      	str	r3, [r7, #12]
 800cbb6:	f107 030c 	add.w	r3, r7, #12
 800cbba:	4619      	mov	r1, r3
 800cbbc:	4803      	ldr	r0, [pc, #12]	; (800cbcc <_ZN5TimerC1EP17TIM_HandleTypeDef+0x34>)
 800cbbe:	f002 fa49 	bl	800f054 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>
	}
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	24000188 	.word	0x24000188

0800cbd0 <_ZN5Timer10set_periodEmNS_5UNITSE>:

	void set_period(uint32_t time, UNITS units){
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b08a      	sub	sp, #40	; 0x28
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	4613      	mov	r3, r2
 800cbdc:	71fb      	strb	r3, [r7, #7]
		timer->Instance->CNT = 0;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	625a      	str	r2, [r3, #36]	; 0x24
		float target_freq = to_seconds(units) / time;
 800cbe8:	79fb      	ldrb	r3, [r7, #7]
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7ff ffa0 	bl	800cb30 <_ZN5Timer10to_secondsENS_5UNITSE>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbf8:	ee07 3a90 	vmov	s15, r3
 800cbfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800cc04:	eddf 6a27 	vldr	s13, [pc, #156]	; 800cca4 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800cc08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cc0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cc14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc18:	edc7 7a08 	vstr	s15, [r7, #32]
		float actual_psc = min(ideal_psc, 65536.0);
 800cc1c:	eddf 0a22 	vldr	s1, [pc, #136]	; 800cca8 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800cc20:	ed97 0a08 	vldr	s0, [r7, #32]
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f7ff ff4e 	bl	800cac6 <_ZN5Timer3minEff>
 800cc2a:	ed87 0a07 	vstr	s0, [r7, #28]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800cc2e:	edd7 7a07 	vldr	s15, [r7, #28]
 800cc32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc36:	ee17 2a90 	vmov	r2, s15
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	3a01      	subs	r2, #1
 800cc42:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	699b      	ldr	r3, [r3, #24]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	ee07 3a90 	vmov	s15, r3
 800cc52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cc56:	eddf 6a13 	vldr	s13, [pc, #76]	; 800cca4 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800cc5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc5e:	edc7 7a06 	vstr	s15, [r7, #24]
		float ideal_arr = current_psc_freq / target_freq;
 800cc62:	edd7 6a06 	vldr	s13, [r7, #24]
 800cc66:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800cc6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc6e:	edc7 7a05 	vstr	s15, [r7, #20]
		float actual_arr = min(ideal_arr, 65536.0);
 800cc72:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800cca8 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800cc76:	ed97 0a05 	vldr	s0, [r7, #20]
 800cc7a:	68f8      	ldr	r0, [r7, #12]
 800cc7c:	f7ff ff23 	bl	800cac6 <_ZN5Timer3minEff>
 800cc80:	ed87 0a04 	vstr	s0, [r7, #16]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800cc84:	edd7 7a04 	vldr	s15, [r7, #16]
 800cc88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc8c:	ee17 2a90 	vmov	r2, s15
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	3a01      	subs	r2, #1
 800cc98:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800cc9a:	bf00      	nop
 800cc9c:	3728      	adds	r7, #40	; 0x28
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	4d832156 	.word	0x4d832156
 800cca8:	47800000 	.word	0x47800000

0800ccac <_ZN5Timer13set_frequencyEm>:

	void set_frequency(uint32_t target_freq){
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b088      	sub	sp, #32
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
		timer->Instance->CNT = 0;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	625a      	str	r2, [r3, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	ee07 3a90 	vmov	s15, r3
 800ccc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccca:	eddf 6a28 	vldr	s13, [pc, #160]	; 800cd6c <_ZN5Timer13set_frequencyEm+0xc0>
 800ccce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccd2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ccd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ccda:	edc7 7a07 	vstr	s15, [r7, #28]
		float actual_psc = min(ideal_psc, 65536.0);
 800ccde:	eddf 0a24 	vldr	s1, [pc, #144]	; 800cd70 <_ZN5Timer13set_frequencyEm+0xc4>
 800cce2:	ed97 0a07 	vldr	s0, [r7, #28]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff feed 	bl	800cac6 <_ZN5Timer3minEff>
 800ccec:	ed87 0a06 	vstr	s0, [r7, #24]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800ccf0:	edd7 7a06 	vldr	s15, [r7, #24]
 800ccf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccf8:	ee17 2a90 	vmov	r2, s15
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	3a01      	subs	r2, #1
 800cd04:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	699b      	ldr	r3, [r3, #24]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0e:	3301      	adds	r3, #1
 800cd10:	ee07 3a90 	vmov	s15, r3
 800cd14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cd18:	eddf 6a14 	vldr	s13, [pc, #80]	; 800cd6c <_ZN5Timer13set_frequencyEm+0xc0>
 800cd1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd20:	edc7 7a05 	vstr	s15, [r7, #20]
		float ideal_arr = current_psc_freq / target_freq;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	ee07 3a90 	vmov	s15, r3
 800cd2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cd2e:	edd7 6a05 	vldr	s13, [r7, #20]
 800cd32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd36:	edc7 7a04 	vstr	s15, [r7, #16]
		float actual_arr = min(ideal_arr, 65536.0);
 800cd3a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800cd70 <_ZN5Timer13set_frequencyEm+0xc4>
 800cd3e:	ed97 0a04 	vldr	s0, [r7, #16]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7ff febf 	bl	800cac6 <_ZN5Timer3minEff>
 800cd48:	ed87 0a03 	vstr	s0, [r7, #12]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800cd4c:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd54:	ee17 2a90 	vmov	r2, s15
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	699b      	ldr	r3, [r3, #24]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	3a01      	subs	r2, #1
 800cd60:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800cd62:	bf00      	nop
 800cd64:	3720      	adds	r7, #32
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	4d832156 	.word	0x4d832156
 800cd70:	47800000 	.word	0x47800000

0800cd74 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>:

	void execute_every(function<void()> func, uint32_t time, UNITS units){
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
 800cd80:	70fb      	strb	r3, [r7, #3]
		current_operation_mode = CYCLIC;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2201      	movs	r2, #1
 800cd86:	701a      	strb	r2, [r3, #0]
		current_units = units;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	78fa      	ldrb	r2, [r7, #3]
 800cd8c:	705a      	strb	r2, [r3, #1]
		current_func = func;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3308      	adds	r3, #8
 800cd92:	68b9      	ldr	r1, [r7, #8]
 800cd94:	4618      	mov	r0, r3
 800cd96:	f002 f96e 	bl	800f076 <_ZNSt8functionIFvvEEaSERKS1_>
		set_period(time, units);
 800cd9a:	78fb      	ldrb	r3, [r7, #3]
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	6879      	ldr	r1, [r7, #4]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff ff15 	bl	800cbd0 <_ZN5Timer10set_periodEmNS_5UNITSE>
		HAL_TIM_Base_Start_IT(timer);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f011 fcc4 	bl	801e738 <HAL_TIM_Base_Start_IT>
	}
 800cdb0:	bf00      	nop
 800cdb2:	3710      	adds	r7, #16
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}

0800cdb8 <_ZN5Timer10execute_atESt8functionIFvvEEm>:

	void execute_at(function<void()> func, uint32_t target_freq){
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
		current_operation_mode = CYCLIC;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	701a      	strb	r2, [r3, #0]
		current_func = func;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3308      	adds	r3, #8
 800cdce:	68b9      	ldr	r1, [r7, #8]
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f002 f950 	bl	800f076 <_ZNSt8functionIFvvEEaSERKS1_>
		set_frequency(target_freq);
 800cdd6:	6879      	ldr	r1, [r7, #4]
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f7ff ff67 	bl	800ccac <_ZN5Timer13set_frequencyEm>
		HAL_TIM_Base_Start_IT(timer);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	699b      	ldr	r3, [r3, #24]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f011 fca8 	bl	801e738 <HAL_TIM_Base_Start_IT>
	}
 800cde8:	bf00      	nop
 800cdea:	3710      	adds	r7, #16
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <_ZN5Timer8stop_allEv>:
//		HAL_TIM_Base_Stop(timer);
//		current_operation_mode = NONE;
//		return current_value * 65536 + timer->Instance->CNT;
//	}

	void stop_all(){
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Stop_IT(timer);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	699b      	ldr	r3, [r3, #24]
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f011 fd21 	bl	801e844 <HAL_TIM_Base_Stop_IT>
		current_operation_mode = NONE;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	701a      	strb	r2, [r3, #0]
	}
 800ce08:	bf00      	nop
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ce10:	b480      	push	{r7}
 800ce12:	b083      	sub	sp, #12
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	370c      	adds	r7, #12
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr

0800ce26 <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800ce26:	b590      	push	{r4, r7, lr}
 800ce28:	b083      	sub	sp, #12
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f7ff ffed 	bl	800ce10 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ce36:	4603      	mov	r3, r0
 800ce38:	681c      	ldr	r4, [r3, #0]
 800ce3a:	6838      	ldr	r0, [r7, #0]
 800ce3c:	f7ff ffe8 	bl	800ce10 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800ce40:	4603      	mov	r3, r0
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	429c      	cmp	r4, r3
 800ce46:	bf0c      	ite	eq
 800ce48:	2301      	moveq	r3, #1
 800ce4a:	2300      	movne	r3, #0
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	4618      	mov	r0, r3
 800ce50:	370c      	adds	r7, #12
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd90      	pop	{r4, r7, pc}

0800ce56 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800ce56:	b480      	push	{r7}
 800ce58:	b083      	sub	sp, #12
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	1d1a      	adds	r2, r3, #4
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	601a      	str	r2, [r3, #0]
	return *this;
 800ce68:	687b      	ldr	r3, [r7, #4]
      }
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ce76:	b480      	push	{r7}
 800ce78:	b083      	sub	sp, #12
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4618      	mov	r0, r3
 800ce84:	370c      	adds	r7, #12
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
	...

0800ce90 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>:

	static void interrupt_all_timers(TIM_HandleTypeDef* timer){
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
		for(auto software_timer : Timer::all_timers){
 800ce98:	4b19      	ldr	r3, [pc, #100]	; (800cf00 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x70>)
 800ce9a:	617b      	str	r3, [r7, #20]
 800ce9c:	6978      	ldr	r0, [r7, #20]
 800ce9e:	f002 f905 	bl	800f0ac <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 800cea2:	4603      	mov	r3, r0
 800cea4:	60fb      	str	r3, [r7, #12]
 800cea6:	6978      	ldr	r0, [r7, #20]
 800cea8:	f002 f910 	bl	800f0cc <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 800ceac:	4603      	mov	r3, r0
 800ceae:	60bb      	str	r3, [r7, #8]
 800ceb0:	f107 0208 	add.w	r2, r7, #8
 800ceb4:	f107 030c 	add.w	r3, r7, #12
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff ffb3 	bl	800ce26 <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800cec0:	4603      	mov	r3, r0
 800cec2:	f083 0301 	eor.w	r3, r3, #1
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d015      	beq.n	800cef8 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x68>
 800cecc:	f107 030c 	add.w	r3, r7, #12
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff ffd0 	bl	800ce76 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 800ced6:	4603      	mov	r3, r0
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	613b      	str	r3, [r7, #16]
			if(software_timer->timer == timer)
 800cedc:	693b      	ldr	r3, [r7, #16]
 800cede:	699b      	ldr	r3, [r3, #24]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d102      	bne.n	800ceec <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x5c>
				software_timer->interrupt();
 800cee6:	6938      	ldr	r0, [r7, #16]
 800cee8:	f7ff fe0a 	bl	800cb00 <_ZN5Timer9interruptEv>
		for(auto software_timer : Timer::all_timers){
 800ceec:	f107 030c 	add.w	r3, r7, #12
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff ffb0 	bl	800ce56 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>
 800cef6:	e7db      	b.n	800ceb0 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x20>
		}
	}
 800cef8:	bf00      	nop
 800cefa:	3718      	adds	r7, #24
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	24000188 	.word	0x24000188

0800cf04 <_ZN13StreamMessage7unparseEPh>:
		}else{
			build(args...);
		}
	}

	void unparse(uint8_t* d){
 800cf04:	b590      	push	{r4, r7, lr}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
		for(int i = 0; i < sizes.size(); i++){
 800cf0e:	2300      	movs	r3, #0
 800cf10:	60fb      	str	r3, [r7, #12]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	3304      	adds	r3, #4
 800cf16:	4618      	mov	r0, r3
 800cf18:	f002 f8e9 	bl	800f0ee <_ZNKSt6vectorIjSaIjEE4sizeEv>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	bf8c      	ite	hi
 800cf24:	2301      	movhi	r3, #1
 800cf26:	2300      	movls	r3, #0
 800cf28:	b2db      	uxtb	r3, r3
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d026      	beq.n	800cf7c <_ZN13StreamMessage7unparseEPh+0x78>
			memcpy(d, ptrs[i], sizes[i]);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	3310      	adds	r3, #16
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	4611      	mov	r1, r2
 800cf36:	4618      	mov	r0, r3
 800cf38:	f002 f8e9 	bl	800f10e <_ZNSt6vectorIPvSaIS0_EEixEj>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	681c      	ldr	r4, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	3304      	adds	r3, #4
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	4611      	mov	r1, r2
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f002 f8f0 	bl	800f12e <_ZNSt6vectorIjSaIjEEixEj>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	461a      	mov	r2, r3
 800cf54:	4621      	mov	r1, r4
 800cf56:	6838      	ldr	r0, [r7, #0]
 800cf58:	f013 fc0a 	bl	8020770 <memcpy>
			d+= sizes[i];
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	3304      	adds	r3, #4
 800cf60:	68fa      	ldr	r2, [r7, #12]
 800cf62:	4611      	mov	r1, r2
 800cf64:	4618      	mov	r0, r3
 800cf66:	f002 f8e2 	bl	800f12e <_ZNSt6vectorIjSaIjEEixEj>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	4413      	add	r3, r2
 800cf72:	603b      	str	r3, [r7, #0]
		for(int i = 0; i < sizes.size(); i++){
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	3301      	adds	r3, #1
 800cf78:	60fb      	str	r3, [r7, #12]
 800cf7a:	e7ca      	b.n	800cf12 <_ZN13StreamMessage7unparseEPh+0xe>
		}
	}
 800cf7c:	bf00      	nop
 800cf7e:	3714      	adds	r7, #20
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd90      	pop	{r4, r7, pc}

0800cf84 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>:

	// TODO -> abstract all Read services

	static StreamMessage* FromAnalogIn(AnalogIn* in){
 800cf84:	b590      	push	{r4, r7, lr}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
		return new StreamMessage(&in->voltage);
 800cf8c:	201c      	movs	r0, #28
 800cf8e:	f013 fac3 	bl	8020518 <_Znwj>
 800cf92:	4603      	mov	r3, r0
 800cf94:	461c      	mov	r4, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	3314      	adds	r3, #20
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	f002 f90a 	bl	800f1b6 <_ZN13StreamMessageC1IfJEEEPT_DpPT0_>
 800cfa2:	4623      	mov	r3, r4
	}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd90      	pop	{r4, r7, pc}

0800cfac <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>:

	static StreamMessage* FromDigigalIn(DigitalIn* in){
 800cfac:	b590      	push	{r4, r7, lr}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
		return new StreamMessage(&in->state);
 800cfb4:	201c      	movs	r0, #28
 800cfb6:	f013 faaf 	bl	8020518 <_Znwj>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	461c      	mov	r4, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	3308      	adds	r3, #8
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f002 f911 	bl	800f1ec <_ZN13StreamMessageC1IN9DigitalIn14DigitalInStateEJEEEPT_DpPT0_>
 800cfca:	4623      	mov	r3, r4
	}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd90      	pop	{r4, r7, pc}

0800cfd4 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>:

	static StreamMessage* FromInputCapture(InputCapture* in){
 800cfd4:	b590      	push	{r4, r7, lr}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
		//return new StreamMessage(&in->frequency);
		return new StreamMessage(&in->frequency, &in->duty);
 800cfdc:	201c      	movs	r0, #28
 800cfde:	f013 fa9b 	bl	8020518 <_Znwj>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	461c      	mov	r4, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	3350      	adds	r3, #80	; 0x50
 800cff0:	461a      	mov	r2, r3
 800cff2:	4620      	mov	r0, r4
 800cff4:	f002 f915 	bl	800f222 <_ZN13StreamMessageC1IfJfEEEPT_DpPT0_>
 800cff8:	4623      	mov	r3, r4
	}
 800cffa:	4618      	mov	r0, r3
 800cffc:	370c      	adds	r7, #12
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd90      	pop	{r4, r7, pc}
	...

0800d004 <_ZN13StreamMessage7FromPinEP3Pin>:

	static optional<StreamMessage*> FromPin(Pin* pin){
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
		if(pin->mode == ANALOG_INPUT)
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	799b      	ldrb	r3, [r3, #6]
 800d012:	2b01      	cmp	r3, #1
 800d014:	d112      	bne.n	800d03c <_ZN13StreamMessage7FromPinEP3Pin+0x38>
			return FromAnalogIn(AnalogIn::analog_in_from_pin[pin]);
 800d016:	463b      	mov	r3, r7
 800d018:	4619      	mov	r1, r3
 800d01a:	4822      	ldr	r0, [pc, #136]	; (800d0a4 <_ZN13StreamMessage7FromPinEP3Pin+0xa0>)
 800d01c:	f7f3 fca0 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800d020:	4603      	mov	r3, r0
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4618      	mov	r0, r3
 800d026:	f7ff ffad 	bl	800cf84 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>
 800d02a:	4603      	mov	r3, r0
 800d02c:	60fb      	str	r3, [r7, #12]
 800d02e:	f107 030c 	add.w	r3, r7, #12
 800d032:	4619      	mov	r1, r3
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f002 f911 	bl	800f25c <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
		if(pin->mode == DIGITAL_INPUT)
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
		if(pin->mode == INPUT_CAPTURE)
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
	}
 800d03a:	e02e      	b.n	800d09a <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == DIGITAL_INPUT)
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	799b      	ldrb	r3, [r3, #6]
 800d040:	2b05      	cmp	r3, #5
 800d042:	d112      	bne.n	800d06a <_ZN13StreamMessage7FromPinEP3Pin+0x66>
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
 800d044:	463b      	mov	r3, r7
 800d046:	4619      	mov	r1, r3
 800d048:	4817      	ldr	r0, [pc, #92]	; (800d0a8 <_ZN13StreamMessage7FromPinEP3Pin+0xa4>)
 800d04a:	f7f9 fb67 	bl	800671c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800d04e:	4603      	mov	r3, r0
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff ffaa 	bl	800cfac <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>
 800d058:	4603      	mov	r3, r0
 800d05a:	613b      	str	r3, [r7, #16]
 800d05c:	f107 0310 	add.w	r3, r7, #16
 800d060:	4619      	mov	r1, r3
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f002 f8fa 	bl	800f25c <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800d068:	e017      	b.n	800d09a <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == INPUT_CAPTURE)
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	799b      	ldrb	r3, [r3, #6]
 800d06e:	2b03      	cmp	r3, #3
 800d070:	d112      	bne.n	800d098 <_ZN13StreamMessage7FromPinEP3Pin+0x94>
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
 800d072:	463b      	mov	r3, r7
 800d074:	4619      	mov	r1, r3
 800d076:	480d      	ldr	r0, [pc, #52]	; (800d0ac <_ZN13StreamMessage7FromPinEP3Pin+0xa8>)
 800d078:	f7fc fce4 	bl	8009a44 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800d07c:	4603      	mov	r3, r0
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4618      	mov	r0, r3
 800d082:	f7ff ffa7 	bl	800cfd4 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>
 800d086:	4603      	mov	r3, r0
 800d088:	617b      	str	r3, [r7, #20]
 800d08a:	f107 0314 	add.w	r3, r7, #20
 800d08e:	4619      	mov	r1, r3
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f002 f8e3 	bl	800f25c <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800d096:	e000      	b.n	800d09a <_ZN13StreamMessage7FromPinEP3Pin+0x96>
 800d098:	bf00      	nop
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	3718      	adds	r7, #24
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	240000bc 	.word	0x240000bc
 800d0a8:	2400011c 	.word	0x2400011c
 800d0ac:	24000164 	.word	0x24000164

0800d0b0 <_ZN6Stream12is_availableEjj>:
	unsigned int size = 0;
	uint8_t id;
	Timer* timer;
	Can* can;

	bool is_available(unsigned int frequency, unsigned int size){
 800d0b0:	b480      	push	{r7}
 800d0b2:	b087      	sub	sp, #28
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	607a      	str	r2, [r7, #4]
		bool is_occupied		= this ->state == OCCUPIED;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	7f1b      	ldrb	r3, [r3, #28]
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	bf0c      	ite	eq
 800d0c4:	2301      	moveq	r3, #1
 800d0c6:	2300      	movne	r3, #0
 800d0c8:	75fb      	strb	r3, [r7, #23]
		bool is_full			= (this->size + size) > 64 ;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	68da      	ldr	r2, [r3, #12]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	2b40      	cmp	r3, #64	; 0x40
 800d0d4:	bf8c      	ite	hi
 800d0d6:	2301      	movhi	r3, #1
 800d0d8:	2300      	movls	r3, #0
 800d0da:	75bb      	strb	r3, [r7, #22]
		bool frequencies_match	= this->frequency == frequency;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	6a1b      	ldr	r3, [r3, #32]
 800d0e0:	68ba      	ldr	r2, [r7, #8]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	bf0c      	ite	eq
 800d0e6:	2301      	moveq	r3, #1
 800d0e8:	2300      	movne	r3, #0
 800d0ea:	757b      	strb	r3, [r7, #21]
		return !is_occupied || (frequencies_match && !is_full);
 800d0ec:	7dfb      	ldrb	r3, [r7, #23]
 800d0ee:	f083 0301 	eor.w	r3, r3, #1
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d108      	bne.n	800d10a <_ZN6Stream12is_availableEjj+0x5a>
 800d0f8:	7d7b      	ldrb	r3, [r7, #21]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d007      	beq.n	800d10e <_ZN6Stream12is_availableEjj+0x5e>
 800d0fe:	7dbb      	ldrb	r3, [r7, #22]
 800d100:	f083 0301 	eor.w	r3, r3, #1
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <_ZN6Stream12is_availableEjj+0x5e>
 800d10a:	2301      	movs	r3, #1
 800d10c:	e000      	b.n	800d110 <_ZN6Stream12is_availableEjj+0x60>
 800d10e:	2300      	movs	r3, #0
	}
 800d110:	4618      	mov	r0, r3
 800d112:	371c      	adds	r7, #28
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <_ZN6Stream16send_ok_responseEh>:

	void send_ok_response(uint8_t offset){
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	460b      	mov	r3, r1
 800d126:	70fb      	strb	r3, [r7, #3]
		can->TxData[0] = Can::Ok;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	2200      	movs	r2, #0
 800d12e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		can->TxData[1] = id;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	699b      	ldr	r3, [r3, #24]
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	7c12      	ldrb	r2, [r2, #16]
 800d13a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		can->TxData[2] = offset;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	699b      	ldr	r3, [r3, #24]
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		can->send_message(READ_STREAM_ID, 3);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	699b      	ldr	r3, [r3, #24]
 800d14c:	2203      	movs	r2, #3
 800d14e:	2105      	movs	r1, #5
 800d150:	4618      	mov	r0, r3
 800d152:	f7f7 fe0d 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800d156:	bf00      	nop
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800d15e:	b580      	push	{r7, lr}
 800d160:	b082      	sub	sp, #8
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f002 f89c 	bl	800f2a4 <_ZNSaIP13StreamMessageED1Ev>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4618      	mov	r0, r3
 800d170:	3708      	adds	r7, #8
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800d176:	b580      	push	{r7, lr}
 800d178:	b082      	sub	sp, #8
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	4618      	mov	r0, r3
 800d182:	f002 f87f 	bl	800f284 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	4618      	mov	r0, r3
 800d18a:	3708      	adds	r7, #8
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>:
      vector() = default;
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7ff ffeb 	bl	800d176 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
	...

0800d1ac <_ZN6StreamC1EP5TimerP3Can>:

public:
	State state = FREE;
	uint32_t frequency;

	Stream(Timer* timer, Can* can) : timer(timer), can(can) {
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7ff ffe8 	bl	800d190 <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	60da      	str	r2, [r3, #12]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	615a      	str	r2, [r3, #20]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	619a      	str	r2, [r3, #24]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	771a      	strb	r2, [r3, #28]
		Stream::streams.push_back(this);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	617b      	str	r3, [r7, #20]
 800d1dc:	f107 0314 	add.w	r3, r7, #20
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	4809      	ldr	r0, [pc, #36]	; (800d208 <_ZN6StreamC1EP5TimerP3Can+0x5c>)
 800d1e4:	f002 f89d 	bl	800f322 <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>
		id = current_id;
 800d1e8:	4b08      	ldr	r3, [pc, #32]	; (800d20c <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800d1ea:	781a      	ldrb	r2, [r3, #0]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	741a      	strb	r2, [r3, #16]
		current_id ++;
 800d1f0:	4b06      	ldr	r3, [pc, #24]	; (800d20c <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	4b04      	ldr	r3, [pc, #16]	; (800d20c <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800d1fa:	701a      	strb	r2, [r3, #0]
	}
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	4618      	mov	r0, r3
 800d200:	3718      	adds	r7, #24
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	2400017c 	.word	0x2400017c
 800d20c:	24000000 	.word	0x24000000

0800d210 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4618      	mov	r0, r3
 800d21c:	370c      	adds	r7, #12
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr

0800d226 <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800d226:	b590      	push	{r4, r7, lr}
 800d228:	b083      	sub	sp, #12
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
 800d22e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff ffed 	bl	800d210 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800d236:	4603      	mov	r3, r0
 800d238:	681c      	ldr	r4, [r3, #0]
 800d23a:	6838      	ldr	r0, [r7, #0]
 800d23c:	f7ff ffe8 	bl	800d210 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800d240:	4603      	mov	r3, r0
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	429c      	cmp	r4, r3
 800d246:	bf0c      	ite	eq
 800d248:	2301      	moveq	r3, #1
 800d24a:	2300      	movne	r3, #0
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	4618      	mov	r0, r3
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	bd90      	pop	{r4, r7, pc}

0800d256 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800d256:	b480      	push	{r7}
 800d258:	b083      	sub	sp, #12
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	1d1a      	adds	r2, r3, #4
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	601a      	str	r2, [r3, #0]
	return *this;
 800d268:	687b      	ldr	r3, [r7, #4]
      }
 800d26a:	4618      	mov	r0, r3
 800d26c:	370c      	adds	r7, #12
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr

0800d276 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800d276:	b480      	push	{r7}
 800d278:	b083      	sub	sp, #12
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4618      	mov	r0, r3
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <_ZN6Stream17send_all_messagesEv>:

	void send_all_messages(){
 800d28e:	b580      	push	{r7, lr}
 800d290:	b088      	sub	sp, #32
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
		unsigned int current_position = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	61fb      	str	r3, [r7, #28]
		memset(can->TxData, 255, Can::MAX_MESSAGE_SIZE);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	3350      	adds	r3, #80	; 0x50
 800d2a0:	2240      	movs	r2, #64	; 0x40
 800d2a2:	21ff      	movs	r1, #255	; 0xff
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f013 fa8b 	bl	80207c0 <memset>
		for(auto message : messages){
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	61bb      	str	r3, [r7, #24]
 800d2ae:	69b8      	ldr	r0, [r7, #24]
 800d2b0:	f002 f848 	bl	800f344 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	613b      	str	r3, [r7, #16]
 800d2b8:	69b8      	ldr	r0, [r7, #24]
 800d2ba:	f002 f853 	bl	800f364 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	60fb      	str	r3, [r7, #12]
 800d2c2:	f107 020c 	add.w	r2, r7, #12
 800d2c6:	f107 0310 	add.w	r3, r7, #16
 800d2ca:	4611      	mov	r1, r2
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7ff ffaa 	bl	800d226 <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	f083 0301 	eor.w	r3, r3, #1
 800d2d8:	b2db      	uxtb	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d01b      	beq.n	800d316 <_ZN6Stream17send_all_messagesEv+0x88>
 800d2de:	f107 0310 	add.w	r3, r7, #16
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7ff ffc7 	bl	800d276 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	617b      	str	r3, [r7, #20]
			message->unparse(&can->TxData[current_position]);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	699a      	ldr	r2, [r3, #24]
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	3350      	adds	r3, #80	; 0x50
 800d2f6:	4413      	add	r3, r2
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6978      	ldr	r0, [r7, #20]
 800d2fc:	f7ff fe02 	bl	800cf04 <_ZN13StreamMessage7unparseEPh>
			current_position += message->total_size;
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	69fa      	ldr	r2, [r7, #28]
 800d306:	4413      	add	r3, r2
 800d308:	61fb      	str	r3, [r7, #28]
		for(auto message : messages){
 800d30a:	f107 0310 	add.w	r3, r7, #16
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff ffa1 	bl	800d256 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>
 800d314:	e7d5      	b.n	800d2c2 <_ZN6Stream17send_all_messagesEv+0x34>
		}
		can->send_message(id, size);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6998      	ldr	r0, [r3, #24]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	7c1b      	ldrb	r3, [r3, #16]
 800d31e:	b299      	uxth	r1, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	461a      	mov	r2, r3
 800d326:	f7f7 fd23 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800d32a:	bf00      	nop
 800d32c:	3720      	adds	r7, #32
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <_ZZN6Stream11add_messageEmP13StreamMessageENKUlvE_clEv>:

	void add_message(uint32_t frequency, StreamMessage* message){
		messages.push_back(message);
		if(state == FREE){
			state = OCCUPIED;
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800d332:	b580      	push	{r7, lr}
 800d334:	b082      	sub	sp, #8
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4618      	mov	r0, r3
 800d340:	f7ff ffa5 	bl	800d28e <_ZN6Stream17send_all_messagesEv>
 800d344:	bf00      	nop
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <_ZN6Stream11add_messageEmP13StreamMessage>:
	void add_message(uint32_t frequency, StreamMessage* message){
 800d34c:	b590      	push	{r4, r7, lr}
 800d34e:	b089      	sub	sp, #36	; 0x24
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
		messages.push_back(message);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	1d3a      	adds	r2, r7, #4
 800d35c:	4611      	mov	r1, r2
 800d35e:	4618      	mov	r0, r3
 800d360:	f002 f811 	bl	800f386 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>
		if(state == FREE){
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	7f1b      	ldrb	r3, [r3, #28]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d117      	bne.n	800d39c <_ZN6Stream11add_messageEmP13StreamMessage+0x50>
			state = OCCUPIED;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2201      	movs	r2, #1
 800d370:	771a      	strb	r2, [r3, #28]
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	695c      	ldr	r4, [r3, #20]
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	f107 0310 	add.w	r3, r7, #16
 800d37c:	4611      	mov	r1, r2
 800d37e:	4618      	mov	r0, r3
 800d380:	f002 f826 	bl	800f3d0 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessageEUlvE_vvEET_>
 800d384:	f107 0310 	add.w	r3, r7, #16
 800d388:	68ba      	ldr	r2, [r7, #8]
 800d38a:	4619      	mov	r1, r3
 800d38c:	4620      	mov	r0, r4
 800d38e:	f7ff fd13 	bl	800cdb8 <_ZN5Timer10execute_atESt8functionIFvvEEm>
 800d392:	f107 0310 	add.w	r3, r7, #16
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff fbf0 	bl	800cb7c <_ZNSt8functionIFvvEED1Ev>
		};
		this -> frequency = frequency;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	621a      	str	r2, [r3, #32]
		send_ok_response(size);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f7ff feb6 	bl	800d11c <_ZN6Stream16send_ok_responseEh>
		size += message->total_size;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	68da      	ldr	r2, [r3, #12]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	441a      	add	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	60da      	str	r2, [r3, #12]
	}
 800d3be:	bf00      	nop
 800d3c0:	3724      	adds	r7, #36	; 0x24
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd90      	pop	{r4, r7, pc}

0800d3c6 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800d3c6:	b480      	push	{r7}
 800d3c8:	b083      	sub	sp, #12
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	791b      	ldrb	r3, [r3, #4]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	370c      	adds	r7, #12
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr

0800d3de <_ZNRSt8optionalIP13StreamMessageE5valueEv>:
      value()&
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b082      	sub	sp, #8
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff ffed 	bl	800d3c6 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800d3ec:	4603      	mov	r3, r0
	  ? this->_M_get()
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d004      	beq.n	800d3fc <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x1e>
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f002 f822 	bl	800f43c <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800d3f8:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800d3fa:	e001      	b.n	800d400 <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x22>
 800d3fc:	f7f7 faf5 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800d400:	4618      	mov	r0, r3
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4618      	mov	r0, r3
 800d414:	370c      	adds	r7, #12
 800d416:	46bd      	mov	sp, r7
 800d418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41c:	4770      	bx	lr

0800d41e <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800d41e:	b590      	push	{r4, r7, lr}
 800d420:	b083      	sub	sp, #12
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7ff ffed 	bl	800d408 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800d42e:	4603      	mov	r3, r0
 800d430:	681c      	ldr	r4, [r3, #0]
 800d432:	6838      	ldr	r0, [r7, #0]
 800d434:	f7ff ffe8 	bl	800d408 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800d438:	4603      	mov	r3, r0
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	429c      	cmp	r4, r3
 800d43e:	bf0c      	ite	eq
 800d440:	2301      	moveq	r3, #1
 800d442:	2300      	movne	r3, #0
 800d444:	b2db      	uxtb	r3, r3
 800d446:	4618      	mov	r0, r3
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd90      	pop	{r4, r7, pc}

0800d44e <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800d44e:	b480      	push	{r7}
 800d450:	b083      	sub	sp, #12
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
	++_M_current;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	1d1a      	adds	r2, r3, #4
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	601a      	str	r2, [r3, #0]
	return *this;
 800d460:	687b      	ldr	r3, [r7, #4]
      }
 800d462:	4618      	mov	r0, r3
 800d464:	370c      	adds	r7, #12
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr

0800d46e <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800d46e:	b480      	push	{r7}
 800d470:	b083      	sub	sp, #12
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4618      	mov	r0, r3
 800d47c:	370c      	adds	r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr
	...

0800d488 <_ZN6Stream10add_streamEjP3Pin>:

	static bool add_stream(unsigned int frequency, Pin* pin) {
 800d488:	b580      	push	{r7, lr}
 800d48a:	b08a      	sub	sp, #40	; 0x28
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
		optional<StreamMessage*> message_optional = StreamMessage::FromPin(pin);
 800d492:	f107 0314 	add.w	r3, r7, #20
 800d496:	6839      	ldr	r1, [r7, #0]
 800d498:	4618      	mov	r0, r3
 800d49a:	f7ff fdb3 	bl	800d004 <_ZN13StreamMessage7FromPinEP3Pin>
		if(message_optional){
 800d49e:	f107 0314 	add.w	r3, r7, #20
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f001 ffbe 	bl	800f424 <_ZNKSt8optionalIP13StreamMessageEcvbEv>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d040      	beq.n	800d530 <_ZN6Stream10add_streamEjP3Pin+0xa8>
			StreamMessage* message = message_optional.value();
 800d4ae:	f107 0314 	add.w	r3, r7, #20
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff ff93 	bl	800d3de <_ZNRSt8optionalIP13StreamMessageE5valueEv>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	627b      	str	r3, [r7, #36]	; 0x24
			for(auto s : streams){
 800d4be:	4b1f      	ldr	r3, [pc, #124]	; (800d53c <_ZN6Stream10add_streamEjP3Pin+0xb4>)
 800d4c0:	623b      	str	r3, [r7, #32]
 800d4c2:	6a38      	ldr	r0, [r7, #32]
 800d4c4:	f001 ffc7 	bl	800f456 <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	613b      	str	r3, [r7, #16]
 800d4cc:	6a38      	ldr	r0, [r7, #32]
 800d4ce:	f001 ffd2 	bl	800f476 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	f107 020c 	add.w	r2, r7, #12
 800d4da:	f107 0310 	add.w	r3, r7, #16
 800d4de:	4611      	mov	r1, r2
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7ff ff9c 	bl	800d41e <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	f083 0301 	eor.w	r3, r3, #1
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d01e      	beq.n	800d530 <_ZN6Stream10add_streamEjP3Pin+0xa8>
 800d4f2:	f107 0310 	add.w	r3, r7, #16
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7ff ffb9 	bl	800d46e <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	61fb      	str	r3, [r7, #28]
				if(s->is_available(frequency, message->total_size)){
 800d502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	461a      	mov	r2, r3
 800d508:	6879      	ldr	r1, [r7, #4]
 800d50a:	69f8      	ldr	r0, [r7, #28]
 800d50c:	f7ff fdd0 	bl	800d0b0 <_ZN6Stream12is_availableEjj>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d006      	beq.n	800d524 <_ZN6Stream10add_streamEjP3Pin+0x9c>
					s->add_message(frequency, message);
 800d516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d518:	6879      	ldr	r1, [r7, #4]
 800d51a:	69f8      	ldr	r0, [r7, #28]
 800d51c:	f7ff ff16 	bl	800d34c <_ZN6Stream11add_messageEmP13StreamMessage>
					return true;
 800d520:	2301      	movs	r3, #1
 800d522:	e006      	b.n	800d532 <_ZN6Stream10add_streamEjP3Pin+0xaa>
			for(auto s : streams){
 800d524:	f107 0310 	add.w	r3, r7, #16
 800d528:	4618      	mov	r0, r3
 800d52a:	f7ff ff90 	bl	800d44e <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>
 800d52e:	e7d2      	b.n	800d4d6 <_ZN6Stream10add_streamEjP3Pin+0x4e>
				}
			}
		}
		return false;
 800d530:	2300      	movs	r3, #0
	}
 800d532:	4618      	mov	r0, r3
 800d534:	3728      	adds	r7, #40	; 0x28
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	2400017c 	.word	0x2400017c

0800d540 <_Z5startv>:
Stream stream1(&timer_14, &main_can);
Stream stream2(&timer_15, &main_can);
Stream stream3(&timer_16, &main_can);
Stream stream4(&timer_17, &main_can);

void start() {
 800d540:	b580      	push	{r7, lr}
 800d542:	af00      	add	r7, sp, #0
	InputCapture::start_all_input_captures();
 800d544:	f7fc f964 	bl	8009810 <_ZN12InputCapture24start_all_input_capturesEv>
	AnalogOut::start_all_analog_outs();
 800d548:	f7f5 ff1c 	bl	8003384 <_ZN9AnalogOut21start_all_analog_outsEv>
	AnalogIn::start_all_analog_ins();
 800d54c:	f7f3 f8a6 	bl	800069c <_ZN8AnalogIn20start_all_analog_insEv>
	Can::start_all_cans();
 800d550:	f7f7 fb72 	bl	8004c38 <_ZN3Can14start_all_cansEv>
	Stream::add_stream(1000, &PA6);
 800d554:	4903      	ldr	r1, [pc, #12]	; (800d564 <_Z5startv+0x24>)
 800d556:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d55a:	f7ff ff95 	bl	800d488 <_ZN6Stream10add_streamEjP3Pin>
}
 800d55e:	bf00      	nop
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	240001e8 	.word	0x240001e8

0800d568 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* timer){
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
	InputCapture::interrupt_of_all_input_captures(timer);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f7fc f97d 	bl	8009870 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>
}
 800d576:	bf00      	nop
 800d578:	3708      	adds	r7, #8
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800d57e:	b580      	push	{r7, lr}
 800d580:	b082      	sub	sp, #8
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
	AnalogIn::interrupt_all_analog_ins();
 800d586:	f7f3 f8b9 	bl	80006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>
}
 800d58a:	bf00      	nop
 800d58c:	3708      	adds	r7, #8
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
 800d592:	b580      	push	{r7, lr}
 800d594:	b082      	sub	sp, #8
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
	Timer::interrupt_all_timers(tim);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f7ff fc78 	bl	800ce90 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
	Can::message_received_all_cans(hfdcan, RxFifo0ITs);
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f7f7 fd31 	bl	800501c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>
}
 800d5ba:	bf00      	nop
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800d5c2:	b480      	push	{r7}
 800d5c4:	b083      	sub	sp, #12
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	791b      	ldrb	r3, [r3, #4]
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	370c      	adds	r7, #12
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr

0800d5da <_ZNRSt8optionalIP3PinE5valueEv>:
      value()&
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b082      	sub	sp, #8
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7ff ffed 	bl	800d5c2 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800d5e8:	4603      	mov	r3, r0
	  ? this->_M_get()
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d004      	beq.n	800d5f8 <_ZNRSt8optionalIP3PinE5valueEv+0x1e>
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f002 f806 	bl	800f600 <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800d5f4:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800d5f6:	e001      	b.n	800d5fc <_ZNRSt8optionalIP3PinE5valueEv+0x22>
 800d5f8:	f7f7 f9f7 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <_Z18read_once_callbackv>:

}


// TODO -> Rework
void read_once_callback() {
 800d604:	b580      	push	{r7, lr}
 800d606:	b088      	sub	sp, #32
 800d608:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800d60a:	4b35      	ldr	r3, [pc, #212]	; (800d6e0 <_Z18read_once_callbackv+0xdc>)
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	b29a      	uxth	r2, r3
 800d610:	1d3b      	adds	r3, r7, #4
 800d612:	4611      	mov	r1, r2
 800d614:	4618      	mov	r0, r3
 800d616:	f7fe fa35 	bl	800ba84 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800d61a:	1d3b      	adds	r3, r7, #4
 800d61c:	4618      	mov	r0, r3
 800d61e:	f001 ffe3 	bl	800f5e8 <_ZNKSt8optionalIP3PinEcvbEv>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d057      	beq.n	800d6d8 <_Z18read_once_callbackv+0xd4>
		Pin* pin = pin_optional.value();
 800d628:	1d3b      	adds	r3, r7, #4
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7ff ffd5 	bl	800d5da <_ZNRSt8optionalIP3PinE5valueEv>
 800d630:	4603      	mov	r3, r0
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	603b      	str	r3, [r7, #0]
		uint32_t size;
		uint8_t* ptr;

		if(pin->mode == ANALOG_INPUT){
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	799b      	ldrb	r3, [r3, #6]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d114      	bne.n	800d668 <_Z18read_once_callbackv+0x64>
			if(AnalogIn::analog_in_from_pin.contains(pin)){
 800d63e:	463b      	mov	r3, r7
 800d640:	4619      	mov	r1, r3
 800d642:	4828      	ldr	r0, [pc, #160]	; (800d6e4 <_Z18read_once_callbackv+0xe0>)
 800d644:	f001 ffe9 	bl	800f61a <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00c      	beq.n	800d668 <_Z18read_once_callbackv+0x64>
				AnalogIn* in = AnalogIn::analog_in_from_pin[pin];
 800d64e:	463b      	mov	r3, r7
 800d650:	4619      	mov	r1, r3
 800d652:	4824      	ldr	r0, [pc, #144]	; (800d6e4 <_Z18read_once_callbackv+0xe0>)
 800d654:	f7f3 f984 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800d658:	4603      	mov	r3, r0
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	617b      	str	r3, [r7, #20]
				ptr = (uint8_t*) &in->voltage;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	3314      	adds	r3, #20
 800d662:	61bb      	str	r3, [r7, #24]
				size = sizeof(float);
 800d664:	2304      	movs	r3, #4
 800d666:	61fb      	str	r3, [r7, #28]
			}
		}

		if(pin->mode == DIGITAL_INPUT){
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	799b      	ldrb	r3, [r3, #6]
 800d66c:	2b05      	cmp	r3, #5
 800d66e:	d114      	bne.n	800d69a <_Z18read_once_callbackv+0x96>
			if(DigitalIn::pin_to_digital_in.contains(pin)){
 800d670:	463b      	mov	r3, r7
 800d672:	4619      	mov	r1, r3
 800d674:	481c      	ldr	r0, [pc, #112]	; (800d6e8 <_Z18read_once_callbackv+0xe4>)
 800d676:	f001 fff2 	bl	800f65e <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800d67a:	4603      	mov	r3, r0
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00c      	beq.n	800d69a <_Z18read_once_callbackv+0x96>
				DigitalIn* in = DigitalIn::pin_to_digital_in[pin];
 800d680:	463b      	mov	r3, r7
 800d682:	4619      	mov	r1, r3
 800d684:	4818      	ldr	r0, [pc, #96]	; (800d6e8 <_Z18read_once_callbackv+0xe4>)
 800d686:	f7f9 f849 	bl	800671c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800d68a:	4603      	mov	r3, r0
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	613b      	str	r3, [r7, #16]
				ptr = (uint8_t*) &in->state;
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	3308      	adds	r3, #8
 800d694:	61bb      	str	r3, [r7, #24]
				size = sizeof(uint8_t);
 800d696:	2301      	movs	r3, #1
 800d698:	61fb      	str	r3, [r7, #28]
			}
		}

		if(pin->mode == INPUT_CAPTURE){
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	799b      	ldrb	r3, [r3, #6]
 800d69e:	2b03      	cmp	r3, #3
 800d6a0:	d114      	bne.n	800d6cc <_Z18read_once_callbackv+0xc8>
			if(InputCapture::pin_to_input_capture.contains(pin)){
 800d6a2:	463b      	mov	r3, r7
 800d6a4:	4619      	mov	r1, r3
 800d6a6:	4811      	ldr	r0, [pc, #68]	; (800d6ec <_Z18read_once_callbackv+0xe8>)
 800d6a8:	f001 fffb 	bl	800f6a2 <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d00c      	beq.n	800d6cc <_Z18read_once_callbackv+0xc8>
				InputCapture* in = InputCapture::pin_to_input_capture[pin];
 800d6b2:	463b      	mov	r3, r7
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	480d      	ldr	r0, [pc, #52]	; (800d6ec <_Z18read_once_callbackv+0xe8>)
 800d6b8:	f7fc f9c4 	bl	8009a44 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	60fb      	str	r3, [r7, #12]
				ptr = (uint8_t*) &in->frequency;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	334c      	adds	r3, #76	; 0x4c
 800d6c6:	61bb      	str	r3, [r7, #24]
				size = sizeof(float) * 2;
 800d6c8:	2308      	movs	r3, #8
 800d6ca:	61fb      	str	r3, [r7, #28]
			}
		}

		main_can.send_message(READ_ONCE_ID, ptr, size);
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	69ba      	ldr	r2, [r7, #24]
 800d6d0:	2104      	movs	r1, #4
 800d6d2:	4807      	ldr	r0, [pc, #28]	; (800d6f0 <_Z18read_once_callbackv+0xec>)
 800d6d4:	f7f7 faf4 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
	}

}
 800d6d8:	bf00      	nop
 800d6da:	3720      	adds	r7, #32
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	24000db8 	.word	0x24000db8
 800d6e4:	240000bc 	.word	0x240000bc
 800d6e8:	2400011c 	.word	0x2400011c
 800d6ec:	24000164 	.word	0x24000164
 800d6f0:	24000ce8 	.word	0x24000ce8

0800d6f4 <_Z20read_stream_callbackv>:

void read_stream_callback() {
 800d6f4:	b590      	push	{r4, r7, lr}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
	optional<Pin*> pin = Pin::get_pin_from_id(read_stream_pin);
 800d6fa:	4b15      	ldr	r3, [pc, #84]	; (800d750 <_Z20read_stream_callbackv+0x5c>)
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	463b      	mov	r3, r7
 800d702:	4611      	mov	r1, r2
 800d704:	4618      	mov	r0, r3
 800d706:	f7fe f9bd 	bl	800ba84 <_ZN3Pin15get_pin_from_idEt>
	if(pin){
 800d70a:	463b      	mov	r3, r7
 800d70c:	4618      	mov	r0, r3
 800d70e:	f001 ff6b 	bl	800f5e8 <_ZNKSt8optionalIP3PinEcvbEv>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d017      	beq.n	800d748 <_Z20read_stream_callbackv+0x54>
		if(!Stream::add_stream(read_stream_freq, pin.value()))
 800d718:	4b0e      	ldr	r3, [pc, #56]	; (800d754 <_Z20read_stream_callbackv+0x60>)
 800d71a:	881b      	ldrh	r3, [r3, #0]
 800d71c:	461c      	mov	r4, r3
 800d71e:	463b      	mov	r3, r7
 800d720:	4618      	mov	r0, r3
 800d722:	f7ff ff5a 	bl	800d5da <_ZNRSt8optionalIP3PinE5valueEv>
 800d726:	4603      	mov	r3, r0
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4619      	mov	r1, r3
 800d72c:	4620      	mov	r0, r4
 800d72e:	f7ff feab 	bl	800d488 <_ZN6Stream10add_streamEjP3Pin>
 800d732:	4603      	mov	r3, r0
 800d734:	f083 0301 	eor.w	r3, r3, #1
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d004      	beq.n	800d748 <_Z20read_stream_callbackv+0x54>
			main_can.send_error_message(READ_STREAM_ID, "ERROR: all streams are full");
 800d73e:	4a06      	ldr	r2, [pc, #24]	; (800d758 <_Z20read_stream_callbackv+0x64>)
 800d740:	2105      	movs	r1, #5
 800d742:	4806      	ldr	r0, [pc, #24]	; (800d75c <_Z20read_stream_callbackv+0x68>)
 800d744:	f7f7 fb57 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
	}
}
 800d748:	bf00      	nop
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd90      	pop	{r4, r7, pc}
 800d750:	24000dc0 	.word	0x24000dc0
 800d754:	24000dc2 	.word	0x24000dc2
 800d758:	08020be8 	.word	0x08020be8
 800d75c:	24000ce8 	.word	0x24000ce8

0800d760 <_Z19write_once_callbackv>:

void write_once_callback(){
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(write_once_pin);
 800d766:	4b34      	ldr	r3, [pc, #208]	; (800d838 <_Z19write_once_callbackv+0xd8>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	f107 0308 	add.w	r3, r7, #8
 800d770:	4611      	mov	r1, r2
 800d772:	4618      	mov	r0, r3
 800d774:	f7fe f986 	bl	800ba84 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800d778:	f107 0308 	add.w	r3, r7, #8
 800d77c:	4618      	mov	r0, r3
 800d77e:	f001 ff33 	bl	800f5e8 <_ZNKSt8optionalIP3PinEcvbEv>
 800d782:	4603      	mov	r3, r0
 800d784:	2b00      	cmp	r3, #0
 800d786:	d04f      	beq.n	800d828 <_Z19write_once_callbackv+0xc8>
		Pin* pin = pin_optional.value();
 800d788:	f107 0308 	add.w	r3, r7, #8
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7ff ff24 	bl	800d5da <_ZNRSt8optionalIP3PinE5valueEv>
 800d792:	4603      	mov	r3, r0
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	607b      	str	r3, [r7, #4]

		if(pin->mode == DIGITAL_OUTPUT && DigitalOut::pin_to_digital_out.contains(pin)){
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	799b      	ldrb	r3, [r3, #6]
 800d79c:	2b04      	cmp	r3, #4
 800d79e:	d109      	bne.n	800d7b4 <_Z19write_once_callbackv+0x54>
 800d7a0:	1d3b      	adds	r3, r7, #4
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	4825      	ldr	r0, [pc, #148]	; (800d83c <_Z19write_once_callbackv+0xdc>)
 800d7a6:	f001 ff9e 	bl	800f6e6 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d001      	beq.n	800d7b4 <_Z19write_once_callbackv+0x54>
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e000      	b.n	800d7b6 <_Z19write_once_callbackv+0x56>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00f      	beq.n	800d7da <_Z19write_once_callbackv+0x7a>
			DigitalOut* out = DigitalOut::pin_to_digital_out[pin];
 800d7ba:	1d3b      	adds	r3, r7, #4
 800d7bc:	4619      	mov	r1, r3
 800d7be:	481f      	ldr	r0, [pc, #124]	; (800d83c <_Z19write_once_callbackv+0xdc>)
 800d7c0:	f7fa fb72 	bl	8007ea8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	613b      	str	r3, [r7, #16]
			out->set_to((DigitalOut::DigitalOutState) write_once_value);
 800d7ca:	4b1d      	ldr	r3, [pc, #116]	; (800d840 <_Z19write_once_callbackv+0xe0>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6938      	ldr	r0, [r7, #16]
 800d7d4:	f7fa fab6 	bl	8007d44 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>
			return;
 800d7d8:	e02b      	b.n	800d832 <_Z19write_once_callbackv+0xd2>
		}

		if(pin->mode == ANALOG_OUTPUT && AnalogOut::pin_to_analog_out.contains(pin)){
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	799b      	ldrb	r3, [r3, #6]
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d109      	bne.n	800d7f6 <_Z19write_once_callbackv+0x96>
 800d7e2:	1d3b      	adds	r3, r7, #4
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4817      	ldr	r0, [pc, #92]	; (800d844 <_Z19write_once_callbackv+0xe4>)
 800d7e8:	f001 ff9f 	bl	800f72a <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d001      	beq.n	800d7f6 <_Z19write_once_callbackv+0x96>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e000      	b.n	800d7f8 <_Z19write_once_callbackv+0x98>
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d015      	beq.n	800d828 <_Z19write_once_callbackv+0xc8>
			AnalogOut* out = AnalogOut::pin_to_analog_out[pin];
 800d7fc:	1d3b      	adds	r3, r7, #4
 800d7fe:	4619      	mov	r1, r3
 800d800:	4810      	ldr	r0, [pc, #64]	; (800d844 <_Z19write_once_callbackv+0xe4>)
 800d802:	f7f5 fe69 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800d806:	4603      	mov	r3, r0
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	617b      	str	r3, [r7, #20]
			out->set_voltage(*((float*) &write_once_value));
 800d80c:	4b0c      	ldr	r3, [pc, #48]	; (800d840 <_Z19write_once_callbackv+0xe0>)
 800d80e:	edd3 7a00 	vldr	s15, [r3]
 800d812:	eeb0 0a67 	vmov.f32	s0, s15
 800d816:	6978      	ldr	r0, [r7, #20]
 800d818:	f7f5 fcec 	bl	80031f4 <_ZN9AnalogOut11set_voltageEf>
			main_can.send_message(WRITE_ONCE_ID,  0);
 800d81c:	2200      	movs	r2, #0
 800d81e:	2106      	movs	r1, #6
 800d820:	4809      	ldr	r0, [pc, #36]	; (800d848 <_Z19write_once_callbackv+0xe8>)
 800d822:	f7f7 faa5 	bl	8004d70 <_ZN3Can12send_messageEtm>
			return;
 800d826:	e004      	b.n	800d832 <_Z19write_once_callbackv+0xd2>
		}

	}

	main_can.send_error_message(WRITE_ONCE_ID, "ERROR: Pin not found...");
 800d828:	4a08      	ldr	r2, [pc, #32]	; (800d84c <_Z19write_once_callbackv+0xec>)
 800d82a:	2106      	movs	r1, #6
 800d82c:	4806      	ldr	r0, [pc, #24]	; (800d848 <_Z19write_once_callbackv+0xe8>)
 800d82e:	f7f7 fae2 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>

}
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	24000db9 	.word	0x24000db9
 800d83c:	24000140 	.word	0x24000140
 800d840:	24000dbc 	.word	0x24000dbc
 800d844:	240000e0 	.word	0x240000e0
 800d848:	24000ce8 	.word	0x24000ce8
 800d84c:	08020c04 	.word	0x08020c04

0800d850 <_ZZN8TUDTests5setupEvENKUlvE_clEv>:

	static void setup(){
		start();

		// ANALOG OUT
		timer_7.execute_every([](){
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
//			for(auto analog_out : AnalogOut::all_analog_outs)
//				analog_out->set_voltage(sin(sin_index / 1000.0 * 3.1415) * 1.65 + 1.65);
//			sin_index ++;
			main_can.send_ok_message();
 800d858:	4803      	ldr	r0, [pc, #12]	; (800d868 <_ZZN8TUDTests5setupEvENKUlvE_clEv+0x18>)
 800d85a:	f7f7 fb39 	bl	8004ed0 <_ZN3Can15send_ok_messageEv>
		}, 1000, Timer::MICROSEONDS);
 800d85e:	bf00      	nop
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	24000ce8 	.word	0x24000ce8

0800d86c <_ZZN8TUDTests5setupEvENKUlvE0_clEv>:

		// GPIO IN
		timer_13.execute_every([](){
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b086      	sub	sp, #24
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
			for(auto in : DigitalIn::all_digital_ins)
 800d874:	4b17      	ldr	r3, [pc, #92]	; (800d8d4 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x68>)
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	6978      	ldr	r0, [r7, #20]
 800d87a:	f7f9 fc98 	bl	80071ae <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 800d87e:	4603      	mov	r3, r0
 800d880:	60fb      	str	r3, [r7, #12]
 800d882:	6978      	ldr	r0, [r7, #20]
 800d884:	f7f9 f978 	bl	8006b78 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 800d888:	4603      	mov	r3, r0
 800d88a:	60bb      	str	r3, [r7, #8]
 800d88c:	f107 0208 	add.w	r2, r7, #8
 800d890:	f107 030c 	add.w	r3, r7, #12
 800d894:	4611      	mov	r1, r2
 800d896:	4618      	mov	r0, r3
 800d898:	f000 f81e 	bl	800d8d8 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800d89c:	4603      	mov	r3, r0
 800d89e:	f083 0301 	eor.w	r3, r3, #1
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d010      	beq.n	800d8ca <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x5e>
 800d8a8:	f107 030c 	add.w	r3, r7, #12
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7f9 fd08 	bl	80072c2 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	613b      	str	r3, [r7, #16]
				in->get_value();
 800d8b8:	6938      	ldr	r0, [r7, #16]
 800d8ba:	f7f8 fe95 	bl	80065e8 <_ZN9DigitalIn9get_valueEv>
			for(auto in : DigitalIn::all_digital_ins)
 800d8be:	f107 030c 	add.w	r3, r7, #12
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f000 f820 	bl	800d908 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>
 800d8c8:	e7e0      	b.n	800d88c <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x20>
		}, 1000, Timer::MICROSEONDS);
 800d8ca:	bf00      	nop
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	24000110 	.word	0x24000110

0800d8d8 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800d8d8:	b590      	push	{r4, r7, lr}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7f9 fcb0 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	681c      	ldr	r4, [r3, #0]
 800d8ec:	6838      	ldr	r0, [r7, #0]
 800d8ee:	f7f9 fcab 	bl	8007248 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	429c      	cmp	r4, r3
 800d8f8:	bf0c      	ite	eq
 800d8fa:	2301      	moveq	r3, #1
 800d8fc:	2300      	movne	r3, #0
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	4618      	mov	r0, r3
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	bd90      	pop	{r4, r7, pc}

0800d908 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	1d1a      	adds	r2, r3, #4
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	601a      	str	r2, [r3, #0]
	return *this;
 800d91a:	687b      	ldr	r3, [r7, #4]
      }
 800d91c:	4618      	mov	r0, r3
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <_ZN8TUDTests5setupEv>:
	static void setup(){
 800d928:	b5b0      	push	{r4, r5, r7, lr}
 800d92a:	b088      	sub	sp, #32
 800d92c:	af00      	add	r7, sp, #0
		start();
 800d92e:	f7ff fe07 	bl	800d540 <_Z5startv>
		timer_7.execute_every([](){
 800d932:	463b      	mov	r3, r7
 800d934:	4629      	mov	r1, r5
 800d936:	4618      	mov	r0, r3
 800d938:	f001 ff1a 	bl	800f770 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>
 800d93c:	4639      	mov	r1, r7
 800d93e:	2302      	movs	r3, #2
 800d940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d944:	480e      	ldr	r0, [pc, #56]	; (800d980 <_ZN8TUDTests5setupEv+0x58>)
 800d946:	f7ff fa15 	bl	800cd74 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800d94a:	463b      	mov	r3, r7
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7ff f915 	bl	800cb7c <_ZNSt8functionIFvvEED1Ev>
		timer_13.execute_every([](){
 800d952:	f107 0310 	add.w	r3, r7, #16
 800d956:	4621      	mov	r1, r4
 800d958:	4618      	mov	r0, r3
 800d95a:	f001 ff33 	bl	800f7c4 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>
 800d95e:	f107 0110 	add.w	r1, r7, #16
 800d962:	2302      	movs	r3, #2
 800d964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d968:	4806      	ldr	r0, [pc, #24]	; (800d984 <_ZN8TUDTests5setupEv+0x5c>)
 800d96a:	f7ff fa03 	bl	800cd74 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800d96e:	f107 0310 	add.w	r3, r7, #16
 800d972:	4618      	mov	r0, r3
 800d974:	f7ff f902 	bl	800cb7c <_ZNSt8functionIFvvEED1Ev>
	}
 800d978:	bf00      	nop
 800d97a:	3720      	adds	r7, #32
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bdb0      	pop	{r4, r5, r7, pc}
 800d980:	24000e0c 	.word	0x24000e0c
 800d984:	24000e2c 	.word	0x24000e2c

0800d988 <_ZN8TUDTests4loopEv>:

	static void loop() {
 800d988:	b480      	push	{r7}
 800d98a:	af00      	add	r7, sp, #0
//		HAL_Delay(2000);
//
//		for(auto base : DigitalOut::all_digital_outs)
//			base->turn_low();
//		HAL_Delay(2000);
	}
 800d98c:	bf00      	nop
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d99a:	f007 fc41 	bl	8015220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d99e:	f000 f82f 	bl	800da00 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800d9a2:	f000 f8b5 	bl	800db10 <_Z24PeriphCommonClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d9a6:	f001 fa17 	bl	800edd8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800d9aa:	f001 f9f5 	bl	800ed98 <_ZL11MX_DMA_Initv>
  MX_TIM12_Init();
 800d9ae:	f000 fef5 	bl	800e79c <_ZL13MX_TIM12_Initv>
  MX_TIM23_Init();
 800d9b2:	f001 f871 	bl	800ea98 <_ZL13MX_TIM23_Initv>
  MX_TIM1_Init();
 800d9b6:	f000 f9d5 	bl	800dd64 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800d9ba:	f000 fa93 	bl	800dee4 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800d9be:	f000 fb4b 	bl	800e058 <_ZL12MX_TIM3_Initv>
  MX_TIM24_Init();
 800d9c2:	f001 f929 	bl	800ec18 <_ZL13MX_TIM24_Initv>
  MX_FDCAN1_Init();
 800d9c6:	f000 f963 	bl	800dc90 <_ZL14MX_FDCAN1_Initv>
  MX_TIM4_Init();
 800d9ca:	f000 fbff 	bl	800e1cc <_ZL12MX_TIM4_Initv>
  MX_ADC1_Init();
 800d9ce:	f000 f8d7 	bl	800db80 <_ZL12MX_ADC1_Initv>
  MX_TIM8_Init();
 800d9d2:	f000 fde5 	bl	800e5a0 <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 800d9d6:	f000 fd63 	bl	800e4a0 <_ZL12MX_TIM6_Initv>
  MX_TIM5_Init();
 800d9da:	f000 fcb1 	bl	800e340 <_ZL12MX_TIM5_Initv>
  MX_TIM7_Init();
 800d9de:	f000 fd9f 	bl	800e520 <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 800d9e2:	f000 ff51 	bl	800e888 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 800d9e6:	f000 ff77 	bl	800e8d8 <_ZL13MX_TIM14_Initv>
  MX_TIM15_Init();
 800d9ea:	f000 ff9d 	bl	800e928 <_ZL13MX_TIM15_Initv>
  MX_TIM16_Init();
 800d9ee:	f000 fffb 	bl	800e9e8 <_ZL13MX_TIM16_Initv>
  MX_TIM17_Init();
 800d9f2:	f001 f825 	bl	800ea40 <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  TUDTests::setup();
 800d9f6:	f7ff ff97 	bl	800d928 <_ZN8TUDTests5setupEv>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

		TUDTests::loop();
 800d9fa:	f7ff ffc5 	bl	800d988 <_ZN8TUDTests4loopEv>
 800d9fe:	e7fc      	b.n	800d9fa <main+0x64>

0800da00 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b09c      	sub	sp, #112	; 0x70
 800da04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800da06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800da0a:	224c      	movs	r2, #76	; 0x4c
 800da0c:	2100      	movs	r1, #0
 800da0e:	4618      	mov	r0, r3
 800da10:	f012 fed6 	bl	80207c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800da14:	1d3b      	adds	r3, r7, #4
 800da16:	2220      	movs	r2, #32
 800da18:	2100      	movs	r1, #0
 800da1a:	4618      	mov	r0, r3
 800da1c:	f012 fed0 	bl	80207c0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800da20:	2002      	movs	r0, #2
 800da22:	f00d fa43 	bl	801aeac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800da26:	2300      	movs	r3, #0
 800da28:	603b      	str	r3, [r7, #0]
 800da2a:	4b37      	ldr	r3, [pc, #220]	; (800db08 <_Z18SystemClock_Configv+0x108>)
 800da2c:	699b      	ldr	r3, [r3, #24]
 800da2e:	4a36      	ldr	r2, [pc, #216]	; (800db08 <_Z18SystemClock_Configv+0x108>)
 800da30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800da34:	6193      	str	r3, [r2, #24]
 800da36:	4b34      	ldr	r3, [pc, #208]	; (800db08 <_Z18SystemClock_Configv+0x108>)
 800da38:	699b      	ldr	r3, [r3, #24]
 800da3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800da3e:	603b      	str	r3, [r7, #0]
 800da40:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800da42:	4b31      	ldr	r3, [pc, #196]	; (800db08 <_Z18SystemClock_Configv+0x108>)
 800da44:	699b      	ldr	r3, [r3, #24]
 800da46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800da4e:	bf14      	ite	ne
 800da50:	2301      	movne	r3, #1
 800da52:	2300      	moveq	r3, #0
 800da54:	b2db      	uxtb	r3, r3
 800da56:	2b00      	cmp	r3, #0
 800da58:	d000      	beq.n	800da5c <_Z18SystemClock_Configv+0x5c>
 800da5a:	e7f2      	b.n	800da42 <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800da5c:	4b2b      	ldr	r3, [pc, #172]	; (800db0c <_Z18SystemClock_Configv+0x10c>)
 800da5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da60:	f023 0303 	bic.w	r3, r3, #3
 800da64:	4a29      	ldr	r2, [pc, #164]	; (800db0c <_Z18SystemClock_Configv+0x10c>)
 800da66:	f043 0302 	orr.w	r3, r3, #2
 800da6a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800da6c:	2301      	movs	r3, #1
 800da6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800da70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800da74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800da76:	2302      	movs	r3, #2
 800da78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800da7a:	2302      	movs	r3, #2
 800da7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800da7e:	2304      	movs	r3, #4
 800da80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800da82:	f240 1313 	movw	r3, #275	; 0x113
 800da86:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800da88:	2301      	movs	r3, #1
 800da8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800da8c:	2304      	movs	r3, #4
 800da8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800da90:	2302      	movs	r3, #2
 800da92:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800da94:	2304      	movs	r3, #4
 800da96:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800da98:	2300      	movs	r3, #0
 800da9a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800da9c:	2300      	movs	r3, #0
 800da9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800daa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800daa4:	4618      	mov	r0, r3
 800daa6:	f00d fa3b 	bl	801af20 <HAL_RCC_OscConfig>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	bf14      	ite	ne
 800dab0:	2301      	movne	r3, #1
 800dab2:	2300      	moveq	r3, #0
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d001      	beq.n	800dabe <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 800daba:	f001 faa3 	bl	800f004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800dabe:	233f      	movs	r3, #63	; 0x3f
 800dac0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800dac2:	2303      	movs	r3, #3
 800dac4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800dac6:	2300      	movs	r3, #0
 800dac8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800daca:	2308      	movs	r3, #8
 800dacc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800dace:	2340      	movs	r3, #64	; 0x40
 800dad0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800dad2:	2340      	movs	r3, #64	; 0x40
 800dad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800dad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dada:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800dadc:	2340      	movs	r3, #64	; 0x40
 800dade:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800dae0:	1d3b      	adds	r3, r7, #4
 800dae2:	2103      	movs	r1, #3
 800dae4:	4618      	mov	r0, r3
 800dae6:	f00d fdf5 	bl	801b6d4 <HAL_RCC_ClockConfig>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	bf14      	ite	ne
 800daf0:	2301      	movne	r3, #1
 800daf2:	2300      	moveq	r3, #0
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d001      	beq.n	800dafe <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800dafa:	f001 fa83 	bl	800f004 <Error_Handler>
  }
}
 800dafe:	bf00      	nop
 800db00:	3770      	adds	r7, #112	; 0x70
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	58024800 	.word	0x58024800
 800db0c:	58024400 	.word	0x58024400

0800db10 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b0ae      	sub	sp, #184	; 0xb8
 800db14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800db16:	463b      	mov	r3, r7
 800db18:	22b8      	movs	r2, #184	; 0xb8
 800db1a:	2100      	movs	r1, #0
 800db1c:	4618      	mov	r0, r3
 800db1e:	f012 fe4f 	bl	80207c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 800db22:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 800db26:	f04f 0300 	mov.w	r3, #0
 800db2a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800db2e:	2301      	movs	r3, #1
 800db30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 30;
 800db32:	231e      	movs	r3, #30
 800db34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800db36:	2304      	movs	r3, #4
 800db38:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800db3a:	2304      	movs	r3, #4
 800db3c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800db3e:	2302      	movs	r3, #2
 800db40:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800db42:	23c0      	movs	r3, #192	; 0xc0
 800db44:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800db46:	2300      	movs	r3, #0
 800db48:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800db4a:	2300      	movs	r3, #0
 800db4c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800db4e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800db52:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800db54:	2300      	movs	r3, #0
 800db56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800db5a:	463b      	mov	r3, r7
 800db5c:	4618      	mov	r0, r3
 800db5e:	f00e f92f 	bl	801bdc0 <HAL_RCCEx_PeriphCLKConfig>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	bf14      	ite	ne
 800db68:	2301      	movne	r3, #1
 800db6a:	2300      	moveq	r3, #0
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800db72:	f001 fa47 	bl	800f004 <Error_Handler>
  }
}
 800db76:	bf00      	nop
 800db78:	37b8      	adds	r7, #184	; 0xb8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
	...

0800db80 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b08c      	sub	sp, #48	; 0x30
 800db84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800db86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db8a:	2200      	movs	r2, #0
 800db8c:	601a      	str	r2, [r3, #0]
 800db8e:	605a      	str	r2, [r3, #4]
 800db90:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800db92:	463b      	mov	r3, r7
 800db94:	2224      	movs	r2, #36	; 0x24
 800db96:	2100      	movs	r1, #0
 800db98:	4618      	mov	r0, r3
 800db9a:	f012 fe11 	bl	80207c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800db9e:	4b39      	ldr	r3, [pc, #228]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dba0:	4a39      	ldr	r2, [pc, #228]	; (800dc88 <_ZL12MX_ADC1_Initv+0x108>)
 800dba2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800dba4:	4b37      	ldr	r3, [pc, #220]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800dbaa:	4b36      	ldr	r3, [pc, #216]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800dbb0:	4b34      	ldr	r3, [pc, #208]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800dbb6:	4b33      	ldr	r3, [pc, #204]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbb8:	2208      	movs	r2, #8
 800dbba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800dbbc:	4b31      	ldr	r3, [pc, #196]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800dbc2:	4b30      	ldr	r3, [pc, #192]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800dbc8:	4b2e      	ldr	r3, [pc, #184]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbca:	2201      	movs	r2, #1
 800dbcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800dbce:	4b2d      	ldr	r3, [pc, #180]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800dbd6:	4b2b      	ldr	r3, [pc, #172]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbd8:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800dbdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800dbde:	4b29      	ldr	r3, [pc, #164]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dbe4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800dbe6:	4b27      	ldr	r3, [pc, #156]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbe8:	2203      	movs	r2, #3
 800dbea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800dbec:	4b25      	ldr	r3, [pc, #148]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbee:	2200      	movs	r2, #0
 800dbf0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800dbf2:	4b24      	ldr	r3, [pc, #144]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800dbf8:	4b22      	ldr	r3, [pc, #136]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800dc00:	4820      	ldr	r0, [pc, #128]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dc02:	f007 fe8b 	bl	801591c <HAL_ADC_Init>
 800dc06:	4603      	mov	r3, r0
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	bf14      	ite	ne
 800dc0c:	2301      	movne	r3, #1
 800dc0e:	2300      	moveq	r3, #0
 800dc10:	b2db      	uxtb	r3, r3
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d001      	beq.n	800dc1a <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 800dc16:	f001 f9f5 	bl	800f004 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800dc1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc22:	4619      	mov	r1, r3
 800dc24:	4817      	ldr	r0, [pc, #92]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dc26:	f009 fb45 	bl	80172b4 <HAL_ADCEx_MultiModeConfigChannel>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	bf14      	ite	ne
 800dc30:	2301      	movne	r3, #1
 800dc32:	2300      	moveq	r3, #0
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d001      	beq.n	800dc3e <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 800dc3a:	f001 f9e3 	bl	800f004 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800dc3e:	4b13      	ldr	r3, [pc, #76]	; (800dc8c <_ZL12MX_ADC1_Initv+0x10c>)
 800dc40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800dc42:	2306      	movs	r3, #6
 800dc44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800dc46:	2300      	movs	r3, #0
 800dc48:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800dc4a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800dc4e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800dc50:	2304      	movs	r3, #4
 800dc52:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800dc54:	2300      	movs	r3, #0
 800dc56:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800dc5e:	463b      	mov	r3, r7
 800dc60:	4619      	mov	r1, r3
 800dc62:	4808      	ldr	r0, [pc, #32]	; (800dc84 <_ZL12MX_ADC1_Initv+0x104>)
 800dc64:	f008 fb96 	bl	8016394 <HAL_ADC_ConfigChannel>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	bf14      	ite	ne
 800dc6e:	2301      	movne	r3, #1
 800dc70:	2300      	moveq	r3, #0
 800dc72:	b2db      	uxtb	r3, r3
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800dc78:	f001 f9c4 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800dc7c:	bf00      	nop
 800dc7e:	3730      	adds	r7, #48	; 0x30
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	24000f5c 	.word	0x24000f5c
 800dc88:	40022000 	.word	0x40022000
 800dc8c:	0c900008 	.word	0x0c900008

0800dc90 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800dc94:	4b31      	ldr	r3, [pc, #196]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dc96:	4a32      	ldr	r2, [pc, #200]	; (800dd60 <_ZL14MX_FDCAN1_Initv+0xd0>)
 800dc98:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800dc9a:	4b30      	ldr	r3, [pc, #192]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dc9c:	f44f 7240 	mov.w	r2, #768	; 0x300
 800dca0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800dca2:	4b2e      	ldr	r3, [pc, #184]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800dca8:	4b2c      	ldr	r3, [pc, #176]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800dcae:	4b2b      	ldr	r3, [pc, #172]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800dcb4:	4b29      	ldr	r3, [pc, #164]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 800dcba:	4b28      	ldr	r3, [pc, #160]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcbc:	2205      	movs	r2, #5
 800dcbe:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 800dcc0:	4b26      	ldr	r3, [pc, #152]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcc2:	2203      	movs	r2, #3
 800dcc4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 8;
 800dcc6:	4b25      	ldr	r3, [pc, #148]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcc8:	2208      	movs	r2, #8
 800dcca:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 800dccc:	4b23      	ldr	r3, [pc, #140]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcce:	2203      	movs	r2, #3
 800dcd0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 3;
 800dcd2:	4b22      	ldr	r3, [pc, #136]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcd4:	2203      	movs	r2, #3
 800dcd6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800dcd8:	4b20      	ldr	r3, [pc, #128]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcda:	2201      	movs	r2, #1
 800dcdc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 800dcde:	4b1f      	ldr	r3, [pc, #124]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dce0:	2203      	movs	r2, #3
 800dce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800dce4:	4b1d      	ldr	r3, [pc, #116]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dce6:	2201      	movs	r2, #1
 800dce8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800dcea:	4b1c      	ldr	r3, [pc, #112]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800dcf0:	4b1a      	ldr	r3, [pc, #104]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800dcf6:	4b19      	ldr	r3, [pc, #100]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800dcfc:	4b17      	ldr	r3, [pc, #92]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dcfe:	2220      	movs	r2, #32
 800dd00:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800dd02:	4b16      	ldr	r3, [pc, #88]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd04:	2212      	movs	r2, #18
 800dd06:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800dd08:	4b14      	ldr	r3, [pc, #80]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800dd0e:	4b13      	ldr	r3, [pc, #76]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd10:	2204      	movs	r2, #4
 800dd12:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800dd14:	4b11      	ldr	r3, [pc, #68]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd16:	2200      	movs	r2, #0
 800dd18:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800dd1a:	4b10      	ldr	r3, [pc, #64]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd1c:	2204      	movs	r2, #4
 800dd1e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800dd20:	4b0e      	ldr	r3, [pc, #56]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd22:	2200      	movs	r2, #0
 800dd24:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800dd26:	4b0d      	ldr	r3, [pc, #52]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd28:	2200      	movs	r2, #0
 800dd2a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800dd2c:	4b0b      	ldr	r3, [pc, #44]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd2e:	2220      	movs	r2, #32
 800dd30:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800dd32:	4b0a      	ldr	r3, [pc, #40]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800dd38:	4b08      	ldr	r3, [pc, #32]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd3a:	2212      	movs	r2, #18
 800dd3c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800dd3e:	4807      	ldr	r0, [pc, #28]	; (800dd5c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800dd40:	f00b fd80 	bl	8019844 <HAL_FDCAN_Init>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	bf14      	ite	ne
 800dd4a:	2301      	movne	r3, #1
 800dd4c:	2300      	moveq	r3, #0
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <_ZL14MX_FDCAN1_Initv+0xc8>
  {
    Error_Handler();
 800dd54:	f001 f956 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800dd58:	bf00      	nop
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	24001044 	.word	0x24001044
 800dd60:	4000a000 	.word	0x4000a000

0800dd64 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b08c      	sub	sp, #48	; 0x30
 800dd68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dd6a:	f107 0320 	add.w	r3, r7, #32
 800dd6e:	2200      	movs	r2, #0
 800dd70:	601a      	str	r2, [r3, #0]
 800dd72:	605a      	str	r2, [r3, #4]
 800dd74:	609a      	str	r2, [r3, #8]
 800dd76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dd78:	f107 0314 	add.w	r3, r7, #20
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	601a      	str	r2, [r3, #0]
 800dd80:	605a      	str	r2, [r3, #4]
 800dd82:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800dd84:	1d3b      	adds	r3, r7, #4
 800dd86:	2200      	movs	r2, #0
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	605a      	str	r2, [r3, #4]
 800dd8c:	609a      	str	r2, [r3, #8]
 800dd8e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800dd90:	4b52      	ldr	r3, [pc, #328]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800dd92:	4a53      	ldr	r2, [pc, #332]	; (800dee0 <_ZL12MX_TIM1_Initv+0x17c>)
 800dd94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800dd96:	4b51      	ldr	r3, [pc, #324]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dd9c:	4b4f      	ldr	r3, [pc, #316]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800dd9e:	2200      	movs	r2, #0
 800dda0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 27500 - 1;
 800dda2:	4b4e      	ldr	r3, [pc, #312]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800dda4:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800dda8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ddaa:	4b4c      	ldr	r3, [pc, #304]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ddb0:	4b4a      	ldr	r3, [pc, #296]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ddb6:	4b49      	ldr	r3, [pc, #292]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ddbc:	4847      	ldr	r0, [pc, #284]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800ddbe:	f010 fbe5 	bl	801e58c <HAL_TIM_Base_Init>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	bf14      	ite	ne
 800ddc8:	2301      	movne	r3, #1
 800ddca:	2300      	moveq	r3, #0
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 800ddd2:	f001 f917 	bl	800f004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ddd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddda:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800dddc:	f107 0320 	add.w	r3, r7, #32
 800dde0:	4619      	mov	r1, r3
 800dde2:	483e      	ldr	r0, [pc, #248]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800dde4:	f011 fb6a 	bl	801f4bc <HAL_TIM_ConfigClockSource>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	bf14      	ite	ne
 800ddee:	2301      	movne	r3, #1
 800ddf0:	2300      	moveq	r3, #0
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d001      	beq.n	800ddfc <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 800ddf8:	f001 f904 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800ddfc:	4837      	ldr	r0, [pc, #220]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800ddfe:	f010 fecd 	bl	801eb9c <HAL_TIM_IC_Init>
 800de02:	4603      	mov	r3, r0
 800de04:	2b00      	cmp	r3, #0
 800de06:	bf14      	ite	ne
 800de08:	2301      	movne	r3, #1
 800de0a:	2300      	moveq	r3, #0
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d001      	beq.n	800de16 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 800de12:	f001 f8f7 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800de16:	2300      	movs	r3, #0
 800de18:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800de1a:	2300      	movs	r3, #0
 800de1c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800de1e:	2300      	movs	r3, #0
 800de20:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800de22:	f107 0314 	add.w	r3, r7, #20
 800de26:	4619      	mov	r1, r3
 800de28:	482c      	ldr	r0, [pc, #176]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800de2a:	f012 fa17 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	bf14      	ite	ne
 800de34:	2301      	movne	r3, #1
 800de36:	2300      	moveq	r3, #0
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d001      	beq.n	800de42 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 800de3e:	f001 f8e1 	bl	800f004 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800de42:	230a      	movs	r3, #10
 800de44:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800de46:	2301      	movs	r3, #1
 800de48:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800de4a:	2300      	movs	r3, #0
 800de4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800de4e:	2300      	movs	r3, #0
 800de50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800de52:	1d3b      	adds	r3, r7, #4
 800de54:	2200      	movs	r2, #0
 800de56:	4619      	mov	r1, r3
 800de58:	4820      	ldr	r0, [pc, #128]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800de5a:	f011 f97e 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	bf14      	ite	ne
 800de64:	2301      	movne	r3, #1
 800de66:	2300      	moveq	r3, #0
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d001      	beq.n	800de72 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 800de6e:	f001 f8c9 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800de72:	1d3b      	adds	r3, r7, #4
 800de74:	2204      	movs	r2, #4
 800de76:	4619      	mov	r1, r3
 800de78:	4818      	ldr	r0, [pc, #96]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800de7a:	f011 f96e 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	bf14      	ite	ne
 800de84:	2301      	movne	r3, #1
 800de86:	2300      	moveq	r3, #0
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 800de8e:	f001 f8b9 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800de92:	1d3b      	adds	r3, r7, #4
 800de94:	2208      	movs	r2, #8
 800de96:	4619      	mov	r1, r3
 800de98:	4810      	ldr	r0, [pc, #64]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800de9a:	f011 f95e 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800de9e:	4603      	mov	r3, r0
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	bf14      	ite	ne
 800dea4:	2301      	movne	r3, #1
 800dea6:	2300      	moveq	r3, #0
 800dea8:	b2db      	uxtb	r3, r3
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d001      	beq.n	800deb2 <_ZL12MX_TIM1_Initv+0x14e>
  {
    Error_Handler();
 800deae:	f001 f8a9 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800deb2:	1d3b      	adds	r3, r7, #4
 800deb4:	220c      	movs	r2, #12
 800deb6:	4619      	mov	r1, r3
 800deb8:	4808      	ldr	r0, [pc, #32]	; (800dedc <_ZL12MX_TIM1_Initv+0x178>)
 800deba:	f011 f94e 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	bf14      	ite	ne
 800dec4:	2301      	movne	r3, #1
 800dec6:	2300      	moveq	r3, #0
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	2b00      	cmp	r3, #0
 800decc:	d001      	beq.n	800ded2 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 800dece:	f001 f899 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ded2:	bf00      	nop
 800ded4:	3730      	adds	r7, #48	; 0x30
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	240010e4 	.word	0x240010e4
 800dee0:	40010000 	.word	0x40010000

0800dee4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b08c      	sub	sp, #48	; 0x30
 800dee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800deea:	f107 0320 	add.w	r3, r7, #32
 800deee:	2200      	movs	r2, #0
 800def0:	601a      	str	r2, [r3, #0]
 800def2:	605a      	str	r2, [r3, #4]
 800def4:	609a      	str	r2, [r3, #8]
 800def6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800def8:	f107 0314 	add.w	r3, r7, #20
 800defc:	2200      	movs	r2, #0
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	605a      	str	r2, [r3, #4]
 800df02:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800df04:	1d3b      	adds	r3, r7, #4
 800df06:	2200      	movs	r2, #0
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	605a      	str	r2, [r3, #4]
 800df0c:	609a      	str	r2, [r3, #8]
 800df0e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800df10:	4b50      	ldr	r3, [pc, #320]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800df12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800df16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800df18:	4b4e      	ldr	r3, [pc, #312]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800df1a:	2200      	movs	r2, #0
 800df1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800df1e:	4b4d      	ldr	r3, [pc, #308]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800df20:	2200      	movs	r2, #0
 800df22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 27500-1;
 800df24:	4b4b      	ldr	r3, [pc, #300]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800df26:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800df2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800df2c:	4b49      	ldr	r3, [pc, #292]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800df2e:	2200      	movs	r2, #0
 800df30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df32:	4b48      	ldr	r3, [pc, #288]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800df34:	2200      	movs	r2, #0
 800df36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800df38:	4846      	ldr	r0, [pc, #280]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800df3a:	f010 fb27 	bl	801e58c <HAL_TIM_Base_Init>
 800df3e:	4603      	mov	r3, r0
 800df40:	2b00      	cmp	r3, #0
 800df42:	bf14      	ite	ne
 800df44:	2301      	movne	r3, #1
 800df46:	2300      	moveq	r3, #0
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d001      	beq.n	800df52 <_ZL12MX_TIM2_Initv+0x6e>
  {
    Error_Handler();
 800df4e:	f001 f859 	bl	800f004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800df52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df56:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800df58:	f107 0320 	add.w	r3, r7, #32
 800df5c:	4619      	mov	r1, r3
 800df5e:	483d      	ldr	r0, [pc, #244]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800df60:	f011 faac 	bl	801f4bc <HAL_TIM_ConfigClockSource>
 800df64:	4603      	mov	r3, r0
 800df66:	2b00      	cmp	r3, #0
 800df68:	bf14      	ite	ne
 800df6a:	2301      	movne	r3, #1
 800df6c:	2300      	moveq	r3, #0
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <_ZL12MX_TIM2_Initv+0x94>
  {
    Error_Handler();
 800df74:	f001 f846 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800df78:	4836      	ldr	r0, [pc, #216]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800df7a:	f010 fe0f 	bl	801eb9c <HAL_TIM_IC_Init>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	bf14      	ite	ne
 800df84:	2301      	movne	r3, #1
 800df86:	2300      	moveq	r3, #0
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d001      	beq.n	800df92 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800df8e:	f001 f839 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800df92:	2300      	movs	r3, #0
 800df94:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df96:	2300      	movs	r3, #0
 800df98:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800df9a:	f107 0314 	add.w	r3, r7, #20
 800df9e:	4619      	mov	r1, r3
 800dfa0:	482c      	ldr	r0, [pc, #176]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800dfa2:	f012 f95b 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	bf14      	ite	ne
 800dfac:	2301      	movne	r3, #1
 800dfae:	2300      	moveq	r3, #0
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d001      	beq.n	800dfba <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 800dfb6:	f001 f825 	bl	800f004 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800dfba:	230a      	movs	r3, #10
 800dfbc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800dfca:	1d3b      	adds	r3, r7, #4
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4619      	mov	r1, r3
 800dfd0:	4820      	ldr	r0, [pc, #128]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800dfd2:	f011 f8c2 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	bf14      	ite	ne
 800dfdc:	2301      	movne	r3, #1
 800dfde:	2300      	moveq	r3, #0
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <_ZL12MX_TIM2_Initv+0x106>
  {
    Error_Handler();
 800dfe6:	f001 f80d 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800dfea:	1d3b      	adds	r3, r7, #4
 800dfec:	2204      	movs	r2, #4
 800dfee:	4619      	mov	r1, r3
 800dff0:	4818      	ldr	r0, [pc, #96]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800dff2:	f011 f8b2 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800dff6:	4603      	mov	r3, r0
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	bf14      	ite	ne
 800dffc:	2301      	movne	r3, #1
 800dffe:	2300      	moveq	r3, #0
 800e000:	b2db      	uxtb	r3, r3
 800e002:	2b00      	cmp	r3, #0
 800e004:	d001      	beq.n	800e00a <_ZL12MX_TIM2_Initv+0x126>
  {
    Error_Handler();
 800e006:	f000 fffd 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800e00a:	1d3b      	adds	r3, r7, #4
 800e00c:	2208      	movs	r2, #8
 800e00e:	4619      	mov	r1, r3
 800e010:	4810      	ldr	r0, [pc, #64]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800e012:	f011 f8a2 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800e016:	4603      	mov	r3, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	bf14      	ite	ne
 800e01c:	2301      	movne	r3, #1
 800e01e:	2300      	moveq	r3, #0
 800e020:	b2db      	uxtb	r3, r3
 800e022:	2b00      	cmp	r3, #0
 800e024:	d001      	beq.n	800e02a <_ZL12MX_TIM2_Initv+0x146>
  {
    Error_Handler();
 800e026:	f000 ffed 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800e02a:	1d3b      	adds	r3, r7, #4
 800e02c:	220c      	movs	r2, #12
 800e02e:	4619      	mov	r1, r3
 800e030:	4808      	ldr	r0, [pc, #32]	; (800e054 <_ZL12MX_TIM2_Initv+0x170>)
 800e032:	f011 f892 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	bf14      	ite	ne
 800e03c:	2301      	movne	r3, #1
 800e03e:	2300      	moveq	r3, #0
 800e040:	b2db      	uxtb	r3, r3
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <_ZL12MX_TIM2_Initv+0x166>
  {
    Error_Handler();
 800e046:	f000 ffdd 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800e04a:	bf00      	nop
 800e04c:	3730      	adds	r7, #48	; 0x30
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}
 800e052:	bf00      	nop
 800e054:	24001130 	.word	0x24001130

0800e058 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b08c      	sub	sp, #48	; 0x30
 800e05c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e05e:	f107 0320 	add.w	r3, r7, #32
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	605a      	str	r2, [r3, #4]
 800e068:	609a      	str	r2, [r3, #8]
 800e06a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e06c:	f107 0314 	add.w	r3, r7, #20
 800e070:	2200      	movs	r2, #0
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	605a      	str	r2, [r3, #4]
 800e076:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800e078:	1d3b      	adds	r3, r7, #4
 800e07a:	2200      	movs	r2, #0
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	605a      	str	r2, [r3, #4]
 800e080:	609a      	str	r2, [r3, #8]
 800e082:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e084:	4b4f      	ldr	r3, [pc, #316]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e086:	4a50      	ldr	r2, [pc, #320]	; (800e1c8 <_ZL12MX_TIM3_Initv+0x170>)
 800e088:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e08a:	4b4e      	ldr	r3, [pc, #312]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e090:	4b4c      	ldr	r3, [pc, #304]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e092:	2200      	movs	r2, #0
 800e094:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 27500 - 1;
 800e096:	4b4b      	ldr	r3, [pc, #300]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e098:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800e09c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e09e:	4b49      	ldr	r3, [pc, #292]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e0a4:	4b47      	ldr	r3, [pc, #284]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800e0aa:	4846      	ldr	r0, [pc, #280]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e0ac:	f010 fa6e 	bl	801e58c <HAL_TIM_Base_Init>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	bf14      	ite	ne
 800e0b6:	2301      	movne	r3, #1
 800e0b8:	2300      	moveq	r3, #0
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d001      	beq.n	800e0c4 <_ZL12MX_TIM3_Initv+0x6c>
  {
    Error_Handler();
 800e0c0:	f000 ffa0 	bl	800f004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e0c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800e0ca:	f107 0320 	add.w	r3, r7, #32
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	483c      	ldr	r0, [pc, #240]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e0d2:	f011 f9f3 	bl	801f4bc <HAL_TIM_ConfigClockSource>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	bf14      	ite	ne
 800e0dc:	2301      	movne	r3, #1
 800e0de:	2300      	moveq	r3, #0
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <_ZL12MX_TIM3_Initv+0x92>
  {
    Error_Handler();
 800e0e6:	f000 ff8d 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800e0ea:	4836      	ldr	r0, [pc, #216]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e0ec:	f010 fd56 	bl	801eb9c <HAL_TIM_IC_Init>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	bf14      	ite	ne
 800e0f6:	2301      	movne	r3, #1
 800e0f8:	2300      	moveq	r3, #0
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 800e100:	f000 ff80 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e104:	2300      	movs	r3, #0
 800e106:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e108:	2300      	movs	r3, #0
 800e10a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e10c:	f107 0314 	add.w	r3, r7, #20
 800e110:	4619      	mov	r1, r3
 800e112:	482c      	ldr	r0, [pc, #176]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e114:	f012 f8a2 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	bf14      	ite	ne
 800e11e:	2301      	movne	r3, #1
 800e120:	2300      	moveq	r3, #0
 800e122:	b2db      	uxtb	r3, r3
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <_ZL12MX_TIM3_Initv+0xd4>
  {
    Error_Handler();
 800e128:	f000 ff6c 	bl	800f004 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800e12c:	230a      	movs	r3, #10
 800e12e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800e130:	2301      	movs	r3, #1
 800e132:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800e134:	2300      	movs	r3, #0
 800e136:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800e138:	2300      	movs	r3, #0
 800e13a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800e13c:	1d3b      	adds	r3, r7, #4
 800e13e:	2200      	movs	r2, #0
 800e140:	4619      	mov	r1, r3
 800e142:	4820      	ldr	r0, [pc, #128]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e144:	f011 f809 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	bf14      	ite	ne
 800e14e:	2301      	movne	r3, #1
 800e150:	2300      	moveq	r3, #0
 800e152:	b2db      	uxtb	r3, r3
 800e154:	2b00      	cmp	r3, #0
 800e156:	d001      	beq.n	800e15c <_ZL12MX_TIM3_Initv+0x104>
  {
    Error_Handler();
 800e158:	f000 ff54 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800e15c:	1d3b      	adds	r3, r7, #4
 800e15e:	2204      	movs	r2, #4
 800e160:	4619      	mov	r1, r3
 800e162:	4818      	ldr	r0, [pc, #96]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e164:	f010 fff9 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	bf14      	ite	ne
 800e16e:	2301      	movne	r3, #1
 800e170:	2300      	moveq	r3, #0
 800e172:	b2db      	uxtb	r3, r3
 800e174:	2b00      	cmp	r3, #0
 800e176:	d001      	beq.n	800e17c <_ZL12MX_TIM3_Initv+0x124>
  {
    Error_Handler();
 800e178:	f000 ff44 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800e17c:	1d3b      	adds	r3, r7, #4
 800e17e:	2208      	movs	r2, #8
 800e180:	4619      	mov	r1, r3
 800e182:	4810      	ldr	r0, [pc, #64]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e184:	f010 ffe9 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	bf14      	ite	ne
 800e18e:	2301      	movne	r3, #1
 800e190:	2300      	moveq	r3, #0
 800e192:	b2db      	uxtb	r3, r3
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <_ZL12MX_TIM3_Initv+0x144>
  {
    Error_Handler();
 800e198:	f000 ff34 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800e19c:	1d3b      	adds	r3, r7, #4
 800e19e:	220c      	movs	r2, #12
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	4808      	ldr	r0, [pc, #32]	; (800e1c4 <_ZL12MX_TIM3_Initv+0x16c>)
 800e1a4:	f010 ffd9 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	bf14      	ite	ne
 800e1ae:	2301      	movne	r3, #1
 800e1b0:	2300      	moveq	r3, #0
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d001      	beq.n	800e1bc <_ZL12MX_TIM3_Initv+0x164>
  {
    Error_Handler();
 800e1b8:	f000 ff24 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800e1bc:	bf00      	nop
 800e1be:	3730      	adds	r7, #48	; 0x30
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}
 800e1c4:	2400117c 	.word	0x2400117c
 800e1c8:	40000400 	.word	0x40000400

0800e1cc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08c      	sub	sp, #48	; 0x30
 800e1d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e1d2:	f107 0320 	add.w	r3, r7, #32
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	601a      	str	r2, [r3, #0]
 800e1da:	605a      	str	r2, [r3, #4]
 800e1dc:	609a      	str	r2, [r3, #8]
 800e1de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e1e0:	f107 0314 	add.w	r3, r7, #20
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	601a      	str	r2, [r3, #0]
 800e1e8:	605a      	str	r2, [r3, #4]
 800e1ea:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800e1ec:	1d3b      	adds	r3, r7, #4
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	605a      	str	r2, [r3, #4]
 800e1f4:	609a      	str	r2, [r3, #8]
 800e1f6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800e1f8:	4b4f      	ldr	r3, [pc, #316]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e1fa:	4a50      	ldr	r2, [pc, #320]	; (800e33c <_ZL12MX_TIM4_Initv+0x170>)
 800e1fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800e1fe:	4b4e      	ldr	r3, [pc, #312]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e200:	2200      	movs	r2, #0
 800e202:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e204:	4b4c      	ldr	r3, [pc, #304]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e206:	2200      	movs	r2, #0
 800e208:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 27500 - 1;
 800e20a:	4b4b      	ldr	r3, [pc, #300]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e20c:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800e210:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e212:	4b49      	ldr	r3, [pc, #292]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e214:	2200      	movs	r2, #0
 800e216:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e218:	4b47      	ldr	r3, [pc, #284]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800e21e:	4846      	ldr	r0, [pc, #280]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e220:	f010 f9b4 	bl	801e58c <HAL_TIM_Base_Init>
 800e224:	4603      	mov	r3, r0
 800e226:	2b00      	cmp	r3, #0
 800e228:	bf14      	ite	ne
 800e22a:	2301      	movne	r3, #1
 800e22c:	2300      	moveq	r3, #0
 800e22e:	b2db      	uxtb	r3, r3
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <_ZL12MX_TIM4_Initv+0x6c>
  {
    Error_Handler();
 800e234:	f000 fee6 	bl	800f004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e23c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800e23e:	f107 0320 	add.w	r3, r7, #32
 800e242:	4619      	mov	r1, r3
 800e244:	483c      	ldr	r0, [pc, #240]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e246:	f011 f939 	bl	801f4bc <HAL_TIM_ConfigClockSource>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	bf14      	ite	ne
 800e250:	2301      	movne	r3, #1
 800e252:	2300      	moveq	r3, #0
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b00      	cmp	r3, #0
 800e258:	d001      	beq.n	800e25e <_ZL12MX_TIM4_Initv+0x92>
  {
    Error_Handler();
 800e25a:	f000 fed3 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800e25e:	4836      	ldr	r0, [pc, #216]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e260:	f010 fc9c 	bl	801eb9c <HAL_TIM_IC_Init>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	bf14      	ite	ne
 800e26a:	2301      	movne	r3, #1
 800e26c:	2300      	moveq	r3, #0
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	2b00      	cmp	r3, #0
 800e272:	d001      	beq.n	800e278 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800e274:	f000 fec6 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e278:	2300      	movs	r3, #0
 800e27a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e27c:	2300      	movs	r3, #0
 800e27e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e280:	f107 0314 	add.w	r3, r7, #20
 800e284:	4619      	mov	r1, r3
 800e286:	482c      	ldr	r0, [pc, #176]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e288:	f011 ffe8 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800e28c:	4603      	mov	r3, r0
 800e28e:	2b00      	cmp	r3, #0
 800e290:	bf14      	ite	ne
 800e292:	2301      	movne	r3, #1
 800e294:	2300      	moveq	r3, #0
 800e296:	b2db      	uxtb	r3, r3
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d001      	beq.n	800e2a0 <_ZL12MX_TIM4_Initv+0xd4>
  {
    Error_Handler();
 800e29c:	f000 feb2 	bl	800f004 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800e2a0:	230a      	movs	r3, #10
 800e2a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800e2b0:	1d3b      	adds	r3, r7, #4
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4820      	ldr	r0, [pc, #128]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e2b8:	f010 ff4f 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	bf14      	ite	ne
 800e2c2:	2301      	movne	r3, #1
 800e2c4:	2300      	moveq	r3, #0
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d001      	beq.n	800e2d0 <_ZL12MX_TIM4_Initv+0x104>
  {
    Error_Handler();
 800e2cc:	f000 fe9a 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800e2d0:	1d3b      	adds	r3, r7, #4
 800e2d2:	2204      	movs	r2, #4
 800e2d4:	4619      	mov	r1, r3
 800e2d6:	4818      	ldr	r0, [pc, #96]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e2d8:	f010 ff3f 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	bf14      	ite	ne
 800e2e2:	2301      	movne	r3, #1
 800e2e4:	2300      	moveq	r3, #0
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d001      	beq.n	800e2f0 <_ZL12MX_TIM4_Initv+0x124>
  {
    Error_Handler();
 800e2ec:	f000 fe8a 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800e2f0:	1d3b      	adds	r3, r7, #4
 800e2f2:	2208      	movs	r2, #8
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4810      	ldr	r0, [pc, #64]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e2f8:	f010 ff2f 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	bf14      	ite	ne
 800e302:	2301      	movne	r3, #1
 800e304:	2300      	moveq	r3, #0
 800e306:	b2db      	uxtb	r3, r3
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d001      	beq.n	800e310 <_ZL12MX_TIM4_Initv+0x144>
  {
    Error_Handler();
 800e30c:	f000 fe7a 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800e310:	1d3b      	adds	r3, r7, #4
 800e312:	220c      	movs	r2, #12
 800e314:	4619      	mov	r1, r3
 800e316:	4808      	ldr	r0, [pc, #32]	; (800e338 <_ZL12MX_TIM4_Initv+0x16c>)
 800e318:	f010 ff1f 	bl	801f15a <HAL_TIM_IC_ConfigChannel>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	bf14      	ite	ne
 800e322:	2301      	movne	r3, #1
 800e324:	2300      	moveq	r3, #0
 800e326:	b2db      	uxtb	r3, r3
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d001      	beq.n	800e330 <_ZL12MX_TIM4_Initv+0x164>
  {
    Error_Handler();
 800e32c:	f000 fe6a 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800e330:	bf00      	nop
 800e332:	3730      	adds	r7, #48	; 0x30
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	240011c8 	.word	0x240011c8
 800e33c:	40000800 	.word	0x40000800

0800e340 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b08e      	sub	sp, #56	; 0x38
 800e344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e34a:	2200      	movs	r2, #0
 800e34c:	601a      	str	r2, [r3, #0]
 800e34e:	605a      	str	r2, [r3, #4]
 800e350:	609a      	str	r2, [r3, #8]
 800e352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e354:	f107 031c 	add.w	r3, r7, #28
 800e358:	2200      	movs	r2, #0
 800e35a:	601a      	str	r2, [r3, #0]
 800e35c:	605a      	str	r2, [r3, #4]
 800e35e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e360:	463b      	mov	r3, r7
 800e362:	2200      	movs	r2, #0
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	605a      	str	r2, [r3, #4]
 800e368:	609a      	str	r2, [r3, #8]
 800e36a:	60da      	str	r2, [r3, #12]
 800e36c:	611a      	str	r2, [r3, #16]
 800e36e:	615a      	str	r2, [r3, #20]
 800e370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800e372:	4b49      	ldr	r3, [pc, #292]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e374:	4a49      	ldr	r2, [pc, #292]	; (800e49c <_ZL12MX_TIM5_Initv+0x15c>)
 800e376:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800e378:	4b47      	ldr	r3, [pc, #284]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e37a:	2200      	movs	r2, #0
 800e37c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e37e:	4b46      	ldr	r3, [pc, #280]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e380:	2200      	movs	r2, #0
 800e382:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 27500 - 1;
 800e384:	4b44      	ldr	r3, [pc, #272]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e386:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800e38a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e38c:	4b42      	ldr	r3, [pc, #264]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e38e:	2200      	movs	r2, #0
 800e390:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e392:	4b41      	ldr	r3, [pc, #260]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e394:	2200      	movs	r2, #0
 800e396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800e398:	483f      	ldr	r0, [pc, #252]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e39a:	f010 f8f7 	bl	801e58c <HAL_TIM_Base_Init>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	bf14      	ite	ne
 800e3a4:	2301      	movne	r3, #1
 800e3a6:	2300      	moveq	r3, #0
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800e3ae:	f000 fe29 	bl	800f004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e3b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800e3b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3bc:	4619      	mov	r1, r3
 800e3be:	4836      	ldr	r0, [pc, #216]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e3c0:	f011 f87c 	bl	801f4bc <HAL_TIM_ConfigClockSource>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	bf14      	ite	ne
 800e3ca:	2301      	movne	r3, #1
 800e3cc:	2300      	moveq	r3, #0
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d001      	beq.n	800e3d8 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800e3d4:	f000 fe16 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800e3d8:	482f      	ldr	r0, [pc, #188]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e3da:	f010 fa62 	bl	801e8a2 <HAL_TIM_PWM_Init>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	bf14      	ite	ne
 800e3e4:	2301      	movne	r3, #1
 800e3e6:	2300      	moveq	r3, #0
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800e3ee:	f000 fe09 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800e3fa:	f107 031c 	add.w	r3, r7, #28
 800e3fe:	4619      	mov	r1, r3
 800e400:	4825      	ldr	r0, [pc, #148]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e402:	f011 ff2b 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	bf14      	ite	ne
 800e40c:	2301      	movne	r3, #1
 800e40e:	2300      	moveq	r3, #0
 800e410:	b2db      	uxtb	r3, r3
 800e412:	2b00      	cmp	r3, #0
 800e414:	d001      	beq.n	800e41a <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800e416:	f000 fdf5 	bl	800f004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e41a:	2360      	movs	r3, #96	; 0x60
 800e41c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800e41e:	2300      	movs	r3, #0
 800e420:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e422:	2300      	movs	r3, #0
 800e424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e426:	2300      	movs	r3, #0
 800e428:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e42a:	463b      	mov	r3, r7
 800e42c:	2200      	movs	r2, #0
 800e42e:	4619      	mov	r1, r3
 800e430:	4819      	ldr	r0, [pc, #100]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e432:	f010 ff2f 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	bf14      	ite	ne
 800e43c:	2301      	movne	r3, #1
 800e43e:	2300      	moveq	r3, #0
 800e440:	b2db      	uxtb	r3, r3
 800e442:	2b00      	cmp	r3, #0
 800e444:	d001      	beq.n	800e44a <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800e446:	f000 fddd 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e44a:	463b      	mov	r3, r7
 800e44c:	2208      	movs	r2, #8
 800e44e:	4619      	mov	r1, r3
 800e450:	4811      	ldr	r0, [pc, #68]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e452:	f010 ff1f 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	bf14      	ite	ne
 800e45c:	2301      	movne	r3, #1
 800e45e:	2300      	moveq	r3, #0
 800e460:	b2db      	uxtb	r3, r3
 800e462:	2b00      	cmp	r3, #0
 800e464:	d001      	beq.n	800e46a <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 800e466:	f000 fdcd 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e46a:	463b      	mov	r3, r7
 800e46c:	220c      	movs	r2, #12
 800e46e:	4619      	mov	r1, r3
 800e470:	4809      	ldr	r0, [pc, #36]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e472:	f010 ff0f 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	bf14      	ite	ne
 800e47c:	2301      	movne	r3, #1
 800e47e:	2300      	moveq	r3, #0
 800e480:	b2db      	uxtb	r3, r3
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <_ZL12MX_TIM5_Initv+0x14a>
  {
    Error_Handler();
 800e486:	f000 fdbd 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800e48a:	4803      	ldr	r0, [pc, #12]	; (800e498 <_ZL12MX_TIM5_Initv+0x158>)
 800e48c:	f006 fc02 	bl	8014c94 <HAL_TIM_MspPostInit>

}
 800e490:	bf00      	nop
 800e492:	3738      	adds	r7, #56	; 0x38
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}
 800e498:	24001214 	.word	0x24001214
 800e49c:	40000c00 	.word	0x40000c00

0800e4a0 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e4a6:	1d3b      	adds	r3, r7, #4
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	601a      	str	r2, [r3, #0]
 800e4ac:	605a      	str	r2, [r3, #4]
 800e4ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800e4b0:	4b19      	ldr	r3, [pc, #100]	; (800e518 <_ZL12MX_TIM6_Initv+0x78>)
 800e4b2:	4a1a      	ldr	r2, [pc, #104]	; (800e51c <_ZL12MX_TIM6_Initv+0x7c>)
 800e4b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275 -1;
 800e4b6:	4b18      	ldr	r3, [pc, #96]	; (800e518 <_ZL12MX_TIM6_Initv+0x78>)
 800e4b8:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e4bc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e4be:	4b16      	ldr	r3, [pc, #88]	; (800e518 <_ZL12MX_TIM6_Initv+0x78>)
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 800e4c4:	4b14      	ldr	r3, [pc, #80]	; (800e518 <_ZL12MX_TIM6_Initv+0x78>)
 800e4c6:	22c7      	movs	r2, #199	; 0xc7
 800e4c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e4ca:	4b13      	ldr	r3, [pc, #76]	; (800e518 <_ZL12MX_TIM6_Initv+0x78>)
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800e4d0:	4811      	ldr	r0, [pc, #68]	; (800e518 <_ZL12MX_TIM6_Initv+0x78>)
 800e4d2:	f010 f85b 	bl	801e58c <HAL_TIM_Base_Init>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	bf14      	ite	ne
 800e4dc:	2301      	movne	r3, #1
 800e4de:	2300      	moveq	r3, #0
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d001      	beq.n	800e4ea <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800e4e6:	f000 fd8d 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800e4ea:	2320      	movs	r3, #32
 800e4ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800e4f2:	1d3b      	adds	r3, r7, #4
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4808      	ldr	r0, [pc, #32]	; (800e518 <_ZL12MX_TIM6_Initv+0x78>)
 800e4f8:	f011 feb0 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	bf14      	ite	ne
 800e502:	2301      	movne	r3, #1
 800e504:	2300      	moveq	r3, #0
 800e506:	b2db      	uxtb	r3, r3
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d001      	beq.n	800e510 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800e50c:	f000 fd7a 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800e510:	bf00      	nop
 800e512:	3710      	adds	r7, #16
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	24001260 	.word	0x24001260
 800e51c:	40001000 	.word	0x40001000

0800e520 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e526:	1d3b      	adds	r3, r7, #4
 800e528:	2200      	movs	r2, #0
 800e52a:	601a      	str	r2, [r3, #0]
 800e52c:	605a      	str	r2, [r3, #4]
 800e52e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800e530:	4b19      	ldr	r3, [pc, #100]	; (800e598 <_ZL12MX_TIM7_Initv+0x78>)
 800e532:	4a1a      	ldr	r2, [pc, #104]	; (800e59c <_ZL12MX_TIM7_Initv+0x7c>)
 800e534:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800e536:	4b18      	ldr	r3, [pc, #96]	; (800e598 <_ZL12MX_TIM7_Initv+0x78>)
 800e538:	2200      	movs	r2, #0
 800e53a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e53c:	4b16      	ldr	r3, [pc, #88]	; (800e598 <_ZL12MX_TIM7_Initv+0x78>)
 800e53e:	2200      	movs	r2, #0
 800e540:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800e542:	4b15      	ldr	r3, [pc, #84]	; (800e598 <_ZL12MX_TIM7_Initv+0x78>)
 800e544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e548:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e54a:	4b13      	ldr	r3, [pc, #76]	; (800e598 <_ZL12MX_TIM7_Initv+0x78>)
 800e54c:	2200      	movs	r2, #0
 800e54e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800e550:	4811      	ldr	r0, [pc, #68]	; (800e598 <_ZL12MX_TIM7_Initv+0x78>)
 800e552:	f010 f81b 	bl	801e58c <HAL_TIM_Base_Init>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	bf14      	ite	ne
 800e55c:	2301      	movne	r3, #1
 800e55e:	2300      	moveq	r3, #0
 800e560:	b2db      	uxtb	r3, r3
 800e562:	2b00      	cmp	r3, #0
 800e564:	d001      	beq.n	800e56a <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800e566:	f000 fd4d 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e56a:	2300      	movs	r3, #0
 800e56c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e56e:	2300      	movs	r3, #0
 800e570:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800e572:	1d3b      	adds	r3, r7, #4
 800e574:	4619      	mov	r1, r3
 800e576:	4808      	ldr	r0, [pc, #32]	; (800e598 <_ZL12MX_TIM7_Initv+0x78>)
 800e578:	f011 fe70 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800e57c:	4603      	mov	r3, r0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	bf14      	ite	ne
 800e582:	2301      	movne	r3, #1
 800e584:	2300      	moveq	r3, #0
 800e586:	b2db      	uxtb	r3, r3
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 800e58c:	f000 fd3a 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800e590:	bf00      	nop
 800e592:	3710      	adds	r7, #16
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	240012ac 	.word	0x240012ac
 800e59c:	40001400 	.word	0x40001400

0800e5a0 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b09c      	sub	sp, #112	; 0x70
 800e5a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e5a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	605a      	str	r2, [r3, #4]
 800e5b0:	609a      	str	r2, [r3, #8]
 800e5b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e5b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	601a      	str	r2, [r3, #0]
 800e5bc:	605a      	str	r2, [r3, #4]
 800e5be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e5c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	601a      	str	r2, [r3, #0]
 800e5c8:	605a      	str	r2, [r3, #4]
 800e5ca:	609a      	str	r2, [r3, #8]
 800e5cc:	60da      	str	r2, [r3, #12]
 800e5ce:	611a      	str	r2, [r3, #16]
 800e5d0:	615a      	str	r2, [r3, #20]
 800e5d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800e5d4:	1d3b      	adds	r3, r7, #4
 800e5d6:	2234      	movs	r2, #52	; 0x34
 800e5d8:	2100      	movs	r1, #0
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f012 f8f0 	bl	80207c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800e5e0:	4b6c      	ldr	r3, [pc, #432]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e5e2:	4a6d      	ldr	r2, [pc, #436]	; (800e798 <_ZL12MX_TIM8_Initv+0x1f8>)
 800e5e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800e5e6:	4b6b      	ldr	r3, [pc, #428]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e5ec:	4b69      	ldr	r3, [pc, #420]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27500 - 1;
 800e5f2:	4b68      	ldr	r3, [pc, #416]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e5f4:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800e5f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e5fa:	4b66      	ldr	r3, [pc, #408]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800e600:	4b64      	ldr	r3, [pc, #400]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e602:	2200      	movs	r2, #0
 800e604:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e606:	4b63      	ldr	r3, [pc, #396]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e608:	2200      	movs	r2, #0
 800e60a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800e60c:	4861      	ldr	r0, [pc, #388]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e60e:	f00f ffbd 	bl	801e58c <HAL_TIM_Base_Init>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	bf14      	ite	ne
 800e618:	2301      	movne	r3, #1
 800e61a:	2300      	moveq	r3, #0
 800e61c:	b2db      	uxtb	r3, r3
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d001      	beq.n	800e626 <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 800e622:	f000 fcef 	bl	800f004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e62a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800e62c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e630:	4619      	mov	r1, r3
 800e632:	4858      	ldr	r0, [pc, #352]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e634:	f010 ff42 	bl	801f4bc <HAL_TIM_ConfigClockSource>
 800e638:	4603      	mov	r3, r0
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	bf14      	ite	ne
 800e63e:	2301      	movne	r3, #1
 800e640:	2300      	moveq	r3, #0
 800e642:	b2db      	uxtb	r3, r3
 800e644:	2b00      	cmp	r3, #0
 800e646:	d001      	beq.n	800e64c <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 800e648:	f000 fcdc 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800e64c:	4851      	ldr	r0, [pc, #324]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e64e:	f010 f928 	bl	801e8a2 <HAL_TIM_PWM_Init>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	bf14      	ite	ne
 800e658:	2301      	movne	r3, #1
 800e65a:	2300      	moveq	r3, #0
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 800e662:	f000 fccf 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e666:	2300      	movs	r3, #0
 800e668:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800e66a:	2300      	movs	r3, #0
 800e66c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e66e:	2300      	movs	r3, #0
 800e670:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800e672:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e676:	4619      	mov	r1, r3
 800e678:	4846      	ldr	r0, [pc, #280]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e67a:	f011 fdef 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800e67e:	4603      	mov	r3, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	bf14      	ite	ne
 800e684:	2301      	movne	r3, #1
 800e686:	2300      	moveq	r3, #0
 800e688:	b2db      	uxtb	r3, r3
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d001      	beq.n	800e692 <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 800e68e:	f000 fcb9 	bl	800f004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e692:	2360      	movs	r3, #96	; 0x60
 800e694:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800e696:	2300      	movs	r3, #0
 800e698:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e69a:	2300      	movs	r3, #0
 800e69c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e6ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	4837      	ldr	r0, [pc, #220]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e6b8:	f010 fdec 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	bf14      	ite	ne
 800e6c2:	2301      	movne	r3, #1
 800e6c4:	2300      	moveq	r3, #0
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 800e6cc:	f000 fc9a 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e6d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e6d4:	2204      	movs	r2, #4
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	482e      	ldr	r0, [pc, #184]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e6da:	f010 fddb 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	bf14      	ite	ne
 800e6e4:	2301      	movne	r3, #1
 800e6e6:	2300      	moveq	r3, #0
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <_ZL12MX_TIM8_Initv+0x152>
  {
    Error_Handler();
 800e6ee:	f000 fc89 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e6f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e6f6:	2208      	movs	r2, #8
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	4826      	ldr	r0, [pc, #152]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e6fc:	f010 fdca 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	bf14      	ite	ne
 800e706:	2301      	movne	r3, #1
 800e708:	2300      	moveq	r3, #0
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d001      	beq.n	800e714 <_ZL12MX_TIM8_Initv+0x174>
  {
    Error_Handler();
 800e710:	f000 fc78 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e714:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e718:	220c      	movs	r2, #12
 800e71a:	4619      	mov	r1, r3
 800e71c:	481d      	ldr	r0, [pc, #116]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e71e:	f010 fdb9 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800e722:	4603      	mov	r3, r0
 800e724:	2b00      	cmp	r3, #0
 800e726:	bf14      	ite	ne
 800e728:	2301      	movne	r3, #1
 800e72a:	2300      	moveq	r3, #0
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d001      	beq.n	800e736 <_ZL12MX_TIM8_Initv+0x196>
  {
    Error_Handler();
 800e732:	f000 fc67 	bl	800f004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e736:	2300      	movs	r3, #0
 800e738:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e73a:	2300      	movs	r3, #0
 800e73c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e73e:	2300      	movs	r3, #0
 800e740:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e74a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e74e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800e750:	2300      	movs	r3, #0
 800e752:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800e754:	2300      	movs	r3, #0
 800e756:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800e758:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e75c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800e75e:	2300      	movs	r3, #0
 800e760:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e762:	2300      	movs	r3, #0
 800e764:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800e766:	1d3b      	adds	r3, r7, #4
 800e768:	4619      	mov	r1, r3
 800e76a:	480a      	ldr	r0, [pc, #40]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e76c:	f011 fe12 	bl	8020394 <HAL_TIMEx_ConfigBreakDeadTime>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	bf14      	ite	ne
 800e776:	2301      	movne	r3, #1
 800e778:	2300      	moveq	r3, #0
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d001      	beq.n	800e784 <_ZL12MX_TIM8_Initv+0x1e4>
  {
    Error_Handler();
 800e780:	f000 fc40 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800e784:	4803      	ldr	r0, [pc, #12]	; (800e794 <_ZL12MX_TIM8_Initv+0x1f4>)
 800e786:	f006 fa85 	bl	8014c94 <HAL_TIM_MspPostInit>

}
 800e78a:	bf00      	nop
 800e78c:	3770      	adds	r7, #112	; 0x70
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	240012f8 	.word	0x240012f8
 800e798:	40010400 	.word	0x40010400

0800e79c <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b08c      	sub	sp, #48	; 0x30
 800e7a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e7a2:	f107 0320 	add.w	r3, r7, #32
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	601a      	str	r2, [r3, #0]
 800e7aa:	605a      	str	r2, [r3, #4]
 800e7ac:	609a      	str	r2, [r3, #8]
 800e7ae:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e7b0:	1d3b      	adds	r3, r7, #4
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	601a      	str	r2, [r3, #0]
 800e7b6:	605a      	str	r2, [r3, #4]
 800e7b8:	609a      	str	r2, [r3, #8]
 800e7ba:	60da      	str	r2, [r3, #12]
 800e7bc:	611a      	str	r2, [r3, #16]
 800e7be:	615a      	str	r2, [r3, #20]
 800e7c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800e7c2:	4b2f      	ldr	r3, [pc, #188]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e7c4:	4a2f      	ldr	r2, [pc, #188]	; (800e884 <_ZL13MX_TIM12_Initv+0xe8>)
 800e7c6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800e7c8:	4b2d      	ldr	r3, [pc, #180]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e7ce:	4b2c      	ldr	r3, [pc, #176]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 27500 - 1;
 800e7d4:	4b2a      	ldr	r3, [pc, #168]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e7d6:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800e7da:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e7dc:	4b28      	ldr	r3, [pc, #160]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e7de:	2200      	movs	r2, #0
 800e7e0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e7e2:	4b27      	ldr	r3, [pc, #156]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800e7e8:	4825      	ldr	r0, [pc, #148]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e7ea:	f00f fecf 	bl	801e58c <HAL_TIM_Base_Init>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	bf14      	ite	ne
 800e7f4:	2301      	movne	r3, #1
 800e7f6:	2300      	moveq	r3, #0
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d001      	beq.n	800e802 <_ZL13MX_TIM12_Initv+0x66>
  {
    Error_Handler();
 800e7fe:	f000 fc01 	bl	800f004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e806:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800e808:	f107 0320 	add.w	r3, r7, #32
 800e80c:	4619      	mov	r1, r3
 800e80e:	481c      	ldr	r0, [pc, #112]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e810:	f010 fe54 	bl	801f4bc <HAL_TIM_ConfigClockSource>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	bf14      	ite	ne
 800e81a:	2301      	movne	r3, #1
 800e81c:	2300      	moveq	r3, #0
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	2b00      	cmp	r3, #0
 800e822:	d001      	beq.n	800e828 <_ZL13MX_TIM12_Initv+0x8c>
  {
    Error_Handler();
 800e824:	f000 fbee 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800e828:	4815      	ldr	r0, [pc, #84]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e82a:	f010 f83a 	bl	801e8a2 <HAL_TIM_PWM_Init>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	bf14      	ite	ne
 800e834:	2301      	movne	r3, #1
 800e836:	2300      	moveq	r3, #0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <_ZL13MX_TIM12_Initv+0xa6>
  {
    Error_Handler();
 800e83e:	f000 fbe1 	bl	800f004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e842:	2360      	movs	r3, #96	; 0x60
 800e844:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e846:	2300      	movs	r3, #0
 800e848:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e84a:	2300      	movs	r3, #0
 800e84c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e84e:	2300      	movs	r3, #0
 800e850:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e852:	1d3b      	adds	r3, r7, #4
 800e854:	2200      	movs	r2, #0
 800e856:	4619      	mov	r1, r3
 800e858:	4809      	ldr	r0, [pc, #36]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e85a:	f010 fd1b 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	bf14      	ite	ne
 800e864:	2301      	movne	r3, #1
 800e866:	2300      	moveq	r3, #0
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d001      	beq.n	800e872 <_ZL13MX_TIM12_Initv+0xd6>
  {
    Error_Handler();
 800e86e:	f000 fbc9 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800e872:	4803      	ldr	r0, [pc, #12]	; (800e880 <_ZL13MX_TIM12_Initv+0xe4>)
 800e874:	f006 fa0e 	bl	8014c94 <HAL_TIM_MspPostInit>

}
 800e878:	bf00      	nop
 800e87a:	3730      	adds	r7, #48	; 0x30
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	24001344 	.word	0x24001344
 800e884:	40001800 	.word	0x40001800

0800e888 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800e88c:	4b10      	ldr	r3, [pc, #64]	; (800e8d0 <_ZL13MX_TIM13_Initv+0x48>)
 800e88e:	4a11      	ldr	r2, [pc, #68]	; (800e8d4 <_ZL13MX_TIM13_Initv+0x4c>)
 800e890:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800e892:	4b0f      	ldr	r3, [pc, #60]	; (800e8d0 <_ZL13MX_TIM13_Initv+0x48>)
 800e894:	2200      	movs	r2, #0
 800e896:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e898:	4b0d      	ldr	r3, [pc, #52]	; (800e8d0 <_ZL13MX_TIM13_Initv+0x48>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800e89e:	4b0c      	ldr	r3, [pc, #48]	; (800e8d0 <_ZL13MX_TIM13_Initv+0x48>)
 800e8a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8a4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e8a6:	4b0a      	ldr	r3, [pc, #40]	; (800e8d0 <_ZL13MX_TIM13_Initv+0x48>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e8ac:	4b08      	ldr	r3, [pc, #32]	; (800e8d0 <_ZL13MX_TIM13_Initv+0x48>)
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800e8b2:	4807      	ldr	r0, [pc, #28]	; (800e8d0 <_ZL13MX_TIM13_Initv+0x48>)
 800e8b4:	f00f fe6a 	bl	801e58c <HAL_TIM_Base_Init>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	bf14      	ite	ne
 800e8be:	2301      	movne	r3, #1
 800e8c0:	2300      	moveq	r3, #0
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d001      	beq.n	800e8cc <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 800e8c8:	f000 fb9c 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800e8cc:	bf00      	nop
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	24001390 	.word	0x24001390
 800e8d4:	40001c00 	.word	0x40001c00

0800e8d8 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800e8dc:	4b10      	ldr	r3, [pc, #64]	; (800e920 <_ZL13MX_TIM14_Initv+0x48>)
 800e8de:	4a11      	ldr	r2, [pc, #68]	; (800e924 <_ZL13MX_TIM14_Initv+0x4c>)
 800e8e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800e8e2:	4b0f      	ldr	r3, [pc, #60]	; (800e920 <_ZL13MX_TIM14_Initv+0x48>)
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e8e8:	4b0d      	ldr	r3, [pc, #52]	; (800e920 <_ZL13MX_TIM14_Initv+0x48>)
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800e8ee:	4b0c      	ldr	r3, [pc, #48]	; (800e920 <_ZL13MX_TIM14_Initv+0x48>)
 800e8f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8f4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e8f6:	4b0a      	ldr	r3, [pc, #40]	; (800e920 <_ZL13MX_TIM14_Initv+0x48>)
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e8fc:	4b08      	ldr	r3, [pc, #32]	; (800e920 <_ZL13MX_TIM14_Initv+0x48>)
 800e8fe:	2200      	movs	r2, #0
 800e900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800e902:	4807      	ldr	r0, [pc, #28]	; (800e920 <_ZL13MX_TIM14_Initv+0x48>)
 800e904:	f00f fe42 	bl	801e58c <HAL_TIM_Base_Init>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	bf14      	ite	ne
 800e90e:	2301      	movne	r3, #1
 800e910:	2300      	moveq	r3, #0
 800e912:	b2db      	uxtb	r3, r3
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 800e918:	f000 fb74 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800e91c:	bf00      	nop
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	240013dc 	.word	0x240013dc
 800e924:	40002000 	.word	0x40002000

0800e928 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b088      	sub	sp, #32
 800e92c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e92e:	f107 0310 	add.w	r3, r7, #16
 800e932:	2200      	movs	r2, #0
 800e934:	601a      	str	r2, [r3, #0]
 800e936:	605a      	str	r2, [r3, #4]
 800e938:	609a      	str	r2, [r3, #8]
 800e93a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e93c:	1d3b      	adds	r3, r7, #4
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
 800e942:	605a      	str	r2, [r3, #4]
 800e944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800e946:	4b26      	ldr	r3, [pc, #152]	; (800e9e0 <_ZL13MX_TIM15_Initv+0xb8>)
 800e948:	4a26      	ldr	r2, [pc, #152]	; (800e9e4 <_ZL13MX_TIM15_Initv+0xbc>)
 800e94a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800e94c:	4b24      	ldr	r3, [pc, #144]	; (800e9e0 <_ZL13MX_TIM15_Initv+0xb8>)
 800e94e:	2200      	movs	r2, #0
 800e950:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e952:	4b23      	ldr	r3, [pc, #140]	; (800e9e0 <_ZL13MX_TIM15_Initv+0xb8>)
 800e954:	2200      	movs	r2, #0
 800e956:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800e958:	4b21      	ldr	r3, [pc, #132]	; (800e9e0 <_ZL13MX_TIM15_Initv+0xb8>)
 800e95a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e95e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e960:	4b1f      	ldr	r3, [pc, #124]	; (800e9e0 <_ZL13MX_TIM15_Initv+0xb8>)
 800e962:	2200      	movs	r2, #0
 800e964:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800e966:	4b1e      	ldr	r3, [pc, #120]	; (800e9e0 <_ZL13MX_TIM15_Initv+0xb8>)
 800e968:	2200      	movs	r2, #0
 800e96a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e96c:	4b1c      	ldr	r3, [pc, #112]	; (800e9e0 <_ZL13MX_TIM15_Initv+0xb8>)
 800e96e:	2200      	movs	r2, #0
 800e970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800e972:	481b      	ldr	r0, [pc, #108]	; (800e9e0 <_ZL13MX_TIM15_Initv+0xb8>)
 800e974:	f00f fe0a 	bl	801e58c <HAL_TIM_Base_Init>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	bf14      	ite	ne
 800e97e:	2301      	movne	r3, #1
 800e980:	2300      	moveq	r3, #0
 800e982:	b2db      	uxtb	r3, r3
 800e984:	2b00      	cmp	r3, #0
 800e986:	d001      	beq.n	800e98c <_ZL13MX_TIM15_Initv+0x64>
  {
    Error_Handler();
 800e988:	f000 fb3c 	bl	800f004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e98c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e990:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800e992:	f107 0310 	add.w	r3, r7, #16
 800e996:	4619      	mov	r1, r3
 800e998:	4811      	ldr	r0, [pc, #68]	; (800e9e0 <_ZL13MX_TIM15_Initv+0xb8>)
 800e99a:	f010 fd8f 	bl	801f4bc <HAL_TIM_ConfigClockSource>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	bf14      	ite	ne
 800e9a4:	2301      	movne	r3, #1
 800e9a6:	2300      	moveq	r3, #0
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <_ZL13MX_TIM15_Initv+0x8a>
  {
    Error_Handler();
 800e9ae:	f000 fb29 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800e9ba:	1d3b      	adds	r3, r7, #4
 800e9bc:	4619      	mov	r1, r3
 800e9be:	4808      	ldr	r0, [pc, #32]	; (800e9e0 <_ZL13MX_TIM15_Initv+0xb8>)
 800e9c0:	f011 fc4c 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	bf14      	ite	ne
 800e9ca:	2301      	movne	r3, #1
 800e9cc:	2300      	moveq	r3, #0
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d001      	beq.n	800e9d8 <_ZL13MX_TIM15_Initv+0xb0>
  {
    Error_Handler();
 800e9d4:	f000 fb16 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800e9d8:	bf00      	nop
 800e9da:	3720      	adds	r7, #32
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	24001428 	.word	0x24001428
 800e9e4:	40014000 	.word	0x40014000

0800e9e8 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800e9ec:	4b12      	ldr	r3, [pc, #72]	; (800ea38 <_ZL13MX_TIM16_Initv+0x50>)
 800e9ee:	4a13      	ldr	r2, [pc, #76]	; (800ea3c <_ZL13MX_TIM16_Initv+0x54>)
 800e9f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800e9f2:	4b11      	ldr	r3, [pc, #68]	; (800ea38 <_ZL13MX_TIM16_Initv+0x50>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ea38 <_ZL13MX_TIM16_Initv+0x50>)
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800e9fe:	4b0e      	ldr	r3, [pc, #56]	; (800ea38 <_ZL13MX_TIM16_Initv+0x50>)
 800ea00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea04:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ea06:	4b0c      	ldr	r3, [pc, #48]	; (800ea38 <_ZL13MX_TIM16_Initv+0x50>)
 800ea08:	2200      	movs	r2, #0
 800ea0a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800ea0c:	4b0a      	ldr	r3, [pc, #40]	; (800ea38 <_ZL13MX_TIM16_Initv+0x50>)
 800ea0e:	2200      	movs	r2, #0
 800ea10:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ea12:	4b09      	ldr	r3, [pc, #36]	; (800ea38 <_ZL13MX_TIM16_Initv+0x50>)
 800ea14:	2200      	movs	r2, #0
 800ea16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800ea18:	4807      	ldr	r0, [pc, #28]	; (800ea38 <_ZL13MX_TIM16_Initv+0x50>)
 800ea1a:	f00f fdb7 	bl	801e58c <HAL_TIM_Base_Init>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	bf14      	ite	ne
 800ea24:	2301      	movne	r3, #1
 800ea26:	2300      	moveq	r3, #0
 800ea28:	b2db      	uxtb	r3, r3
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d001      	beq.n	800ea32 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 800ea2e:	f000 fae9 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800ea32:	bf00      	nop
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	24001474 	.word	0x24001474
 800ea3c:	40014400 	.word	0x40014400

0800ea40 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800ea44:	4b12      	ldr	r3, [pc, #72]	; (800ea90 <_ZL13MX_TIM17_Initv+0x50>)
 800ea46:	4a13      	ldr	r2, [pc, #76]	; (800ea94 <_ZL13MX_TIM17_Initv+0x54>)
 800ea48:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800ea4a:	4b11      	ldr	r3, [pc, #68]	; (800ea90 <_ZL13MX_TIM17_Initv+0x50>)
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ea50:	4b0f      	ldr	r3, [pc, #60]	; (800ea90 <_ZL13MX_TIM17_Initv+0x50>)
 800ea52:	2200      	movs	r2, #0
 800ea54:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800ea56:	4b0e      	ldr	r3, [pc, #56]	; (800ea90 <_ZL13MX_TIM17_Initv+0x50>)
 800ea58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea5c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ea5e:	4b0c      	ldr	r3, [pc, #48]	; (800ea90 <_ZL13MX_TIM17_Initv+0x50>)
 800ea60:	2200      	movs	r2, #0
 800ea62:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800ea64:	4b0a      	ldr	r3, [pc, #40]	; (800ea90 <_ZL13MX_TIM17_Initv+0x50>)
 800ea66:	2200      	movs	r2, #0
 800ea68:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ea6a:	4b09      	ldr	r3, [pc, #36]	; (800ea90 <_ZL13MX_TIM17_Initv+0x50>)
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800ea70:	4807      	ldr	r0, [pc, #28]	; (800ea90 <_ZL13MX_TIM17_Initv+0x50>)
 800ea72:	f00f fd8b 	bl	801e58c <HAL_TIM_Base_Init>
 800ea76:	4603      	mov	r3, r0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	bf14      	ite	ne
 800ea7c:	2301      	movne	r3, #1
 800ea7e:	2300      	moveq	r3, #0
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <_ZL13MX_TIM17_Initv+0x4a>
  {
    Error_Handler();
 800ea86:	f000 fabd 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800ea8a:	bf00      	nop
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	240014c0 	.word	0x240014c0
 800ea94:	40014800 	.word	0x40014800

0800ea98 <_ZL13MX_TIM23_Initv>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b08e      	sub	sp, #56	; 0x38
 800ea9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ea9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	601a      	str	r2, [r3, #0]
 800eaa6:	605a      	str	r2, [r3, #4]
 800eaa8:	609a      	str	r2, [r3, #8]
 800eaaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eaac:	f107 031c 	add.w	r3, r7, #28
 800eab0:	2200      	movs	r2, #0
 800eab2:	601a      	str	r2, [r3, #0]
 800eab4:	605a      	str	r2, [r3, #4]
 800eab6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800eab8:	463b      	mov	r3, r7
 800eaba:	2200      	movs	r2, #0
 800eabc:	601a      	str	r2, [r3, #0]
 800eabe:	605a      	str	r2, [r3, #4]
 800eac0:	609a      	str	r2, [r3, #8]
 800eac2:	60da      	str	r2, [r3, #12]
 800eac4:	611a      	str	r2, [r3, #16]
 800eac6:	615a      	str	r2, [r3, #20]
 800eac8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800eaca:	4b51      	ldr	r3, [pc, #324]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800eacc:	4a51      	ldr	r2, [pc, #324]	; (800ec14 <_ZL13MX_TIM23_Initv+0x17c>)
 800eace:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800ead0:	4b4f      	ldr	r3, [pc, #316]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ead6:	4b4e      	ldr	r3, [pc, #312]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800ead8:	2200      	movs	r2, #0
 800eada:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 27500 - 1;
 800eadc:	4b4c      	ldr	r3, [pc, #304]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800eade:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800eae2:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eae4:	4b4a      	ldr	r3, [pc, #296]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800eae6:	2200      	movs	r2, #0
 800eae8:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eaea:	4b49      	ldr	r3, [pc, #292]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800eaec:	2200      	movs	r2, #0
 800eaee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800eaf0:	4847      	ldr	r0, [pc, #284]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800eaf2:	f00f fd4b 	bl	801e58c <HAL_TIM_Base_Init>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	bf14      	ite	ne
 800eafc:	2301      	movne	r3, #1
 800eafe:	2300      	moveq	r3, #0
 800eb00:	b2db      	uxtb	r3, r3
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <_ZL13MX_TIM23_Initv+0x72>
  {
    Error_Handler();
 800eb06:	f000 fa7d 	bl	800f004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800eb0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800eb10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eb14:	4619      	mov	r1, r3
 800eb16:	483e      	ldr	r0, [pc, #248]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800eb18:	f010 fcd0 	bl	801f4bc <HAL_TIM_ConfigClockSource>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	bf14      	ite	ne
 800eb22:	2301      	movne	r3, #1
 800eb24:	2300      	moveq	r3, #0
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d001      	beq.n	800eb30 <_ZL13MX_TIM23_Initv+0x98>
  {
    Error_Handler();
 800eb2c:	f000 fa6a 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800eb30:	4837      	ldr	r0, [pc, #220]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800eb32:	f00f feb6 	bl	801e8a2 <HAL_TIM_PWM_Init>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	bf14      	ite	ne
 800eb3c:	2301      	movne	r3, #1
 800eb3e:	2300      	moveq	r3, #0
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d001      	beq.n	800eb4a <_ZL13MX_TIM23_Initv+0xb2>
  {
    Error_Handler();
 800eb46:	f000 fa5d 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800eb52:	f107 031c 	add.w	r3, r7, #28
 800eb56:	4619      	mov	r1, r3
 800eb58:	482d      	ldr	r0, [pc, #180]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800eb5a:	f011 fb7f 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	bf14      	ite	ne
 800eb64:	2301      	movne	r3, #1
 800eb66:	2300      	moveq	r3, #0
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d001      	beq.n	800eb72 <_ZL13MX_TIM23_Initv+0xda>
  {
    Error_Handler();
 800eb6e:	f000 fa49 	bl	800f004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800eb72:	2360      	movs	r3, #96	; 0x60
 800eb74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800eb82:	463b      	mov	r3, r7
 800eb84:	2200      	movs	r2, #0
 800eb86:	4619      	mov	r1, r3
 800eb88:	4821      	ldr	r0, [pc, #132]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800eb8a:	f010 fb83 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	bf14      	ite	ne
 800eb94:	2301      	movne	r3, #1
 800eb96:	2300      	moveq	r3, #0
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d001      	beq.n	800eba2 <_ZL13MX_TIM23_Initv+0x10a>
  {
    Error_Handler();
 800eb9e:	f000 fa31 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800eba2:	463b      	mov	r3, r7
 800eba4:	2204      	movs	r2, #4
 800eba6:	4619      	mov	r1, r3
 800eba8:	4819      	ldr	r0, [pc, #100]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800ebaa:	f010 fb73 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	bf14      	ite	ne
 800ebb4:	2301      	movne	r3, #1
 800ebb6:	2300      	moveq	r3, #0
 800ebb8:	b2db      	uxtb	r3, r3
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <_ZL13MX_TIM23_Initv+0x12a>
  {
    Error_Handler();
 800ebbe:	f000 fa21 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ebc2:	463b      	mov	r3, r7
 800ebc4:	2208      	movs	r2, #8
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4811      	ldr	r0, [pc, #68]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800ebca:	f010 fb63 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	bf14      	ite	ne
 800ebd4:	2301      	movne	r3, #1
 800ebd6:	2300      	moveq	r3, #0
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <_ZL13MX_TIM23_Initv+0x14a>
  {
    Error_Handler();
 800ebde:	f000 fa11 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ebe2:	463b      	mov	r3, r7
 800ebe4:	220c      	movs	r2, #12
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	4809      	ldr	r0, [pc, #36]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800ebea:	f010 fb53 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	bf14      	ite	ne
 800ebf4:	2301      	movne	r3, #1
 800ebf6:	2300      	moveq	r3, #0
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <_ZL13MX_TIM23_Initv+0x16a>
  {
    Error_Handler();
 800ebfe:	f000 fa01 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 800ec02:	4803      	ldr	r0, [pc, #12]	; (800ec10 <_ZL13MX_TIM23_Initv+0x178>)
 800ec04:	f006 f846 	bl	8014c94 <HAL_TIM_MspPostInit>

}
 800ec08:	bf00      	nop
 800ec0a:	3738      	adds	r7, #56	; 0x38
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	2400150c 	.word	0x2400150c
 800ec14:	4000e000 	.word	0x4000e000

0800ec18 <_ZL13MX_TIM24_Initv>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b08e      	sub	sp, #56	; 0x38
 800ec1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ec1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec22:	2200      	movs	r2, #0
 800ec24:	601a      	str	r2, [r3, #0]
 800ec26:	605a      	str	r2, [r3, #4]
 800ec28:	609a      	str	r2, [r3, #8]
 800ec2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ec2c:	f107 031c 	add.w	r3, r7, #28
 800ec30:	2200      	movs	r2, #0
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	605a      	str	r2, [r3, #4]
 800ec36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ec38:	463b      	mov	r3, r7
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	601a      	str	r2, [r3, #0]
 800ec3e:	605a      	str	r2, [r3, #4]
 800ec40:	609a      	str	r2, [r3, #8]
 800ec42:	60da      	str	r2, [r3, #12]
 800ec44:	611a      	str	r2, [r3, #16]
 800ec46:	615a      	str	r2, [r3, #20]
 800ec48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800ec4a:	4b51      	ldr	r3, [pc, #324]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ec4c:	4a51      	ldr	r2, [pc, #324]	; (800ed94 <_ZL13MX_TIM24_Initv+0x17c>)
 800ec4e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 800ec50:	4b4f      	ldr	r3, [pc, #316]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ec52:	2200      	movs	r2, #0
 800ec54:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec56:	4b4e      	ldr	r3, [pc, #312]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ec58:	2200      	movs	r2, #0
 800ec5a:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 27500 - 1;
 800ec5c:	4b4c      	ldr	r3, [pc, #304]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ec5e:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800ec62:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ec64:	4b4a      	ldr	r3, [pc, #296]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ec6a:	4b49      	ldr	r3, [pc, #292]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800ec70:	4847      	ldr	r0, [pc, #284]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ec72:	f00f fc8b 	bl	801e58c <HAL_TIM_Base_Init>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	bf14      	ite	ne
 800ec7c:	2301      	movne	r3, #1
 800ec7e:	2300      	moveq	r3, #0
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d001      	beq.n	800ec8a <_ZL13MX_TIM24_Initv+0x72>
  {
    Error_Handler();
 800ec86:	f000 f9bd 	bl	800f004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ec8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800ec90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec94:	4619      	mov	r1, r3
 800ec96:	483e      	ldr	r0, [pc, #248]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ec98:	f010 fc10 	bl	801f4bc <HAL_TIM_ConfigClockSource>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	bf14      	ite	ne
 800eca2:	2301      	movne	r3, #1
 800eca4:	2300      	moveq	r3, #0
 800eca6:	b2db      	uxtb	r3, r3
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d001      	beq.n	800ecb0 <_ZL13MX_TIM24_Initv+0x98>
  {
    Error_Handler();
 800ecac:	f000 f9aa 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
 800ecb0:	4837      	ldr	r0, [pc, #220]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ecb2:	f00f fdf6 	bl	801e8a2 <HAL_TIM_PWM_Init>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	bf14      	ite	ne
 800ecbc:	2301      	movne	r3, #1
 800ecbe:	2300      	moveq	r3, #0
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d001      	beq.n	800ecca <_ZL13MX_TIM24_Initv+0xb2>
  {
    Error_Handler();
 800ecc6:	f000 f99d 	bl	800f004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ecca:	2300      	movs	r3, #0
 800eccc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800ecd2:	f107 031c 	add.w	r3, r7, #28
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	482d      	ldr	r0, [pc, #180]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ecda:	f011 fabf 	bl	802025c <HAL_TIMEx_MasterConfigSynchronization>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	bf14      	ite	ne
 800ece4:	2301      	movne	r3, #1
 800ece6:	2300      	moveq	r3, #0
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d001      	beq.n	800ecf2 <_ZL13MX_TIM24_Initv+0xda>
  {
    Error_Handler();
 800ecee:	f000 f989 	bl	800f004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800ecf2:	2360      	movs	r3, #96	; 0x60
 800ecf4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ed02:	463b      	mov	r3, r7
 800ed04:	2200      	movs	r2, #0
 800ed06:	4619      	mov	r1, r3
 800ed08:	4821      	ldr	r0, [pc, #132]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ed0a:	f010 fac3 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	bf14      	ite	ne
 800ed14:	2301      	movne	r3, #1
 800ed16:	2300      	moveq	r3, #0
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d001      	beq.n	800ed22 <_ZL13MX_TIM24_Initv+0x10a>
  {
    Error_Handler();
 800ed1e:	f000 f971 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ed22:	463b      	mov	r3, r7
 800ed24:	2204      	movs	r2, #4
 800ed26:	4619      	mov	r1, r3
 800ed28:	4819      	ldr	r0, [pc, #100]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ed2a:	f010 fab3 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	bf14      	ite	ne
 800ed34:	2301      	movne	r3, #1
 800ed36:	2300      	moveq	r3, #0
 800ed38:	b2db      	uxtb	r3, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d001      	beq.n	800ed42 <_ZL13MX_TIM24_Initv+0x12a>
  {
    Error_Handler();
 800ed3e:	f000 f961 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ed42:	463b      	mov	r3, r7
 800ed44:	2208      	movs	r2, #8
 800ed46:	4619      	mov	r1, r3
 800ed48:	4811      	ldr	r0, [pc, #68]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ed4a:	f010 faa3 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	bf14      	ite	ne
 800ed54:	2301      	movne	r3, #1
 800ed56:	2300      	moveq	r3, #0
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <_ZL13MX_TIM24_Initv+0x14a>
  {
    Error_Handler();
 800ed5e:	f000 f951 	bl	800f004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ed62:	463b      	mov	r3, r7
 800ed64:	220c      	movs	r2, #12
 800ed66:	4619      	mov	r1, r3
 800ed68:	4809      	ldr	r0, [pc, #36]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ed6a:	f010 fa93 	bl	801f294 <HAL_TIM_PWM_ConfigChannel>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	bf14      	ite	ne
 800ed74:	2301      	movne	r3, #1
 800ed76:	2300      	moveq	r3, #0
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d001      	beq.n	800ed82 <_ZL13MX_TIM24_Initv+0x16a>
  {
    Error_Handler();
 800ed7e:	f000 f941 	bl	800f004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);
 800ed82:	4803      	ldr	r0, [pc, #12]	; (800ed90 <_ZL13MX_TIM24_Initv+0x178>)
 800ed84:	f005 ff86 	bl	8014c94 <HAL_TIM_MspPostInit>

}
 800ed88:	bf00      	nop
 800ed8a:	3738      	adds	r7, #56	; 0x38
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	24001558 	.word	0x24001558
 800ed94:	4000e400 	.word	0x4000e400

0800ed98 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800ed9e:	4b0d      	ldr	r3, [pc, #52]	; (800edd4 <_ZL11MX_DMA_Initv+0x3c>)
 800eda0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800eda4:	4a0b      	ldr	r2, [pc, #44]	; (800edd4 <_ZL11MX_DMA_Initv+0x3c>)
 800eda6:	f043 0301 	orr.w	r3, r3, #1
 800edaa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800edae:	4b09      	ldr	r3, [pc, #36]	; (800edd4 <_ZL11MX_DMA_Initv+0x3c>)
 800edb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800edb4:	f003 0301 	and.w	r3, r3, #1
 800edb8:	607b      	str	r3, [r7, #4]
 800edba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800edbc:	2200      	movs	r2, #0
 800edbe:	2100      	movs	r1, #0
 800edc0:	200c      	movs	r0, #12
 800edc2:	f008 fc34 	bl	801762e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800edc6:	200c      	movs	r0, #12
 800edc8:	f008 fc4b 	bl	8017662 <HAL_NVIC_EnableIRQ>

}
 800edcc:	bf00      	nop
 800edce:	3708      	adds	r7, #8
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	58024400 	.word	0x58024400

0800edd8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b08c      	sub	sp, #48	; 0x30
 800eddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800edde:	f107 031c 	add.w	r3, r7, #28
 800ede2:	2200      	movs	r2, #0
 800ede4:	601a      	str	r2, [r3, #0]
 800ede6:	605a      	str	r2, [r3, #4]
 800ede8:	609a      	str	r2, [r3, #8]
 800edea:	60da      	str	r2, [r3, #12]
 800edec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800edee:	4b7e      	ldr	r3, [pc, #504]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800edf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800edf4:	4a7c      	ldr	r2, [pc, #496]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800edf6:	f043 0304 	orr.w	r3, r3, #4
 800edfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800edfe:	4b7a      	ldr	r3, [pc, #488]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee04:	f003 0304 	and.w	r3, r3, #4
 800ee08:	61bb      	str	r3, [r7, #24]
 800ee0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800ee0c:	4b76      	ldr	r3, [pc, #472]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee12:	4a75      	ldr	r2, [pc, #468]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee14:	f043 0320 	orr.w	r3, r3, #32
 800ee18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee1c:	4b72      	ldr	r3, [pc, #456]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee22:	f003 0320 	and.w	r3, r3, #32
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ee2a:	4b6f      	ldr	r3, [pc, #444]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee30:	4a6d      	ldr	r2, [pc, #436]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee3a:	4b6b      	ldr	r3, [pc, #428]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee44:	613b      	str	r3, [r7, #16]
 800ee46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee48:	4b67      	ldr	r3, [pc, #412]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee4e:	4a66      	ldr	r2, [pc, #408]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee50:	f043 0301 	orr.w	r3, r3, #1
 800ee54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee58:	4b63      	ldr	r3, [pc, #396]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee5e:	f003 0301 	and.w	r3, r3, #1
 800ee62:	60fb      	str	r3, [r7, #12]
 800ee64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ee66:	4b60      	ldr	r3, [pc, #384]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee6c:	4a5e      	ldr	r2, [pc, #376]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee6e:	f043 0302 	orr.w	r3, r3, #2
 800ee72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee76:	4b5c      	ldr	r3, [pc, #368]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee7c:	f003 0302 	and.w	r3, r3, #2
 800ee80:	60bb      	str	r3, [r7, #8]
 800ee82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800ee84:	4b58      	ldr	r3, [pc, #352]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee8a:	4a57      	ldr	r2, [pc, #348]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee8c:	f043 0310 	orr.w	r3, r3, #16
 800ee90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee94:	4b54      	ldr	r3, [pc, #336]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800ee96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee9a:	f003 0310 	and.w	r3, r3, #16
 800ee9e:	607b      	str	r3, [r7, #4]
 800eea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800eea2:	4b51      	ldr	r3, [pc, #324]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800eea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eea8:	4a4f      	ldr	r2, [pc, #316]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800eeaa:	f043 0308 	orr.w	r3, r3, #8
 800eeae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800eeb2:	4b4d      	ldr	r3, [pc, #308]	; (800efe8 <_ZL12MX_GPIO_Initv+0x210>)
 800eeb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800eeb8:	f003 0308 	and.w	r3, r3, #8
 800eebc:	603b      	str	r3, [r7, #0]
 800eebe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800eec0:	2200      	movs	r2, #0
 800eec2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800eec6:	4849      	ldr	r0, [pc, #292]	; (800efec <_ZL12MX_GPIO_Initv+0x214>)
 800eec8:	f00b ffd6 	bl	801ae78 <HAL_GPIO_WritePin>
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|SENSOR_OPEN_COLLECTOR_5_Pin, GPIO_PIN_RESET);
 800eecc:	2200      	movs	r2, #0
 800eece:	21c0      	movs	r1, #192	; 0xc0
 800eed0:	4847      	ldr	r0, [pc, #284]	; (800eff0 <_ZL12MX_GPIO_Initv+0x218>)
 800eed2:	f00b ffd1 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800eed6:	2200      	movs	r2, #0
 800eed8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800eedc:	4845      	ldr	r0, [pc, #276]	; (800eff4 <_ZL12MX_GPIO_Initv+0x21c>)
 800eede:	f00b ffcb 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_OPEN_COLLECTOR_6_GPIO_Port, SENSOR_OPEN_COLLECTOR_6_Pin, GPIO_PIN_RESET);
 800eee2:	2200      	movs	r2, #0
 800eee4:	2180      	movs	r1, #128	; 0x80
 800eee6:	4844      	ldr	r0, [pc, #272]	; (800eff8 <_ZL12MX_GPIO_Initv+0x220>)
 800eee8:	f00b ffc6 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800eeec:	2201      	movs	r2, #1
 800eeee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eef2:	4841      	ldr	r0, [pc, #260]	; (800eff8 <_ZL12MX_GPIO_Initv+0x220>)
 800eef4:	f00b ffc0 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800eef8:	2200      	movs	r2, #0
 800eefa:	2102      	movs	r1, #2
 800eefc:	483f      	ldr	r0, [pc, #252]	; (800effc <_ZL12MX_GPIO_Initv+0x224>)
 800eefe:	f00b ffbb 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_1_Pin SENSOR_OPEN_COLLECTOR_2_Pin SENSOR_OPEN_COLLECTOR_3_Pin SENSOR_OPEN_COLLECTOR_7_Pin
                           SENSOR_OPEN_COLLECTOR_8_Pin SENSOR_OPEN_COLLECTOR_9_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800ef02:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800ef06:	61fb      	str	r3, [r7, #28]
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ef0c:	2302      	movs	r3, #2
 800ef0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef10:	2300      	movs	r3, #0
 800ef12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ef14:	f107 031c 	add.w	r3, r7, #28
 800ef18:	4619      	mov	r1, r3
 800ef1a:	4834      	ldr	r0, [pc, #208]	; (800efec <_ZL12MX_GPIO_Initv+0x214>)
 800ef1c:	f00b fdec 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ef20:	2340      	movs	r3, #64	; 0x40
 800ef22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef24:	2301      	movs	r3, #1
 800ef26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ef30:	f107 031c 	add.w	r3, r7, #28
 800ef34:	4619      	mov	r1, r3
 800ef36:	482e      	ldr	r0, [pc, #184]	; (800eff0 <_ZL12MX_GPIO_Initv+0x218>)
 800ef38:	f00b fdde 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_OPEN_COLLECTOR_5_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_5_Pin;
 800ef3c:	2380      	movs	r3, #128	; 0x80
 800ef3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef40:	2301      	movs	r3, #1
 800ef42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ef44:	2302      	movs	r3, #2
 800ef46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SENSOR_OPEN_COLLECTOR_5_GPIO_Port, &GPIO_InitStruct);
 800ef4c:	f107 031c 	add.w	r3, r7, #28
 800ef50:	4619      	mov	r1, r3
 800ef52:	4827      	ldr	r0, [pc, #156]	; (800eff0 <_ZL12MX_GPIO_Initv+0x218>)
 800ef54:	f00b fdd0 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACTUATOR_24V_1_Pin ACTUATOR_24V_3_Pin ACTUATOR_24V_2_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_24V_1_Pin|ACTUATOR_24V_3_Pin|ACTUATOR_24V_2_Pin;
 800ef58:	230e      	movs	r3, #14
 800ef5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ef60:	2302      	movs	r3, #2
 800ef62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ef64:	f107 031c 	add.w	r3, r7, #28
 800ef68:	4619      	mov	r1, r3
 800ef6a:	4820      	ldr	r0, [pc, #128]	; (800efec <_ZL12MX_GPIO_Initv+0x214>)
 800ef6c:	f00b fdc4 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ef70:	2340      	movs	r3, #64	; 0x40
 800ef72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ef74:	2303      	movs	r3, #3
 800ef76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef7c:	f107 031c 	add.w	r3, r7, #28
 800ef80:	4619      	mov	r1, r3
 800ef82:	481f      	ldr	r0, [pc, #124]	; (800f000 <_ZL12MX_GPIO_Initv+0x228>)
 800ef84:	f00b fdb8 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800ef88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ef92:	2302      	movs	r3, #2
 800ef94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ef96:	2300      	movs	r3, #0
 800ef98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ef9a:	f107 031c 	add.w	r3, r7, #28
 800ef9e:	4619      	mov	r1, r3
 800efa0:	4814      	ldr	r0, [pc, #80]	; (800eff4 <_ZL12MX_GPIO_Initv+0x21c>)
 800efa2:	f00b fda9 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_6_Pin OE_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_6_Pin|OE_Pin;
 800efa6:	f44f 7320 	mov.w	r3, #640	; 0x280
 800efaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800efac:	2301      	movs	r3, #1
 800efae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800efb0:	2302      	movs	r3, #2
 800efb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800efb4:	2300      	movs	r3, #0
 800efb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800efb8:	f107 031c 	add.w	r3, r7, #28
 800efbc:	4619      	mov	r1, r3
 800efbe:	480e      	ldr	r0, [pc, #56]	; (800eff8 <_ZL12MX_GPIO_Initv+0x220>)
 800efc0:	f00b fd9a 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800efc4:	2302      	movs	r3, #2
 800efc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800efc8:	2301      	movs	r3, #1
 800efca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800efcc:	2300      	movs	r3, #0
 800efce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800efd0:	2300      	movs	r3, #0
 800efd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800efd4:	f107 031c 	add.w	r3, r7, #28
 800efd8:	4619      	mov	r1, r3
 800efda:	4808      	ldr	r0, [pc, #32]	; (800effc <_ZL12MX_GPIO_Initv+0x224>)
 800efdc:	f00b fd8c 	bl	801aaf8 <HAL_GPIO_Init>

}
 800efe0:	bf00      	nop
 800efe2:	3730      	adds	r7, #48	; 0x30
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}
 800efe8:	58024400 	.word	0x58024400
 800efec:	58020800 	.word	0x58020800
 800eff0:	58021400 	.word	0x58021400
 800eff4:	58020c00 	.word	0x58020c00
 800eff8:	58020400 	.word	0x58020400
 800effc:	58021000 	.word	0x58021000
 800f000:	58020000 	.word	0x58020000

0800f004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f004:	b480      	push	{r7}
 800f006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800f008:	b672      	cpsid	i
}
 800f00a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f00c:	e7fe      	b.n	800f00c <Error_Handler+0x8>

0800f00e <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800f00e:	b580      	push	{r7, lr}
 800f010:	b082      	sub	sp, #8
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	f7fd fd43 	bl	800caa4 <_ZNKSt14_Function_base8_M_emptyEv>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d001      	beq.n	800f028 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 800f024:	f011 fb45 	bl	80206b2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	68db      	ldr	r3, [r3, #12]
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	4610      	mov	r0, r2
 800f030:	4798      	blx	r3
 800f032:	bf00      	nop
    }
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b082      	sub	sp, #8
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4618      	mov	r0, r3
 800f046:	f7fd fd0c 	bl	800ca62 <_ZNSt14_Function_baseC1Ev>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4618      	mov	r0, r3
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800f054:	b580      	push	{r7, lr}
 800f056:	b082      	sub	sp, #8
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800f05e:	6838      	ldr	r0, [r7, #0]
 800f060:	f000 fbe5 	bl	800f82e <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>
 800f064:	4603      	mov	r3, r0
 800f066:	4619      	mov	r1, r3
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f000 fbeb 	bl	800f844 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800f06e:	bf00      	nop
 800f070:	3708      	adds	r7, #8
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 800f076:	b580      	push	{r7, lr}
 800f078:	b086      	sub	sp, #24
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
 800f07e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800f080:	f107 0308 	add.w	r3, r7, #8
 800f084:	6839      	ldr	r1, [r7, #0]
 800f086:	4618      	mov	r0, r3
 800f088:	f000 fc0e 	bl	800f8a8 <_ZNSt8functionIFvvEEC1ERKS1_>
 800f08c:	f107 0308 	add.w	r3, r7, #8
 800f090:	6879      	ldr	r1, [r7, #4]
 800f092:	4618      	mov	r0, r3
 800f094:	f000 fc2a 	bl	800f8ec <_ZNSt8functionIFvvEE4swapERS1_>
 800f098:	f107 0308 	add.w	r3, r7, #8
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fd fd6d 	bl	800cb7c <_ZNSt8functionIFvvEED1Ev>
	return *this;
 800f0a2:	687b      	ldr	r3, [r7, #4]
      }
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3718      	adds	r7, #24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	f107 030c 	add.w	r3, r7, #12
 800f0ba:	4611      	mov	r1, r2
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f000 fc36 	bl	800f92e <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3710      	adds	r7, #16
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	1d1a      	adds	r2, r3, #4
 800f0d8:	f107 030c 	add.w	r3, r7, #12
 800f0dc:	4611      	mov	r1, r2
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f000 fc25 	bl	800f92e <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <_ZNKSt6vectorIjSaIjEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800f0ee:	b480      	push	{r7}
 800f0f0:	b083      	sub	sp, #12
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	685a      	ldr	r2, [r3, #4]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	1ad3      	subs	r3, r2, r3
 800f100:	109b      	asrs	r3, r3, #2
 800f102:	4618      	mov	r0, r3
 800f104:	370c      	adds	r7, #12
 800f106:	46bd      	mov	sp, r7
 800f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10c:	4770      	bx	lr

0800f10e <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800f10e:	b480      	push	{r7}
 800f110:	b083      	sub	sp, #12
 800f112:	af00      	add	r7, sp, #0
 800f114:	6078      	str	r0, [r7, #4]
 800f116:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4413      	add	r3, r2
      }
 800f122:	4618      	mov	r0, r3
 800f124:	370c      	adds	r7, #12
 800f126:	46bd      	mov	sp, r7
 800f128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12c:	4770      	bx	lr

0800f12e <_ZNSt6vectorIjSaIjEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800f12e:	b480      	push	{r7}
 800f130:	b083      	sub	sp, #12
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	009b      	lsls	r3, r3, #2
 800f140:	4413      	add	r3, r2
      }
 800f142:	4618      	mov	r0, r3
 800f144:	370c      	adds	r7, #12
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr

0800f14e <_ZNSt12_Vector_baseIjSaIjEEC1Ev>:
      _Vector_base() = default;
 800f14e:	b580      	push	{r7, lr}
 800f150:	b082      	sub	sp, #8
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	4618      	mov	r0, r3
 800f15a:	f000 fbf8 	bl	800f94e <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implC1Ev>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4618      	mov	r0, r3
 800f162:	3708      	adds	r7, #8
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <_ZNSt6vectorIjSaIjEEC1Ev>:
      vector() = default;
 800f168:	b580      	push	{r7, lr}
 800f16a:	b082      	sub	sp, #8
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	4618      	mov	r0, r3
 800f174:	f7ff ffeb 	bl	800f14e <_ZNSt12_Vector_baseIjSaIjEEC1Ev>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4618      	mov	r0, r3
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      _Vector_base() = default;
 800f182:	b580      	push	{r7, lr}
 800f184:	b082      	sub	sp, #8
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4618      	mov	r0, r3
 800f18e:	f000 fbee 	bl	800f96e <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4618      	mov	r0, r3
 800f196:	3708      	adds	r7, #8
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <_ZNSt6vectorIPvSaIS0_EEC1Ev>:
      vector() = default;
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b082      	sub	sp, #8
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7ff ffeb 	bl	800f182 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3708      	adds	r7, #8
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <_ZN13StreamMessageC1IfJEEEPT_DpPT0_>:
	StreamMessage(Arg1* arg1, Rest*... args){
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b082      	sub	sp, #8
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	6039      	str	r1, [r7, #0]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	601a      	str	r2, [r3, #0]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7ff ffcc 	bl	800f168 <_ZNSt6vectorIjSaIjEEC1Ev>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	3310      	adds	r3, #16
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7ff ffe1 	bl	800f19c <_ZNSt6vectorIPvSaIS0_EEC1Ev>
		build(arg1, args...);
 800f1da:	6839      	ldr	r1, [r7, #0]
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 fbd6 	bl	800f98e <_ZN13StreamMessage5buildIfJEEEvPT_DpPT0_>
	}
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3708      	adds	r7, #8
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <_ZN13StreamMessageC1IN9DigitalIn14DigitalInStateEJEEEPT_DpPT0_>:
	StreamMessage(Arg1* arg1, Rest*... args){
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	601a      	str	r2, [r3, #0]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	3304      	adds	r3, #4
 800f200:	4618      	mov	r0, r3
 800f202:	f7ff ffb1 	bl	800f168 <_ZNSt6vectorIjSaIjEEC1Ev>
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	3310      	adds	r3, #16
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7ff ffc6 	bl	800f19c <_ZNSt6vectorIPvSaIS0_EEC1Ev>
		build(arg1, args...);
 800f210:	6839      	ldr	r1, [r7, #0]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fbde 	bl	800f9d4 <_ZN13StreamMessage5buildIN9DigitalIn14DigitalInStateEJEEEvPT_DpPT0_>
	}
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <_ZN13StreamMessageC1IfJfEEEPT_DpPT0_>:
	StreamMessage(Arg1* arg1, Rest*... args){
 800f222:	b580      	push	{r7, lr}
 800f224:	b084      	sub	sp, #16
 800f226:	af00      	add	r7, sp, #0
 800f228:	60f8      	str	r0, [r7, #12]
 800f22a:	60b9      	str	r1, [r7, #8]
 800f22c:	607a      	str	r2, [r7, #4]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2200      	movs	r2, #0
 800f232:	601a      	str	r2, [r3, #0]
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	3304      	adds	r3, #4
 800f238:	4618      	mov	r0, r3
 800f23a:	f7ff ff95 	bl	800f168 <_ZNSt6vectorIjSaIjEEC1Ev>
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	3310      	adds	r3, #16
 800f242:	4618      	mov	r0, r3
 800f244:	f7ff ffaa 	bl	800f19c <_ZNSt6vectorIPvSaIS0_EEC1Ev>
		build(arg1, args...);
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	68b9      	ldr	r1, [r7, #8]
 800f24c:	68f8      	ldr	r0, [r7, #12]
 800f24e:	f000 fbe4 	bl	800fa1a <_ZN13StreamMessage5buildIfJfEEEvPT_DpPT0_>
	}
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	4618      	mov	r0, r3
 800f256:	3710      	adds	r7, #16
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800f25c:	b5b0      	push	{r4, r5, r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800f266:	687c      	ldr	r4, [r7, #4]
 800f268:	6838      	ldr	r0, [r7, #0]
 800f26a:	f000 fbfd 	bl	800fa68 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800f26e:	4603      	mov	r3, r0
 800f270:	461a      	mov	r2, r3
 800f272:	4629      	mov	r1, r5
 800f274:	4620      	mov	r0, r4
 800f276:	f000 fc13 	bl	800faa0 <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4618      	mov	r0, r3
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	bdb0      	pop	{r4, r5, r7, pc}

0800f284 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 fc1c 	bl	800faca <_ZNSaIP13StreamMessageEC1Ev>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4618      	mov	r0, r3
 800f296:	f000 fc24 	bl	800fae2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	4618      	mov	r0, r3
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <_ZNSaIP13StreamMessageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800f2a4:	b480      	push	{r7}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	370c      	adds	r7, #12
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b8:	4770      	bx	lr

0800f2ba <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800f2ba:	b580      	push	{r7, lr}
 800f2bc:	b082      	sub	sp, #8
 800f2be:	af00      	add	r7, sp, #0
 800f2c0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	689a      	ldr	r2, [r3, #8]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	1ad3      	subs	r3, r2, r3
 800f2d0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f000 fc18 	bl	800fb0a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      }
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7fd ff3e 	bl	800d15e <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800f2ec:	b5b0      	push	{r4, r5, r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681c      	ldr	r4, [r3, #0]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 fc16 	bl	800fb30 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 800f304:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800f306:	461a      	mov	r2, r3
 800f308:	4629      	mov	r1, r5
 800f30a:	4620      	mov	r0, r4
 800f30c:	f000 fc1b 	bl	800fb46 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>
      }
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	4618      	mov	r0, r3
 800f314:	f7ff ffd1 	bl	800f2ba <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	4618      	mov	r0, r3
 800f31c:	3708      	adds	r7, #8
 800f31e:	46bd      	mov	sp, r7
 800f320:	bdb0      	pop	{r4, r5, r7, pc}

0800f322 <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800f322:	b580      	push	{r7, lr}
 800f324:	b082      	sub	sp, #8
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800f32c:	6838      	ldr	r0, [r7, #0]
 800f32e:	f000 fc18 	bl	800fb62 <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>
 800f332:	4603      	mov	r3, r0
 800f334:	4619      	mov	r1, r3
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 fc1e 	bl	800fb78 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800f33c:	bf00      	nop
 800f33e:	3708      	adds	r7, #8
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	f107 030c 	add.w	r3, r7, #12
 800f352:	4611      	mov	r1, r2
 800f354:	4618      	mov	r0, r3
 800f356:	f000 fc41 	bl	800fbdc <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	4618      	mov	r0, r3
 800f35e:	3710      	adds	r7, #16
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800f364:	b580      	push	{r7, lr}
 800f366:	b084      	sub	sp, #16
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	1d1a      	adds	r2, r3, #4
 800f370:	f107 030c 	add.w	r3, r7, #12
 800f374:	4611      	mov	r1, r2
 800f376:	4618      	mov	r0, r3
 800f378:	f000 fc30 	bl	800fbdc <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	4618      	mov	r0, r3
 800f380:	3710      	adds	r7, #16
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 800f386:	b580      	push	{r7, lr}
 800f388:	b082      	sub	sp, #8
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	6078      	str	r0, [r7, #4]
 800f38e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	685a      	ldr	r2, [r3, #4]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	689b      	ldr	r3, [r3, #8]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d00c      	beq.n	800f3b6 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	683a      	ldr	r2, [r7, #0]
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	f000 fc3e 	bl	800fc26 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	1d1a      	adds	r2, r3, #4
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	605a      	str	r2, [r3, #4]
      }
 800f3b4:	e008      	b.n	800f3c8 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f7ff ffd4 	bl	800f364 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	683a      	ldr	r2, [r7, #0]
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 fc42 	bl	800fc4c <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800f3c8:	bf00      	nop
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessageEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800f3d0:	b590      	push	{r4, r7, lr}
 800f3d2:	b083      	sub	sp, #12
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fd fb40 	bl	800ca62 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800f3e2:	463b      	mov	r3, r7
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f000 fcad 	bl	800fd44 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d00f      	beq.n	800f410 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessageEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800f3f0:	687c      	ldr	r4, [r7, #4]
 800f3f2:	463b      	mov	r3, r7
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f000 fcb0 	bl	800fd5a <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	4620      	mov	r0, r4
 800f400:	f000 fcb6 	bl	800fd70 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4a05      	ldr	r2, [pc, #20]	; (800f41c <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessageEUlvE_vvEET_+0x4c>)
 800f408:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4a04      	ldr	r2, [pc, #16]	; (800f420 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessageEUlvE_vvEET_+0x50>)
 800f40e:	609a      	str	r2, [r3, #8]
      }
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4618      	mov	r0, r3
 800f414:	370c      	adds	r7, #12
 800f416:	46bd      	mov	sp, r7
 800f418:	bd90      	pop	{r4, r7, pc}
 800f41a:	bf00      	nop
 800f41c:	0800fd95 	.word	0x0800fd95
 800f420:	0800fdb3 	.word	0x0800fdb3

0800f424 <_ZNKSt8optionalIP13StreamMessageEcvbEv>:
      constexpr explicit operator bool() const noexcept
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7fd ffca 	bl	800d3c6 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800f432:	4603      	mov	r3, r0
 800f434:	4618      	mov	r0, r3
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4618      	mov	r0, r3
 800f448:	f000 fcd2 	bl	800fdf0 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>
 800f44c:	4603      	mov	r3, r0
      }
 800f44e:	4618      	mov	r0, r3
 800f450:	3708      	adds	r7, #8
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}

0800f456 <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800f456:	b580      	push	{r7, lr}
 800f458:	b084      	sub	sp, #16
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	f107 030c 	add.w	r3, r7, #12
 800f464:	4611      	mov	r1, r2
 800f466:	4618      	mov	r0, r3
 800f468:	f000 fccd 	bl	800fe06 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}

0800f476 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800f476:	b580      	push	{r7, lr}
 800f478:	b084      	sub	sp, #16
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	1d1a      	adds	r2, r3, #4
 800f482:	f107 030c 	add.w	r3, r7, #12
 800f486:	4611      	mov	r1, r2
 800f488:	4618      	mov	r0, r3
 800f48a:	f000 fcbc 	bl	800fe06 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	4618      	mov	r0, r3
 800f492:	3710      	adds	r7, #16
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800f498:	b580      	push	{r7, lr}
 800f49a:	b082      	sub	sp, #8
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 fcd0 	bl	800fe46 <_ZNSaIP5FieldIJEEED1Ev>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}

0800f4b0 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>:
      _Vector_base() = default;
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f000 fcb3 	bl	800fe26 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3708      	adds	r7, #8
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}

0800f4ca <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>:
      vector() = default;
 800f4ca:	b580      	push	{r7, lr}
 800f4cc:	b082      	sub	sp, #8
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7ff ffeb 	bl	800f4b0 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 800f4e4:	b590      	push	{r4, r7, lr}
 800f4e6:	b085      	sub	sp, #20
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	607a      	str	r2, [r7, #4]
 800f4ee:	603b      	str	r3, [r7, #0]
 800f4f0:	460b      	mov	r3, r1
 800f4f2:	817b      	strh	r3, [r7, #10]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	601a      	str	r2, [r3, #0]
 800f4fa:	897a      	ldrh	r2, [r7, #10]
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	809a      	strh	r2, [r3, #4]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	3308      	adds	r3, #8
 800f504:	4618      	mov	r0, r3
 800f506:	f7ff ffe0 	bl	800f4ca <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	615a      	str	r2, [r3, #20]
        build(fields...);
 800f510:	6839      	ldr	r1, [r7, #0]
 800f512:	68f8      	ldr	r0, [r7, #12]
 800f514:	f000 fcd6 	bl	800fec4 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 800f518:	68fc      	ldr	r4, [r7, #12]
 800f51a:	f107 030a 	add.w	r3, r7, #10
 800f51e:	4619      	mov	r1, r3
 800f520:	4804      	ldr	r0, [pc, #16]	; (800f534 <_ZN6PacketC1IJhEEEtPFvvEDpPT_+0x50>)
 800f522:	f000 fcf3 	bl	800ff0c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 800f526:	4603      	mov	r3, r0
 800f528:	601c      	str	r4, [r3, #0]
    }
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	4618      	mov	r0, r3
 800f52e:	3714      	adds	r7, #20
 800f530:	46bd      	mov	sp, r7
 800f532:	bd90      	pop	{r4, r7, pc}
 800f534:	24000194 	.word	0x24000194

0800f538 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 800f538:	b590      	push	{r4, r7, lr}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	607a      	str	r2, [r7, #4]
 800f542:	603b      	str	r3, [r7, #0]
 800f544:	460b      	mov	r3, r1
 800f546:	817b      	strh	r3, [r7, #10]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	2200      	movs	r2, #0
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	897a      	ldrh	r2, [r7, #10]
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	809a      	strh	r2, [r3, #4]
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	3308      	adds	r3, #8
 800f558:	4618      	mov	r0, r3
 800f55a:	f7ff ffb6 	bl	800f4ca <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	615a      	str	r2, [r3, #20]
        build(fields...);
 800f564:	6a3a      	ldr	r2, [r7, #32]
 800f566:	6839      	ldr	r1, [r7, #0]
 800f568:	68f8      	ldr	r0, [r7, #12]
 800f56a:	f000 fd2b 	bl	800ffc4 <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 800f56e:	68fc      	ldr	r4, [r7, #12]
 800f570:	f107 030a 	add.w	r3, r7, #10
 800f574:	4619      	mov	r1, r3
 800f576:	4805      	ldr	r0, [pc, #20]	; (800f58c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_+0x54>)
 800f578:	f000 fcc8 	bl	800ff0c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 800f57c:	4603      	mov	r3, r0
 800f57e:	601c      	str	r4, [r3, #0]
    }
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	4618      	mov	r0, r3
 800f584:	3714      	adds	r7, #20
 800f586:	46bd      	mov	sp, r7
 800f588:	bd90      	pop	{r4, r7, pc}
 800f58a:	bf00      	nop
 800f58c:	24000194 	.word	0x24000194

0800f590 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 800f590:	b590      	push	{r4, r7, lr}
 800f592:	b085      	sub	sp, #20
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	607a      	str	r2, [r7, #4]
 800f59a:	603b      	str	r3, [r7, #0]
 800f59c:	460b      	mov	r3, r1
 800f59e:	817b      	strh	r3, [r7, #10]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	601a      	str	r2, [r3, #0]
 800f5a6:	897a      	ldrh	r2, [r7, #10]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	809a      	strh	r2, [r3, #4]
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	3308      	adds	r3, #8
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7ff ff8a 	bl	800f4ca <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	615a      	str	r2, [r3, #20]
        build(fields...);
 800f5bc:	6a3a      	ldr	r2, [r7, #32]
 800f5be:	6839      	ldr	r1, [r7, #0]
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	f000 fd27 	bl	8010014 <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 800f5c6:	68fc      	ldr	r4, [r7, #12]
 800f5c8:	f107 030a 	add.w	r3, r7, #10
 800f5cc:	4619      	mov	r1, r3
 800f5ce:	4805      	ldr	r0, [pc, #20]	; (800f5e4 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_+0x54>)
 800f5d0:	f000 fc9c 	bl	800ff0c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	601c      	str	r4, [r3, #0]
    }
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3714      	adds	r7, #20
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd90      	pop	{r4, r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	24000194 	.word	0x24000194

0800f5e8 <_ZNKSt8optionalIP3PinEcvbEv>:
      constexpr explicit operator bool() const noexcept
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7fd ffe6 	bl	800d5c2 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3708      	adds	r7, #8
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	4618      	mov	r0, r3
 800f60c:	f000 fd2a 	bl	8010064 <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>
 800f610:	4603      	mov	r3, r0
      }
 800f612:	4618      	mov	r0, r3
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b084      	sub	sp, #16
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
 800f622:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6839      	ldr	r1, [r7, #0]
 800f628:	4618      	mov	r0, r3
 800f62a:	f000 fd26 	bl	801007a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 800f62e:	4603      	mov	r3, r0
 800f630:	60bb      	str	r3, [r7, #8]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4618      	mov	r0, r3
 800f636:	f000 fd5f 	bl	80100f8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 800f63a:	4603      	mov	r3, r0
 800f63c:	60fb      	str	r3, [r7, #12]
 800f63e:	f107 020c 	add.w	r2, r7, #12
 800f642:	f107 0308 	add.w	r3, r7, #8
 800f646:	4611      	mov	r1, r2
 800f648:	4618      	mov	r0, r3
 800f64a:	f000 fd66 	bl	801011a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 800f64e:	4603      	mov	r3, r0
 800f650:	f083 0301 	eor.w	r3, r3, #1
 800f654:	b2db      	uxtb	r3, r3
 800f656:	4618      	mov	r0, r3
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}

0800f65e <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 800f65e:	b580      	push	{r7, lr}
 800f660:	b084      	sub	sp, #16
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
 800f666:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6839      	ldr	r1, [r7, #0]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f000 fd68 	bl	8010142 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 800f672:	4603      	mov	r3, r0
 800f674:	60bb      	str	r3, [r7, #8]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	4618      	mov	r0, r3
 800f67a:	f000 fda1 	bl	80101c0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 800f67e:	4603      	mov	r3, r0
 800f680:	60fb      	str	r3, [r7, #12]
 800f682:	f107 020c 	add.w	r2, r7, #12
 800f686:	f107 0308 	add.w	r3, r7, #8
 800f68a:	4611      	mov	r1, r2
 800f68c:	4618      	mov	r0, r3
 800f68e:	f000 fda8 	bl	80101e2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 800f692:	4603      	mov	r3, r0
 800f694:	f083 0301 	eor.w	r3, r3, #1
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	4618      	mov	r0, r3
 800f69c:	3710      	adds	r7, #16
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}

0800f6a2 <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 800f6a2:	b580      	push	{r7, lr}
 800f6a4:	b084      	sub	sp, #16
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
 800f6aa:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6839      	ldr	r1, [r7, #0]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f000 fdaa 	bl	801020a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	60bb      	str	r3, [r7, #8]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f000 fde3 	bl	8010288 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	60fb      	str	r3, [r7, #12]
 800f6c6:	f107 020c 	add.w	r2, r7, #12
 800f6ca:	f107 0308 	add.w	r3, r7, #8
 800f6ce:	4611      	mov	r1, r2
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f000 fdea 	bl	80102aa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	f083 0301 	eor.w	r3, r3, #1
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b084      	sub	sp, #16
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6839      	ldr	r1, [r7, #0]
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 fdec 	bl	80102d2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	60bb      	str	r3, [r7, #8]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4618      	mov	r0, r3
 800f702:	f000 fe25 	bl	8010350 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 800f706:	4603      	mov	r3, r0
 800f708:	60fb      	str	r3, [r7, #12]
 800f70a:	f107 020c 	add.w	r2, r7, #12
 800f70e:	f107 0308 	add.w	r3, r7, #8
 800f712:	4611      	mov	r1, r2
 800f714:	4618      	mov	r0, r3
 800f716:	f000 fe2c 	bl	8010372 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 800f71a:	4603      	mov	r3, r0
 800f71c:	f083 0301 	eor.w	r3, r3, #1
 800f720:	b2db      	uxtb	r3, r3
 800f722:	4618      	mov	r0, r3
 800f724:	3710      	adds	r7, #16
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 800f72a:	b580      	push	{r7, lr}
 800f72c:	b084      	sub	sp, #16
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
 800f732:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6839      	ldr	r1, [r7, #0]
 800f738:	4618      	mov	r0, r3
 800f73a:	f000 fe2e 	bl	801039a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 800f73e:	4603      	mov	r3, r0
 800f740:	60bb      	str	r3, [r7, #8]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4618      	mov	r0, r3
 800f746:	f000 fe67 	bl	8010418 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 800f74a:	4603      	mov	r3, r0
 800f74c:	60fb      	str	r3, [r7, #12]
 800f74e:	f107 020c 	add.w	r2, r7, #12
 800f752:	f107 0308 	add.w	r3, r7, #8
 800f756:	4611      	mov	r1, r2
 800f758:	4618      	mov	r0, r3
 800f75a:	f000 fe6e 	bl	801043a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 800f75e:	4603      	mov	r3, r0
 800f760:	f083 0301 	eor.w	r3, r3, #1
 800f764:	b2db      	uxtb	r3, r3
 800f766:	4618      	mov	r0, r3
 800f768:	3710      	adds	r7, #16
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800f770:	b590      	push	{r4, r7, lr}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7fd f970 	bl	800ca62 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800f782:	463b      	mov	r3, r7
 800f784:	4618      	mov	r0, r3
 800f786:	f000 fe6c 	bl	8010462 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>
 800f78a:	4603      	mov	r3, r0
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00f      	beq.n	800f7b0 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800f790:	687c      	ldr	r4, [r7, #4]
 800f792:	463b      	mov	r3, r7
 800f794:	4618      	mov	r0, r3
 800f796:	f000 fe6f 	bl	8010478 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 800f79a:	4603      	mov	r3, r0
 800f79c:	4619      	mov	r1, r3
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f000 fe75 	bl	801048e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a05      	ldr	r2, [pc, #20]	; (800f7bc <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x4c>)
 800f7a8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4a04      	ldr	r2, [pc, #16]	; (800f7c0 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x50>)
 800f7ae:	609a      	str	r2, [r3, #8]
      }
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	370c      	adds	r7, #12
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd90      	pop	{r4, r7, pc}
 800f7ba:	bf00      	nop
 800f7bc:	080104b3 	.word	0x080104b3
 800f7c0:	080104d1 	.word	0x080104d1

0800f7c4 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800f7c4:	b590      	push	{r4, r7, lr}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7fd f946 	bl	800ca62 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800f7d6:	463b      	mov	r3, r7
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f000 fe98 	bl	801050e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d00f      	beq.n	800f804 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800f7e4:	687c      	ldr	r4, [r7, #4]
 800f7e6:	463b      	mov	r3, r7
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f000 fe9b 	bl	8010524 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f000 fea1 	bl	801053a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4a05      	ldr	r2, [pc, #20]	; (800f810 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x4c>)
 800f7fc:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a04      	ldr	r2, [pc, #16]	; (800f814 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x50>)
 800f802:	609a      	str	r2, [r3, #8]
      }
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd90      	pop	{r4, r7, pc}
 800f80e:	bf00      	nop
 800f810:	0801055f 	.word	0x0801055f
 800f814:	0801057d 	.word	0x0801057d

0800f818 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800f818:	b480      	push	{r7}
 800f81a:	b083      	sub	sp, #12
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4618      	mov	r0, r3
 800f824:	370c      	adds	r7, #12
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr

0800f82e <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800f82e:	b480      	push	{r7}
 800f830:	b083      	sub	sp, #12
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4618      	mov	r0, r3
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800f844:	b5b0      	push	{r4, r5, r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	689b      	ldr	r3, [r3, #8]
 800f856:	429a      	cmp	r2, r3
 800f858:	d011      	beq.n	800f87e <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800f85a:	687c      	ldr	r4, [r7, #4]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685d      	ldr	r5, [r3, #4]
 800f860:	6838      	ldr	r0, [r7, #0]
 800f862:	f000 feaa 	bl	80105ba <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 800f866:	4603      	mov	r3, r0
 800f868:	461a      	mov	r2, r3
 800f86a:	4629      	mov	r1, r5
 800f86c:	4620      	mov	r0, r4
 800f86e:	f000 fec4 	bl	80105fa <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	1d1a      	adds	r2, r3, #4
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	605a      	str	r2, [r3, #4]
 800f87c:	e00c      	b.n	800f898 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f7ff fc24 	bl	800f0cc <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 800f884:	4604      	mov	r4, r0
 800f886:	6838      	ldr	r0, [r7, #0]
 800f888:	f000 fe97 	bl	80105ba <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 800f88c:	4603      	mov	r3, r0
 800f88e:	461a      	mov	r2, r3
 800f890:	4621      	mov	r1, r4
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 fec4 	bl	8010620 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 ff3d 	bl	8010718 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>
 800f89e:	4603      	mov	r3, r0
      }
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bdb0      	pop	{r4, r5, r7, pc}

0800f8a8 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fd f8d4 	bl	800ca62 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800f8ba:	6838      	ldr	r0, [r7, #0]
 800f8bc:	f000 ff47 	bl	801074e <_ZNKSt8functionIFvvEEcvbEv>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d00d      	beq.n	800f8e2 <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	6839      	ldr	r1, [r7, #0]
 800f8ce:	2202      	movs	r2, #2
 800f8d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	68da      	ldr	r2, [r3, #12]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	689a      	ldr	r2, [r3, #8]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	609a      	str	r2, [r3, #8]
    }
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3708      	adds	r7, #8
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}

0800f8ec <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	683a      	ldr	r2, [r7, #0]
 800f8fa:	4611      	mov	r1, r2
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f000 ff36 	bl	801076e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f103 0208 	add.w	r2, r3, #8
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	3308      	adds	r3, #8
 800f90c:	4619      	mov	r1, r3
 800f90e:	4610      	mov	r0, r2
 800f910:	f000 ff54 	bl	80107bc <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f103 020c 	add.w	r2, r3, #12
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	330c      	adds	r3, #12
 800f91e:	4619      	mov	r1, r3
 800f920:	4610      	mov	r0, r2
 800f922:	f000 ff6a 	bl	80107fa <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 800f926:	bf00      	nop
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}

0800f92e <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800f92e:	b480      	push	{r7}
 800f930:	b083      	sub	sp, #12
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
 800f936:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	601a      	str	r2, [r3, #0]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4618      	mov	r0, r3
 800f944:	370c      	adds	r7, #12
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr

0800f94e <_ZNSt12_Vector_baseIjSaIjEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800f94e:	b580      	push	{r7, lr}
 800f950:	b082      	sub	sp, #8
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 ff6e 	bl	8010838 <_ZNSaIjEC1Ev>
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	4618      	mov	r0, r3
 800f960:	f000 ff76 	bl	8010850 <_ZNSt12_Vector_baseIjSaIjEE17_Vector_impl_dataC1Ev>
	{ }
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4618      	mov	r0, r3
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}

0800f96e <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800f96e:	b580      	push	{r7, lr}
 800f970:	b082      	sub	sp, #8
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 ff9c 	bl	80108b4 <_ZNSaIPvEC1Ev>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4618      	mov	r0, r3
 800f980:	f000 ffa4 	bl	80108cc <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4618      	mov	r0, r3
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <_ZN13StreamMessage5buildIfJEEEvPT_DpPT0_>:
	void build(Arg1* arg1, Rest*... args) {
 800f98e:	b580      	push	{r7, lr}
 800f990:	b084      	sub	sp, #16
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
 800f996:	6039      	str	r1, [r7, #0]
		total_size += sizeof(Arg1);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	1d1a      	adds	r2, r3, #4
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	601a      	str	r2, [r3, #0]
		sizes.push_back(sizeof(Arg1));
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	3304      	adds	r3, #4
 800f9a6:	2204      	movs	r2, #4
 800f9a8:	60ba      	str	r2, [r7, #8]
 800f9aa:	f107 0208 	add.w	r2, r7, #8
 800f9ae:	4611      	mov	r1, r2
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f000 ffbd 	bl	8010930 <_ZNSt6vectorIjSaIjEE9push_backEOj>
		ptrs.push_back(arg1);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f103 0210 	add.w	r2, r3, #16
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	60fb      	str	r3, [r7, #12]
 800f9c0:	f107 030c 	add.w	r3, r7, #12
 800f9c4:	4619      	mov	r1, r3
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	f000 ffc3 	bl	8010952 <_ZNSt6vectorIPvSaIS0_EE9push_backEOS0_>
			return;
 800f9cc:	bf00      	nop
	}
 800f9ce:	3710      	adds	r7, #16
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <_ZN13StreamMessage5buildIN9DigitalIn14DigitalInStateEJEEEvPT_DpPT0_>:
	void build(Arg1* arg1, Rest*... args) {
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	6039      	str	r1, [r7, #0]
		total_size += sizeof(Arg1);
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	1c5a      	adds	r2, r3, #1
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	601a      	str	r2, [r3, #0]
		sizes.push_back(sizeof(Arg1));
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	3304      	adds	r3, #4
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	60ba      	str	r2, [r7, #8]
 800f9f0:	f107 0208 	add.w	r2, r7, #8
 800f9f4:	4611      	mov	r1, r2
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f000 ff9a 	bl	8010930 <_ZNSt6vectorIjSaIjEE9push_backEOj>
		ptrs.push_back(arg1);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f103 0210 	add.w	r2, r3, #16
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	60fb      	str	r3, [r7, #12]
 800fa06:	f107 030c 	add.w	r3, r7, #12
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	f000 ffa0 	bl	8010952 <_ZNSt6vectorIPvSaIS0_EE9push_backEOS0_>
			return;
 800fa12:	bf00      	nop
	}
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <_ZN13StreamMessage5buildIfJfEEEvPT_DpPT0_>:
	void build(Arg1* arg1, Rest*... args) {
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b086      	sub	sp, #24
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	60f8      	str	r0, [r7, #12]
 800fa22:	60b9      	str	r1, [r7, #8]
 800fa24:	607a      	str	r2, [r7, #4]
		total_size += sizeof(Arg1);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	1d1a      	adds	r2, r3, #4
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	601a      	str	r2, [r3, #0]
		sizes.push_back(sizeof(Arg1));
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	3304      	adds	r3, #4
 800fa34:	2204      	movs	r2, #4
 800fa36:	613a      	str	r2, [r7, #16]
 800fa38:	f107 0210 	add.w	r2, r7, #16
 800fa3c:	4611      	mov	r1, r2
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f000 ff76 	bl	8010930 <_ZNSt6vectorIjSaIjEE9push_backEOj>
		ptrs.push_back(arg1);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f103 0210 	add.w	r2, r3, #16
 800fa4a:	68bb      	ldr	r3, [r7, #8]
 800fa4c:	617b      	str	r3, [r7, #20]
 800fa4e:	f107 0314 	add.w	r3, r7, #20
 800fa52:	4619      	mov	r1, r3
 800fa54:	4610      	mov	r0, r2
 800fa56:	f000 ff7c 	bl	8010952 <_ZNSt6vectorIPvSaIS0_EE9push_backEOS0_>
			build(args...);
 800fa5a:	6879      	ldr	r1, [r7, #4]
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	f7ff ff96 	bl	800f98e <_ZN13StreamMessage5buildIfJEEEvPT_DpPT0_>
	}
 800fa62:	3718      	adds	r7, #24
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	4618      	mov	r0, r3
 800fa74:	370c      	adds	r7, #12
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr

0800fa7e <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800fa7e:	b590      	push	{r4, r7, lr}
 800fa80:	b085      	sub	sp, #20
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	60f8      	str	r0, [r7, #12]
 800fa86:	7239      	strb	r1, [r7, #8]
 800fa88:	607a      	str	r2, [r7, #4]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	4621      	mov	r1, r4
 800fa90:	4618      	mov	r0, r3
 800fa92:	f000 ff81 	bl	8010998 <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	3714      	adds	r7, #20
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	bd90      	pop	{r4, r7, pc}

0800faa0 <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800faa0:	b5b0      	push	{r4, r5, r7, lr}
 800faa2:	b084      	sub	sp, #16
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	7239      	strb	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800faac:	68fc      	ldr	r4, [r7, #12]
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7ff ffda 	bl	800fa68 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800fab4:	4603      	mov	r3, r0
 800fab6:	461a      	mov	r2, r3
 800fab8:	4629      	mov	r1, r5
 800faba:	4620      	mov	r0, r4
 800fabc:	f7ff ffdf 	bl	800fa7e <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	4618      	mov	r0, r3
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bdb0      	pop	{r4, r5, r7, pc}

0800faca <_ZNSaIP13StreamMessageEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800faca:	b580      	push	{r7, lr}
 800facc:	b082      	sub	sp, #8
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 ff78 	bl	80109c8 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4618      	mov	r0, r3
 800fadc:	3708      	adds	r7, #8
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800fae2:	b480      	push	{r7}
 800fae4:	b083      	sub	sp, #12
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2200      	movs	r2, #0
 800faee:	601a      	str	r2, [r3, #0]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2200      	movs	r2, #0
 800faf4:	605a      	str	r2, [r3, #4]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	609a      	str	r2, [r3, #8]
	{ }
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4618      	mov	r0, r3
 800fb00:	370c      	adds	r7, #12
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b084      	sub	sp, #16
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	60f8      	str	r0, [r7, #12]
 800fb12:	60b9      	str	r1, [r7, #8]
 800fb14:	607a      	str	r2, [r7, #4]
	if (__p)
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d005      	beq.n	800fb28 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	68b9      	ldr	r1, [r7, #8]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f000 ff5b 	bl	80109de <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>
      }
 800fb28:	bf00      	nop
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800fb30:	b480      	push	{r7}
 800fb32:	b083      	sub	sp, #12
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	370c      	adds	r7, #12
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr

0800fb46 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b084      	sub	sp, #16
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	60f8      	str	r0, [r7, #12]
 800fb4e:	60b9      	str	r1, [r7, #8]
 800fb50:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800fb52:	68b9      	ldr	r1, [r7, #8]
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	f000 ff61 	bl	8010a1c <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>
    }
 800fb5a:	bf00      	nop
 800fb5c:	3710      	adds	r7, #16
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800fb62:	b480      	push	{r7}
 800fb64:	b083      	sub	sp, #12
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	370c      	adds	r7, #12
 800fb70:	46bd      	mov	sp, r7
 800fb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb76:	4770      	bx	lr

0800fb78 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800fb78:	b5b0      	push	{r4, r5, r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	685a      	ldr	r2, [r3, #4]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	689b      	ldr	r3, [r3, #8]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d011      	beq.n	800fbb2 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800fb8e:	687c      	ldr	r4, [r7, #4]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	685d      	ldr	r5, [r3, #4]
 800fb94:	6838      	ldr	r0, [r7, #0]
 800fb96:	f000 ff57 	bl	8010a48 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	4629      	mov	r1, r5
 800fba0:	4620      	mov	r0, r4
 800fba2:	f000 ff71 	bl	8010a88 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	1d1a      	adds	r2, r3, #4
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	605a      	str	r2, [r3, #4]
 800fbb0:	e00c      	b.n	800fbcc <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7ff fc5f 	bl	800f476 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 800fbb8:	4604      	mov	r4, r0
 800fbba:	6838      	ldr	r0, [r7, #0]
 800fbbc:	f000 ff44 	bl	8010a48 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	4621      	mov	r1, r4
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 ff70 	bl	8010aac <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 ffe9 	bl	8010ba4 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>
 800fbd2:	4603      	mov	r3, r0
      }
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bdb0      	pop	{r4, r5, r7, pc}

0800fbdc <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800fbdc:	b480      	push	{r7}
 800fbde:	b083      	sub	sp, #12
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	601a      	str	r2, [r3, #0]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	370c      	adds	r7, #12
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800fbfc:	b590      	push	{r4, r7, lr}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800fc06:	6838      	ldr	r0, [r7, #0]
 800fc08:	f000 ffe7 	bl	8010bda <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	681c      	ldr	r4, [r3, #0]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	4619      	mov	r1, r3
 800fc14:	2004      	movs	r0, #4
 800fc16:	f7f0 fb8b 	bl	8000330 <_ZnwjPv>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	601c      	str	r4, [r3, #0]
 800fc1e:	4618      	mov	r0, r3
 800fc20:	370c      	adds	r7, #12
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd90      	pop	{r4, r7, pc}

0800fc26 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800fc26:	b580      	push	{r7, lr}
 800fc28:	b084      	sub	sp, #16
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	60f8      	str	r0, [r7, #12]
 800fc2e:	60b9      	str	r1, [r7, #8]
 800fc30:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 ffd1 	bl	8010bda <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	68b8      	ldr	r0, [r7, #8]
 800fc3e:	f7ff ffdd 	bl	800fbfc <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	}
 800fc42:	bf00      	nop
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
	...

0800fc4c <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800fc4c:	b5b0      	push	{r4, r5, r7, lr}
 800fc4e:	b08c      	sub	sp, #48	; 0x30
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800fc58:	4a39      	ldr	r2, [pc, #228]	; (800fd40 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f000 ffc7 	bl	8010bf0 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>
 800fc62:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f7ff fb67 	bl	800f344 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 800fc76:	4603      	mov	r3, r0
 800fc78:	617b      	str	r3, [r7, #20]
 800fc7a:	f107 0214 	add.w	r2, r7, #20
 800fc7e:	f107 0308 	add.w	r3, r7, #8
 800fc82:	4611      	mov	r1, r2
 800fc84:	4618      	mov	r0, r3
 800fc86:	f000 fffa 	bl	8010c7e <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc92:	4618      	mov	r0, r3
 800fc94:	f001 f808 	bl	8010ca8 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>
 800fc98:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800fc9e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800fca0:	6a3b      	ldr	r3, [r7, #32]
 800fca2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800fca4:	69fa      	ldr	r2, [r7, #28]
 800fca6:	18d5      	adds	r5, r2, r3
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 ff96 	bl	8010bda <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	4629      	mov	r1, r5
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	f7ff ffb6 	bl	800fc26 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800fcba:	2300      	movs	r3, #0
 800fcbc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800fcbe:	f107 0308 	add.w	r3, r7, #8
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fd faa4 	bl	800d210 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7ff ff2e 	bl	800fb30 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 800fcd4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800fcd6:	69fa      	ldr	r2, [r7, #28]
 800fcd8:	4621      	mov	r1, r4
 800fcda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcdc:	f000 fff8 	bl	8010cd0 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800fce0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	3304      	adds	r3, #4
 800fce6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800fce8:	f107 0308 	add.w	r3, r7, #8
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7fd fa8f 	bl	800d210 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7ff ff19 	bl	800fb30 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 800fcfe:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800fd00:	69ba      	ldr	r2, [r7, #24]
 800fd02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd04:	4620      	mov	r0, r4
 800fd06:	f000 ffe3 	bl	8010cd0 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800fd0a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800fd0c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	689a      	ldr	r2, [r3, #8]
 800fd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd14:	1ad3      	subs	r3, r2, r3
 800fd16:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800fd18:	461a      	mov	r2, r3
 800fd1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd1c:	f7ff fef5 	bl	800fb0a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	69fa      	ldr	r2, [r7, #28]
 800fd24:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	69ba      	ldr	r2, [r7, #24]
 800fd2a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800fd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd2e:	009b      	lsls	r3, r3, #2
 800fd30:	69fa      	ldr	r2, [r7, #28]
 800fd32:	441a      	add	r2, r3
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	609a      	str	r2, [r3, #8]
    }
 800fd38:	bf00      	nop
 800fd3a:	3730      	adds	r7, #48	; 0x30
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bdb0      	pop	{r4, r5, r7, pc}
 800fd40:	08020c1c 	.word	0x08020c1c

0800fd44 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
	  { return true; }
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	4618      	mov	r0, r3
 800fd50:	370c      	adds	r7, #12
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr

0800fd5a <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800fd5a:	b480      	push	{r7}
 800fd5c:	b083      	sub	sp, #12
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4618      	mov	r0, r3
 800fd66:	370c      	adds	r7, #12
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800fd70:	b590      	push	{r4, r7, lr}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800fd7a:	6838      	ldr	r0, [r7, #0]
 800fd7c:	f7ff ffed 	bl	800fd5a <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 800fd80:	4603      	mov	r3, r0
 800fd82:	4622      	mov	r2, r4
 800fd84:	4619      	mov	r1, r3
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 ffb6 	bl	8010cf8 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800fd8c:	bf00      	nop
 800fd8e:	370c      	adds	r7, #12
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd90      	pop	{r4, r7, pc}

0800fd94 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessageEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 ffc4 	bl	8010d2a <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E14_M_get_pointerERKSt9_Any_data>
 800fda2:	4603      	mov	r3, r0
 800fda4:	4618      	mov	r0, r3
 800fda6:	f000 ffd0 	bl	8010d4a <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessageEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>
				     std::forward<_ArgTypes>(__args)...);
 800fdaa:	bf00      	nop
      }
 800fdac:	3708      	adds	r7, #8
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800fdb2:	b590      	push	{r4, r7, lr}
 800fdb4:	b085      	sub	sp, #20
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	60f8      	str	r0, [r7, #12]
 800fdba:	60b9      	str	r1, [r7, #8]
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800fdc0:	79fb      	ldrb	r3, [r7, #7]
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d109      	bne.n	800fdda <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800fdc6:	68b8      	ldr	r0, [r7, #8]
 800fdc8:	f000 ffaf 	bl	8010d2a <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E14_M_get_pointerERKSt9_Any_data>
 800fdcc:	4604      	mov	r4, r0
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f000 ffcb 	bl	8010d6a <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessageEUlvE_EERT_v>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	601c      	str	r4, [r3, #0]
	    break;
 800fdd8:	e005      	b.n	800fde6 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800fdda:	79fb      	ldrb	r3, [r7, #7]
 800fddc:	461a      	mov	r2, r3
 800fdde:	68b9      	ldr	r1, [r7, #8]
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f000 ffce 	bl	8010d82 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800fde6:	2300      	movs	r3, #0
      }
 800fde8:	4618      	mov	r0, r3
 800fdea:	3714      	adds	r7, #20
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd90      	pop	{r4, r7, pc}

0800fdf0 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>:
      _M_get() noexcept
 800fdf0:	b480      	push	{r7}
 800fdf2:	b083      	sub	sp, #12
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	370c      	adds	r7, #12
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr

0800fe06 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800fe06:	b480      	push	{r7}
 800fe08:	b083      	sub	sp, #12
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
 800fe0e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	601a      	str	r2, [r3, #0]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	370c      	adds	r7, #12
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr

0800fe26 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800fe26:	b580      	push	{r7, lr}
 800fe28:	b082      	sub	sp, #8
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f000 ffd2 	bl	8010dd8 <_ZNSaIP5FieldIJEEEC1Ev>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	4618      	mov	r0, r3
 800fe38:	f000 ffda 	bl	8010df0 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3708      	adds	r7, #8
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <_ZNSaIP5FieldIJEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800fe46:	b480      	push	{r7}
 800fe48:	b083      	sub	sp, #12
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4618      	mov	r0, r3
 800fe52:	370c      	adds	r7, #12
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr

0800fe5c <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	689a      	ldr	r2, [r3, #8]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800fe74:	461a      	mov	r2, r3
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f000 ffce 	bl	8010e18 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      }
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7ff fb0a 	bl	800f498 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4618      	mov	r0, r3
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}

0800fe8e <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800fe8e:	b5b0      	push	{r4, r5, r7, lr}
 800fe90:	b082      	sub	sp, #8
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681c      	ldr	r4, [r3, #0]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4618      	mov	r0, r3
 800fea2:	f000 ffcc 	bl	8010e3e <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 800fea6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800fea8:	461a      	mov	r2, r3
 800feaa:	4629      	mov	r1, r5
 800feac:	4620      	mov	r0, r4
 800feae:	f000 ffd1 	bl	8010e54 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>
      }
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	4618      	mov	r0, r3
 800feb6:	f7ff ffd1 	bl	800fe5c <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	4618      	mov	r0, r3
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bdb0      	pop	{r4, r5, r7, pc}

0800fec4 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 800fec4:	b590      	push	{r4, r7, lr}
 800fec6:	b085      	sub	sp, #20
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	1c5a      	adds	r2, r3, #1
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 800fed8:	2008      	movs	r0, #8
 800feda:	f010 fb1d 	bl	8020518 <_Znwj>
 800fede:	4603      	mov	r3, r0
 800fee0:	461c      	mov	r4, r3
 800fee2:	6839      	ldr	r1, [r7, #0]
 800fee4:	4620      	mov	r0, r4
 800fee6:	f000 ffd3 	bl	8010e90 <_ZN5FieldIJhEEC1EPh>
 800feea:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f103 0208 	add.w	r2, r3, #8
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	60bb      	str	r3, [r7, #8]
 800fef6:	f107 0308 	add.w	r3, r7, #8
 800fefa:	4619      	mov	r1, r3
 800fefc:	4610      	mov	r0, r2
 800fefe:	f000 ffdd 	bl	8010ebc <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 800ff02:	bf00      	nop
    }
 800ff04:	3714      	adds	r7, #20
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd90      	pop	{r4, r7, pc}
	...

0800ff0c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>:
      operator[](const key_type& __k)
 800ff0c:	b590      	push	{r4, r7, lr}
 800ff0e:	b08b      	sub	sp, #44	; 0x2c
 800ff10:	af02      	add	r7, sp, #8
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800ff16:	6839      	ldr	r1, [r7, #0]
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 ffe0 	bl	8010ede <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f7f5 f933 	bl	800518e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	60fb      	str	r3, [r7, #12]
 800ff2c:	f107 020c 	add.w	r2, r7, #12
 800ff30:	f107 0308 	add.w	r3, r7, #8
 800ff34:	4611      	mov	r1, r2
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7f5 f936 	bl	80051a8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d112      	bne.n	800ff68 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 ffda 	bl	8010efc <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 800ff48:	f107 0308 	add.w	r3, r7, #8
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7f5 f950 	bl	80051f2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 800ff52:	4603      	mov	r3, r0
 800ff54:	461a      	mov	r2, r3
 800ff56:	f107 0310 	add.w	r3, r7, #16
 800ff5a:	6839      	ldr	r1, [r7, #0]
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f000 ffda 	bl	8010f16 <_ZNKSt4lessItEclERKtS2_>
 800ff62:	4603      	mov	r3, r0
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d001      	beq.n	800ff6c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 800ff68:	2301      	movs	r3, #1
 800ff6a:	e000      	b.n	800ff6e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d01b      	beq.n	800ffaa <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800ff72:	687c      	ldr	r4, [r7, #4]
 800ff74:	f107 0208 	add.w	r2, r7, #8
 800ff78:	f107 0314 	add.w	r3, r7, #20
 800ff7c:	4611      	mov	r1, r2
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f000 ffed 	bl	8010f5e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 800ff84:	f107 0318 	add.w	r3, r7, #24
 800ff88:	6839      	ldr	r1, [r7, #0]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f000 ffd8 	bl	8010f40 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800ff90:	f107 0218 	add.w	r2, r7, #24
 800ff94:	f107 031c 	add.w	r3, r7, #28
 800ff98:	9300      	str	r3, [sp, #0]
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	4a08      	ldr	r2, [pc, #32]	; (800ffc0 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 800ff9e:	6979      	ldr	r1, [r7, #20]
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f000 ffec 	bl	8010f7e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800ffaa:	f107 0308 	add.w	r3, r7, #8
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7f5 f91f 	bl	80051f2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	3304      	adds	r3, #4
      }
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3724      	adds	r7, #36	; 0x24
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd90      	pop	{r4, r7, pc}
 800ffc0:	08020c84 	.word	0x08020c84

0800ffc4 <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 800ffc4:	b590      	push	{r4, r7, lr}
 800ffc6:	b087      	sub	sp, #28
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	1c5a      	adds	r2, r3, #1
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 800ffda:	2008      	movs	r0, #8
 800ffdc:	f010 fa9c 	bl	8020518 <_Znwj>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	461c      	mov	r4, r3
 800ffe4:	68b9      	ldr	r1, [r7, #8]
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f000 ff52 	bl	8010e90 <_ZN5FieldIJhEEC1EPh>
 800ffec:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f103 0208 	add.w	r2, r3, #8
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	613b      	str	r3, [r7, #16]
 800fff8:	f107 0310 	add.w	r3, r7, #16
 800fffc:	4619      	mov	r1, r3
 800fffe:	4610      	mov	r0, r2
 8010000:	f000 ff5c 	bl	8010ebc <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010004:	6879      	ldr	r1, [r7, #4]
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f000 fff7 	bl	8010ffa <_ZN6Packet5buildItJEEEvPT_DpPT0_>
    }
 801000c:	bf00      	nop
 801000e:	371c      	adds	r7, #28
 8010010:	46bd      	mov	sp, r7
 8010012:	bd90      	pop	{r4, r7, pc}

08010014 <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b087      	sub	sp, #28
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	1c5a      	adds	r2, r3, #1
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 801002a:	2008      	movs	r0, #8
 801002c:	f010 fa74 	bl	8020518 <_Znwj>
 8010030:	4603      	mov	r3, r0
 8010032:	461c      	mov	r4, r3
 8010034:	68b9      	ldr	r1, [r7, #8]
 8010036:	4620      	mov	r0, r4
 8010038:	f000 ff2a 	bl	8010e90 <_ZN5FieldIJhEEC1EPh>
 801003c:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	f103 0208 	add.w	r2, r3, #8
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	613b      	str	r3, [r7, #16]
 8010048:	f107 0310 	add.w	r3, r7, #16
 801004c:	4619      	mov	r1, r3
 801004e:	4610      	mov	r0, r2
 8010050:	f000 ff34 	bl	8010ebc <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010054:	6879      	ldr	r1, [r7, #4]
 8010056:	68f8      	ldr	r0, [r7, #12]
 8010058:	f000 fff2 	bl	8011040 <_ZN6Packet5buildImJEEEvPT_DpPT0_>
    }
 801005c:	bf00      	nop
 801005e:	371c      	adds	r7, #28
 8010060:	46bd      	mov	sp, r7
 8010062:	bd90      	pop	{r4, r7, pc}

08010064 <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>:
      _M_get() noexcept
 8010064:	b480      	push	{r7}
 8010066:	b083      	sub	sp, #12
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4618      	mov	r0, r3
 8010070:	370c      	adds	r7, #12
 8010072:	46bd      	mov	sp, r7
 8010074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010078:	4770      	bx	lr

0801007a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801007a:	b5b0      	push	{r4, r5, r7, lr}
 801007c:	b084      	sub	sp, #16
 801007e:	af00      	add	r7, sp, #0
 8010080:	6078      	str	r0, [r7, #4]
 8010082:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 fffe 	bl	8011086 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 801008a:	4604      	mov	r4, r0
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f001 f806 	bl	801109e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8010092:	4602      	mov	r2, r0
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	4621      	mov	r1, r4
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f001 f80c 	bl	80110b6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 801009e:	4603      	mov	r3, r0
 80100a0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 f828 	bl	80100f8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80100a8:	4603      	mov	r3, r0
 80100aa:	60fb      	str	r3, [r7, #12]
 80100ac:	f107 020c 	add.w	r2, r7, #12
 80100b0:	f107 0308 	add.w	r3, r7, #8
 80100b4:	4611      	mov	r1, r2
 80100b6:	4618      	mov	r0, r3
 80100b8:	f000 f82f 	bl	801011a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 80100bc:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d110      	bne.n	80100e4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 80100c2:	687c      	ldr	r4, [r7, #4]
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7f2 f97a 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80100d0:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	461a      	mov	r2, r3
 80100d6:	4629      	mov	r1, r5
 80100d8:	4620      	mov	r0, r4
 80100da:	f7f0 fefe 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d004      	beq.n	80100ee <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 f807 	bl	80100f8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80100ea:	4603      	mov	r3, r0
 80100ec:	e000      	b.n	80100f0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 80100ee:	68bb      	ldr	r3, [r7, #8]
    }
 80100f0:	4618      	mov	r0, r3
 80100f2:	3710      	adds	r7, #16
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bdb0      	pop	{r4, r5, r7, pc}

080100f8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b084      	sub	sp, #16
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	1d1a      	adds	r2, r3, #4
 8010104:	f107 030c 	add.w	r3, r7, #12
 8010108:	4611      	mov	r1, r2
 801010a:	4618      	mov	r0, r3
 801010c:	f001 f806 	bl	801111c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1EPKSt18_Rb_tree_node_base>
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	4618      	mov	r0, r3
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801011a:	b480      	push	{r7}
 801011c:	b083      	sub	sp, #12
 801011e:	af00      	add	r7, sp, #0
 8010120:	6078      	str	r0, [r7, #4]
 8010122:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	429a      	cmp	r2, r3
 801012e:	bf0c      	ite	eq
 8010130:	2301      	moveq	r3, #1
 8010132:	2300      	movne	r3, #0
 8010134:	b2db      	uxtb	r3, r3
 8010136:	4618      	mov	r0, r3
 8010138:	370c      	adds	r7, #12
 801013a:	46bd      	mov	sp, r7
 801013c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010140:	4770      	bx	lr

08010142 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010142:	b5b0      	push	{r4, r5, r7, lr}
 8010144:	b084      	sub	sp, #16
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
 801014a:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f000 fff4 	bl	801113a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8010152:	4604      	mov	r4, r0
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f000 fffc 	bl	8011152 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 801015a:	4602      	mov	r2, r0
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	4621      	mov	r1, r4
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f001 f802 	bl	801116a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8010166:	4603      	mov	r3, r0
 8010168:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 f828 	bl	80101c0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010170:	4603      	mov	r3, r0
 8010172:	60fb      	str	r3, [r7, #12]
 8010174:	f107 020c 	add.w	r2, r7, #12
 8010178:	f107 0308 	add.w	r3, r7, #8
 801017c:	4611      	mov	r1, r2
 801017e:	4618      	mov	r0, r3
 8010180:	f000 f82f 	bl	80101e2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 8010184:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010186:	2b00      	cmp	r3, #0
 8010188:	d110      	bne.n	80101ac <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 801018a:	687c      	ldr	r4, [r7, #4]
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	4618      	mov	r0, r3
 8010194:	f7f7 f953 	bl	800743e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010198:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	461a      	mov	r2, r3
 801019e:	4629      	mov	r1, r5
 80101a0:	4620      	mov	r0, r4
 80101a2:	f7f0 fe9a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80101a6:	4603      	mov	r3, r0
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d004      	beq.n	80101b6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	f000 f807 	bl	80101c0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80101b2:	4603      	mov	r3, r0
 80101b4:	e000      	b.n	80101b8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 80101b6:	68bb      	ldr	r3, [r7, #8]
    }
 80101b8:	4618      	mov	r0, r3
 80101ba:	3710      	adds	r7, #16
 80101bc:	46bd      	mov	sp, r7
 80101be:	bdb0      	pop	{r4, r5, r7, pc}

080101c0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b084      	sub	sp, #16
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	1d1a      	adds	r2, r3, #4
 80101cc:	f107 030c 	add.w	r3, r7, #12
 80101d0:	4611      	mov	r1, r2
 80101d2:	4618      	mov	r0, r3
 80101d4:	f000 fffc 	bl	80111d0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1EPKSt18_Rb_tree_node_base>
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	4618      	mov	r0, r3
 80101dc:	3710      	adds	r7, #16
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80101e2:	b480      	push	{r7}
 80101e4:	b083      	sub	sp, #12
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
 80101ea:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	bf0c      	ite	eq
 80101f8:	2301      	moveq	r3, #1
 80101fa:	2300      	movne	r3, #0
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	4618      	mov	r0, r3
 8010200:	370c      	adds	r7, #12
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr

0801020a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801020a:	b5b0      	push	{r4, r5, r7, lr}
 801020c:	b084      	sub	sp, #16
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f000 ffea 	bl	80111ee <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 801021a:	4604      	mov	r4, r0
 801021c:	6878      	ldr	r0, [r7, #4]
 801021e:	f000 fff2 	bl	8011206 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8010222:	4602      	mov	r2, r0
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	4621      	mov	r1, r4
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 fff8 	bl	801121e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 801022e:	4603      	mov	r3, r0
 8010230:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f828 	bl	8010288 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010238:	4603      	mov	r3, r0
 801023a:	60fb      	str	r3, [r7, #12]
 801023c:	f107 020c 	add.w	r2, r7, #12
 8010240:	f107 0308 	add.w	r3, r7, #8
 8010244:	4611      	mov	r1, r2
 8010246:	4618      	mov	r0, r3
 8010248:	f000 f82f 	bl	80102aa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 801024c:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 801024e:	2b00      	cmp	r3, #0
 8010250:	d110      	bne.n	8010274 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8010252:	687c      	ldr	r4, [r7, #4]
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	4618      	mov	r0, r3
 801025c:	f7fa fb2d 	bl	800a8ba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010260:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	461a      	mov	r2, r3
 8010266:	4629      	mov	r1, r5
 8010268:	4620      	mov	r0, r4
 801026a:	f7f0 fe36 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 801026e:	4603      	mov	r3, r0
 8010270:	2b00      	cmp	r3, #0
 8010272:	d004      	beq.n	801027e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 f807 	bl	8010288 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 801027a:	4603      	mov	r3, r0
 801027c:	e000      	b.n	8010280 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 801027e:	68bb      	ldr	r3, [r7, #8]
    }
 8010280:	4618      	mov	r0, r3
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bdb0      	pop	{r4, r5, r7, pc}

08010288 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	1d1a      	adds	r2, r3, #4
 8010294:	f107 030c 	add.w	r3, r7, #12
 8010298:	4611      	mov	r1, r2
 801029a:	4618      	mov	r0, r3
 801029c:	f000 fff2 	bl	8011284 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPKSt18_Rb_tree_node_base>
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	4618      	mov	r0, r3
 80102a4:	3710      	adds	r7, #16
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80102aa:	b480      	push	{r7}
 80102ac:	b083      	sub	sp, #12
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
 80102b2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	429a      	cmp	r2, r3
 80102be:	bf0c      	ite	eq
 80102c0:	2301      	moveq	r3, #1
 80102c2:	2300      	movne	r3, #0
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	4618      	mov	r0, r3
 80102c8:	370c      	adds	r7, #12
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr

080102d2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80102d2:	b5b0      	push	{r4, r5, r7, lr}
 80102d4:	b084      	sub	sp, #16
 80102d6:	af00      	add	r7, sp, #0
 80102d8:	6078      	str	r0, [r7, #4]
 80102da:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f000 ffe0 	bl	80112a2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80102e2:	4604      	mov	r4, r0
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f000 ffe8 	bl	80112ba <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80102ea:	4602      	mov	r2, r0
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	4621      	mov	r1, r4
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	f000 ffee 	bl	80112d2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 80102f6:	4603      	mov	r3, r0
 80102f8:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 f828 	bl	8010350 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010300:	4603      	mov	r3, r0
 8010302:	60fb      	str	r3, [r7, #12]
 8010304:	f107 020c 	add.w	r2, r7, #12
 8010308:	f107 0308 	add.w	r3, r7, #8
 801030c:	4611      	mov	r1, r2
 801030e:	4618      	mov	r0, r3
 8010310:	f000 f82f 	bl	8010372 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8010314:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010316:	2b00      	cmp	r3, #0
 8010318:	d110      	bne.n	801033c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 801031a:	687c      	ldr	r4, [r7, #4]
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	4618      	mov	r0, r3
 8010324:	f7f8 fc51 	bl	8008bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010328:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	461a      	mov	r2, r3
 801032e:	4629      	mov	r1, r5
 8010330:	4620      	mov	r0, r4
 8010332:	f7f0 fdd2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d004      	beq.n	8010346 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f000 f807 	bl	8010350 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010342:	4603      	mov	r3, r0
 8010344:	e000      	b.n	8010348 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8010346:	68bb      	ldr	r3, [r7, #8]
    }
 8010348:	4618      	mov	r0, r3
 801034a:	3710      	adds	r7, #16
 801034c:	46bd      	mov	sp, r7
 801034e:	bdb0      	pop	{r4, r5, r7, pc}

08010350 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	1d1a      	adds	r2, r3, #4
 801035c:	f107 030c 	add.w	r3, r7, #12
 8010360:	4611      	mov	r1, r2
 8010362:	4618      	mov	r0, r3
 8010364:	f000 ffe8 	bl	8011338 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	4618      	mov	r0, r3
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010372:	b480      	push	{r7}
 8010374:	b083      	sub	sp, #12
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
 801037a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	429a      	cmp	r2, r3
 8010386:	bf0c      	ite	eq
 8010388:	2301      	moveq	r3, #1
 801038a:	2300      	movne	r3, #0
 801038c:	b2db      	uxtb	r3, r3
 801038e:	4618      	mov	r0, r3
 8010390:	370c      	adds	r7, #12
 8010392:	46bd      	mov	sp, r7
 8010394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010398:	4770      	bx	lr

0801039a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801039a:	b5b0      	push	{r4, r5, r7, lr}
 801039c:	b084      	sub	sp, #16
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
 80103a2:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f000 ffd6 	bl	8011356 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80103aa:	4604      	mov	r4, r0
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f000 ffde 	bl	801136e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80103b2:	4602      	mov	r2, r0
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	4621      	mov	r1, r4
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 ffe4 	bl	8011386 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 80103be:	4603      	mov	r3, r0
 80103c0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 f828 	bl	8010418 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80103c8:	4603      	mov	r3, r0
 80103ca:	60fb      	str	r3, [r7, #12]
 80103cc:	f107 020c 	add.w	r2, r7, #12
 80103d0:	f107 0308 	add.w	r3, r7, #8
 80103d4:	4611      	mov	r1, r2
 80103d6:	4618      	mov	r0, r3
 80103d8:	f000 f82f 	bl	801043a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 80103dc:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d110      	bne.n	8010404 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 80103e2:	687c      	ldr	r4, [r7, #4]
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7f3 feee 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80103f0:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	461a      	mov	r2, r3
 80103f6:	4629      	mov	r1, r5
 80103f8:	4620      	mov	r0, r4
 80103fa:	f7f0 fd6e 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d004      	beq.n	801040e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f000 f807 	bl	8010418 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 801040a:	4603      	mov	r3, r0
 801040c:	e000      	b.n	8010410 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 801040e:	68bb      	ldr	r3, [r7, #8]
    }
 8010410:	4618      	mov	r0, r3
 8010412:	3710      	adds	r7, #16
 8010414:	46bd      	mov	sp, r7
 8010416:	bdb0      	pop	{r4, r5, r7, pc}

08010418 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	1d1a      	adds	r2, r3, #4
 8010424:	f107 030c 	add.w	r3, r7, #12
 8010428:	4611      	mov	r1, r2
 801042a:	4618      	mov	r0, r3
 801042c:	f000 ffde 	bl	80113ec <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	4618      	mov	r0, r3
 8010434:	3710      	adds	r7, #16
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 801043a:	b480      	push	{r7}
 801043c:	b083      	sub	sp, #12
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
 8010442:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	429a      	cmp	r2, r3
 801044e:	bf0c      	ite	eq
 8010450:	2301      	moveq	r3, #1
 8010452:	2300      	movne	r3, #0
 8010454:	b2db      	uxtb	r3, r3
 8010456:	4618      	mov	r0, r3
 8010458:	370c      	adds	r7, #12
 801045a:	46bd      	mov	sp, r7
 801045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010460:	4770      	bx	lr

08010462 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010462:	b480      	push	{r7}
 8010464:	b083      	sub	sp, #12
 8010466:	af00      	add	r7, sp, #0
 8010468:	6078      	str	r0, [r7, #4]
	  { return true; }
 801046a:	2301      	movs	r3, #1
 801046c:	4618      	mov	r0, r3
 801046e:	370c      	adds	r7, #12
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr

08010478 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010478:	b480      	push	{r7}
 801047a:	b083      	sub	sp, #12
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	4618      	mov	r0, r3
 8010484:	370c      	adds	r7, #12
 8010486:	46bd      	mov	sp, r7
 8010488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048c:	4770      	bx	lr

0801048e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 801048e:	b590      	push	{r4, r7, lr}
 8010490:	b083      	sub	sp, #12
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
 8010496:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8010498:	6838      	ldr	r0, [r7, #0]
 801049a:	f7ff ffed 	bl	8010478 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 801049e:	4603      	mov	r3, r0
 80104a0:	4622      	mov	r2, r4
 80104a2:	4619      	mov	r1, r3
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f000 ffb0 	bl	801140a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 80104aa:	bf00      	nop
 80104ac:	370c      	adds	r7, #12
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd90      	pop	{r4, r7, pc}

080104b2 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b082      	sub	sp, #8
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f000 ffba 	bl	8011434 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80104c0:	4603      	mov	r3, r0
 80104c2:	4618      	mov	r0, r3
 80104c4:	f000 ffc6 	bl	8011454 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 80104c8:	bf00      	nop
      }
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}

080104d0 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80104d0:	b590      	push	{r4, r7, lr}
 80104d2:	b085      	sub	sp, #20
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	4613      	mov	r3, r2
 80104dc:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80104de:	79fb      	ldrb	r3, [r7, #7]
 80104e0:	2b01      	cmp	r3, #1
 80104e2:	d109      	bne.n	80104f8 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80104e4:	68b8      	ldr	r0, [r7, #8]
 80104e6:	f000 ffa5 	bl	8011434 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80104ea:	4604      	mov	r4, r0
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f000 ffc1 	bl	8011474 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 80104f2:	4603      	mov	r3, r0
 80104f4:	601c      	str	r4, [r3, #0]
	    break;
 80104f6:	e005      	b.n	8010504 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80104f8:	79fb      	ldrb	r3, [r7, #7]
 80104fa:	461a      	mov	r2, r3
 80104fc:	68b9      	ldr	r1, [r7, #8]
 80104fe:	68f8      	ldr	r0, [r7, #12]
 8010500:	f000 ffc4 	bl	801148c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8010504:	2300      	movs	r3, #0
      }
 8010506:	4618      	mov	r0, r3
 8010508:	3714      	adds	r7, #20
 801050a:	46bd      	mov	sp, r7
 801050c:	bd90      	pop	{r4, r7, pc}

0801050e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 801050e:	b480      	push	{r7}
 8010510:	b083      	sub	sp, #12
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010516:	2301      	movs	r3, #1
 8010518:	4618      	mov	r0, r3
 801051a:	370c      	adds	r7, #12
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	4618      	mov	r0, r3
 8010530:	370c      	adds	r7, #12
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr

0801053a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 801053a:	b590      	push	{r4, r7, lr}
 801053c:	b083      	sub	sp, #12
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
 8010542:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8010544:	6838      	ldr	r0, [r7, #0]
 8010546:	f7ff ffed 	bl	8010524 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 801054a:	4603      	mov	r3, r0
 801054c:	4622      	mov	r2, r4
 801054e:	4619      	mov	r1, r3
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f000 ffc6 	bl	80114e2 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8010556:	bf00      	nop
 8010558:	370c      	adds	r7, #12
 801055a:	46bd      	mov	sp, r7
 801055c:	bd90      	pop	{r4, r7, pc}

0801055e <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801055e:	b580      	push	{r7, lr}
 8010560:	b082      	sub	sp, #8
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 ffd0 	bl	801150c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 801056c:	4603      	mov	r3, r0
 801056e:	4618      	mov	r0, r3
 8010570:	f000 ffdc 	bl	801152c <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8010574:	bf00      	nop
      }
 8010576:	3708      	adds	r7, #8
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}

0801057c <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 801057c:	b590      	push	{r4, r7, lr}
 801057e:	b085      	sub	sp, #20
 8010580:	af00      	add	r7, sp, #0
 8010582:	60f8      	str	r0, [r7, #12]
 8010584:	60b9      	str	r1, [r7, #8]
 8010586:	4613      	mov	r3, r2
 8010588:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 801058a:	79fb      	ldrb	r3, [r7, #7]
 801058c:	2b01      	cmp	r3, #1
 801058e:	d109      	bne.n	80105a4 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010590:	68b8      	ldr	r0, [r7, #8]
 8010592:	f000 ffbb 	bl	801150c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 8010596:	4604      	mov	r4, r0
 8010598:	68f8      	ldr	r0, [r7, #12]
 801059a:	f000 ffd7 	bl	801154c <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 801059e:	4603      	mov	r3, r0
 80105a0:	601c      	str	r4, [r3, #0]
	    break;
 80105a2:	e005      	b.n	80105b0 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80105a4:	79fb      	ldrb	r3, [r7, #7]
 80105a6:	461a      	mov	r2, r3
 80105a8:	68b9      	ldr	r1, [r7, #8]
 80105aa:	68f8      	ldr	r0, [r7, #12]
 80105ac:	f000 ffda 	bl	8011564 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 80105b0:	2300      	movs	r3, #0
      }
 80105b2:	4618      	mov	r0, r3
 80105b4:	3714      	adds	r7, #20
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd90      	pop	{r4, r7, pc}

080105ba <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80105ba:	b480      	push	{r7}
 80105bc:	b083      	sub	sp, #12
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	4618      	mov	r0, r3
 80105c6:	370c      	adds	r7, #12
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80105d0:	b590      	push	{r4, r7, lr}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
 80105d8:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80105da:	6838      	ldr	r0, [r7, #0]
 80105dc:	f7ff ffed 	bl	80105ba <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 80105e0:	4603      	mov	r3, r0
 80105e2:	681c      	ldr	r4, [r3, #0]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4619      	mov	r1, r3
 80105e8:	2004      	movs	r0, #4
 80105ea:	f7ef fea1 	bl	8000330 <_ZnwjPv>
 80105ee:	4603      	mov	r3, r0
 80105f0:	601c      	str	r4, [r3, #0]
 80105f2:	4618      	mov	r0, r3
 80105f4:	370c      	adds	r7, #12
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd90      	pop	{r4, r7, pc}

080105fa <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80105fa:	b580      	push	{r7, lr}
 80105fc:	b084      	sub	sp, #16
 80105fe:	af00      	add	r7, sp, #0
 8010600:	60f8      	str	r0, [r7, #12]
 8010602:	60b9      	str	r1, [r7, #8]
 8010604:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f7ff ffd7 	bl	80105ba <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 801060c:	4603      	mov	r3, r0
 801060e:	4619      	mov	r1, r3
 8010610:	68b8      	ldr	r0, [r7, #8]
 8010612:	f7ff ffdd 	bl	80105d0 <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8010616:	bf00      	nop
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
	...

08010620 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010620:	b5b0      	push	{r4, r5, r7, lr}
 8010622:	b08c      	sub	sp, #48	; 0x30
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801062c:	4a39      	ldr	r2, [pc, #228]	; (8010714 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 801062e:	2101      	movs	r1, #1
 8010630:	68f8      	ldr	r0, [r7, #12]
 8010632:	f000 ffc2 	bl	80115ba <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>
 8010636:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	685b      	ldr	r3, [r3, #4]
 8010642:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010644:	68f8      	ldr	r0, [r7, #12]
 8010646:	f7fe fd31 	bl	800f0ac <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 801064a:	4603      	mov	r3, r0
 801064c:	617b      	str	r3, [r7, #20]
 801064e:	f107 0214 	add.w	r2, r7, #20
 8010652:	f107 0308 	add.w	r3, r7, #8
 8010656:	4611      	mov	r1, r2
 8010658:	4618      	mov	r0, r3
 801065a:	f000 fff5 	bl	8011648 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801065e:	4603      	mov	r3, r0
 8010660:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010666:	4618      	mov	r0, r3
 8010668:	f001 f803 	bl	8011672 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>
 801066c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801066e:	69fb      	ldr	r3, [r7, #28]
 8010670:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010672:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010674:	6a3b      	ldr	r3, [r7, #32]
 8010676:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8010678:	69fa      	ldr	r2, [r7, #28]
 801067a:	18d5      	adds	r5, r2, r3
 801067c:	6878      	ldr	r0, [r7, #4]
 801067e:	f7ff ff9c 	bl	80105ba <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010682:	4603      	mov	r3, r0
 8010684:	461a      	mov	r2, r3
 8010686:	4629      	mov	r1, r5
 8010688:	4620      	mov	r0, r4
 801068a:	f7ff ffb6 	bl	80105fa <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 801068e:	2300      	movs	r3, #0
 8010690:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010692:	f107 0308 	add.w	r3, r7, #8
 8010696:	4618      	mov	r0, r3
 8010698:	f7fc fbba 	bl	800ce10 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 801069c:	4603      	mov	r3, r0
 801069e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7fa ff54 	bl	800b550 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 80106a8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80106aa:	69fa      	ldr	r2, [r7, #28]
 80106ac:	4621      	mov	r1, r4
 80106ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80106b0:	f000 fff3 	bl	801169a <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80106b4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80106b6:	69bb      	ldr	r3, [r7, #24]
 80106b8:	3304      	adds	r3, #4
 80106ba:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80106bc:	f107 0308 	add.w	r3, r7, #8
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fc fba5 	bl	800ce10 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 80106c6:	4603      	mov	r3, r0
 80106c8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7fa ff3f 	bl	800b550 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 80106d2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80106d4:	69ba      	ldr	r2, [r7, #24]
 80106d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106d8:	4620      	mov	r0, r4
 80106da:	f000 ffde 	bl	801169a <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80106de:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80106e0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	689a      	ldr	r2, [r3, #8]
 80106e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e8:	1ad3      	subs	r3, r2, r3
 80106ea:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80106ec:	461a      	mov	r2, r3
 80106ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80106f0:	f7fa fef1 	bl	800b4d6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	69fa      	ldr	r2, [r7, #28]
 80106f8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	69ba      	ldr	r2, [r7, #24]
 80106fe:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010702:	009b      	lsls	r3, r3, #2
 8010704:	69fa      	ldr	r2, [r7, #28]
 8010706:	441a      	add	r2, r3
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	609a      	str	r2, [r3, #8]
    }
 801070c:	bf00      	nop
 801070e:	3730      	adds	r7, #48	; 0x30
 8010710:	46bd      	mov	sp, r7
 8010712:	bdb0      	pop	{r4, r5, r7, pc}
 8010714:	08020c1c 	.word	0x08020c1c

08010718 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	f7fe fcd3 	bl	800f0cc <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 8010726:	4603      	mov	r3, r0
 8010728:	60fb      	str	r3, [r7, #12]
 801072a:	f107 030c 	add.w	r3, r7, #12
 801072e:	2101      	movs	r1, #1
 8010730:	4618      	mov	r0, r3
 8010732:	f000 ffc6 	bl	80116c2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>
 8010736:	4603      	mov	r3, r0
 8010738:	60bb      	str	r3, [r7, #8]
 801073a:	f107 0308 	add.w	r3, r7, #8
 801073e:	4618      	mov	r0, r3
 8010740:	f7fc fb99 	bl	800ce76 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 8010744:	4603      	mov	r3, r0
      }
 8010746:	4618      	mov	r0, r3
 8010748:	3710      	adds	r7, #16
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}

0801074e <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 801074e:	b580      	push	{r7, lr}
 8010750:	b082      	sub	sp, #8
 8010752:	af00      	add	r7, sp, #0
 8010754:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4618      	mov	r0, r3
 801075a:	f7fc f9a3 	bl	800caa4 <_ZNKSt14_Function_base8_M_emptyEv>
 801075e:	4603      	mov	r3, r0
 8010760:	f083 0301 	eor.w	r3, r3, #1
 8010764:	b2db      	uxtb	r3, r3
 8010766:	4618      	mov	r0, r3
 8010768:	3708      	adds	r7, #8
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}

0801076e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 801076e:	b580      	push	{r7, lr}
 8010770:	b084      	sub	sp, #16
 8010772:	af00      	add	r7, sp, #0
 8010774:	6078      	str	r0, [r7, #4]
 8010776:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 ffbb 	bl	80116f4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801077e:	4602      	mov	r2, r0
 8010780:	f107 0308 	add.w	r3, r7, #8
 8010784:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010788:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 801078c:	6838      	ldr	r0, [r7, #0]
 801078e:	f000 ffb1 	bl	80116f4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8010792:	4602      	mov	r2, r0
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	e892 0003 	ldmia.w	r2, {r0, r1}
 801079a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 801079e:	f107 0308 	add.w	r3, r7, #8
 80107a2:	4618      	mov	r0, r3
 80107a4:	f000 ffa6 	bl	80116f4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80107a8:	4602      	mov	r2, r0
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107b0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80107b4:	bf00      	nop
 80107b6:	3710      	adds	r7, #16
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
 80107c4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 ff9f 	bl	801170a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80107cc:	4603      	mov	r3, r0
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80107d2:	6838      	ldr	r0, [r7, #0]
 80107d4:	f000 ff99 	bl	801170a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80107d8:	4603      	mov	r3, r0
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80107e0:	f107 030c 	add.w	r3, r7, #12
 80107e4:	4618      	mov	r0, r3
 80107e6:	f000 ff90 	bl	801170a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80107ea:	4603      	mov	r3, r0
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	601a      	str	r2, [r3, #0]
    }
 80107f2:	bf00      	nop
 80107f4:	3710      	adds	r7, #16
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b084      	sub	sp, #16
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
 8010802:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 ff8b 	bl	8011720 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 801080a:	4603      	mov	r3, r0
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8010810:	6838      	ldr	r0, [r7, #0]
 8010812:	f000 ff85 	bl	8011720 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8010816:	4603      	mov	r3, r0
 8010818:	681a      	ldr	r2, [r3, #0]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801081e:	f107 030c 	add.w	r3, r7, #12
 8010822:	4618      	mov	r0, r3
 8010824:	f000 ff7c 	bl	8011720 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8010828:	4603      	mov	r3, r0
 801082a:	681a      	ldr	r2, [r3, #0]
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	601a      	str	r2, [r3, #0]
    }
 8010830:	bf00      	nop
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <_ZNSaIjEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 ff78 	bl	8011736 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	4618      	mov	r0, r3
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}

08010850 <_ZNSt12_Vector_baseIjSaIjEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2200      	movs	r2, #0
 801085c:	601a      	str	r2, [r3, #0]
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2200      	movs	r2, #0
 8010862:	605a      	str	r2, [r3, #4]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	609a      	str	r2, [r3, #8]
	{ }
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4618      	mov	r0, r3
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj>:
      _M_deallocate(pointer __p, size_t __n)
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
 801087e:	60f8      	str	r0, [r7, #12]
 8010880:	60b9      	str	r1, [r7, #8]
 8010882:	607a      	str	r2, [r7, #4]
	if (__p)
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d005      	beq.n	8010896 <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	68b9      	ldr	r1, [r7, #8]
 8010890:	4618      	mov	r0, r3
 8010892:	f000 ff5b 	bl	801174c <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>
      }
 8010896:	bf00      	nop
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801089e:	b480      	push	{r7}
 80108a0:	b083      	sub	sp, #12
 80108a2:	af00      	add	r7, sp, #0
 80108a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	4618      	mov	r0, r3
 80108aa:	370c      	adds	r7, #12
 80108ac:	46bd      	mov	sp, r7
 80108ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b2:	4770      	bx	lr

080108b4 <_ZNSaIPvEC1Ev>:
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b082      	sub	sp, #8
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f000 ff64 	bl	801178a <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4618      	mov	r0, r3
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80108cc:	b480      	push	{r7}
 80108ce:	b083      	sub	sp, #12
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2200      	movs	r2, #0
 80108d8:	601a      	str	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2200      	movs	r2, #0
 80108de:	605a      	str	r2, [r3, #4]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2200      	movs	r2, #0
 80108e4:	609a      	str	r2, [r3, #8]
	{ }
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4618      	mov	r0, r3
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr

080108f4 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	60f8      	str	r0, [r7, #12]
 80108fc:	60b9      	str	r1, [r7, #8]
 80108fe:	607a      	str	r2, [r7, #4]
	if (__p)
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d005      	beq.n	8010912 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	687a      	ldr	r2, [r7, #4]
 801090a:	68b9      	ldr	r1, [r7, #8]
 801090c:	4618      	mov	r0, r3
 801090e:	f000 ff47 	bl	80117a0 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 8010912:	bf00      	nop
 8010914:	3710      	adds	r7, #16
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801091a:	b480      	push	{r7}
 801091c:	b083      	sub	sp, #12
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4618      	mov	r0, r3
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <_ZNSt6vectorIjSaIjEE9push_backEOj>:
      push_back(value_type&& __x)
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 801093a:	6838      	ldr	r0, [r7, #0]
 801093c:	f000 ff4f 	bl	80117de <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>
 8010940:	4603      	mov	r3, r0
 8010942:	4619      	mov	r1, r3
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f000 ff55 	bl	80117f4 <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEERjDpOT_>
 801094a:	bf00      	nop
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <_ZNSt6vectorIPvSaIS0_EE9push_backEOS0_>:
      push_back(value_type&& __x)
 8010952:	b580      	push	{r7, lr}
 8010954:	b082      	sub	sp, #8
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
 801095a:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 801095c:	6838      	ldr	r0, [r7, #0]
 801095e:	f000 ff7b 	bl	8011858 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>
 8010962:	4603      	mov	r3, r0
 8010964:	4619      	mov	r1, r3
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f000 ff81 	bl	801186e <_ZNSt6vectorIPvSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>
 801096c:	bf00      	nop
 801096e:	3708      	adds	r7, #8
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	7239      	strb	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7ff f871 	bl	800fa68 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8010986:	4603      	mov	r3, r0
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	601a      	str	r2, [r3, #0]
	    { }
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	4618      	mov	r0, r3
 8010992:	3710      	adds	r7, #16
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8010998:	b5b0      	push	{r4, r5, r7, lr}
 801099a:	b084      	sub	sp, #16
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	7239      	strb	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 80109a4:	68fc      	ldr	r4, [r7, #12]
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f7ff f85e 	bl	800fa68 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80109ac:	4603      	mov	r3, r0
 80109ae:	461a      	mov	r2, r3
 80109b0:	4629      	mov	r1, r5
 80109b2:	4620      	mov	r0, r4
 80109b4:	f7ff ffde 	bl	8010974 <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	2201      	movs	r2, #1
 80109bc:	711a      	strb	r2, [r3, #4]
	{ }
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	4618      	mov	r0, r3
 80109c2:	3710      	adds	r7, #16
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bdb0      	pop	{r4, r5, r7, pc}

080109c8 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80109c8:	b480      	push	{r7}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	4618      	mov	r0, r3
 80109d4:	370c      	adds	r7, #12
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr

080109de <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80109de:	b580      	push	{r7, lr}
 80109e0:	b088      	sub	sp, #32
 80109e2:	af00      	add	r7, sp, #0
 80109e4:	60f8      	str	r0, [r7, #12]
 80109e6:	60b9      	str	r1, [r7, #8]
 80109e8:	607a      	str	r2, [r7, #4]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	61fb      	str	r3, [r7, #28]
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	61bb      	str	r3, [r7, #24]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80109f6:	f7ef fc93 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d003      	beq.n	8010a08 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8010a00:	69b8      	ldr	r0, [r7, #24]
 8010a02:	f00f fd85 	bl	8020510 <_ZdlPv>
	    return;
 8010a06:	e005      	b.n	8010a14 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8010a08:	697a      	ldr	r2, [r7, #20]
 8010a0a:	69b9      	ldr	r1, [r7, #24]
 8010a0c:	69f8      	ldr	r0, [r7, #28]
 8010a0e:	f001 fe6a 	bl	80126e6 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8010a12:	bf00      	nop
 8010a14:	bf00      	nop
 8010a16:	3720      	adds	r7, #32
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8010a26:	f7ef fc7b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d004      	beq.n	8010a3a <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8010a30:	6839      	ldr	r1, [r7, #0]
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f000 ff4d 	bl	80118d2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>
 8010a38:	e003      	b.n	8010a42 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x26>
	__destroy(__first, __last);
 8010a3a:	6839      	ldr	r1, [r7, #0]
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f000 ff60 	bl	8011902 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>
    }
 8010a42:	3708      	adds	r7, #8
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4618      	mov	r0, r3
 8010a54:	370c      	adds	r7, #12
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr

08010a5e <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8010a5e:	b590      	push	{r4, r7, lr}
 8010a60:	b083      	sub	sp, #12
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
 8010a66:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8010a68:	6838      	ldr	r0, [r7, #0]
 8010a6a:	f7ff ffed 	bl	8010a48 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	681c      	ldr	r4, [r3, #0]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	4619      	mov	r1, r3
 8010a76:	2004      	movs	r0, #4
 8010a78:	f7ef fc5a 	bl	8000330 <_ZnwjPv>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	601c      	str	r4, [r3, #0]
 8010a80:	4618      	mov	r0, r3
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd90      	pop	{r4, r7, pc}

08010a88 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b084      	sub	sp, #16
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	60b9      	str	r1, [r7, #8]
 8010a92:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f7ff ffd7 	bl	8010a48 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	68b8      	ldr	r0, [r7, #8]
 8010aa0:	f7ff ffdd 	bl	8010a5e <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8010aa4:	bf00      	nop
 8010aa6:	3710      	adds	r7, #16
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010aac:	b5b0      	push	{r4, r5, r7, lr}
 8010aae:	b08c      	sub	sp, #48	; 0x30
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	60b9      	str	r1, [r7, #8]
 8010ab6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010ab8:	4a39      	ldr	r2, [pc, #228]	; (8010ba0 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8010aba:	2101      	movs	r1, #1
 8010abc:	68f8      	ldr	r0, [r7, #12]
 8010abe:	f000 ff2b 	bl	8011918 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>
 8010ac2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f7fe fcc0 	bl	800f456 <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	617b      	str	r3, [r7, #20]
 8010ada:	f107 0214 	add.w	r2, r7, #20
 8010ade:	f107 0308 	add.w	r3, r7, #8
 8010ae2:	4611      	mov	r1, r2
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f000 ff5e 	bl	80119a6 <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8010aea:	4603      	mov	r3, r0
 8010aec:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010af2:	4618      	mov	r0, r3
 8010af4:	f000 ff6c 	bl	80119d0 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>
 8010af8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010afe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010b00:	6a3b      	ldr	r3, [r7, #32]
 8010b02:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8010b04:	69fa      	ldr	r2, [r7, #28]
 8010b06:	18d5      	adds	r5, r2, r3
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7ff ff9d 	bl	8010a48 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	461a      	mov	r2, r3
 8010b12:	4629      	mov	r1, r5
 8010b14:	4620      	mov	r0, r4
 8010b16:	f7ff ffb7 	bl	8010a88 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010b1e:	f107 0308 	add.w	r3, r7, #8
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fc fc70 	bl	800d408 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fa fb88 	bl	800b244 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8010b34:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010b36:	69fa      	ldr	r2, [r7, #28]
 8010b38:	4621      	mov	r1, r4
 8010b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b3c:	f000 ff5c 	bl	80119f8 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010b40:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	3304      	adds	r3, #4
 8010b46:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010b48:	f107 0308 	add.w	r3, r7, #8
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7fc fc5b 	bl	800d408 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8010b52:	4603      	mov	r3, r0
 8010b54:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7fa fb73 	bl	800b244 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8010b5e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010b60:	69ba      	ldr	r2, [r7, #24]
 8010b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b64:	4620      	mov	r0, r4
 8010b66:	f000 ff47 	bl	80119f8 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010b6a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8010b6c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	689a      	ldr	r2, [r3, #8]
 8010b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b74:	1ad3      	subs	r3, r2, r3
 8010b76:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8010b78:	461a      	mov	r2, r3
 8010b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b7c:	f7fa fb25 	bl	800b1ca <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	69fa      	ldr	r2, [r7, #28]
 8010b84:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	69ba      	ldr	r2, [r7, #24]
 8010b8a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	69fa      	ldr	r2, [r7, #28]
 8010b92:	441a      	add	r2, r3
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	609a      	str	r2, [r3, #8]
    }
 8010b98:	bf00      	nop
 8010b9a:	3730      	adds	r7, #48	; 0x30
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8010ba0:	08020c1c 	.word	0x08020c1c

08010ba4 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	f7fe fc62 	bl	800f476 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	60fb      	str	r3, [r7, #12]
 8010bb6:	f107 030c 	add.w	r3, r7, #12
 8010bba:	2101      	movs	r1, #1
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f000 ff2f 	bl	8011a20 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	60bb      	str	r3, [r7, #8]
 8010bc6:	f107 0308 	add.w	r3, r7, #8
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7fc fc4f 	bl	800d46e <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 8010bd0:	4603      	mov	r3, r0
      }
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3710      	adds	r7, #16
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010bda:	b480      	push	{r7}
 8010bdc:	b083      	sub	sp, #12
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	4618      	mov	r0, r3
 8010be6:	370c      	adds	r7, #12
 8010be8:	46bd      	mov	sp, r7
 8010bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bee:	4770      	bx	lr

08010bf0 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8010bf0:	b590      	push	{r4, r7, lr}
 8010bf2:	b087      	sub	sp, #28
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f000 ff28 	bl	8011a52 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8010c02:	4604      	mov	r4, r0
 8010c04:	68f8      	ldr	r0, [r7, #12]
 8010c06:	f000 ff35 	bl	8011a74 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	1ae2      	subs	r2, r4, r3
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	bf34      	ite	cc
 8010c14:	2301      	movcc	r3, #1
 8010c16:	2300      	movcs	r3, #0
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d002      	beq.n	8010c24 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f00f fd44 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8010c24:	68f8      	ldr	r0, [r7, #12]
 8010c26:	f000 ff25 	bl	8011a74 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	68f8      	ldr	r0, [r7, #12]
 8010c2e:	f000 ff21 	bl	8011a74 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8010c32:	4603      	mov	r3, r0
 8010c34:	613b      	str	r3, [r7, #16]
 8010c36:	f107 0208 	add.w	r2, r7, #8
 8010c3a:	f107 0310 	add.w	r3, r7, #16
 8010c3e:	4611      	mov	r1, r2
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7f1 fe06 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8010c46:	4603      	mov	r3, r0
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4423      	add	r3, r4
 8010c4c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8010c4e:	68f8      	ldr	r0, [r7, #12]
 8010c50:	f000 ff10 	bl	8011a74 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8010c54:	4602      	mov	r2, r0
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d306      	bcc.n	8010c6a <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f000 fef8 	bl	8011a52 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8010c62:	4602      	mov	r2, r0
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d904      	bls.n	8010c74 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x84>
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f000 fef1 	bl	8011a52 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8010c70:	4603      	mov	r3, r0
 8010c72:	e000      	b.n	8010c76 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x86>
 8010c74:	697b      	ldr	r3, [r7, #20]
      }
 8010c76:	4618      	mov	r0, r3
 8010c78:	371c      	adds	r7, #28
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd90      	pop	{r4, r7, pc}

08010c7e <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8010c7e:	b590      	push	{r4, r7, lr}
 8010c80:	b083      	sub	sp, #12
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
 8010c86:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f7fc fac1 	bl	800d210 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	681c      	ldr	r4, [r3, #0]
 8010c92:	6838      	ldr	r0, [r7, #0]
 8010c94:	f7fc fabc 	bl	800d210 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	1ae3      	subs	r3, r4, r3
 8010c9e:	109b      	asrs	r3, r3, #2
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	370c      	adds	r7, #12
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd90      	pop	{r4, r7, pc}

08010ca8 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d006      	beq.n	8010cc6 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x1e>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6839      	ldr	r1, [r7, #0]
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f000 fee9 	bl	8011a94 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	e000      	b.n	8010cc8 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x20>
 8010cc6:	2300      	movs	r3, #0
      }
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8010cd0:	b590      	push	{r4, r7, lr}
 8010cd2:	b087      	sub	sp, #28
 8010cd4:	af02      	add	r7, sp, #8
 8010cd6:	60f8      	str	r0, [r7, #12]
 8010cd8:	60b9      	str	r1, [r7, #8]
 8010cda:	607a      	str	r2, [r7, #4]
 8010cdc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8010cde:	f88d 4000 	strb.w	r4, [sp]
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	68b9      	ldr	r1, [r7, #8]
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f000 fef3 	bl	8011ad4 <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8010cee:	4603      	mov	r3, r0
      }
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3714      	adds	r7, #20
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd90      	pop	{r4, r7, pc}

08010cf8 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8010cf8:	b590      	push	{r4, r7, lr}
 8010cfa:	b085      	sub	sp, #20
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8010d04:	68b8      	ldr	r0, [r7, #8]
 8010d06:	f7ff f828 	bl	800fd5a <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 8010d0a:	4604      	mov	r4, r0
 8010d0c:	68f8      	ldr	r0, [r7, #12]
 8010d0e:	f7fb fe92 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 8010d12:	4603      	mov	r3, r0
 8010d14:	4619      	mov	r1, r3
 8010d16:	2004      	movs	r0, #4
 8010d18:	f7ef fb0a 	bl	8000330 <_ZnwjPv>
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	6823      	ldr	r3, [r4, #0]
 8010d20:	6013      	str	r3, [r2, #0]
 8010d22:	bf00      	nop
 8010d24:	3714      	adds	r7, #20
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd90      	pop	{r4, r7, pc}

08010d2a <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8010d2a:	b580      	push	{r7, lr}
 8010d2c:	b084      	sub	sp, #16
 8010d2e:	af00      	add	r7, sp, #0
 8010d30:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f000 feea 	bl	8011b0c <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessageEUlvE_EERKT_v>
 8010d38:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8010d3a:	68f8      	ldr	r0, [r7, #12]
 8010d3c:	f000 fef2 	bl	8011b24 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessageEUlvE_EPT_RS5_>
 8010d40:	4603      	mov	r3, r0
	}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3710      	adds	r7, #16
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}

08010d4a <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessageEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8010d4a:	b590      	push	{r4, r7, lr}
 8010d4c:	b083      	sub	sp, #12
 8010d4e:	af00      	add	r7, sp, #0
 8010d50:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 fef1 	bl	8011b3a <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	f000 fef7 	bl	8011b50 <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessageEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8010d62:	bf00      	nop
 8010d64:	370c      	adds	r7, #12
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd90      	pop	{r4, r7, pc}

08010d6a <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessageEUlvE_EERT_v>:
      _M_access()
 8010d6a:	b580      	push	{r7, lr}
 8010d6c:	b082      	sub	sp, #8
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8010d72:	6878      	ldr	r0, [r7, #4]
 8010d74:	f7fb fe5f 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3708      	adds	r7, #8
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8010d82:	b5b0      	push	{r4, r5, r7, lr}
 8010d84:	b084      	sub	sp, #16
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	60f8      	str	r0, [r7, #12]
 8010d8a:	60b9      	str	r1, [r7, #8]
 8010d8c:	4613      	mov	r3, r2
 8010d8e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8010d90:	79fb      	ldrb	r3, [r7, #7]
 8010d92:	2b03      	cmp	r3, #3
 8010d94:	d016      	beq.n	8010dc4 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8010d96:	2b03      	cmp	r3, #3
 8010d98:	dc19      	bgt.n	8010dce <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d002      	beq.n	8010da4 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8010d9e:	2b02      	cmp	r3, #2
 8010da0:	d00a      	beq.n	8010db8 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8010da2:	e014      	b.n	8010dce <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8010da4:	68b8      	ldr	r0, [r7, #8]
 8010da6:	f7ff ffc0 	bl	8010d2a <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010daa:	4604      	mov	r4, r0
 8010dac:	68f8      	ldr	r0, [r7, #12]
 8010dae:	f7ff ffdc 	bl	8010d6a <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessageEUlvE_EERT_v>
 8010db2:	4603      	mov	r3, r0
 8010db4:	601c      	str	r4, [r3, #0]
	      break;
 8010db6:	e00a      	b.n	8010dce <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8010db8:	462a      	mov	r2, r5
 8010dba:	68b9      	ldr	r1, [r7, #8]
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f000 fed7 	bl	8011b70 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8010dc2:	e004      	b.n	8010dce <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8010dc4:	4621      	mov	r1, r4
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f000 feeb 	bl	8011ba2 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8010dcc:	bf00      	nop
	  return false;
 8010dce:	2300      	movs	r3, #0
	}
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	3710      	adds	r7, #16
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bdb0      	pop	{r4, r5, r7, pc}

08010dd8 <_ZNSaIP5FieldIJEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f000 feea 	bl	8011bba <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	4618      	mov	r0, r3
 8010dea:	3708      	adds	r7, #8
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd80      	pop	{r7, pc}

08010df0 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010df0:	b480      	push	{r7}
 8010df2:	b083      	sub	sp, #12
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	601a      	str	r2, [r3, #0]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2200      	movs	r2, #0
 8010e02:	605a      	str	r2, [r3, #4]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	609a      	str	r2, [r3, #8]
	{ }
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	370c      	adds	r7, #12
 8010e10:	46bd      	mov	sp, r7
 8010e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e16:	4770      	bx	lr

08010e18 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	60b9      	str	r1, [r7, #8]
 8010e22:	607a      	str	r2, [r7, #4]
	if (__p)
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d005      	beq.n	8010e36 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	68b9      	ldr	r1, [r7, #8]
 8010e30:	4618      	mov	r0, r3
 8010e32:	f000 fecd 	bl	8011bd0 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>
      }
 8010e36:	bf00      	nop
 8010e38:	3710      	adds	r7, #16
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}

08010e3e <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8010e3e:	b480      	push	{r7}
 8010e40:	b083      	sub	sp, #12
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr

08010e54 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	60b9      	str	r1, [r7, #8]
 8010e5e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8010e60:	68b9      	ldr	r1, [r7, #8]
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f000 fed3 	bl	8011c0e <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>
    }
 8010e68:	bf00      	nop
 8010e6a:	3710      	adds	r7, #16
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}

08010e70 <_ZN5FieldIJEEC1Ev>:
class Field<> {
 8010e70:	b480      	push	{r7}
 8010e72:	b083      	sub	sp, #12
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
 8010e78:	4a04      	ldr	r2, [pc, #16]	; (8010e8c <_ZN5FieldIJEEC1Ev+0x1c>)
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	601a      	str	r2, [r3, #0]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	4618      	mov	r0, r3
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr
 8010e8c:	08020ccc 	.word	0x08020ccc

08010e90 <_ZN5FieldIJhEEC1EPh>:
    Field(T* ptr) : ptr(ptr) { }
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7ff ffe7 	bl	8010e70 <_ZN5FieldIJEEC1Ev>
 8010ea2:	4a05      	ldr	r2, [pc, #20]	; (8010eb8 <_ZN5FieldIJhEEC1EPh+0x28>)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	601a      	str	r2, [r3, #0]
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	683a      	ldr	r2, [r7, #0]
 8010eac:	605a      	str	r2, [r3, #4]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3708      	adds	r7, #8
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	08020cb8 	.word	0x08020cb8

08010ebc <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>:
      push_back(value_type&& __x)
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b082      	sub	sp, #8
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8010ec6:	6838      	ldr	r0, [r7, #0]
 8010ec8:	f000 feb7 	bl	8011c3a <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	4619      	mov	r1, r3
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f000 febd 	bl	8011c50 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 8010ed6:	bf00      	nop
 8010ed8:	3708      	adds	r7, #8
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}

08010ede <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b082      	sub	sp, #8
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	6078      	str	r0, [r7, #4]
 8010ee6:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6839      	ldr	r1, [r7, #0]
 8010eec:	4618      	mov	r0, r3
 8010eee:	f000 fee1 	bl	8011cb4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	3708      	adds	r7, #8
 8010ef8:	46bd      	mov	sp, r7
 8010efa:	bd80      	pop	{r7, pc}

08010efc <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 8010efc:	b590      	push	{r4, r7, lr}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	4618      	mov	r0, r3
 8010f08:	f000 feeb 	bl	8011ce2 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 8010f0c:	bf00      	nop
 8010f0e:	4620      	mov	r0, r4
 8010f10:	370c      	adds	r7, #12
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd90      	pop	{r4, r7, pc}

08010f16 <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8010f16:	b480      	push	{r7}
 8010f18:	b085      	sub	sp, #20
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	60f8      	str	r0, [r7, #12]
 8010f1e:	60b9      	str	r1, [r7, #8]
 8010f20:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	881a      	ldrh	r2, [r3, #0]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	881b      	ldrh	r3, [r3, #0]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	bf34      	ite	cc
 8010f2e:	2301      	movcc	r3, #1
 8010f30:	2300      	movcs	r3, #0
 8010f32:	b2db      	uxtb	r3, r3
 8010f34:	4618      	mov	r0, r3
 8010f36:	3714      	adds	r7, #20
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6839      	ldr	r1, [r7, #0]
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f000 fed2 	bl	8011cf8 <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	4618      	mov	r0, r3
 8010f58:	3708      	adds	r7, #8
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}

08010f5e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8010f5e:	b480      	push	{r7}
 8010f60:	b083      	sub	sp, #12
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
 8010f66:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	681a      	ldr	r2, [r3, #0]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	601a      	str	r2, [r3, #0]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	4618      	mov	r0, r3
 8010f74:	370c      	adds	r7, #12
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr

08010f7e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010f7e:	b5b0      	push	{r4, r5, r7, lr}
 8010f80:	b088      	sub	sp, #32
 8010f82:	af00      	add	r7, sp, #0
 8010f84:	60f8      	str	r0, [r7, #12]
 8010f86:	60b9      	str	r1, [r7, #8]
 8010f88:	607a      	str	r2, [r7, #4]
 8010f8a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f7f0 f96a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010f92:	4604      	mov	r4, r0
 8010f94:	6838      	ldr	r0, [r7, #0]
 8010f96:	f000 febe 	bl	8011d16 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010f9a:	4605      	mov	r5, r0
 8010f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f9e:	f7f0 f978 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	462a      	mov	r2, r5
 8010fa6:	4621      	mov	r1, r4
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f000 febf 	bl	8011d2c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8010fae:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8010fb0:	69f8      	ldr	r0, [r7, #28]
 8010fb2:	f001 f801 	bl	8011fb8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	f107 0010 	add.w	r0, r7, #16
 8010fbc:	68ba      	ldr	r2, [r7, #8]
 8010fbe:	68f9      	ldr	r1, [r7, #12]
 8010fc0:	f000 fed7 	bl	8011d72 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8010fc4:	697b      	ldr	r3, [r7, #20]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d007      	beq.n	8010fda <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8010fca:	6939      	ldr	r1, [r7, #16]
 8010fcc:	697a      	ldr	r2, [r7, #20]
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	68f8      	ldr	r0, [r7, #12]
 8010fd2:	f001 f804 	bl	8011fde <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	e00b      	b.n	8010ff2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8010fda:	69f9      	ldr	r1, [r7, #28]
 8010fdc:	68f8      	ldr	r0, [r7, #12]
 8010fde:	f7fa fc46 	bl	800b86e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 8010fe2:	693a      	ldr	r2, [r7, #16]
 8010fe4:	f107 0318 	add.w	r3, r7, #24
 8010fe8:	4611      	mov	r1, r2
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7f4 fbfb 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8010ff0:	69bb      	ldr	r3, [r7, #24]
      }
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3720      	adds	r7, #32
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bdb0      	pop	{r4, r5, r7, pc}

08010ffa <_ZN6Packet5buildItJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010ffa:	b590      	push	{r4, r7, lr}
 8010ffc:	b085      	sub	sp, #20
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
 8011002:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	1c9a      	adds	r2, r3, #2
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 801100e:	2008      	movs	r0, #8
 8011010:	f00f fa82 	bl	8020518 <_Znwj>
 8011014:	4603      	mov	r3, r0
 8011016:	461c      	mov	r4, r3
 8011018:	6839      	ldr	r1, [r7, #0]
 801101a:	4620      	mov	r0, r4
 801101c:	f001 f81c 	bl	8012058 <_ZN5FieldIJtEEC1EPt>
 8011020:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f103 0208 	add.w	r2, r3, #8
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	60bb      	str	r3, [r7, #8]
 801102c:	f107 0308 	add.w	r3, r7, #8
 8011030:	4619      	mov	r1, r3
 8011032:	4610      	mov	r0, r2
 8011034:	f7ff ff42 	bl	8010ebc <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011038:	bf00      	nop
    }
 801103a:	3714      	adds	r7, #20
 801103c:	46bd      	mov	sp, r7
 801103e:	bd90      	pop	{r4, r7, pc}

08011040 <_ZN6Packet5buildImJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011040:	b590      	push	{r4, r7, lr}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	1d1a      	adds	r2, r3, #4
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011054:	2008      	movs	r0, #8
 8011056:	f00f fa5f 	bl	8020518 <_Znwj>
 801105a:	4603      	mov	r3, r0
 801105c:	461c      	mov	r4, r3
 801105e:	6839      	ldr	r1, [r7, #0]
 8011060:	4620      	mov	r0, r4
 8011062:	f001 f80f 	bl	8012084 <_ZN5FieldIJmEEC1EPm>
 8011066:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f103 0208 	add.w	r2, r3, #8
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	60bb      	str	r3, [r7, #8]
 8011072:	f107 0308 	add.w	r3, r7, #8
 8011076:	4619      	mov	r1, r3
 8011078:	4610      	mov	r0, r2
 801107a:	f7ff ff1f 	bl	8010ebc <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 801107e:	bf00      	nop
    }
 8011080:	3714      	adds	r7, #20
 8011082:	46bd      	mov	sp, r7
 8011084:	bd90      	pop	{r4, r7, pc}

08011086 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011086:	b480      	push	{r7}
 8011088:	b083      	sub	sp, #12
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	689b      	ldr	r3, [r3, #8]
      }
 8011092:	4618      	mov	r0, r3
 8011094:	370c      	adds	r7, #12
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr

0801109e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801109e:	b480      	push	{r7}
 80110a0:	b083      	sub	sp, #12
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	3304      	adds	r3, #4
 80110aa:	4618      	mov	r0, r3
 80110ac:	370c      	adds	r7, #12
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr

080110b6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80110b6:	b590      	push	{r4, r7, lr}
 80110b8:	b087      	sub	sp, #28
 80110ba:	af00      	add	r7, sp, #0
 80110bc:	60f8      	str	r0, [r7, #12]
 80110be:	60b9      	str	r1, [r7, #8]
 80110c0:	607a      	str	r2, [r7, #4]
 80110c2:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d01d      	beq.n	8011106 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80110ca:	68fc      	ldr	r4, [r7, #12]
 80110cc:	68b8      	ldr	r0, [r7, #8]
 80110ce:	f7f0 fd15 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80110d2:	4603      	mov	r3, r0
 80110d4:	6819      	ldr	r1, [r3, #0]
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	461a      	mov	r2, r3
 80110dc:	4620      	mov	r0, r4
 80110de:	f7ef fefc 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80110e2:	4603      	mov	r3, r0
 80110e4:	f083 0301 	eor.w	r3, r3, #1
 80110e8:	b2db      	uxtb	r3, r3
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d006      	beq.n	80110fc <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	607b      	str	r3, [r7, #4]
 80110f2:	68b8      	ldr	r0, [r7, #8]
 80110f4:	f000 ffdc 	bl	80120b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80110f8:	60b8      	str	r0, [r7, #8]
 80110fa:	e7e3      	b.n	80110c4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80110fc:	68b8      	ldr	r0, [r7, #8]
 80110fe:	f000 ffe3 	bl	80120c8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8011102:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011104:	e7de      	b.n	80110c4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8011106:	f107 0314 	add.w	r3, r7, #20
 801110a:	6879      	ldr	r1, [r7, #4]
 801110c:	4618      	mov	r0, r3
 801110e:	f000 f805 	bl	801111c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1EPKSt18_Rb_tree_node_base>
 8011112:	697b      	ldr	r3, [r7, #20]
    }
 8011114:	4618      	mov	r0, r3
 8011116:	371c      	adds	r7, #28
 8011118:	46bd      	mov	sp, r7
 801111a:	bd90      	pop	{r4, r7, pc}

0801111c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801111c:	b480      	push	{r7}
 801111e:	b083      	sub	sp, #12
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	683a      	ldr	r2, [r7, #0]
 801112a:	601a      	str	r2, [r3, #0]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	4618      	mov	r0, r3
 8011130:	370c      	adds	r7, #12
 8011132:	46bd      	mov	sp, r7
 8011134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011138:	4770      	bx	lr

0801113a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 801113a:	b480      	push	{r7}
 801113c:	b083      	sub	sp, #12
 801113e:	af00      	add	r7, sp, #0
 8011140:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	689b      	ldr	r3, [r3, #8]
      }
 8011146:	4618      	mov	r0, r3
 8011148:	370c      	adds	r7, #12
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr

08011152 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011152:	b480      	push	{r7}
 8011154:	b083      	sub	sp, #12
 8011156:	af00      	add	r7, sp, #0
 8011158:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	3304      	adds	r3, #4
 801115e:	4618      	mov	r0, r3
 8011160:	370c      	adds	r7, #12
 8011162:	46bd      	mov	sp, r7
 8011164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011168:	4770      	bx	lr

0801116a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801116a:	b590      	push	{r4, r7, lr}
 801116c:	b087      	sub	sp, #28
 801116e:	af00      	add	r7, sp, #0
 8011170:	60f8      	str	r0, [r7, #12]
 8011172:	60b9      	str	r1, [r7, #8]
 8011174:	607a      	str	r2, [r7, #4]
 8011176:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d01d      	beq.n	80111ba <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801117e:	68fc      	ldr	r4, [r7, #12]
 8011180:	68b8      	ldr	r0, [r7, #8]
 8011182:	f7f5 ff35 	bl	8006ff0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8011186:	4603      	mov	r3, r0
 8011188:	6819      	ldr	r1, [r3, #0]
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	4620      	mov	r0, r4
 8011192:	f7ef fea2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8011196:	4603      	mov	r3, r0
 8011198:	f083 0301 	eor.w	r3, r3, #1
 801119c:	b2db      	uxtb	r3, r3
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d006      	beq.n	80111b0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	607b      	str	r3, [r7, #4]
 80111a6:	68b8      	ldr	r0, [r7, #8]
 80111a8:	f000 ff9a 	bl	80120e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80111ac:	60b8      	str	r0, [r7, #8]
 80111ae:	e7e3      	b.n	8011178 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80111b0:	68b8      	ldr	r0, [r7, #8]
 80111b2:	f000 ffa1 	bl	80120f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80111b6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80111b8:	e7de      	b.n	8011178 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 80111ba:	f107 0314 	add.w	r3, r7, #20
 80111be:	6879      	ldr	r1, [r7, #4]
 80111c0:	4618      	mov	r0, r3
 80111c2:	f000 f805 	bl	80111d0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1EPKSt18_Rb_tree_node_base>
 80111c6:	697b      	ldr	r3, [r7, #20]
    }
 80111c8:	4618      	mov	r0, r3
 80111ca:	371c      	adds	r7, #28
 80111cc:	46bd      	mov	sp, r7
 80111ce:	bd90      	pop	{r4, r7, pc}

080111d0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80111d0:	b480      	push	{r7}
 80111d2:	b083      	sub	sp, #12
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	683a      	ldr	r2, [r7, #0]
 80111de:	601a      	str	r2, [r3, #0]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	4618      	mov	r0, r3
 80111e4:	370c      	adds	r7, #12
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr

080111ee <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80111ee:	b480      	push	{r7}
 80111f0:	b083      	sub	sp, #12
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	689b      	ldr	r3, [r3, #8]
      }
 80111fa:	4618      	mov	r0, r3
 80111fc:	370c      	adds	r7, #12
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr

08011206 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011206:	b480      	push	{r7}
 8011208:	b083      	sub	sp, #12
 801120a:	af00      	add	r7, sp, #0
 801120c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	3304      	adds	r3, #4
 8011212:	4618      	mov	r0, r3
 8011214:	370c      	adds	r7, #12
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr

0801121e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801121e:	b590      	push	{r4, r7, lr}
 8011220:	b087      	sub	sp, #28
 8011222:	af00      	add	r7, sp, #0
 8011224:	60f8      	str	r0, [r7, #12]
 8011226:	60b9      	str	r1, [r7, #8]
 8011228:	607a      	str	r2, [r7, #4]
 801122a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d01d      	beq.n	801126e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011232:	68fc      	ldr	r4, [r7, #12]
 8011234:	68b8      	ldr	r0, [r7, #8]
 8011236:	f7f9 f8e3 	bl	800a400 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 801123a:	4603      	mov	r3, r0
 801123c:	6819      	ldr	r1, [r3, #0]
 801123e:	683b      	ldr	r3, [r7, #0]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	461a      	mov	r2, r3
 8011244:	4620      	mov	r0, r4
 8011246:	f7ef fe48 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 801124a:	4603      	mov	r3, r0
 801124c:	f083 0301 	eor.w	r3, r3, #1
 8011250:	b2db      	uxtb	r3, r3
 8011252:	2b00      	cmp	r3, #0
 8011254:	d006      	beq.n	8011264 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	607b      	str	r3, [r7, #4]
 801125a:	68b8      	ldr	r0, [r7, #8]
 801125c:	f000 ff58 	bl	8012110 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011260:	60b8      	str	r0, [r7, #8]
 8011262:	e7e3      	b.n	801122c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8011264:	68b8      	ldr	r0, [r7, #8]
 8011266:	f000 ff5f 	bl	8012128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 801126a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801126c:	e7de      	b.n	801122c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 801126e:	f107 0314 	add.w	r3, r7, #20
 8011272:	6879      	ldr	r1, [r7, #4]
 8011274:	4618      	mov	r0, r3
 8011276:	f000 f805 	bl	8011284 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPKSt18_Rb_tree_node_base>
 801127a:	697b      	ldr	r3, [r7, #20]
    }
 801127c:	4618      	mov	r0, r3
 801127e:	371c      	adds	r7, #28
 8011280:	46bd      	mov	sp, r7
 8011282:	bd90      	pop	{r4, r7, pc}

08011284 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011284:	b480      	push	{r7}
 8011286:	b083      	sub	sp, #12
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	683a      	ldr	r2, [r7, #0]
 8011292:	601a      	str	r2, [r3, #0]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4618      	mov	r0, r3
 8011298:	370c      	adds	r7, #12
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr

080112a2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 80112a2:	b480      	push	{r7}
 80112a4:	b083      	sub	sp, #12
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	689b      	ldr	r3, [r3, #8]
      }
 80112ae:	4618      	mov	r0, r3
 80112b0:	370c      	adds	r7, #12
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr

080112ba <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 80112ba:	b480      	push	{r7}
 80112bc:	b083      	sub	sp, #12
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	3304      	adds	r3, #4
 80112c6:	4618      	mov	r0, r3
 80112c8:	370c      	adds	r7, #12
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr

080112d2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80112d2:	b590      	push	{r4, r7, lr}
 80112d4:	b087      	sub	sp, #28
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	60f8      	str	r0, [r7, #12]
 80112da:	60b9      	str	r1, [r7, #8]
 80112dc:	607a      	str	r2, [r7, #4]
 80112de:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80112e0:	68bb      	ldr	r3, [r7, #8]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d01d      	beq.n	8011322 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80112e6:	68fc      	ldr	r4, [r7, #12]
 80112e8:	68b8      	ldr	r0, [r7, #8]
 80112ea:	f7f7 fa47 	bl	800877c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80112ee:	4603      	mov	r3, r0
 80112f0:	6819      	ldr	r1, [r3, #0]
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	461a      	mov	r2, r3
 80112f8:	4620      	mov	r0, r4
 80112fa:	f7ef fdee 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80112fe:	4603      	mov	r3, r0
 8011300:	f083 0301 	eor.w	r3, r3, #1
 8011304:	b2db      	uxtb	r3, r3
 8011306:	2b00      	cmp	r3, #0
 8011308:	d006      	beq.n	8011318 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	607b      	str	r3, [r7, #4]
 801130e:	68b8      	ldr	r0, [r7, #8]
 8011310:	f000 ff16 	bl	8012140 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011314:	60b8      	str	r0, [r7, #8]
 8011316:	e7e3      	b.n	80112e0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8011318:	68b8      	ldr	r0, [r7, #8]
 801131a:	f000 ff1d 	bl	8012158 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 801131e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011320:	e7de      	b.n	80112e0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8011322:	f107 0314 	add.w	r3, r7, #20
 8011326:	6879      	ldr	r1, [r7, #4]
 8011328:	4618      	mov	r0, r3
 801132a:	f000 f805 	bl	8011338 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 801132e:	697b      	ldr	r3, [r7, #20]
    }
 8011330:	4618      	mov	r0, r3
 8011332:	371c      	adds	r7, #28
 8011334:	46bd      	mov	sp, r7
 8011336:	bd90      	pop	{r4, r7, pc}

08011338 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011338:	b480      	push	{r7}
 801133a:	b083      	sub	sp, #12
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	683a      	ldr	r2, [r7, #0]
 8011346:	601a      	str	r2, [r3, #0]
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	4618      	mov	r0, r3
 801134c:	370c      	adds	r7, #12
 801134e:	46bd      	mov	sp, r7
 8011350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011354:	4770      	bx	lr

08011356 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011356:	b480      	push	{r7}
 8011358:	b083      	sub	sp, #12
 801135a:	af00      	add	r7, sp, #0
 801135c:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	689b      	ldr	r3, [r3, #8]
      }
 8011362:	4618      	mov	r0, r3
 8011364:	370c      	adds	r7, #12
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr

0801136e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 801136e:	b480      	push	{r7}
 8011370:	b083      	sub	sp, #12
 8011372:	af00      	add	r7, sp, #0
 8011374:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	3304      	adds	r3, #4
 801137a:	4618      	mov	r0, r3
 801137c:	370c      	adds	r7, #12
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr

08011386 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011386:	b590      	push	{r4, r7, lr}
 8011388:	b087      	sub	sp, #28
 801138a:	af00      	add	r7, sp, #0
 801138c:	60f8      	str	r0, [r7, #12]
 801138e:	60b9      	str	r1, [r7, #8]
 8011390:	607a      	str	r2, [r7, #4]
 8011392:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d01d      	beq.n	80113d6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801139a:	68fc      	ldr	r4, [r7, #12]
 801139c:	68b8      	ldr	r0, [r7, #8]
 801139e:	f7f2 fd25 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80113a2:	4603      	mov	r3, r0
 80113a4:	6819      	ldr	r1, [r3, #0]
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	461a      	mov	r2, r3
 80113ac:	4620      	mov	r0, r4
 80113ae:	f7ef fd94 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80113b2:	4603      	mov	r3, r0
 80113b4:	f083 0301 	eor.w	r3, r3, #1
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d006      	beq.n	80113cc <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	607b      	str	r3, [r7, #4]
 80113c2:	68b8      	ldr	r0, [r7, #8]
 80113c4:	f000 fed4 	bl	8012170 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 80113c8:	60b8      	str	r0, [r7, #8]
 80113ca:	e7e3      	b.n	8011394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80113cc:	68b8      	ldr	r0, [r7, #8]
 80113ce:	f000 fedb 	bl	8012188 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 80113d2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80113d4:	e7de      	b.n	8011394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 80113d6:	f107 0314 	add.w	r3, r7, #20
 80113da:	6879      	ldr	r1, [r7, #4]
 80113dc:	4618      	mov	r0, r3
 80113de:	f000 f805 	bl	80113ec <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 80113e2:	697b      	ldr	r3, [r7, #20]
    }
 80113e4:	4618      	mov	r0, r3
 80113e6:	371c      	adds	r7, #28
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd90      	pop	{r4, r7, pc}

080113ec <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	683a      	ldr	r2, [r7, #0]
 80113fa:	601a      	str	r2, [r3, #0]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	4618      	mov	r0, r3
 8011400:	370c      	adds	r7, #12
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr

0801140a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 801140a:	b580      	push	{r7, lr}
 801140c:	b084      	sub	sp, #16
 801140e:	af00      	add	r7, sp, #0
 8011410:	60f8      	str	r0, [r7, #12]
 8011412:	60b9      	str	r1, [r7, #8]
 8011414:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011416:	68b8      	ldr	r0, [r7, #8]
 8011418:	f7ff f82e 	bl	8010478 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 801141c:	68f8      	ldr	r0, [r7, #12]
 801141e:	f7fb fb0a 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 8011422:	4603      	mov	r3, r0
 8011424:	4619      	mov	r1, r3
 8011426:	2001      	movs	r0, #1
 8011428:	f7ee ff82 	bl	8000330 <_ZnwjPv>
 801142c:	bf00      	nop
 801142e:	3710      	adds	r7, #16
 8011430:	46bd      	mov	sp, r7
 8011432:	bd80      	pop	{r7, pc}

08011434 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011434:	b580      	push	{r7, lr}
 8011436:	b084      	sub	sp, #16
 8011438:	af00      	add	r7, sp, #0
 801143a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f000 feaf 	bl	80121a0 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 8011442:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011444:	68f8      	ldr	r0, [r7, #12]
 8011446:	f000 feb7 	bl	80121b8 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>
 801144a:	4603      	mov	r3, r0
	}
 801144c:	4618      	mov	r0, r3
 801144e:	3710      	adds	r7, #16
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011454:	b590      	push	{r4, r7, lr}
 8011456:	b083      	sub	sp, #12
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f000 feb6 	bl	80121ce <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8011462:	4603      	mov	r3, r0
 8011464:	4619      	mov	r1, r3
 8011466:	4620      	mov	r0, r4
 8011468:	f000 febc 	bl	80121e4 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 801146c:	bf00      	nop
 801146e:	370c      	adds	r7, #12
 8011470:	46bd      	mov	sp, r7
 8011472:	bd90      	pop	{r4, r7, pc}

08011474 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7fb fada 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 8011482:	4603      	mov	r3, r0
 8011484:	4618      	mov	r0, r3
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 801148c:	b5b0      	push	{r4, r5, r7, lr}
 801148e:	b084      	sub	sp, #16
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	60b9      	str	r1, [r7, #8]
 8011496:	4613      	mov	r3, r2
 8011498:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 801149a:	79fb      	ldrb	r3, [r7, #7]
 801149c:	2b03      	cmp	r3, #3
 801149e:	d016      	beq.n	80114ce <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 80114a0:	2b03      	cmp	r3, #3
 80114a2:	dc19      	bgt.n	80114d8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d002      	beq.n	80114ae <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 80114a8:	2b02      	cmp	r3, #2
 80114aa:	d00a      	beq.n	80114c2 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 80114ac:	e014      	b.n	80114d8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80114ae:	68b8      	ldr	r0, [r7, #8]
 80114b0:	f7ff ffc0 	bl	8011434 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 80114b4:	4604      	mov	r4, r0
 80114b6:	68f8      	ldr	r0, [r7, #12]
 80114b8:	f7ff ffdc 	bl	8011474 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 80114bc:	4603      	mov	r3, r0
 80114be:	601c      	str	r4, [r3, #0]
	      break;
 80114c0:	e00a      	b.n	80114d8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80114c2:	462a      	mov	r2, r5
 80114c4:	68b9      	ldr	r1, [r7, #8]
 80114c6:	68f8      	ldr	r0, [r7, #12]
 80114c8:	f000 fe9c 	bl	8012204 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 80114cc:	e004      	b.n	80114d8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80114ce:	4621      	mov	r1, r4
 80114d0:	68f8      	ldr	r0, [r7, #12]
 80114d2:	f000 feac 	bl	801222e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80114d6:	bf00      	nop
	  return false;
 80114d8:	2300      	movs	r3, #0
	}
 80114da:	4618      	mov	r0, r3
 80114dc:	3710      	adds	r7, #16
 80114de:	46bd      	mov	sp, r7
 80114e0:	bdb0      	pop	{r4, r5, r7, pc}

080114e2 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b084      	sub	sp, #16
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	60f8      	str	r0, [r7, #12]
 80114ea:	60b9      	str	r1, [r7, #8]
 80114ec:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80114ee:	68b8      	ldr	r0, [r7, #8]
 80114f0:	f7ff f818 	bl	8010524 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	f7fb fa9e 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 80114fa:	4603      	mov	r3, r0
 80114fc:	4619      	mov	r1, r3
 80114fe:	2001      	movs	r0, #1
 8011500:	f7ee ff16 	bl	8000330 <_ZnwjPv>
 8011504:	bf00      	nop
 8011506:	3710      	adds	r7, #16
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f000 fe96 	bl	8012246 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 801151a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 801151c:	68f8      	ldr	r0, [r7, #12]
 801151e:	f000 fe9e 	bl	801225e <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>
 8011522:	4603      	mov	r3, r0
	}
 8011524:	4618      	mov	r0, r3
 8011526:	3710      	adds	r7, #16
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 801152c:	b590      	push	{r4, r7, lr}
 801152e:	b083      	sub	sp, #12
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f000 fe9d 	bl	8012274 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 801153a:	4603      	mov	r3, r0
 801153c:	4619      	mov	r1, r3
 801153e:	4620      	mov	r0, r4
 8011540:	f000 fea3 	bl	801228a <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8011544:	bf00      	nop
 8011546:	370c      	adds	r7, #12
 8011548:	46bd      	mov	sp, r7
 801154a:	bd90      	pop	{r4, r7, pc}

0801154c <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 801154c:	b580      	push	{r7, lr}
 801154e:	b082      	sub	sp, #8
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f7fb fa6e 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 801155a:	4603      	mov	r3, r0
 801155c:	4618      	mov	r0, r3
 801155e:	3708      	adds	r7, #8
 8011560:	46bd      	mov	sp, r7
 8011562:	bd80      	pop	{r7, pc}

08011564 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011564:	b5b0      	push	{r4, r5, r7, lr}
 8011566:	b084      	sub	sp, #16
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	4613      	mov	r3, r2
 8011570:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011572:	79fb      	ldrb	r3, [r7, #7]
 8011574:	2b03      	cmp	r3, #3
 8011576:	d016      	beq.n	80115a6 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8011578:	2b03      	cmp	r3, #3
 801157a:	dc19      	bgt.n	80115b0 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 801157c:	2b01      	cmp	r3, #1
 801157e:	d002      	beq.n	8011586 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8011580:	2b02      	cmp	r3, #2
 8011582:	d00a      	beq.n	801159a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8011584:	e014      	b.n	80115b0 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011586:	68b8      	ldr	r0, [r7, #8]
 8011588:	f7ff ffc0 	bl	801150c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 801158c:	4604      	mov	r4, r0
 801158e:	68f8      	ldr	r0, [r7, #12]
 8011590:	f7ff ffdc 	bl	801154c <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 8011594:	4603      	mov	r3, r0
 8011596:	601c      	str	r4, [r3, #0]
	      break;
 8011598:	e00a      	b.n	80115b0 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 801159a:	462a      	mov	r2, r5
 801159c:	68b9      	ldr	r1, [r7, #8]
 801159e:	68f8      	ldr	r0, [r7, #12]
 80115a0:	f000 fe83 	bl	80122aa <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 80115a4:	e004      	b.n	80115b0 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80115a6:	4621      	mov	r1, r4
 80115a8:	68f8      	ldr	r0, [r7, #12]
 80115aa:	f000 fe93 	bl	80122d4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80115ae:	bf00      	nop
	  return false;
 80115b0:	2300      	movs	r3, #0
	}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bdb0      	pop	{r4, r5, r7, pc}

080115ba <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80115ba:	b590      	push	{r4, r7, lr}
 80115bc:	b087      	sub	sp, #28
 80115be:	af00      	add	r7, sp, #0
 80115c0:	60f8      	str	r0, [r7, #12]
 80115c2:	60b9      	str	r1, [r7, #8]
 80115c4:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	f000 fe90 	bl	80122ec <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 80115cc:	4604      	mov	r4, r0
 80115ce:	68f8      	ldr	r0, [r7, #12]
 80115d0:	f000 fe9d 	bl	801230e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 80115d4:	4603      	mov	r3, r0
 80115d6:	1ae2      	subs	r2, r4, r3
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	429a      	cmp	r2, r3
 80115dc:	bf34      	ite	cc
 80115de:	2301      	movcc	r3, #1
 80115e0:	2300      	movcs	r3, #0
 80115e2:	b2db      	uxtb	r3, r3
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d002      	beq.n	80115ee <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f00f f85f 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80115ee:	68f8      	ldr	r0, [r7, #12]
 80115f0:	f000 fe8d 	bl	801230e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 80115f4:	4604      	mov	r4, r0
 80115f6:	68f8      	ldr	r0, [r7, #12]
 80115f8:	f000 fe89 	bl	801230e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 80115fc:	4603      	mov	r3, r0
 80115fe:	613b      	str	r3, [r7, #16]
 8011600:	f107 0208 	add.w	r2, r7, #8
 8011604:	f107 0310 	add.w	r3, r7, #16
 8011608:	4611      	mov	r1, r2
 801160a:	4618      	mov	r0, r3
 801160c:	f7f1 f921 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8011610:	4603      	mov	r3, r0
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	4423      	add	r3, r4
 8011616:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011618:	68f8      	ldr	r0, [r7, #12]
 801161a:	f000 fe78 	bl	801230e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 801161e:	4602      	mov	r2, r0
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	4293      	cmp	r3, r2
 8011624:	d306      	bcc.n	8011634 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011626:	68f8      	ldr	r0, [r7, #12]
 8011628:	f000 fe60 	bl	80122ec <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 801162c:	4602      	mov	r2, r0
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	4293      	cmp	r3, r2
 8011632:	d904      	bls.n	801163e <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f000 fe59 	bl	80122ec <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 801163a:	4603      	mov	r3, r0
 801163c:	e000      	b.n	8011640 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x86>
 801163e:	697b      	ldr	r3, [r7, #20]
      }
 8011640:	4618      	mov	r0, r3
 8011642:	371c      	adds	r7, #28
 8011644:	46bd      	mov	sp, r7
 8011646:	bd90      	pop	{r4, r7, pc}

08011648 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011648:	b590      	push	{r4, r7, lr}
 801164a:	b083      	sub	sp, #12
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f7fb fbdc 	bl	800ce10 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011658:	4603      	mov	r3, r0
 801165a:	681c      	ldr	r4, [r3, #0]
 801165c:	6838      	ldr	r0, [r7, #0]
 801165e:	f7fb fbd7 	bl	800ce10 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011662:	4603      	mov	r3, r0
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	1ae3      	subs	r3, r4, r3
 8011668:	109b      	asrs	r3, r3, #2
 801166a:	4618      	mov	r0, r3
 801166c:	370c      	adds	r7, #12
 801166e:	46bd      	mov	sp, r7
 8011670:	bd90      	pop	{r4, r7, pc}

08011672 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011672:	b580      	push	{r7, lr}
 8011674:	b082      	sub	sp, #8
 8011676:	af00      	add	r7, sp, #0
 8011678:	6078      	str	r0, [r7, #4]
 801167a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d006      	beq.n	8011690 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x1e>
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6839      	ldr	r1, [r7, #0]
 8011686:	4618      	mov	r0, r3
 8011688:	f000 fe51 	bl	801232e <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>
 801168c:	4603      	mov	r3, r0
 801168e:	e000      	b.n	8011692 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x20>
 8011690:	2300      	movs	r3, #0
      }
 8011692:	4618      	mov	r0, r3
 8011694:	3708      	adds	r7, #8
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}

0801169a <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801169a:	b590      	push	{r4, r7, lr}
 801169c:	b087      	sub	sp, #28
 801169e:	af02      	add	r7, sp, #8
 80116a0:	60f8      	str	r0, [r7, #12]
 80116a2:	60b9      	str	r1, [r7, #8]
 80116a4:	607a      	str	r2, [r7, #4]
 80116a6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80116a8:	f88d 4000 	strb.w	r4, [sp]
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	687a      	ldr	r2, [r7, #4]
 80116b0:	68b9      	ldr	r1, [r7, #8]
 80116b2:	68f8      	ldr	r0, [r7, #12]
 80116b4:	f000 fe5b 	bl	801236e <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80116b8:	4603      	mov	r3, r0
      }
 80116ba:	4618      	mov	r0, r3
 80116bc:	3714      	adds	r7, #20
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd90      	pop	{r4, r7, pc}

080116c2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b084      	sub	sp, #16
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
 80116ca:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	425b      	negs	r3, r3
 80116d6:	4413      	add	r3, r2
 80116d8:	60fb      	str	r3, [r7, #12]
 80116da:	f107 020c 	add.w	r2, r7, #12
 80116de:	f107 0308 	add.w	r3, r7, #8
 80116e2:	4611      	mov	r1, r2
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7fe f922 	bl	800f92e <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	4618      	mov	r0, r3
 80116ee:	3710      	adds	r7, #16
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}

080116f4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 80116f4:	b480      	push	{r7}
 80116f6:	b083      	sub	sp, #12
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	4618      	mov	r0, r3
 8011700:	370c      	adds	r7, #12
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr

0801170a <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 801170a:	b480      	push	{r7}
 801170c:	b083      	sub	sp, #12
 801170e:	af00      	add	r7, sp, #0
 8011710:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	4618      	mov	r0, r3
 8011716:	370c      	adds	r7, #12
 8011718:	46bd      	mov	sp, r7
 801171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171e:	4770      	bx	lr

08011720 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8011720:	b480      	push	{r7}
 8011722:	b083      	sub	sp, #12
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	4618      	mov	r0, r3
 801172c:	370c      	adds	r7, #12
 801172e:	46bd      	mov	sp, r7
 8011730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011734:	4770      	bx	lr

08011736 <_ZN9__gnu_cxx13new_allocatorIjEC1Ev>:
 8011736:	b480      	push	{r7}
 8011738:	b083      	sub	sp, #12
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	4618      	mov	r0, r3
 8011742:	370c      	adds	r7, #12
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801174c:	b580      	push	{r7, lr}
 801174e:	b088      	sub	sp, #32
 8011750:	af00      	add	r7, sp, #0
 8011752:	60f8      	str	r0, [r7, #12]
 8011754:	60b9      	str	r1, [r7, #8]
 8011756:	607a      	str	r2, [r7, #4]
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	61fb      	str	r3, [r7, #28]
 801175c:	68bb      	ldr	r3, [r7, #8]
 801175e:	61bb      	str	r3, [r7, #24]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8011764:	f7ee fddc 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8011768:	4603      	mov	r3, r0
 801176a:	2b00      	cmp	r3, #0
 801176c:	d003      	beq.n	8011776 <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj+0x2a>
	    ::operator delete(__p);
 801176e:	69b8      	ldr	r0, [r7, #24]
 8011770:	f00e fece 	bl	8020510 <_ZdlPv>
	    return;
 8011774:	e005      	b.n	8011782 <_ZNSt16allocator_traitsISaIjEE10deallocateERS0_Pjj+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8011776:	697a      	ldr	r2, [r7, #20]
 8011778:	69b9      	ldr	r1, [r7, #24]
 801177a:	69f8      	ldr	r0, [r7, #28]
 801177c:	f001 fb52 	bl	8012e24 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>
      { __a.deallocate(__p, __n); }
 8011780:	bf00      	nop
 8011782:	bf00      	nop
 8011784:	3720      	adds	r7, #32
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}

0801178a <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
 801178a:	b480      	push	{r7}
 801178c:	b083      	sub	sp, #12
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	4618      	mov	r0, r3
 8011796:	370c      	adds	r7, #12
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr

080117a0 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b088      	sub	sp, #32
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	607a      	str	r2, [r7, #4]
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	61fb      	str	r3, [r7, #28]
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	61bb      	str	r3, [r7, #24]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80117b8:	f7ee fdb2 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80117bc:	4603      	mov	r3, r0
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d003      	beq.n	80117ca <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 80117c2:	69b8      	ldr	r0, [r7, #24]
 80117c4:	f00e fea4 	bl	8020510 <_ZdlPv>
	    return;
 80117c8:	e005      	b.n	80117d6 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80117ca:	697a      	ldr	r2, [r7, #20]
 80117cc:	69b9      	ldr	r1, [r7, #24]
 80117ce:	69f8      	ldr	r0, [r7, #28]
 80117d0:	f001 fb37 	bl	8012e42 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 80117d4:	bf00      	nop
 80117d6:	bf00      	nop
 80117d8:	3720      	adds	r7, #32
 80117da:	46bd      	mov	sp, r7
 80117dc:	bd80      	pop	{r7, pc}

080117de <_ZSt4moveIRjEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 80117de:	b480      	push	{r7}
 80117e0:	b083      	sub	sp, #12
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	4618      	mov	r0, r3
 80117ea:	370c      	adds	r7, #12
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr

080117f4 <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEERjDpOT_>:
      vector<_Tp, _Alloc>::
 80117f4:	b5b0      	push	{r4, r5, r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	685a      	ldr	r2, [r3, #4]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	429a      	cmp	r2, r3
 8011808:	d011      	beq.n	801182e <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEERjDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801180a:	687c      	ldr	r4, [r7, #4]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	685d      	ldr	r5, [r3, #4]
 8011810:	6838      	ldr	r0, [r7, #0]
 8011812:	f7fe f801 	bl	800f818 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8011816:	4603      	mov	r3, r0
 8011818:	461a      	mov	r2, r3
 801181a:	4629      	mov	r1, r5
 801181c:	4620      	mov	r0, r4
 801181e:	f000 fdcd 	bl	80123bc <_ZNSt16allocator_traitsISaIjEE9constructIjJjEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	1d1a      	adds	r2, r3, #4
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	605a      	str	r2, [r3, #4]
 801182c:	e00c      	b.n	8011848 <_ZNSt6vectorIjSaIjEE12emplace_backIJjEEERjDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f000 fdd6 	bl	80123e0 <_ZNSt6vectorIjSaIjEE3endEv>
 8011834:	4604      	mov	r4, r0
 8011836:	6838      	ldr	r0, [r7, #0]
 8011838:	f7fd ffee 	bl	800f818 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 801183c:	4603      	mov	r3, r0
 801183e:	461a      	mov	r2, r3
 8011840:	4621      	mov	r1, r4
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 fdde 	bl	8012404 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>
	return back();
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f000 fe57 	bl	80124fc <_ZNSt6vectorIjSaIjEE4backEv>
 801184e:	4603      	mov	r3, r0
      }
 8011850:	4618      	mov	r0, r3
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bdb0      	pop	{r4, r5, r7, pc}

08011858 <_ZSt4moveIRPvEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	4618      	mov	r0, r3
 8011864:	370c      	adds	r7, #12
 8011866:	46bd      	mov	sp, r7
 8011868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186c:	4770      	bx	lr

0801186e <_ZNSt6vectorIPvSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_>:
      vector<_Tp, _Alloc>::
 801186e:	b5b0      	push	{r4, r5, r7, lr}
 8011870:	b082      	sub	sp, #8
 8011872:	af00      	add	r7, sp, #0
 8011874:	6078      	str	r0, [r7, #4]
 8011876:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	685a      	ldr	r2, [r3, #4]
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	689b      	ldr	r3, [r3, #8]
 8011880:	429a      	cmp	r2, r3
 8011882:	d011      	beq.n	80118a8 <_ZNSt6vectorIPvSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8011884:	687c      	ldr	r4, [r7, #4]
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	685d      	ldr	r5, [r3, #4]
 801188a:	6838      	ldr	r0, [r7, #0]
 801188c:	f000 fe51 	bl	8012532 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8011890:	4603      	mov	r3, r0
 8011892:	461a      	mov	r2, r3
 8011894:	4629      	mov	r1, r5
 8011896:	4620      	mov	r0, r4
 8011898:	f000 fe6b 	bl	8012572 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	685b      	ldr	r3, [r3, #4]
 80118a0:	1d1a      	adds	r2, r3, #4
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	605a      	str	r2, [r3, #4]
 80118a6:	e00c      	b.n	80118c2 <_ZNSt6vectorIPvSaIS0_EE12emplace_backIJS0_EEERS0_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 fe74 	bl	8012596 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 80118ae:	4604      	mov	r4, r0
 80118b0:	6838      	ldr	r0, [r7, #0]
 80118b2:	f000 fe3e 	bl	8012532 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 80118b6:	4603      	mov	r3, r0
 80118b8:	461a      	mov	r2, r3
 80118ba:	4621      	mov	r1, r4
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 fe7b 	bl	80125b8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
	return back();
 80118c2:	6878      	ldr	r0, [r7, #4]
 80118c4:	f000 fef4 	bl	80126b0 <_ZNSt6vectorIPvSaIS0_EE4backEv>
 80118c8:	4603      	mov	r3, r0
      }
 80118ca:	4618      	mov	r0, r3
 80118cc:	3708      	adds	r7, #8
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bdb0      	pop	{r4, r5, r7, pc}

080118d2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80118d2:	b580      	push	{r7, lr}
 80118d4:	b082      	sub	sp, #8
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
 80118da:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d00a      	beq.n	80118fa <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f000 ff0d 	bl	8012704 <_ZSt11__addressofIP13StreamMessageEPT_RS2_>
 80118ea:	4603      	mov	r3, r0
 80118ec:	4618      	mov	r0, r3
 80118ee:	f000 ff14 	bl	801271a <_ZSt8_DestroyIP13StreamMessageEvPT_>
	  for (; __first != __last; ++__first)
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	3304      	adds	r3, #4
 80118f6:	607b      	str	r3, [r7, #4]
 80118f8:	e7f0      	b.n	80118dc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0xa>
	}
 80118fa:	bf00      	nop
 80118fc:	3708      	adds	r7, #8
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8011902:	b480      	push	{r7}
 8011904:	b083      	sub	sp, #12
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
 801190a:	6039      	str	r1, [r7, #0]
 801190c:	bf00      	nop
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr

08011918 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011918:	b590      	push	{r4, r7, lr}
 801191a:	b087      	sub	sp, #28
 801191c:	af00      	add	r7, sp, #0
 801191e:	60f8      	str	r0, [r7, #12]
 8011920:	60b9      	str	r1, [r7, #8]
 8011922:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011924:	68f8      	ldr	r0, [r7, #12]
 8011926:	f000 ff03 	bl	8012730 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 801192a:	4604      	mov	r4, r0
 801192c:	68f8      	ldr	r0, [r7, #12]
 801192e:	f000 ff10 	bl	8012752 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8011932:	4603      	mov	r3, r0
 8011934:	1ae2      	subs	r2, r4, r3
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	429a      	cmp	r2, r3
 801193a:	bf34      	ite	cc
 801193c:	2301      	movcc	r3, #1
 801193e:	2300      	movcs	r3, #0
 8011940:	b2db      	uxtb	r3, r3
 8011942:	2b00      	cmp	r3, #0
 8011944:	d002      	beq.n	801194c <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f00e feb0 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801194c:	68f8      	ldr	r0, [r7, #12]
 801194e:	f000 ff00 	bl	8012752 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8011952:	4604      	mov	r4, r0
 8011954:	68f8      	ldr	r0, [r7, #12]
 8011956:	f000 fefc 	bl	8012752 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 801195a:	4603      	mov	r3, r0
 801195c:	613b      	str	r3, [r7, #16]
 801195e:	f107 0208 	add.w	r2, r7, #8
 8011962:	f107 0310 	add.w	r3, r7, #16
 8011966:	4611      	mov	r1, r2
 8011968:	4618      	mov	r0, r3
 801196a:	f7f0 ff72 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 801196e:	4603      	mov	r3, r0
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	4423      	add	r3, r4
 8011974:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011976:	68f8      	ldr	r0, [r7, #12]
 8011978:	f000 feeb 	bl	8012752 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 801197c:	4602      	mov	r2, r0
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	4293      	cmp	r3, r2
 8011982:	d306      	bcc.n	8011992 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f000 fed3 	bl	8012730 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 801198a:	4602      	mov	r2, r0
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	4293      	cmp	r3, r2
 8011990:	d904      	bls.n	801199c <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011992:	68f8      	ldr	r0, [r7, #12]
 8011994:	f000 fecc 	bl	8012730 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8011998:	4603      	mov	r3, r0
 801199a:	e000      	b.n	801199e <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x86>
 801199c:	697b      	ldr	r3, [r7, #20]
      }
 801199e:	4618      	mov	r0, r3
 80119a0:	371c      	adds	r7, #28
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd90      	pop	{r4, r7, pc}

080119a6 <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80119a6:	b590      	push	{r4, r7, lr}
 80119a8:	b083      	sub	sp, #12
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
 80119ae:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f7fb fd29 	bl	800d408 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80119b6:	4603      	mov	r3, r0
 80119b8:	681c      	ldr	r4, [r3, #0]
 80119ba:	6838      	ldr	r0, [r7, #0]
 80119bc:	f7fb fd24 	bl	800d408 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80119c0:	4603      	mov	r3, r0
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	1ae3      	subs	r3, r4, r3
 80119c6:	109b      	asrs	r3, r3, #2
 80119c8:	4618      	mov	r0, r3
 80119ca:	370c      	adds	r7, #12
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd90      	pop	{r4, r7, pc}

080119d0 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d006      	beq.n	80119ee <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x1e>
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6839      	ldr	r1, [r7, #0]
 80119e4:	4618      	mov	r0, r3
 80119e6:	f000 fec4 	bl	8012772 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>
 80119ea:	4603      	mov	r3, r0
 80119ec:	e000      	b.n	80119f0 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x20>
 80119ee:	2300      	movs	r3, #0
      }
 80119f0:	4618      	mov	r0, r3
 80119f2:	3708      	adds	r7, #8
 80119f4:	46bd      	mov	sp, r7
 80119f6:	bd80      	pop	{r7, pc}

080119f8 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80119f8:	b590      	push	{r4, r7, lr}
 80119fa:	b087      	sub	sp, #28
 80119fc:	af02      	add	r7, sp, #8
 80119fe:	60f8      	str	r0, [r7, #12]
 8011a00:	60b9      	str	r1, [r7, #8]
 8011a02:	607a      	str	r2, [r7, #4]
 8011a04:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011a06:	f88d 4000 	strb.w	r4, [sp]
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	68b9      	ldr	r1, [r7, #8]
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f000 fece 	bl	80127b2 <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8011a16:	4603      	mov	r3, r0
      }
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3714      	adds	r7, #20
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd90      	pop	{r4, r7, pc}

08011a20 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681a      	ldr	r2, [r3, #0]
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	425b      	negs	r3, r3
 8011a34:	4413      	add	r3, r2
 8011a36:	60fb      	str	r3, [r7, #12]
 8011a38:	f107 020c 	add.w	r2, r7, #12
 8011a3c:	f107 0308 	add.w	r3, r7, #8
 8011a40:	4611      	mov	r1, r2
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fe f9df 	bl	800fe06 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3710      	adds	r7, #16
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}

08011a52 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8011a52:	b580      	push	{r7, lr}
 8011a54:	b082      	sub	sp, #8
 8011a56:	af00      	add	r7, sp, #0
 8011a58:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f000 fee0 	bl	8012822 <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8011a62:	4603      	mov	r3, r0
 8011a64:	4618      	mov	r0, r3
 8011a66:	f000 fec2 	bl	80127ee <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8011a74:	b480      	push	{r7}
 8011a76:	b083      	sub	sp, #12
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	685a      	ldr	r2, [r3, #4]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	1ad3      	subs	r3, r2, r3
 8011a86:	109b      	asrs	r3, r3, #2
 8011a88:	4618      	mov	r0, r3
 8011a8a:	370c      	adds	r7, #12
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a92:	4770      	bx	lr

08011a94 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	60fb      	str	r3, [r7, #12]
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8011aa6:	f7ee fc3b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d006      	beq.n	8011abe <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	009b      	lsls	r3, r3, #2
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f00e fd2f 	bl	8020518 <_Znwj>
 8011aba:	4603      	mov	r3, r0
 8011abc:	e006      	b.n	8011acc <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8011abe:	2200      	movs	r2, #0
 8011ac0:	68b9      	ldr	r1, [r7, #8]
 8011ac2:	68f8      	ldr	r0, [r7, #12]
 8011ac4:	f001 fbc2 	bl	801324c <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	bf00      	nop
      { return __a.allocate(__n); }
 8011acc:	4618      	mov	r0, r3
 8011ace:	3710      	adds	r7, #16
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}

08011ad4 <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	60f8      	str	r0, [r7, #12]
 8011adc:	60b9      	str	r1, [r7, #8]
 8011ade:	607a      	str	r2, [r7, #4]
 8011ae0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	68b9      	ldr	r1, [r7, #8]
 8011ae8:	68f8      	ldr	r0, [r7, #12]
 8011aea:	f000 fea5 	bl	8012838 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>
 8011aee:	4603      	mov	r3, r0
      }
 8011af0:	4618      	mov	r0, r3
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <_ZSt10destroy_atIP13StreamMessageEvPT_>:
    destroy_at(_Tp* __location)
 8011af8:	b480      	push	{r7}
 8011afa:	b083      	sub	sp, #12
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
    }
 8011b00:	bf00      	nop
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr

08011b0c <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessageEUlvE_EERKT_v>:
      _M_access() const
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f7fa ff99 	bl	800ca4c <_ZNKSt9_Any_data9_M_accessEv>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	3708      	adds	r7, #8
 8011b20:	46bd      	mov	sp, r7
 8011b22:	bd80      	pop	{r7, pc}

08011b24 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessageEUlvE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	370c      	adds	r7, #12
 8011b32:	46bd      	mov	sp, r7
 8011b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b38:	4770      	bx	lr

08011b3a <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011b3a:	b480      	push	{r7}
 8011b3c:	b083      	sub	sp, #12
 8011b3e:	af00      	add	r7, sp, #0
 8011b40:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4618      	mov	r0, r3
 8011b46:	370c      	adds	r7, #12
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4e:	4770      	bx	lr

08011b50 <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessageEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	7138      	strb	r0, [r7, #4]
 8011b58:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8011b5a:	6838      	ldr	r0, [r7, #0]
 8011b5c:	f7ff ffed 	bl	8011b3a <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessageEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8011b60:	4603      	mov	r3, r0
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7fb fbe5 	bl	800d332 <_ZZN6Stream11add_messageEmP13StreamMessageENKUlvE_clEv>
 8011b68:	bf00      	nop
 8011b6a:	3708      	adds	r7, #8
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8011b70:	b590      	push	{r4, r7, lr}
 8011b72:	b085      	sub	sp, #20
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8011b7c:	68b8      	ldr	r0, [r7, #8]
 8011b7e:	f7ff ffc5 	bl	8011b0c <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessageEUlvE_EERKT_v>
 8011b82:	4604      	mov	r4, r0
 8011b84:	68f8      	ldr	r0, [r7, #12]
 8011b86:	f7fa ff56 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	2004      	movs	r0, #4
 8011b90:	f7ee fbce 	bl	8000330 <_ZnwjPv>
 8011b94:	4602      	mov	r2, r0
 8011b96:	6823      	ldr	r3, [r4, #0]
 8011b98:	6013      	str	r3, [r2, #0]
	}
 8011b9a:	bf00      	nop
 8011b9c:	3714      	adds	r7, #20
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd90      	pop	{r4, r7, pc}

08011ba2 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessageEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8011ba2:	b580      	push	{r7, lr}
 8011ba4:	b082      	sub	sp, #8
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	6078      	str	r0, [r7, #4]
 8011baa:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f000 fe60 	bl	8012872 <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessageEUlvE_EERT_v>
	}
 8011bb2:	bf00      	nop
 8011bb4:	3708      	adds	r7, #8
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}

08011bba <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>:
 8011bba:	b480      	push	{r7}
 8011bbc:	b083      	sub	sp, #12
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	370c      	adds	r7, #12
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bce:	4770      	bx	lr

08011bd0 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b088      	sub	sp, #32
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	607a      	str	r2, [r7, #4]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	61fb      	str	r3, [r7, #28]
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	61bb      	str	r3, [r7, #24]
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8011be8:	f7ee fb9a 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8011bec:	4603      	mov	r3, r0
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d003      	beq.n	8011bfa <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 8011bf2:	69b8      	ldr	r0, [r7, #24]
 8011bf4:	f00e fc8c 	bl	8020510 <_ZdlPv>
	    return;
 8011bf8:	e005      	b.n	8011c06 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8011bfa:	697a      	ldr	r2, [r7, #20]
 8011bfc:	69b9      	ldr	r1, [r7, #24]
 8011bfe:	69f8      	ldr	r0, [r7, #28]
 8011c00:	f001 fb6c 	bl	80132dc <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 8011c04:	bf00      	nop
 8011c06:	bf00      	nop
 8011c08:	3720      	adds	r7, #32
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}

08011c0e <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8011c0e:	b580      	push	{r7, lr}
 8011c10:	b082      	sub	sp, #8
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	6078      	str	r0, [r7, #4]
 8011c16:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8011c18:	f7ee fb82 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d004      	beq.n	8011c2c <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8011c22:	6839      	ldr	r1, [r7, #0]
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f000 fe30 	bl	801288a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>
 8011c2a:	e003      	b.n	8011c34 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x26>
	__destroy(__first, __last);
 8011c2c:	6839      	ldr	r1, [r7, #0]
 8011c2e:	6878      	ldr	r0, [r7, #4]
 8011c30:	f000 fe43 	bl	80128ba <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>
    }
 8011c34:	3708      	adds	r7, #8
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}

08011c3a <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8011c3a:	b480      	push	{r7}
 8011c3c:	b083      	sub	sp, #12
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	4618      	mov	r0, r3
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      vector<_Tp, _Alloc>::
 8011c50:	b5b0      	push	{r4, r5, r7, lr}
 8011c52:	b082      	sub	sp, #8
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	685a      	ldr	r2, [r3, #4]
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	689b      	ldr	r3, [r3, #8]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d011      	beq.n	8011c8a <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8011c66:	687c      	ldr	r4, [r7, #4]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	685d      	ldr	r5, [r3, #4]
 8011c6c:	6838      	ldr	r0, [r7, #0]
 8011c6e:	f000 fe2f 	bl	80128d0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011c72:	4603      	mov	r3, r0
 8011c74:	461a      	mov	r2, r3
 8011c76:	4629      	mov	r1, r5
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f000 fe49 	bl	8012910 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	685b      	ldr	r3, [r3, #4]
 8011c82:	1d1a      	adds	r2, r3, #4
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	605a      	str	r2, [r3, #4]
 8011c88:	e00c      	b.n	8011ca4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f7f3 fa61 	bl	8005152 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8011c90:	4604      	mov	r4, r0
 8011c92:	6838      	ldr	r0, [r7, #0]
 8011c94:	f000 fe1c 	bl	80128d0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	4621      	mov	r1, r4
 8011c9e:	6878      	ldr	r0, [r7, #4]
 8011ca0:	f000 fe48 	bl	8012934 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
	return back();
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f000 fec1 	bl	8012a2c <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>
 8011caa:	4603      	mov	r3, r0
      }
 8011cac:	4618      	mov	r0, r3
 8011cae:	3708      	adds	r7, #8
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bdb0      	pop	{r4, r5, r7, pc}

08011cb4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8011cb4:	b590      	push	{r4, r7, lr}
 8011cb6:	b083      	sub	sp, #12
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f7f9 fda6 	bl	800b810 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f000 fecb 	bl	8012a62 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	4621      	mov	r1, r4
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f000 fed1 	bl	8012a7a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	4618      	mov	r0, r3
 8011cdc:	370c      	adds	r7, #12
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd90      	pop	{r4, r7, pc}

08011ce2 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 8011ce2:	b480      	push	{r7}
 8011ce4:	b083      	sub	sp, #12
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8011cea:	bf00      	nop
 8011cec:	4618      	mov	r0, r3
 8011cee:	370c      	adds	r7, #12
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf6:	4770      	bx	lr

08011cf8 <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b082      	sub	sp, #8
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6839      	ldr	r1, [r7, #0]
 8011d06:	4618      	mov	r0, r3
 8011d08:	f000 fee8 	bl	8012adc <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3708      	adds	r7, #8
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}

08011d16 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011d16:	b480      	push	{r7}
 8011d18:	b083      	sub	sp, #12
 8011d1a:	af00      	add	r7, sp, #0
 8011d1c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	4618      	mov	r0, r3
 8011d22:	370c      	adds	r7, #12
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8011d2c:	b5b0      	push	{r4, r5, r7, lr}
 8011d2e:	b088      	sub	sp, #32
 8011d30:	af02      	add	r7, sp, #8
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	607a      	str	r2, [r7, #4]
 8011d38:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8011d3a:	68f8      	ldr	r0, [r7, #12]
 8011d3c:	f000 fedd 	bl	8012afa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8011d40:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8011d42:	68b8      	ldr	r0, [r7, #8]
 8011d44:	f7ef fa8f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011d48:	4604      	mov	r4, r0
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f7ff ffe3 	bl	8011d16 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011d50:	4605      	mov	r5, r0
 8011d52:	6838      	ldr	r0, [r7, #0]
 8011d54:	f7ef fa9d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	9300      	str	r3, [sp, #0]
 8011d5c:	462b      	mov	r3, r5
 8011d5e:	4622      	mov	r2, r4
 8011d60:	6979      	ldr	r1, [r7, #20]
 8011d62:	68f8      	ldr	r0, [r7, #12]
 8011d64:	f000 feda 	bl	8012b1c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8011d68:	697b      	ldr	r3, [r7, #20]
	}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3718      	adds	r7, #24
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bdb0      	pop	{r4, r5, r7, pc}

08011d72 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011d72:	b590      	push	{r4, r7, lr}
 8011d74:	b08d      	sub	sp, #52	; 0x34
 8011d76:	af00      	add	r7, sp, #0
 8011d78:	60f8      	str	r0, [r7, #12]
 8011d7a:	60b9      	str	r1, [r7, #8]
 8011d7c:	607a      	str	r2, [r7, #4]
 8011d7e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8011d80:	1d3b      	adds	r3, r7, #4
 8011d82:	4618      	mov	r0, r3
 8011d84:	f000 fef7 	bl	8012b76 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8011d8c:	69bc      	ldr	r4, [r7, #24]
 8011d8e:	68b8      	ldr	r0, [r7, #8]
 8011d90:	f000 fe67 	bl	8012a62 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8011d94:	4603      	mov	r3, r0
 8011d96:	429c      	cmp	r4, r3
 8011d98:	bf0c      	ite	eq
 8011d9a:	2301      	moveq	r3, #1
 8011d9c:	2300      	movne	r3, #0
 8011d9e:	b2db      	uxtb	r3, r3
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d030      	beq.n	8011e06 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8011da4:	68b8      	ldr	r0, [r7, #8]
 8011da6:	f000 fef7 	bl	8012b98 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 8011daa:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d013      	beq.n	8011dd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8011db0:	68bc      	ldr	r4, [r7, #8]
 8011db2:	68b8      	ldr	r0, [r7, #8]
 8011db4:	f000 fefc 	bl	8012bb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8011db8:	4603      	mov	r3, r0
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f000 ff03 	bl	8012bc8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	683a      	ldr	r2, [r7, #0]
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f7ff f8a4 	bl	8010f16 <_ZNKSt4lessItEclERKtS2_>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d001      	beq.n	8011dd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	e000      	b.n	8011dda <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8011dd8:	2300      	movs	r3, #0
	  if (size() > 0
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d00c      	beq.n	8011df8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 8011dde:	2300      	movs	r3, #0
 8011de0:	61fb      	str	r3, [r7, #28]
 8011de2:	68b8      	ldr	r0, [r7, #8]
 8011de4:	f000 fee4 	bl	8012bb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8011de8:	4602      	mov	r2, r0
 8011dea:	f107 031c 	add.w	r3, r7, #28
 8011dee:	4619      	mov	r1, r3
 8011df0:	68f8      	ldr	r0, [r7, #12]
 8011df2:	f7f0 f859 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011df6:	e0db      	b.n	8011fb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	683a      	ldr	r2, [r7, #0]
 8011dfc:	68b9      	ldr	r1, [r7, #8]
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f000 feee 	bl	8012be0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8011e04:	e0d4      	b.n	8011fb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8011e06:	68bc      	ldr	r4, [r7, #8]
 8011e08:	69bb      	ldr	r3, [r7, #24]
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f000 fedc 	bl	8012bc8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011e10:	4603      	mov	r3, r0
 8011e12:	461a      	mov	r2, r3
 8011e14:	6839      	ldr	r1, [r7, #0]
 8011e16:	4620      	mov	r0, r4
 8011e18:	f7ff f87d 	bl	8010f16 <_ZNKSt4lessItEclERKtS2_>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d057      	beq.n	8011ed2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8011e22:	69bb      	ldr	r3, [r7, #24]
 8011e24:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8011e26:	69bc      	ldr	r4, [r7, #24]
 8011e28:	68b8      	ldr	r0, [r7, #8]
 8011e2a:	f000 ff5e 	bl	8012cea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	429c      	cmp	r4, r3
 8011e34:	bf0c      	ite	eq
 8011e36:	2301      	moveq	r3, #1
 8011e38:	2300      	movne	r3, #0
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00d      	beq.n	8011e5c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8011e40:	68b8      	ldr	r0, [r7, #8]
 8011e42:	f000 ff52 	bl	8012cea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8011e46:	4604      	mov	r4, r0
 8011e48:	68b8      	ldr	r0, [r7, #8]
 8011e4a:	f000 ff4e 	bl	8012cea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	461a      	mov	r2, r3
 8011e52:	4621      	mov	r1, r4
 8011e54:	68f8      	ldr	r0, [r7, #12]
 8011e56:	f7f0 f8d3 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011e5a:	e0a9      	b.n	8011fb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8011e5c:	68bc      	ldr	r4, [r7, #8]
 8011e5e:	f107 0314 	add.w	r3, r7, #20
 8011e62:	4618      	mov	r0, r3
 8011e64:	f000 ff4d 	bl	8012d02 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f000 feab 	bl	8012bc8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011e72:	4603      	mov	r3, r0
 8011e74:	683a      	ldr	r2, [r7, #0]
 8011e76:	4619      	mov	r1, r3
 8011e78:	4620      	mov	r0, r4
 8011e7a:	f7ff f84c 	bl	8010f16 <_ZNKSt4lessItEclERKtS2_>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d01f      	beq.n	8011ec4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f7f9 fcd9 	bl	800b83e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	bf0c      	ite	eq
 8011e92:	2301      	moveq	r3, #1
 8011e94:	2300      	movne	r3, #0
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d00a      	beq.n	8011eb2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	623b      	str	r3, [r7, #32]
 8011ea0:	f107 0214 	add.w	r2, r7, #20
 8011ea4:	f107 0320 	add.w	r3, r7, #32
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	68f8      	ldr	r0, [r7, #12]
 8011eac:	f7ef fffc 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011eb0:	e07e      	b.n	8011fb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8011eb2:	f107 0218 	add.w	r2, r7, #24
 8011eb6:	f107 0318 	add.w	r3, r7, #24
 8011eba:	4619      	mov	r1, r3
 8011ebc:	68f8      	ldr	r0, [r7, #12]
 8011ebe:	f7f0 f89f 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011ec2:	e075      	b.n	8011fb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	683a      	ldr	r2, [r7, #0]
 8011ec8:	68b9      	ldr	r1, [r7, #8]
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f000 fe88 	bl	8012be0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8011ed0:	e06e      	b.n	8011fb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8011ed2:	68bc      	ldr	r4, [r7, #8]
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f000 fe76 	bl	8012bc8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011edc:	4603      	mov	r3, r0
 8011ede:	683a      	ldr	r2, [r7, #0]
 8011ee0:	4619      	mov	r1, r3
 8011ee2:	4620      	mov	r0, r4
 8011ee4:	f7ff f817 	bl	8010f16 <_ZNKSt4lessItEclERKtS2_>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d056      	beq.n	8011f9c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 8011eee:	69bb      	ldr	r3, [r7, #24]
 8011ef0:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8011ef2:	69bc      	ldr	r4, [r7, #24]
 8011ef4:	68b8      	ldr	r0, [r7, #8]
 8011ef6:	f000 fe5b 	bl	8012bb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8011efa:	4603      	mov	r3, r0
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	429c      	cmp	r4, r3
 8011f00:	bf0c      	ite	eq
 8011f02:	2301      	moveq	r3, #1
 8011f04:	2300      	movne	r3, #0
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00c      	beq.n	8011f26 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8011f10:	68b8      	ldr	r0, [r7, #8]
 8011f12:	f000 fe4d 	bl	8012bb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8011f16:	4602      	mov	r2, r0
 8011f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	f7ef ffc2 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011f24:	e044      	b.n	8011fb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8011f26:	68bc      	ldr	r4, [r7, #8]
 8011f28:	f107 0310 	add.w	r3, r7, #16
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7f3 f94f 	bl	80051d0 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8011f32:	4603      	mov	r3, r0
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	4618      	mov	r0, r3
 8011f38:	f000 fe46 	bl	8012bc8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	461a      	mov	r2, r3
 8011f40:	6839      	ldr	r1, [r7, #0]
 8011f42:	4620      	mov	r0, r4
 8011f44:	f7fe ffe7 	bl	8010f16 <_ZNKSt4lessItEclERKtS2_>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d01f      	beq.n	8011f8e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8011f4e:	69bb      	ldr	r3, [r7, #24]
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7f9 fc74 	bl	800b83e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8011f56:	4603      	mov	r3, r0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	bf0c      	ite	eq
 8011f5c:	2301      	moveq	r3, #1
 8011f5e:	2300      	movne	r3, #0
 8011f60:	b2db      	uxtb	r3, r3
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d00a      	beq.n	8011f7c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8011f66:	2300      	movs	r3, #0
 8011f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f6a:	f107 0218 	add.w	r2, r7, #24
 8011f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f72:	4619      	mov	r1, r3
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f7ef ff97 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8011f7a:	e019      	b.n	8011fb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8011f7c:	f107 0210 	add.w	r2, r7, #16
 8011f80:	f107 0310 	add.w	r3, r7, #16
 8011f84:	4619      	mov	r1, r3
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f7f0 f83a 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8011f8c:	e010      	b.n	8011fb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	683a      	ldr	r2, [r7, #0]
 8011f92:	68b9      	ldr	r1, [r7, #8]
 8011f94:	4618      	mov	r0, r3
 8011f96:	f000 fe23 	bl	8012be0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8011f9a:	e009      	b.n	8011fb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fa0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011fa4:	f107 0318 	add.w	r3, r7, #24
 8011fa8:	4619      	mov	r1, r3
 8011faa:	68f8      	ldr	r0, [r7, #12]
 8011fac:	f7f0 f863 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8011fb0:	68f8      	ldr	r0, [r7, #12]
 8011fb2:	3734      	adds	r7, #52	; 0x34
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd90      	pop	{r4, r7, pc}

08011fb8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f000 feaf 	bl	8012d24 <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	f107 030c 	add.w	r3, r7, #12
 8011fcc:	4611      	mov	r1, r2
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f000 feb6 	bl	8012d40 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>
 8011fd4:	4603      	mov	r3, r0
      }
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3710      	adds	r7, #16
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}

08011fde <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011fde:	b5b0      	push	{r4, r5, r7, lr}
 8011fe0:	b086      	sub	sp, #24
 8011fe2:	af00      	add	r7, sp, #0
 8011fe4:	60f8      	str	r0, [r7, #12]
 8011fe6:	60b9      	str	r1, [r7, #8]
 8011fe8:	607a      	str	r2, [r7, #4]
 8011fea:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d117      	bne.n	8012022 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	f000 fd35 	bl	8012a62 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8011ff8:	4602      	mov	r2, r0
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d010      	beq.n	8012022 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 8012000:	68fc      	ldr	r4, [r7, #12]
 8012002:	6838      	ldr	r0, [r7, #0]
 8012004:	f7ff ffd8 	bl	8011fb8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012008:	4605      	mov	r5, r0
 801200a:	6878      	ldr	r0, [r7, #4]
 801200c:	f000 fddc 	bl	8012bc8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012010:	4603      	mov	r3, r0
 8012012:	461a      	mov	r2, r3
 8012014:	4629      	mov	r1, r5
 8012016:	4620      	mov	r0, r4
 8012018:	f7fe ff7d 	bl	8010f16 <_ZNKSt4lessItEclERKtS2_>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d001      	beq.n	8012026 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 8012022:	2301      	movs	r3, #1
 8012024:	e000      	b.n	8012028 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 8012026:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8012028:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 801202e:	7df8      	ldrb	r0, [r7, #23]
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	6839      	ldr	r1, [r7, #0]
 8012034:	f00e fadc 	bl	80205f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	695b      	ldr	r3, [r3, #20]
 801203c:	1c5a      	adds	r2, r3, #1
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8012042:	f107 0310 	add.w	r3, r7, #16
 8012046:	6839      	ldr	r1, [r7, #0]
 8012048:	4618      	mov	r0, r3
 801204a:	f7f3 fbcc 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 801204e:	693b      	ldr	r3, [r7, #16]
    }
 8012050:	4618      	mov	r0, r3
 8012052:	3718      	adds	r7, #24
 8012054:	46bd      	mov	sp, r7
 8012056:	bdb0      	pop	{r4, r5, r7, pc}

08012058 <_ZN5FieldIJtEEC1EPt>:
    Field(T* ptr) : ptr(ptr) { }
 8012058:	b580      	push	{r7, lr}
 801205a:	b082      	sub	sp, #8
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	6039      	str	r1, [r7, #0]
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	4618      	mov	r0, r3
 8012066:	f7fe ff03 	bl	8010e70 <_ZN5FieldIJEEC1Ev>
 801206a:	4a05      	ldr	r2, [pc, #20]	; (8012080 <_ZN5FieldIJtEEC1EPt+0x28>)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	601a      	str	r2, [r3, #0]
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	683a      	ldr	r2, [r7, #0]
 8012074:	605a      	str	r2, [r3, #4]
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	4618      	mov	r0, r3
 801207a:	3708      	adds	r7, #8
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	08020ca4 	.word	0x08020ca4

08012084 <_ZN5FieldIJmEEC1EPm>:
 8012084:	b580      	push	{r7, lr}
 8012086:	b082      	sub	sp, #8
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	4618      	mov	r0, r3
 8012092:	f7fe feed 	bl	8010e70 <_ZN5FieldIJEEC1Ev>
 8012096:	4a05      	ldr	r2, [pc, #20]	; (80120ac <_ZN5FieldIJmEEC1EPm+0x28>)
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	601a      	str	r2, [r3, #0]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	683a      	ldr	r2, [r7, #0]
 80120a0:	605a      	str	r2, [r3, #4]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	4618      	mov	r0, r3
 80120a6:	3708      	adds	r7, #8
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	08020c90 	.word	0x08020c90

080120b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80120b0:	b480      	push	{r7}
 80120b2:	b083      	sub	sp, #12
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	689b      	ldr	r3, [r3, #8]
 80120bc:	4618      	mov	r0, r3
 80120be:	370c      	adds	r7, #12
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr

080120c8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	68db      	ldr	r3, [r3, #12]
 80120d4:	4618      	mov	r0, r3
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80120e0:	b480      	push	{r7}
 80120e2:	b083      	sub	sp, #12
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	689b      	ldr	r3, [r3, #8]
 80120ec:	4618      	mov	r0, r3
 80120ee:	370c      	adds	r7, #12
 80120f0:	46bd      	mov	sp, r7
 80120f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f6:	4770      	bx	lr

080120f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	68db      	ldr	r3, [r3, #12]
 8012104:	4618      	mov	r0, r3
 8012106:	370c      	adds	r7, #12
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr

08012110 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	689b      	ldr	r3, [r3, #8]
 801211c:	4618      	mov	r0, r3
 801211e:	370c      	adds	r7, #12
 8012120:	46bd      	mov	sp, r7
 8012122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012126:	4770      	bx	lr

08012128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	68db      	ldr	r3, [r3, #12]
 8012134:	4618      	mov	r0, r3
 8012136:	370c      	adds	r7, #12
 8012138:	46bd      	mov	sp, r7
 801213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213e:	4770      	bx	lr

08012140 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012140:	b480      	push	{r7}
 8012142:	b083      	sub	sp, #12
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	689b      	ldr	r3, [r3, #8]
 801214c:	4618      	mov	r0, r3
 801214e:	370c      	adds	r7, #12
 8012150:	46bd      	mov	sp, r7
 8012152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012156:	4770      	bx	lr

08012158 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012158:	b480      	push	{r7}
 801215a:	b083      	sub	sp, #12
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	68db      	ldr	r3, [r3, #12]
 8012164:	4618      	mov	r0, r3
 8012166:	370c      	adds	r7, #12
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr

08012170 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012170:	b480      	push	{r7}
 8012172:	b083      	sub	sp, #12
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	689b      	ldr	r3, [r3, #8]
 801217c:	4618      	mov	r0, r3
 801217e:	370c      	adds	r7, #12
 8012180:	46bd      	mov	sp, r7
 8012182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012186:	4770      	bx	lr

08012188 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012188:	b480      	push	{r7}
 801218a:	b083      	sub	sp, #12
 801218c:	af00      	add	r7, sp, #0
 801218e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	68db      	ldr	r3, [r3, #12]
 8012194:	4618      	mov	r0, r3
 8012196:	370c      	adds	r7, #12
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr

080121a0 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>:
      _M_access() const
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7fa fc4f 	bl	800ca4c <_ZNKSt9_Any_data9_M_accessEv>
 80121ae:	4603      	mov	r3, r0
 80121b0:	4618      	mov	r0, r3
 80121b2:	3708      	adds	r7, #8
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}

080121b8 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80121b8:	b480      	push	{r7}
 80121ba:	b083      	sub	sp, #12
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	4618      	mov	r0, r3
 80121c4:	370c      	adds	r7, #12
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr

080121ce <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80121ce:	b480      	push	{r7}
 80121d0:	b083      	sub	sp, #12
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	4618      	mov	r0, r3
 80121da:	370c      	adds	r7, #12
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr

080121e4 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	7138      	strb	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80121ee:	6838      	ldr	r0, [r7, #0]
 80121f0:	f7ff ffed 	bl	80121ce <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 80121f4:	4603      	mov	r3, r0
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7fb fb2a 	bl	800d850 <_ZZN8TUDTests5setupEvENKUlvE_clEv>
 80121fc:	bf00      	nop
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012204:	b580      	push	{r7, lr}
 8012206:	b084      	sub	sp, #16
 8012208:	af00      	add	r7, sp, #0
 801220a:	60f8      	str	r0, [r7, #12]
 801220c:	60b9      	str	r1, [r7, #8]
 801220e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012210:	68b8      	ldr	r0, [r7, #8]
 8012212:	f7ff ffc5 	bl	80121a0 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 8012216:	68f8      	ldr	r0, [r7, #12]
 8012218:	f7fa fc0d 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 801221c:	4603      	mov	r3, r0
 801221e:	4619      	mov	r1, r3
 8012220:	2001      	movs	r0, #1
 8012222:	f7ee f885 	bl	8000330 <_ZnwjPv>
	}
 8012226:	bf00      	nop
 8012228:	3710      	adds	r7, #16
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 801222e:	b580      	push	{r7, lr}
 8012230:	b082      	sub	sp, #8
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
 8012236:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f000 fd8d 	bl	8012d58 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>
	}
 801223e:	bf00      	nop
 8012240:	3708      	adds	r7, #8
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}

08012246 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>:
      _M_access() const
 8012246:	b580      	push	{r7, lr}
 8012248:	b082      	sub	sp, #8
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f7fa fbfc 	bl	800ca4c <_ZNKSt9_Any_data9_M_accessEv>
 8012254:	4603      	mov	r3, r0
 8012256:	4618      	mov	r0, r3
 8012258:	3708      	adds	r7, #8
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}

0801225e <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801225e:	b480      	push	{r7}
 8012260:	b083      	sub	sp, #12
 8012262:	af00      	add	r7, sp, #0
 8012264:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	4618      	mov	r0, r3
 801226a:	370c      	adds	r7, #12
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr

08012274 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	4618      	mov	r0, r3
 8012280:	370c      	adds	r7, #12
 8012282:	46bd      	mov	sp, r7
 8012284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012288:	4770      	bx	lr

0801228a <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 801228a:	b580      	push	{r7, lr}
 801228c:	b082      	sub	sp, #8
 801228e:	af00      	add	r7, sp, #0
 8012290:	7138      	strb	r0, [r7, #4]
 8012292:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012294:	6838      	ldr	r0, [r7, #0]
 8012296:	f7ff ffed 	bl	8012274 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 801229a:	4603      	mov	r3, r0
 801229c:	4618      	mov	r0, r3
 801229e:	f7fb fae5 	bl	800d86c <_ZZN8TUDTests5setupEvENKUlvE0_clEv>
 80122a2:	bf00      	nop
 80122a4:	3708      	adds	r7, #8
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b084      	sub	sp, #16
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	60f8      	str	r0, [r7, #12]
 80122b2:	60b9      	str	r1, [r7, #8]
 80122b4:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80122b6:	68b8      	ldr	r0, [r7, #8]
 80122b8:	f7ff ffc5 	bl	8012246 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 80122bc:	68f8      	ldr	r0, [r7, #12]
 80122be:	f7fa fbba 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 80122c2:	4603      	mov	r3, r0
 80122c4:	4619      	mov	r1, r3
 80122c6:	2001      	movs	r0, #1
 80122c8:	f7ee f832 	bl	8000330 <_ZnwjPv>
	}
 80122cc:	bf00      	nop
 80122ce:	3710      	adds	r7, #16
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}

080122d4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 fd46 	bl	8012d70 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>
	}
 80122e4:	bf00      	nop
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f000 fd6c 	bl	8012dd4 <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 80122fc:	4603      	mov	r3, r0
 80122fe:	4618      	mov	r0, r3
 8012300:	f000 fd4e 	bl	8012da0 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>
 8012304:	4603      	mov	r3, r0
 8012306:	4618      	mov	r0, r3
 8012308:	3708      	adds	r7, #8
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}

0801230e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801230e:	b480      	push	{r7}
 8012310:	b083      	sub	sp, #12
 8012312:	af00      	add	r7, sp, #0
 8012314:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	685a      	ldr	r2, [r3, #4]
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	1ad3      	subs	r3, r2, r3
 8012320:	109b      	asrs	r3, r3, #2
 8012322:	4618      	mov	r0, r3
 8012324:	370c      	adds	r7, #12
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr

0801232e <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801232e:	b580      	push	{r7, lr}
 8012330:	b084      	sub	sp, #16
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
 8012336:	6039      	str	r1, [r7, #0]
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	60fb      	str	r3, [r7, #12]
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012340:	f7ed ffee 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012344:	4603      	mov	r3, r0
 8012346:	2b00      	cmp	r3, #0
 8012348:	d006      	beq.n	8012358 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801234a:	68bb      	ldr	r3, [r7, #8]
 801234c:	009b      	lsls	r3, r3, #2
 801234e:	4618      	mov	r0, r3
 8012350:	f00e f8e2 	bl	8020518 <_Znwj>
 8012354:	4603      	mov	r3, r0
 8012356:	e006      	b.n	8012366 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012358:	2200      	movs	r2, #0
 801235a:	68b9      	ldr	r1, [r7, #8]
 801235c:	68f8      	ldr	r0, [r7, #12]
 801235e:	f001 f91d 	bl	801359c <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>
 8012362:	4603      	mov	r3, r0
 8012364:	bf00      	nop
      { return __a.allocate(__n); }
 8012366:	4618      	mov	r0, r3
 8012368:	3710      	adds	r7, #16
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}

0801236e <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801236e:	b580      	push	{r7, lr}
 8012370:	b084      	sub	sp, #16
 8012372:	af00      	add	r7, sp, #0
 8012374:	60f8      	str	r0, [r7, #12]
 8012376:	60b9      	str	r1, [r7, #8]
 8012378:	607a      	str	r2, [r7, #4]
 801237a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	687a      	ldr	r2, [r7, #4]
 8012380:	68b9      	ldr	r1, [r7, #8]
 8012382:	68f8      	ldr	r0, [r7, #12]
 8012384:	f000 fd31 	bl	8012dea <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012388:	4603      	mov	r3, r0
      }
 801238a:	4618      	mov	r0, r3
 801238c:	3710      	adds	r7, #16
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}

08012392 <_ZSt12construct_atIjJjEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012392:	b590      	push	{r4, r7, lr}
 8012394:	b083      	sub	sp, #12
 8012396:	af00      	add	r7, sp, #0
 8012398:	6078      	str	r0, [r7, #4]
 801239a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801239c:	6838      	ldr	r0, [r7, #0]
 801239e:	f7fd fa3b 	bl	800f818 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80123a2:	4603      	mov	r3, r0
 80123a4:	681c      	ldr	r4, [r3, #0]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4619      	mov	r1, r3
 80123aa:	2004      	movs	r0, #4
 80123ac:	f7ed ffc0 	bl	8000330 <_ZnwjPv>
 80123b0:	4603      	mov	r3, r0
 80123b2:	601c      	str	r4, [r3, #0]
 80123b4:	4618      	mov	r0, r3
 80123b6:	370c      	adds	r7, #12
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd90      	pop	{r4, r7, pc}

080123bc <_ZNSt16allocator_traitsISaIjEE9constructIjJjEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80123bc:	b580      	push	{r7, lr}
 80123be:	b084      	sub	sp, #16
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7fd fa25 	bl	800f818 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80123ce:	4603      	mov	r3, r0
 80123d0:	4619      	mov	r1, r3
 80123d2:	68b8      	ldr	r0, [r7, #8]
 80123d4:	f7ff ffdd 	bl	8012392 <_ZSt12construct_atIjJjEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 80123d8:	bf00      	nop
 80123da:	3710      	adds	r7, #16
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <_ZNSt6vectorIjSaIjEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b084      	sub	sp, #16
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	1d1a      	adds	r2, r3, #4
 80123ec:	f107 030c 	add.w	r3, r7, #12
 80123f0:	4611      	mov	r1, r2
 80123f2:	4618      	mov	r0, r3
 80123f4:	f000 fd34 	bl	8012e60 <_ZN9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEC1ERKS1_>
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	4618      	mov	r0, r3
 80123fc:	3710      	adds	r7, #16
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}
	...

08012404 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8012404:	b5b0      	push	{r4, r5, r7, lr}
 8012406:	b08c      	sub	sp, #48	; 0x30
 8012408:	af00      	add	r7, sp, #0
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	60b9      	str	r1, [r7, #8]
 801240e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8012410:	4a39      	ldr	r2, [pc, #228]	; (80124f8 <_ZNSt6vectorIjSaIjEE17_M_realloc_insertIJjEEEvN9__gnu_cxx17__normal_iteratorIPjS1_EEDpOT_+0xf4>)
 8012412:	2101      	movs	r1, #1
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f000 fd33 	bl	8012e80 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc>
 801241a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	685b      	ldr	r3, [r3, #4]
 8012426:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8012428:	68f8      	ldr	r0, [r7, #12]
 801242a:	f000 fd70 	bl	8012f0e <_ZNSt6vectorIjSaIjEE5beginEv>
 801242e:	4603      	mov	r3, r0
 8012430:	617b      	str	r3, [r7, #20]
 8012432:	f107 0214 	add.w	r2, r7, #20
 8012436:	f107 0308 	add.w	r3, r7, #8
 801243a:	4611      	mov	r1, r2
 801243c:	4618      	mov	r0, r3
 801243e:	f000 fd76 	bl	8012f2e <_ZN9__gnu_cxxmiIPjSt6vectorIjSaIjEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8012442:	4603      	mov	r3, r0
 8012444:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801244a:	4618      	mov	r0, r3
 801244c:	f000 fd84 	bl	8012f58 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj>
 8012450:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8012452:	69fb      	ldr	r3, [r7, #28]
 8012454:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8012456:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8012458:	6a3b      	ldr	r3, [r7, #32]
 801245a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801245c:	69fa      	ldr	r2, [r7, #28]
 801245e:	18d5      	adds	r5, r2, r3
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f7fd f9d9 	bl	800f818 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8012466:	4603      	mov	r3, r0
 8012468:	461a      	mov	r2, r3
 801246a:	4629      	mov	r1, r5
 801246c:	4620      	mov	r0, r4
 801246e:	f7ff ffa5 	bl	80123bc <_ZNSt16allocator_traitsISaIjEE9constructIjJjEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8012472:	2300      	movs	r3, #0
 8012474:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012476:	f107 0308 	add.w	r3, r7, #8
 801247a:	4618      	mov	r0, r3
 801247c:	f000 fd94 	bl	8012fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 8012480:	4603      	mov	r3, r0
 8012482:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	4618      	mov	r0, r3
 8012488:	f7fe fa09 	bl	801089e <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 801248c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801248e:	69fa      	ldr	r2, [r7, #28]
 8012490:	4621      	mov	r1, r4
 8012492:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012494:	f000 fd74 	bl	8012f80 <_ZNSt6vectorIjSaIjEE11_S_relocateEPjS2_S2_RS0_>
 8012498:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801249a:	69bb      	ldr	r3, [r7, #24]
 801249c:	3304      	adds	r3, #4
 801249e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80124a0:	f107 0308 	add.w	r3, r7, #8
 80124a4:	4618      	mov	r0, r3
 80124a6:	f000 fd7f 	bl	8012fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 80124aa:	4603      	mov	r3, r0
 80124ac:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7fe f9f4 	bl	801089e <_ZNSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 80124b6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80124b8:	69ba      	ldr	r2, [r7, #24]
 80124ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80124bc:	4620      	mov	r0, r4
 80124be:	f000 fd5f 	bl	8012f80 <_ZNSt6vectorIjSaIjEE11_S_relocateEPjS2_S2_RS0_>
 80124c2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80124c4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	689a      	ldr	r2, [r3, #8]
 80124ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124cc:	1ad3      	subs	r3, r2, r3
 80124ce:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80124d0:	461a      	mov	r2, r3
 80124d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80124d4:	f7fe f9d0 	bl	8010878 <_ZNSt12_Vector_baseIjSaIjEE13_M_deallocateEPjj>
      this->_M_impl._M_start = __new_start;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	69fa      	ldr	r2, [r7, #28]
 80124dc:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	69ba      	ldr	r2, [r7, #24]
 80124e2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80124e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e6:	009b      	lsls	r3, r3, #2
 80124e8:	69fa      	ldr	r2, [r7, #28]
 80124ea:	441a      	add	r2, r3
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	609a      	str	r2, [r3, #8]
    }
 80124f0:	bf00      	nop
 80124f2:	3730      	adds	r7, #48	; 0x30
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bdb0      	pop	{r4, r5, r7, pc}
 80124f8:	08020c1c 	.word	0x08020c1c

080124fc <_ZNSt6vectorIjSaIjEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b084      	sub	sp, #16
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8012504:	6878      	ldr	r0, [r7, #4]
 8012506:	f7ff ff6b 	bl	80123e0 <_ZNSt6vectorIjSaIjEE3endEv>
 801250a:	4603      	mov	r3, r0
 801250c:	60fb      	str	r3, [r7, #12]
 801250e:	f107 030c 	add.w	r3, r7, #12
 8012512:	2101      	movs	r1, #1
 8012514:	4618      	mov	r0, r3
 8012516:	f000 fd52 	bl	8012fbe <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEmiEi>
 801251a:	4603      	mov	r3, r0
 801251c:	60bb      	str	r3, [r7, #8]
 801251e:	f107 0308 	add.w	r3, r7, #8
 8012522:	4618      	mov	r0, r3
 8012524:	f000 fd64 	bl	8012ff0 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEdeEv>
 8012528:	4603      	mov	r3, r0
      }
 801252a:	4618      	mov	r0, r3
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}

08012532 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012532:	b480      	push	{r7}
 8012534:	b083      	sub	sp, #12
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	4618      	mov	r0, r3
 801253e:	370c      	adds	r7, #12
 8012540:	46bd      	mov	sp, r7
 8012542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012546:	4770      	bx	lr

08012548 <_ZSt12construct_atIPvJS0_EEDTgsnwcvS0_Li0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012548:	b590      	push	{r4, r7, lr}
 801254a:	b083      	sub	sp, #12
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012552:	6838      	ldr	r0, [r7, #0]
 8012554:	f7ff ffed 	bl	8012532 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8012558:	4603      	mov	r3, r0
 801255a:	681c      	ldr	r4, [r3, #0]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	4619      	mov	r1, r3
 8012560:	2004      	movs	r0, #4
 8012562:	f7ed fee5 	bl	8000330 <_ZnwjPv>
 8012566:	4603      	mov	r3, r0
 8012568:	601c      	str	r4, [r3, #0]
 801256a:	4618      	mov	r0, r3
 801256c:	370c      	adds	r7, #12
 801256e:	46bd      	mov	sp, r7
 8012570:	bd90      	pop	{r4, r7, pc}

08012572 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012572:	b580      	push	{r7, lr}
 8012574:	b084      	sub	sp, #16
 8012576:	af00      	add	r7, sp, #0
 8012578:	60f8      	str	r0, [r7, #12]
 801257a:	60b9      	str	r1, [r7, #8]
 801257c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7ff ffd7 	bl	8012532 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 8012584:	4603      	mov	r3, r0
 8012586:	4619      	mov	r1, r3
 8012588:	68b8      	ldr	r0, [r7, #8]
 801258a:	f7ff ffdd 	bl	8012548 <_ZSt12construct_atIPvJS0_EEDTgsnwcvS0_Li0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 801258e:	bf00      	nop
 8012590:	3710      	adds	r7, #16
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8012596:	b580      	push	{r7, lr}
 8012598:	b084      	sub	sp, #16
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	1d1a      	adds	r2, r3, #4
 80125a2:	f107 030c 	add.w	r3, r7, #12
 80125a6:	4611      	mov	r1, r2
 80125a8:	4618      	mov	r0, r3
 80125aa:	f000 fd2d 	bl	8013008 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	4618      	mov	r0, r3
 80125b2:	3710      	adds	r7, #16
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80125b8:	b5b0      	push	{r4, r5, r7, lr}
 80125ba:	b08c      	sub	sp, #48	; 0x30
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80125c4:	4a39      	ldr	r2, [pc, #228]	; (80126ac <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xf4>)
 80125c6:	2101      	movs	r1, #1
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f000 fd2d 	bl	8013028 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 80125ce:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80125dc:	68f8      	ldr	r0, [r7, #12]
 80125de:	f000 fd6a 	bl	80130b6 <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 80125e2:	4603      	mov	r3, r0
 80125e4:	617b      	str	r3, [r7, #20]
 80125e6:	f107 0214 	add.w	r2, r7, #20
 80125ea:	f107 0308 	add.w	r3, r7, #8
 80125ee:	4611      	mov	r1, r2
 80125f0:	4618      	mov	r0, r3
 80125f2:	f000 fd70 	bl	80130d6 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80125f6:	4603      	mov	r3, r0
 80125f8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80125fe:	4618      	mov	r0, r3
 8012600:	f000 fd7e 	bl	8013100 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 8012604:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8012606:	69fb      	ldr	r3, [r7, #28]
 8012608:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801260a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 801260c:	6a3b      	ldr	r3, [r7, #32]
 801260e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8012610:	69fa      	ldr	r2, [r7, #28]
 8012612:	18d5      	adds	r5, r2, r3
 8012614:	6878      	ldr	r0, [r7, #4]
 8012616:	f7ff ff8c 	bl	8012532 <_ZSt7forwardIPvEOT_RNSt16remove_referenceIS1_E4typeE>
 801261a:	4603      	mov	r3, r0
 801261c:	461a      	mov	r2, r3
 801261e:	4629      	mov	r1, r5
 8012620:	4620      	mov	r0, r4
 8012622:	f7ff ffa6 	bl	8012572 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 8012626:	2300      	movs	r3, #0
 8012628:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801262a:	f107 0308 	add.w	r3, r7, #8
 801262e:	4618      	mov	r0, r3
 8012630:	f000 fd8e 	bl	8013150 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8012634:	4603      	mov	r3, r0
 8012636:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	4618      	mov	r0, r3
 801263c:	f7fe f96d 	bl	801091a <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8012640:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012642:	69fa      	ldr	r2, [r7, #28]
 8012644:	4621      	mov	r1, r4
 8012646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012648:	f000 fd6e 	bl	8013128 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 801264c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	3304      	adds	r3, #4
 8012652:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012654:	f107 0308 	add.w	r3, r7, #8
 8012658:	4618      	mov	r0, r3
 801265a:	f000 fd79 	bl	8013150 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801265e:	4603      	mov	r3, r0
 8012660:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	4618      	mov	r0, r3
 8012666:	f7fe f958 	bl	801091a <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 801266a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801266c:	69ba      	ldr	r2, [r7, #24]
 801266e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012670:	4620      	mov	r0, r4
 8012672:	f000 fd59 	bl	8013128 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8012676:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8012678:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	689a      	ldr	r2, [r3, #8]
 801267e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012680:	1ad3      	subs	r3, r2, r3
 8012682:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8012684:	461a      	mov	r2, r3
 8012686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012688:	f7fe f934 	bl	80108f4 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	69fa      	ldr	r2, [r7, #28]
 8012690:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	69ba      	ldr	r2, [r7, #24]
 8012696:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801269a:	009b      	lsls	r3, r3, #2
 801269c:	69fa      	ldr	r2, [r7, #28]
 801269e:	441a      	add	r2, r3
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	609a      	str	r2, [r3, #8]
    }
 80126a4:	bf00      	nop
 80126a6:	3730      	adds	r7, #48	; 0x30
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bdb0      	pop	{r4, r5, r7, pc}
 80126ac:	08020c1c 	.word	0x08020c1c

080126b0 <_ZNSt6vectorIPvSaIS0_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7ff ff6c 	bl	8012596 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 80126be:	4603      	mov	r3, r0
 80126c0:	60fb      	str	r3, [r7, #12]
 80126c2:	f107 030c 	add.w	r3, r7, #12
 80126c6:	2101      	movs	r1, #1
 80126c8:	4618      	mov	r0, r3
 80126ca:	f000 fd4c 	bl	8013166 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEmiEi>
 80126ce:	4603      	mov	r3, r0
 80126d0:	60bb      	str	r3, [r7, #8]
 80126d2:	f107 0308 	add.w	r3, r7, #8
 80126d6:	4618      	mov	r0, r3
 80126d8:	f000 fd5e 	bl	8013198 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEdeEv>
 80126dc:	4603      	mov	r3, r0
      }
 80126de:	4618      	mov	r0, r3
 80126e0:	3710      	adds	r7, #16
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}

080126e6 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80126e6:	b580      	push	{r7, lr}
 80126e8:	b084      	sub	sp, #16
 80126ea:	af00      	add	r7, sp, #0
 80126ec:	60f8      	str	r0, [r7, #12]
 80126ee:	60b9      	str	r1, [r7, #8]
 80126f0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	009b      	lsls	r3, r3, #2
 80126f6:	4619      	mov	r1, r3
 80126f8:	68b8      	ldr	r0, [r7, #8]
 80126fa:	f00d ff0b 	bl	8020514 <_ZdlPvj>
      }
 80126fe:	3710      	adds	r7, #16
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <_ZSt11__addressofIP13StreamMessageEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012704:	b480      	push	{r7}
 8012706:	b083      	sub	sp, #12
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	4618      	mov	r0, r3
 8012710:	370c      	adds	r7, #12
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr

0801271a <_ZSt8_DestroyIP13StreamMessageEvPT_>:
    _Destroy(_Tp* __pointer)
 801271a:	b580      	push	{r7, lr}
 801271c:	b082      	sub	sp, #8
 801271e:	af00      	add	r7, sp, #0
 8012720:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f7ff f9e8 	bl	8011af8 <_ZSt10destroy_atIP13StreamMessageEvPT_>
    }
 8012728:	bf00      	nop
 801272a:	3708      	adds	r7, #8
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	4618      	mov	r0, r3
 801273c:	f000 fd5e 	bl	80131fc <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8012740:	4603      	mov	r3, r0
 8012742:	4618      	mov	r0, r3
 8012744:	f000 fd40 	bl	80131c8 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>
 8012748:	4603      	mov	r3, r0
 801274a:	4618      	mov	r0, r3
 801274c:	3708      	adds	r7, #8
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}

08012752 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012752:	b480      	push	{r7}
 8012754:	b083      	sub	sp, #12
 8012756:	af00      	add	r7, sp, #0
 8012758:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	685a      	ldr	r2, [r3, #4]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	1ad3      	subs	r3, r2, r3
 8012764:	109b      	asrs	r3, r3, #2
 8012766:	4618      	mov	r0, r3
 8012768:	370c      	adds	r7, #12
 801276a:	46bd      	mov	sp, r7
 801276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012770:	4770      	bx	lr

08012772 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012772:	b580      	push	{r7, lr}
 8012774:	b084      	sub	sp, #16
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
 801277a:	6039      	str	r1, [r7, #0]
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	60fb      	str	r3, [r7, #12]
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012784:	f7ed fdcc 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012788:	4603      	mov	r3, r0
 801278a:	2b00      	cmp	r3, #0
 801278c:	d006      	beq.n	801279c <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	009b      	lsls	r3, r3, #2
 8012792:	4618      	mov	r0, r3
 8012794:	f00d fec0 	bl	8020518 <_Znwj>
 8012798:	4603      	mov	r3, r0
 801279a:	e006      	b.n	80127aa <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801279c:	2200      	movs	r2, #0
 801279e:	68b9      	ldr	r1, [r7, #8]
 80127a0:	68f8      	ldr	r0, [r7, #12]
 80127a2:	f000 ffd9 	bl	8013758 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>
 80127a6:	4603      	mov	r3, r0
 80127a8:	bf00      	nop
      { return __a.allocate(__n); }
 80127aa:	4618      	mov	r0, r3
 80127ac:	3710      	adds	r7, #16
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}

080127b2 <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80127b2:	b580      	push	{r7, lr}
 80127b4:	b084      	sub	sp, #16
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	60f8      	str	r0, [r7, #12]
 80127ba:	60b9      	str	r1, [r7, #8]
 80127bc:	607a      	str	r2, [r7, #4]
 80127be:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	68b9      	ldr	r1, [r7, #8]
 80127c6:	68f8      	ldr	r0, [r7, #12]
 80127c8:	f000 fd23 	bl	8013212 <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>
 80127cc:	4603      	mov	r3, r0
      }
 80127ce:	4618      	mov	r0, r3
 80127d0:	3710      	adds	r7, #16
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}

080127d6 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80127d6:	b480      	push	{r7}
 80127d8:	b083      	sub	sp, #12
 80127da:	af00      	add	r7, sp, #0
 80127dc:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80127de:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80127e2:	4618      	mov	r0, r3
 80127e4:	370c      	adds	r7, #12
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr

080127ee <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80127ee:	b580      	push	{r7, lr}
 80127f0:	b084      	sub	sp, #16
 80127f2:	af00      	add	r7, sp, #0
 80127f4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80127f6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80127fa:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f7ff ffea 	bl	80127d6 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>
 8012802:	4603      	mov	r3, r0
 8012804:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012806:	f107 0208 	add.w	r2, r7, #8
 801280a:	f107 030c 	add.w	r3, r7, #12
 801280e:	4611      	mov	r1, r2
 8012810:	4618      	mov	r0, r3
 8012812:	f7f0 fae8 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8012816:	4603      	mov	r3, r0
 8012818:	681b      	ldr	r3, [r3, #0]
      }
 801281a:	4618      	mov	r0, r3
 801281c:	3710      	adds	r7, #16
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}

08012822 <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012822:	b480      	push	{r7}
 8012824:	b083      	sub	sp, #12
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	4618      	mov	r0, r3
 801282e:	370c      	adds	r7, #12
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr

08012838 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012838:	b5b0      	push	{r4, r5, r7, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	af00      	add	r7, sp, #0
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	607a      	str	r2, [r7, #4]
 8012844:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012846:	68f8      	ldr	r0, [r7, #12]
 8012848:	f000 fd1f 	bl	801328a <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 801284c:	4604      	mov	r4, r0
 801284e:	68b8      	ldr	r0, [r7, #8]
 8012850:	f000 fd1b 	bl	801328a <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012854:	4605      	mov	r5, r0
 8012856:	6878      	ldr	r0, [r7, #4]
 8012858:	f000 fd17 	bl	801328a <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 801285c:	4602      	mov	r2, r0
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	4629      	mov	r1, r5
 8012862:	4620      	mov	r0, r4
 8012864:	f000 fd1c 	bl	80132a0 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012868:	4603      	mov	r3, r0
    }
 801286a:	4618      	mov	r0, r3
 801286c:	3710      	adds	r7, #16
 801286e:	46bd      	mov	sp, r7
 8012870:	bdb0      	pop	{r4, r5, r7, pc}

08012872 <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessageEUlvE_EERT_v>:
      _M_access()
 8012872:	b580      	push	{r7, lr}
 8012874:	b082      	sub	sp, #8
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801287a:	6878      	ldr	r0, [r7, #4]
 801287c:	f7fa f8db 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 8012880:	4603      	mov	r3, r0
 8012882:	4618      	mov	r0, r3
 8012884:	3708      	adds	r7, #8
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 801288a:	b580      	push	{r7, lr}
 801288c:	b082      	sub	sp, #8
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
 8012892:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	429a      	cmp	r2, r3
 801289a:	d00a      	beq.n	80128b2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f000 fd2c 	bl	80132fa <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>
 80128a2:	4603      	mov	r3, r0
 80128a4:	4618      	mov	r0, r3
 80128a6:	f000 fd33 	bl	8013310 <_ZSt8_DestroyIP5FieldIJEEEvPT_>
	  for (; __first != __last; ++__first)
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	3304      	adds	r3, #4
 80128ae:	607b      	str	r3, [r7, #4]
 80128b0:	e7f0      	b.n	8012894 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0xa>
	}
 80128b2:	bf00      	nop
 80128b4:	3708      	adds	r7, #8
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}

080128ba <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80128ba:	b480      	push	{r7}
 80128bc:	b083      	sub	sp, #12
 80128be:	af00      	add	r7, sp, #0
 80128c0:	6078      	str	r0, [r7, #4]
 80128c2:	6039      	str	r1, [r7, #0]
 80128c4:	bf00      	nop
 80128c6:	370c      	adds	r7, #12
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr

080128d0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80128d0:	b480      	push	{r7}
 80128d2:	b083      	sub	sp, #12
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	4618      	mov	r0, r3
 80128dc:	370c      	adds	r7, #12
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr

080128e6 <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80128e6:	b590      	push	{r4, r7, lr}
 80128e8:	b083      	sub	sp, #12
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]
 80128ee:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80128f0:	6838      	ldr	r0, [r7, #0]
 80128f2:	f7ff ffed 	bl	80128d0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 80128f6:	4603      	mov	r3, r0
 80128f8:	681c      	ldr	r4, [r3, #0]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	4619      	mov	r1, r3
 80128fe:	2004      	movs	r0, #4
 8012900:	f7ed fd16 	bl	8000330 <_ZnwjPv>
 8012904:	4603      	mov	r3, r0
 8012906:	601c      	str	r4, [r3, #0]
 8012908:	4618      	mov	r0, r3
 801290a:	370c      	adds	r7, #12
 801290c:	46bd      	mov	sp, r7
 801290e:	bd90      	pop	{r4, r7, pc}

08012910 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f7ff ffd7 	bl	80128d0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012922:	4603      	mov	r3, r0
 8012924:	4619      	mov	r1, r3
 8012926:	68b8      	ldr	r0, [r7, #8]
 8012928:	f7ff ffdd 	bl	80128e6 <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 801292c:	bf00      	nop
 801292e:	3710      	adds	r7, #16
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8012934:	b5b0      	push	{r4, r5, r7, lr}
 8012936:	b08c      	sub	sp, #48	; 0x30
 8012938:	af00      	add	r7, sp, #0
 801293a:	60f8      	str	r0, [r7, #12]
 801293c:	60b9      	str	r1, [r7, #8]
 801293e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8012940:	4a39      	ldr	r2, [pc, #228]	; (8012a28 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 8012942:	2101      	movs	r1, #1
 8012944:	68f8      	ldr	r0, [r7, #12]
 8012946:	f000 fcee 	bl	8013326 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>
 801294a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8012958:	68f8      	ldr	r0, [r7, #12]
 801295a:	f7f2 fbea 	bl	8005132 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 801295e:	4603      	mov	r3, r0
 8012960:	617b      	str	r3, [r7, #20]
 8012962:	f107 0214 	add.w	r2, r7, #20
 8012966:	f107 0308 	add.w	r3, r7, #8
 801296a:	4611      	mov	r1, r2
 801296c:	4618      	mov	r0, r3
 801296e:	f000 fd21 	bl	80133b4 <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8012972:	4603      	mov	r3, r0
 8012974:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801297a:	4618      	mov	r0, r3
 801297c:	f000 fd2f 	bl	80133de <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>
 8012980:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8012982:	69fb      	ldr	r3, [r7, #28]
 8012984:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8012986:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8012988:	6a3b      	ldr	r3, [r7, #32]
 801298a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801298c:	69fa      	ldr	r2, [r7, #28]
 801298e:	18d5      	adds	r5, r2, r3
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f7ff ff9d 	bl	80128d0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012996:	4603      	mov	r3, r0
 8012998:	461a      	mov	r2, r3
 801299a:	4629      	mov	r1, r5
 801299c:	4620      	mov	r0, r4
 801299e:	f7ff ffb7 	bl	8012910 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 80129a2:	2300      	movs	r3, #0
 80129a4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80129a6:	f107 0308 	add.w	r3, r7, #8
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7f2 f821 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 80129b0:	4603      	mov	r3, r0
 80129b2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7fe fa41 	bl	8010e3e <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 80129bc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80129be:	69fa      	ldr	r2, [r7, #28]
 80129c0:	4621      	mov	r1, r4
 80129c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129c4:	f000 fd1f 	bl	8013406 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 80129c8:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80129ca:	69bb      	ldr	r3, [r7, #24]
 80129cc:	3304      	adds	r3, #4
 80129ce:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80129d0:	f107 0308 	add.w	r3, r7, #8
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7f2 f80c 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 80129da:	4603      	mov	r3, r0
 80129dc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7fe fa2c 	bl	8010e3e <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 80129e6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80129e8:	69ba      	ldr	r2, [r7, #24]
 80129ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80129ec:	4620      	mov	r0, r4
 80129ee:	f000 fd0a 	bl	8013406 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 80129f2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80129f4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	689a      	ldr	r2, [r3, #8]
 80129fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fc:	1ad3      	subs	r3, r2, r3
 80129fe:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8012a00:	461a      	mov	r2, r3
 8012a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a04:	f7fe fa08 	bl	8010e18 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	69fa      	ldr	r2, [r7, #28]
 8012a0c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	69ba      	ldr	r2, [r7, #24]
 8012a12:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a16:	009b      	lsls	r3, r3, #2
 8012a18:	69fa      	ldr	r2, [r7, #28]
 8012a1a:	441a      	add	r2, r3
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	609a      	str	r2, [r3, #8]
    }
 8012a20:	bf00      	nop
 8012a22:	3730      	adds	r7, #48	; 0x30
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bdb0      	pop	{r4, r5, r7, pc}
 8012a28:	08020c1c 	.word	0x08020c1c

08012a2c <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f7f2 fb8c 	bl	8005152 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	60fb      	str	r3, [r7, #12]
 8012a3e:	f107 030c 	add.w	r3, r7, #12
 8012a42:	2101      	movs	r1, #1
 8012a44:	4618      	mov	r0, r3
 8012a46:	f000 fcf2 	bl	801342e <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	60bb      	str	r3, [r7, #8]
 8012a4e:	f107 0308 	add.w	r3, r7, #8
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7f2 f800 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8012a58:	4603      	mov	r3, r0
      }
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3710      	adds	r7, #16
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}

08012a62 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8012a62:	b480      	push	{r7}
 8012a64:	b083      	sub	sp, #12
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	3304      	adds	r3, #4
 8012a6e:	4618      	mov	r0, r3
 8012a70:	370c      	adds	r7, #12
 8012a72:	46bd      	mov	sp, r7
 8012a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a78:	4770      	bx	lr

08012a7a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012a7a:	b590      	push	{r4, r7, lr}
 8012a7c:	b087      	sub	sp, #28
 8012a7e:	af00      	add	r7, sp, #0
 8012a80:	60f8      	str	r0, [r7, #12]
 8012a82:	60b9      	str	r1, [r7, #8]
 8012a84:	607a      	str	r2, [r7, #4]
 8012a86:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d01b      	beq.n	8012ac6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8012a8e:	68fc      	ldr	r4, [r7, #12]
 8012a90:	68b8      	ldr	r0, [r7, #8]
 8012a92:	f7ff fa91 	bl	8011fb8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012a96:	4603      	mov	r3, r0
 8012a98:	683a      	ldr	r2, [r7, #0]
 8012a9a:	4619      	mov	r1, r3
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f7fe fa3a 	bl	8010f16 <_ZNKSt4lessItEclERKtS2_>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	f083 0301 	eor.w	r3, r3, #1
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d006      	beq.n	8012abc <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	607b      	str	r3, [r7, #4]
 8012ab2:	68b8      	ldr	r0, [r7, #8]
 8012ab4:	f7f8 fecf 	bl	800b856 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012ab8:	60b8      	str	r0, [r7, #8]
 8012aba:	e7e5      	b.n	8012a88 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8012abc:	68b8      	ldr	r0, [r7, #8]
 8012abe:	f7f8 febe 	bl	800b83e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012ac2:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012ac4:	e7e0      	b.n	8012a88 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8012ac6:	f107 0314 	add.w	r3, r7, #20
 8012aca:	6879      	ldr	r1, [r7, #4]
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7f2 fe8a 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8012ad2:	697b      	ldr	r3, [r7, #20]
    }
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	371c      	adds	r7, #28
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd90      	pop	{r4, r7, pc}

08012adc <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8012adc:	b480      	push	{r7}
 8012ade:	b083      	sub	sp, #12
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	683a      	ldr	r2, [r7, #0]
 8012aea:	601a      	str	r2, [r3, #0]
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	4618      	mov	r0, r3
 8012af0:	370c      	adds	r7, #12
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr

08012afa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8012afa:	b580      	push	{r7, lr}
 8012afc:	b082      	sub	sp, #8
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f7f8 feeb 	bl	800b8de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2101      	movs	r1, #1
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f000 fca7 	bl	8013460 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>
 8012b12:	4603      	mov	r3, r0
 8012b14:	4618      	mov	r0, r3
 8012b16:	3708      	adds	r7, #8
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8012b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b20:	b086      	sub	sp, #24
 8012b22:	af02      	add	r7, sp, #8
 8012b24:	60f8      	str	r0, [r7, #12]
 8012b26:	60b9      	str	r1, [r7, #8]
 8012b28:	607a      	str	r2, [r7, #4]
 8012b2a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	4619      	mov	r1, r3
 8012b30:	2018      	movs	r0, #24
 8012b32:	f7ed fbfd 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012b36:	68f8      	ldr	r0, [r7, #12]
 8012b38:	f7f8 fed1 	bl	800b8de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8012b3c:	4604      	mov	r4, r0
 8012b3e:	68b8      	ldr	r0, [r7, #8]
 8012b40:	f7f2 fcb2 	bl	80054a8 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8012b44:	4605      	mov	r5, r0
 8012b46:	6878      	ldr	r0, [r7, #4]
 8012b48:	f7ee fb8d 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012b4c:	4606      	mov	r6, r0
 8012b4e:	6838      	ldr	r0, [r7, #0]
 8012b50:	f7ff f8e1 	bl	8011d16 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012b54:	4680      	mov	r8, r0
 8012b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b58:	f7ee fb9b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	9300      	str	r3, [sp, #0]
 8012b60:	4643      	mov	r3, r8
 8012b62:	4632      	mov	r2, r6
 8012b64:	4629      	mov	r1, r5
 8012b66:	4620      	mov	r0, r4
 8012b68:	f000 fcd7 	bl	801351a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8012b6c:	bf00      	nop
 8012b6e:	3710      	adds	r7, #16
 8012b70:	46bd      	mov	sp, r7
 8012b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b76 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b084      	sub	sp, #16
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681a      	ldr	r2, [r3, #0]
 8012b82:	f107 030c 	add.w	r3, r7, #12
 8012b86:	4611      	mov	r1, r2
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7f2 fe2c 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	4618      	mov	r0, r3
 8012b92:	3710      	adds	r7, #16
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}

08012b98 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	695b      	ldr	r3, [r3, #20]
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	370c      	adds	r7, #12
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bae:	4770      	bx	lr

08012bb0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8012bb0:	b480      	push	{r7}
 8012bb2:	b083      	sub	sp, #12
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	3310      	adds	r3, #16
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	370c      	adds	r7, #12
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr

08012bc8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b082      	sub	sp, #8
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8012bd0:	6878      	ldr	r0, [r7, #4]
 8012bd2:	f7ff f9f1 	bl	8011fb8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}

08012be0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012be0:	b590      	push	{r4, r7, lr}
 8012be2:	b08b      	sub	sp, #44	; 0x2c
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8012bec:	68b8      	ldr	r0, [r7, #8]
 8012bee:	f7f8 fe0f 	bl	800b810 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8012bf6:	68b8      	ldr	r0, [r7, #8]
 8012bf8:	f7ff ff33 	bl	8012a62 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8012c00:	2301      	movs	r3, #1
 8012c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8012c06:	69bb      	ldr	r3, [r7, #24]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d020      	beq.n	8012c4e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 8012c0c:	69bb      	ldr	r3, [r7, #24]
 8012c0e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8012c10:	68bc      	ldr	r4, [r7, #8]
 8012c12:	69bb      	ldr	r3, [r7, #24]
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7ff f9cf 	bl	8011fb8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	461a      	mov	r2, r3
 8012c1e:	6879      	ldr	r1, [r7, #4]
 8012c20:	4620      	mov	r0, r4
 8012c22:	f7fe f978 	bl	8010f16 <_ZNKSt4lessItEclERKtS2_>
 8012c26:	4603      	mov	r3, r0
 8012c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8012c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d005      	beq.n	8012c40 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7f8 fe0d 	bl	800b856 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	e004      	b.n	8012c4a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8012c40:	69bb      	ldr	r3, [r7, #24]
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7f8 fdfb 	bl	800b83e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8012c4c:	e7db      	b.n	8012c06 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 8012c4e:	697a      	ldr	r2, [r7, #20]
 8012c50:	f107 0310 	add.w	r3, r7, #16
 8012c54:	4611      	mov	r1, r2
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7f2 fdc5 	bl	80057e6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8012c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d01d      	beq.n	8012ca0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8012c64:	68b8      	ldr	r0, [r7, #8]
 8012c66:	f7f2 fbfd 	bl	8005464 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	61fb      	str	r3, [r7, #28]
 8012c6e:	f107 021c 	add.w	r2, r7, #28
 8012c72:	f107 0310 	add.w	r3, r7, #16
 8012c76:	4611      	mov	r1, r2
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7f2 fa95 	bl	80051a8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d008      	beq.n	8012c96 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8012c84:	f107 0214 	add.w	r2, r7, #20
 8012c88:	f107 0318 	add.w	r3, r7, #24
 8012c8c:	4619      	mov	r1, r3
 8012c8e:	68f8      	ldr	r0, [r7, #12]
 8012c90:	f000 fc5f 	bl	8013552 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 8012c94:	e025      	b.n	8012ce2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8012c96:	f107 0310 	add.w	r3, r7, #16
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f000 f831 	bl	8012d02 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8012ca0:	68bc      	ldr	r4, [r7, #8]
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7ff ff8f 	bl	8012bc8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012caa:	4603      	mov	r3, r0
 8012cac:	687a      	ldr	r2, [r7, #4]
 8012cae:	4619      	mov	r1, r3
 8012cb0:	4620      	mov	r0, r4
 8012cb2:	f7fe f930 	bl	8010f16 <_ZNKSt4lessItEclERKtS2_>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d008      	beq.n	8012cce <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8012cbc:	f107 0214 	add.w	r2, r7, #20
 8012cc0:	f107 0318 	add.w	r3, r7, #24
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	68f8      	ldr	r0, [r7, #12]
 8012cc8:	f000 fc43 	bl	8013552 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 8012ccc:	e009      	b.n	8012ce2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8012cce:	2300      	movs	r3, #0
 8012cd0:	623b      	str	r3, [r7, #32]
 8012cd2:	f107 0220 	add.w	r2, r7, #32
 8012cd6:	f107 0310 	add.w	r3, r7, #16
 8012cda:	4619      	mov	r1, r3
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	f7ef f9ca 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8012ce2:	68f8      	ldr	r0, [r7, #12]
 8012ce4:	372c      	adds	r7, #44	; 0x2c
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd90      	pop	{r4, r7, pc}

08012cea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8012cea:	b480      	push	{r7}
 8012cec:	b083      	sub	sp, #12
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	330c      	adds	r3, #12
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	370c      	adds	r7, #12
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d00:	4770      	bx	lr

08012d02 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8012d02:	b580      	push	{r7, lr}
 8012d04:	b082      	sub	sp, #8
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f00d fc6c 	bl	80205ec <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8012d14:	4602      	mov	r2, r0
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	601a      	str	r2, [r3, #0]
	return *this;
 8012d1a:	687b      	ldr	r3, [r7, #4]
      }
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3708      	adds	r7, #8
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}

08012d24 <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr() const
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	3310      	adds	r3, #16
 8012d30:	4618      	mov	r0, r3
 8012d32:	f000 fc27 	bl	8013584 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 8012d36:	4603      	mov	r3, r0
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3708      	adds	r7, #8
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>:
      operator()(const _Pair& __x) const
 8012d40:	b480      	push	{r7}
 8012d42:	b083      	sub	sp, #12
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	370c      	adds	r7, #12
 8012d50:	46bd      	mov	sp, r7
 8012d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d56:	4770      	bx	lr

08012d58 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b082      	sub	sp, #8
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f7f9 fe68 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 8012d66:	4603      	mov	r3, r0
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3708      	adds	r7, #8
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}

08012d70 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f7f9 fe5c 	bl	800ca36 <_ZNSt9_Any_data9_M_accessEv>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	4618      	mov	r0, r3
 8012d82:	3708      	adds	r7, #8
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}

08012d88 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8012d88:	b480      	push	{r7}
 8012d8a:	b083      	sub	sp, #12
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8012d90:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8012d94:	4618      	mov	r0, r3
 8012d96:	370c      	adds	r7, #12
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr

08012da0 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b084      	sub	sp, #16
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012da8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012dac:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012dae:	6878      	ldr	r0, [r7, #4]
 8012db0:	f7ff ffea 	bl	8012d88 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>
 8012db4:	4603      	mov	r3, r0
 8012db6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012db8:	f107 0208 	add.w	r2, r7, #8
 8012dbc:	f107 030c 	add.w	r3, r7, #12
 8012dc0:	4611      	mov	r1, r2
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7f0 f80f 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	681b      	ldr	r3, [r3, #0]
      }
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3710      	adds	r7, #16
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	4618      	mov	r0, r3
 8012de0:	370c      	adds	r7, #12
 8012de2:	46bd      	mov	sp, r7
 8012de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de8:	4770      	bx	lr

08012dea <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012dea:	b5b0      	push	{r4, r5, r7, lr}
 8012dec:	b084      	sub	sp, #16
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	60f8      	str	r0, [r7, #12]
 8012df2:	60b9      	str	r1, [r7, #8]
 8012df4:	607a      	str	r2, [r7, #4]
 8012df6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012df8:	68f8      	ldr	r0, [r7, #12]
 8012dfa:	f000 fbee 	bl	80135da <_ZSt12__niter_baseIPP5TimerET_S3_>
 8012dfe:	4604      	mov	r4, r0
 8012e00:	68b8      	ldr	r0, [r7, #8]
 8012e02:	f000 fbea 	bl	80135da <_ZSt12__niter_baseIPP5TimerET_S3_>
 8012e06:	4605      	mov	r5, r0
 8012e08:	6878      	ldr	r0, [r7, #4]
 8012e0a:	f000 fbe6 	bl	80135da <_ZSt12__niter_baseIPP5TimerET_S3_>
 8012e0e:	4602      	mov	r2, r0
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	4629      	mov	r1, r5
 8012e14:	4620      	mov	r0, r4
 8012e16:	f000 fbeb 	bl	80135f0 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012e1a:	4603      	mov	r3, r0
    }
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3710      	adds	r7, #16
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bdb0      	pop	{r4, r5, r7, pc}

08012e24 <_ZN9__gnu_cxx13new_allocatorIjE10deallocateEPjj>:
      deallocate(_Tp* __p, size_type __t)
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	60f8      	str	r0, [r7, #12]
 8012e2c:	60b9      	str	r1, [r7, #8]
 8012e2e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	009b      	lsls	r3, r3, #2
 8012e34:	4619      	mov	r1, r3
 8012e36:	68b8      	ldr	r0, [r7, #8]
 8012e38:	f00d fb6c 	bl	8020514 <_ZdlPvj>
      }
 8012e3c:	3710      	adds	r7, #16
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}

08012e42 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8012e42:	b580      	push	{r7, lr}
 8012e44:	b084      	sub	sp, #16
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	60f8      	str	r0, [r7, #12]
 8012e4a:	60b9      	str	r1, [r7, #8]
 8012e4c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	009b      	lsls	r3, r3, #2
 8012e52:	4619      	mov	r1, r3
 8012e54:	68b8      	ldr	r0, [r7, #8]
 8012e56:	f00d fb5d 	bl	8020514 <_ZdlPvj>
      }
 8012e5a:	3710      	adds	r7, #16
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <_ZN9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8012e60:	b480      	push	{r7}
 8012e62:	b083      	sub	sp, #12
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	681a      	ldr	r2, [r3, #0]
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	601a      	str	r2, [r3, #0]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	4618      	mov	r0, r3
 8012e76:	370c      	adds	r7, #12
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7e:	4770      	bx	lr

08012e80 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8012e80:	b590      	push	{r4, r7, lr}
 8012e82:	b087      	sub	sp, #28
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	60f8      	str	r0, [r7, #12]
 8012e88:	60b9      	str	r1, [r7, #8]
 8012e8a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012e8c:	68f8      	ldr	r0, [r7, #12]
 8012e8e:	f000 fbcd 	bl	801362c <_ZNKSt6vectorIjSaIjEE8max_sizeEv>
 8012e92:	4604      	mov	r4, r0
 8012e94:	68f8      	ldr	r0, [r7, #12]
 8012e96:	f7fc f92a 	bl	800f0ee <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	1ae2      	subs	r2, r4, r3
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	bf34      	ite	cc
 8012ea4:	2301      	movcc	r3, #1
 8012ea6:	2300      	movcs	r3, #0
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d002      	beq.n	8012eb4 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012eae:	6878      	ldr	r0, [r7, #4]
 8012eb0:	f00d fbfc 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012eb4:	68f8      	ldr	r0, [r7, #12]
 8012eb6:	f7fc f91a 	bl	800f0ee <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8012eba:	4604      	mov	r4, r0
 8012ebc:	68f8      	ldr	r0, [r7, #12]
 8012ebe:	f7fc f916 	bl	800f0ee <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	613b      	str	r3, [r7, #16]
 8012ec6:	f107 0208 	add.w	r2, r7, #8
 8012eca:	f107 0310 	add.w	r3, r7, #16
 8012ece:	4611      	mov	r1, r2
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7ef fcbe 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4423      	add	r3, r4
 8012edc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012ede:	68f8      	ldr	r0, [r7, #12]
 8012ee0:	f7fc f905 	bl	800f0ee <_ZNKSt6vectorIjSaIjEE4sizeEv>
 8012ee4:	4602      	mov	r2, r0
 8012ee6:	697b      	ldr	r3, [r7, #20]
 8012ee8:	4293      	cmp	r3, r2
 8012eea:	d306      	bcc.n	8012efa <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x7a>
 8012eec:	68f8      	ldr	r0, [r7, #12]
 8012eee:	f000 fb9d 	bl	801362c <_ZNKSt6vectorIjSaIjEE8max_sizeEv>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	d904      	bls.n	8012f04 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x84>
 8012efa:	68f8      	ldr	r0, [r7, #12]
 8012efc:	f000 fb96 	bl	801362c <_ZNKSt6vectorIjSaIjEE8max_sizeEv>
 8012f00:	4603      	mov	r3, r0
 8012f02:	e000      	b.n	8012f06 <_ZNKSt6vectorIjSaIjEE12_M_check_lenEjPKc+0x86>
 8012f04:	697b      	ldr	r3, [r7, #20]
      }
 8012f06:	4618      	mov	r0, r3
 8012f08:	371c      	adds	r7, #28
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd90      	pop	{r4, r7, pc}

08012f0e <_ZNSt6vectorIjSaIjEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8012f0e:	b580      	push	{r7, lr}
 8012f10:	b084      	sub	sp, #16
 8012f12:	af00      	add	r7, sp, #0
 8012f14:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8012f16:	687a      	ldr	r2, [r7, #4]
 8012f18:	f107 030c 	add.w	r3, r7, #12
 8012f1c:	4611      	mov	r1, r2
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7ff ff9e 	bl	8012e60 <_ZN9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEC1ERKS1_>
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	4618      	mov	r0, r3
 8012f28:	3710      	adds	r7, #16
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}

08012f2e <_ZN9__gnu_cxxmiIPjSt6vectorIjSaIjEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012f2e:	b590      	push	{r4, r7, lr}
 8012f30:	b083      	sub	sp, #12
 8012f32:	af00      	add	r7, sp, #0
 8012f34:	6078      	str	r0, [r7, #4]
 8012f36:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8012f38:	6878      	ldr	r0, [r7, #4]
 8012f3a:	f000 f835 	bl	8012fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	681c      	ldr	r4, [r3, #0]
 8012f42:	6838      	ldr	r0, [r7, #0]
 8012f44:	f000 f830 	bl	8012fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	1ae3      	subs	r3, r4, r3
 8012f4e:	109b      	asrs	r3, r3, #2
 8012f50:	4618      	mov	r0, r3
 8012f52:	370c      	adds	r7, #12
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd90      	pop	{r4, r7, pc}

08012f58 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d006      	beq.n	8012f76 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj+0x1e>
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	6839      	ldr	r1, [r7, #0]
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f000 fb6e 	bl	801364e <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>
 8012f72:	4603      	mov	r3, r0
 8012f74:	e000      	b.n	8012f78 <_ZNSt12_Vector_baseIjSaIjEE11_M_allocateEj+0x20>
 8012f76:	2300      	movs	r3, #0
      }
 8012f78:	4618      	mov	r0, r3
 8012f7a:	3708      	adds	r7, #8
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}

08012f80 <_ZNSt6vectorIjSaIjEE11_S_relocateEPjS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012f80:	b590      	push	{r4, r7, lr}
 8012f82:	b087      	sub	sp, #28
 8012f84:	af02      	add	r7, sp, #8
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
 8012f8c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012f8e:	f88d 4000 	strb.w	r4, [sp]
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	687a      	ldr	r2, [r7, #4]
 8012f96:	68b9      	ldr	r1, [r7, #8]
 8012f98:	68f8      	ldr	r0, [r7, #12]
 8012f9a:	f000 fb78 	bl	801368e <_ZNSt6vectorIjSaIjEE14_S_do_relocateEPjS2_S2_RS0_St17integral_constantIbLb1EE>
 8012f9e:	4603      	mov	r3, r0
      }
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	3714      	adds	r7, #20
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd90      	pop	{r4, r7, pc}

08012fa8 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8012fa8:	b480      	push	{r7}
 8012faa:	b083      	sub	sp, #12
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	370c      	adds	r7, #12
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr

08012fbe <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b084      	sub	sp, #16
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
 8012fc6:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681a      	ldr	r2, [r3, #0]
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	009b      	lsls	r3, r3, #2
 8012fd0:	425b      	negs	r3, r3
 8012fd2:	4413      	add	r3, r2
 8012fd4:	60fb      	str	r3, [r7, #12]
 8012fd6:	f107 020c 	add.w	r2, r7, #12
 8012fda:	f107 0308 	add.w	r3, r7, #8
 8012fde:	4611      	mov	r1, r2
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7ff ff3d 	bl	8012e60 <_ZN9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEC1ERKS1_>
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3710      	adds	r7, #16
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <_ZNK9__gnu_cxx17__normal_iteratorIPjSt6vectorIjSaIjEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8012ff0:	b480      	push	{r7}
 8012ff2:	b083      	sub	sp, #12
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	370c      	adds	r7, #12
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr

08013008 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8013008:	b480      	push	{r7}
 801300a:	b083      	sub	sp, #12
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	681a      	ldr	r2, [r3, #0]
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	601a      	str	r2, [r3, #0]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	4618      	mov	r0, r3
 801301e:	370c      	adds	r7, #12
 8013020:	46bd      	mov	sp, r7
 8013022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013026:	4770      	bx	lr

08013028 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8013028:	b590      	push	{r4, r7, lr}
 801302a:	b087      	sub	sp, #28
 801302c:	af00      	add	r7, sp, #0
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8013034:	68f8      	ldr	r0, [r7, #12]
 8013036:	f000 fb3c 	bl	80136b2 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 801303a:	4604      	mov	r4, r0
 801303c:	68f8      	ldr	r0, [r7, #12]
 801303e:	f000 fb49 	bl	80136d4 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8013042:	4603      	mov	r3, r0
 8013044:	1ae2      	subs	r2, r4, r3
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	429a      	cmp	r2, r3
 801304a:	bf34      	ite	cc
 801304c:	2301      	movcc	r3, #1
 801304e:	2300      	movcs	r3, #0
 8013050:	b2db      	uxtb	r3, r3
 8013052:	2b00      	cmp	r3, #0
 8013054:	d002      	beq.n	801305c <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f00d fb28 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801305c:	68f8      	ldr	r0, [r7, #12]
 801305e:	f000 fb39 	bl	80136d4 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8013062:	4604      	mov	r4, r0
 8013064:	68f8      	ldr	r0, [r7, #12]
 8013066:	f000 fb35 	bl	80136d4 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801306a:	4603      	mov	r3, r0
 801306c:	613b      	str	r3, [r7, #16]
 801306e:	f107 0208 	add.w	r2, r7, #8
 8013072:	f107 0310 	add.w	r3, r7, #16
 8013076:	4611      	mov	r1, r2
 8013078:	4618      	mov	r0, r3
 801307a:	f7ef fbea 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 801307e:	4603      	mov	r3, r0
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	4423      	add	r3, r4
 8013084:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8013086:	68f8      	ldr	r0, [r7, #12]
 8013088:	f000 fb24 	bl	80136d4 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801308c:	4602      	mov	r2, r0
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	4293      	cmp	r3, r2
 8013092:	d306      	bcc.n	80130a2 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8013094:	68f8      	ldr	r0, [r7, #12]
 8013096:	f000 fb0c 	bl	80136b2 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 801309a:	4602      	mov	r2, r0
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	4293      	cmp	r3, r2
 80130a0:	d904      	bls.n	80130ac <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 80130a2:	68f8      	ldr	r0, [r7, #12]
 80130a4:	f000 fb05 	bl	80136b2 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 80130a8:	4603      	mov	r3, r0
 80130aa:	e000      	b.n	80130ae <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 80130ac:	697b      	ldr	r3, [r7, #20]
      }
 80130ae:	4618      	mov	r0, r3
 80130b0:	371c      	adds	r7, #28
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd90      	pop	{r4, r7, pc}

080130b6 <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80130b6:	b580      	push	{r7, lr}
 80130b8:	b084      	sub	sp, #16
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	f107 030c 	add.w	r3, r7, #12
 80130c4:	4611      	mov	r1, r2
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7ff ff9e 	bl	8013008 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	4618      	mov	r0, r3
 80130d0:	3710      	adds	r7, #16
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80130d6:	b590      	push	{r4, r7, lr}
 80130d8:	b083      	sub	sp, #12
 80130da:	af00      	add	r7, sp, #0
 80130dc:	6078      	str	r0, [r7, #4]
 80130de:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f000 f835 	bl	8013150 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 80130e6:	4603      	mov	r3, r0
 80130e8:	681c      	ldr	r4, [r3, #0]
 80130ea:	6838      	ldr	r0, [r7, #0]
 80130ec:	f000 f830 	bl	8013150 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 80130f0:	4603      	mov	r3, r0
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	1ae3      	subs	r3, r4, r3
 80130f6:	109b      	asrs	r3, r3, #2
 80130f8:	4618      	mov	r0, r3
 80130fa:	370c      	adds	r7, #12
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd90      	pop	{r4, r7, pc}

08013100 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8013100:	b580      	push	{r7, lr}
 8013102:	b082      	sub	sp, #8
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d006      	beq.n	801311e <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6839      	ldr	r1, [r7, #0]
 8013114:	4618      	mov	r0, r3
 8013116:	f000 faed 	bl	80136f4 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 801311a:	4603      	mov	r3, r0
 801311c:	e000      	b.n	8013120 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 801311e:	2300      	movs	r3, #0
      }
 8013120:	4618      	mov	r0, r3
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8013128:	b590      	push	{r4, r7, lr}
 801312a:	b087      	sub	sp, #28
 801312c:	af02      	add	r7, sp, #8
 801312e:	60f8      	str	r0, [r7, #12]
 8013130:	60b9      	str	r1, [r7, #8]
 8013132:	607a      	str	r2, [r7, #4]
 8013134:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8013136:	f88d 4000 	strb.w	r4, [sp]
 801313a:	683b      	ldr	r3, [r7, #0]
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	68b9      	ldr	r1, [r7, #8]
 8013140:	68f8      	ldr	r0, [r7, #12]
 8013142:	f000 faf7 	bl	8013734 <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8013146:	4603      	mov	r3, r0
      }
 8013148:	4618      	mov	r0, r3
 801314a:	3714      	adds	r7, #20
 801314c:	46bd      	mov	sp, r7
 801314e:	bd90      	pop	{r4, r7, pc}

08013150 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	4618      	mov	r0, r3
 801315c:	370c      	adds	r7, #12
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr

08013166 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8013166:	b580      	push	{r7, lr}
 8013168:	b084      	sub	sp, #16
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681a      	ldr	r2, [r3, #0]
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	009b      	lsls	r3, r3, #2
 8013178:	425b      	negs	r3, r3
 801317a:	4413      	add	r3, r2
 801317c:	60fb      	str	r3, [r7, #12]
 801317e:	f107 020c 	add.w	r2, r7, #12
 8013182:	f107 0308 	add.w	r3, r7, #8
 8013186:	4611      	mov	r1, r2
 8013188:	4618      	mov	r0, r3
 801318a:	f7ff ff3d 	bl	8013008 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	4618      	mov	r0, r3
 8013192:	3710      	adds	r7, #16
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}

08013198 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4618      	mov	r0, r3
 80131a6:	370c      	adds	r7, #12
 80131a8:	46bd      	mov	sp, r7
 80131aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ae:	4770      	bx	lr

080131b0 <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 80131b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80131bc:	4618      	mov	r0, r3
 80131be:	370c      	adds	r7, #12
 80131c0:	46bd      	mov	sp, r7
 80131c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c6:	4770      	bx	lr

080131c8 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80131d0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80131d4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f7ff ffea 	bl	80131b0 <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>
 80131dc:	4603      	mov	r3, r0
 80131de:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80131e0:	f107 0208 	add.w	r2, r7, #8
 80131e4:	f107 030c 	add.w	r3, r7, #12
 80131e8:	4611      	mov	r1, r2
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7ef fdfb 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80131f0:	4603      	mov	r3, r0
 80131f2:	681b      	ldr	r3, [r3, #0]
      }
 80131f4:	4618      	mov	r0, r3
 80131f6:	3710      	adds	r7, #16
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	4618      	mov	r0, r3
 8013208:	370c      	adds	r7, #12
 801320a:	46bd      	mov	sp, r7
 801320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013210:	4770      	bx	lr

08013212 <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013212:	b5b0      	push	{r4, r5, r7, lr}
 8013214:	b084      	sub	sp, #16
 8013216:	af00      	add	r7, sp, #0
 8013218:	60f8      	str	r0, [r7, #12]
 801321a:	60b9      	str	r1, [r7, #8]
 801321c:	607a      	str	r2, [r7, #4]
 801321e:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013220:	68f8      	ldr	r0, [r7, #12]
 8013222:	f000 fab8 	bl	8013796 <_ZSt12__niter_baseIPP6StreamET_S3_>
 8013226:	4604      	mov	r4, r0
 8013228:	68b8      	ldr	r0, [r7, #8]
 801322a:	f000 fab4 	bl	8013796 <_ZSt12__niter_baseIPP6StreamET_S3_>
 801322e:	4605      	mov	r5, r0
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f000 fab0 	bl	8013796 <_ZSt12__niter_baseIPP6StreamET_S3_>
 8013236:	4602      	mov	r2, r0
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	4629      	mov	r1, r5
 801323c:	4620      	mov	r0, r4
 801323e:	f000 fab5 	bl	80137ac <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8013242:	4603      	mov	r3, r0
    }
 8013244:	4618      	mov	r0, r3
 8013246:	3710      	adds	r7, #16
 8013248:	46bd      	mov	sp, r7
 801324a:	bdb0      	pop	{r4, r5, r7, pc}

0801324c <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801324c:	b580      	push	{r7, lr}
 801324e:	b084      	sub	sp, #16
 8013250:	af00      	add	r7, sp, #0
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013258:	68f8      	ldr	r0, [r7, #12]
 801325a:	f000 fac5 	bl	80137e8 <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>
 801325e:	4602      	mov	r2, r0
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	4293      	cmp	r3, r2
 8013264:	bf8c      	ite	hi
 8013266:	2301      	movhi	r3, #1
 8013268:	2300      	movls	r3, #0
 801326a:	b2db      	uxtb	r3, r3
 801326c:	2b00      	cmp	r3, #0
 801326e:	d001      	beq.n	8013274 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013270:	f00d fa19 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	4618      	mov	r0, r3
 801327a:	f00d f94d 	bl	8020518 <_Znwj>
 801327e:	4603      	mov	r3, r0
 8013280:	bf00      	nop
      }
 8013282:	4618      	mov	r0, r3
 8013284:	3710      	adds	r7, #16
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}

0801328a <_ZSt12__niter_baseIPP13StreamMessageET_S3_>:
    __niter_base(_Iterator __it)
 801328a:	b480      	push	{r7}
 801328c:	b083      	sub	sp, #12
 801328e:	af00      	add	r7, sp, #0
 8013290:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	4618      	mov	r0, r3
 8013296:	370c      	adds	r7, #12
 8013298:	46bd      	mov	sp, r7
 801329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801329e:	4770      	bx	lr

080132a0 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b086      	sub	sp, #24
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	60f8      	str	r0, [r7, #12]
 80132a8:	60b9      	str	r1, [r7, #8]
 80132aa:	607a      	str	r2, [r7, #4]
 80132ac:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80132ae:	68ba      	ldr	r2, [r7, #8]
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	1ad3      	subs	r3, r2, r3
 80132b4:	109b      	asrs	r3, r3, #2
 80132b6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	dd06      	ble.n	80132cc <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	009b      	lsls	r3, r3, #2
 80132c2:	461a      	mov	r2, r3
 80132c4:	68f9      	ldr	r1, [r7, #12]
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f00d fa60 	bl	802078c <memmove>
      return __result + __count;
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	009b      	lsls	r3, r3, #2
 80132d0:	687a      	ldr	r2, [r7, #4]
 80132d2:	4413      	add	r3, r2
    }
 80132d4:	4618      	mov	r0, r3
 80132d6:	3718      	adds	r7, #24
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}

080132dc <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 80132dc:	b580      	push	{r7, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	009b      	lsls	r3, r3, #2
 80132ec:	4619      	mov	r1, r3
 80132ee:	68b8      	ldr	r0, [r7, #8]
 80132f0:	f00d f910 	bl	8020514 <_ZdlPvj>
      }
 80132f4:	3710      	adds	r7, #16
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}

080132fa <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80132fa:	b480      	push	{r7}
 80132fc:	b083      	sub	sp, #12
 80132fe:	af00      	add	r7, sp, #0
 8013300:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	4618      	mov	r0, r3
 8013306:	370c      	adds	r7, #12
 8013308:	46bd      	mov	sp, r7
 801330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330e:	4770      	bx	lr

08013310 <_ZSt8_DestroyIP5FieldIJEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8013310:	b580      	push	{r7, lr}
 8013312:	b082      	sub	sp, #8
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f000 fa71 	bl	8013800 <_ZSt10destroy_atIP5FieldIJEEEvPT_>
    }
 801331e:	bf00      	nop
 8013320:	3708      	adds	r7, #8
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}

08013326 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8013326:	b590      	push	{r4, r7, lr}
 8013328:	b087      	sub	sp, #28
 801332a:	af00      	add	r7, sp, #0
 801332c:	60f8      	str	r0, [r7, #12]
 801332e:	60b9      	str	r1, [r7, #8]
 8013330:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8013332:	68f8      	ldr	r0, [r7, #12]
 8013334:	f000 fa6e 	bl	8013814 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8013338:	4604      	mov	r4, r0
 801333a:	68f8      	ldr	r0, [r7, #12]
 801333c:	f000 fa7b 	bl	8013836 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013340:	4603      	mov	r3, r0
 8013342:	1ae2      	subs	r2, r4, r3
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	429a      	cmp	r2, r3
 8013348:	bf34      	ite	cc
 801334a:	2301      	movcc	r3, #1
 801334c:	2300      	movcs	r3, #0
 801334e:	b2db      	uxtb	r3, r3
 8013350:	2b00      	cmp	r3, #0
 8013352:	d002      	beq.n	801335a <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8013354:	6878      	ldr	r0, [r7, #4]
 8013356:	f00d f9a9 	bl	80206ac <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801335a:	68f8      	ldr	r0, [r7, #12]
 801335c:	f000 fa6b 	bl	8013836 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013360:	4604      	mov	r4, r0
 8013362:	68f8      	ldr	r0, [r7, #12]
 8013364:	f000 fa67 	bl	8013836 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013368:	4603      	mov	r3, r0
 801336a:	613b      	str	r3, [r7, #16]
 801336c:	f107 0208 	add.w	r2, r7, #8
 8013370:	f107 0310 	add.w	r3, r7, #16
 8013374:	4611      	mov	r1, r2
 8013376:	4618      	mov	r0, r3
 8013378:	f7ef fa6b 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 801337c:	4603      	mov	r3, r0
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	4423      	add	r3, r4
 8013382:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8013384:	68f8      	ldr	r0, [r7, #12]
 8013386:	f000 fa56 	bl	8013836 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 801338a:	4602      	mov	r2, r0
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	4293      	cmp	r3, r2
 8013390:	d306      	bcc.n	80133a0 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x7a>
 8013392:	68f8      	ldr	r0, [r7, #12]
 8013394:	f000 fa3e 	bl	8013814 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8013398:	4602      	mov	r2, r0
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	4293      	cmp	r3, r2
 801339e:	d904      	bls.n	80133aa <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x84>
 80133a0:	68f8      	ldr	r0, [r7, #12]
 80133a2:	f000 fa37 	bl	8013814 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 80133a6:	4603      	mov	r3, r0
 80133a8:	e000      	b.n	80133ac <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x86>
 80133aa:	697b      	ldr	r3, [r7, #20]
      }
 80133ac:	4618      	mov	r0, r3
 80133ae:	371c      	adds	r7, #28
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd90      	pop	{r4, r7, pc}

080133b4 <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80133b4:	b590      	push	{r4, r7, lr}
 80133b6:	b083      	sub	sp, #12
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80133be:	6878      	ldr	r0, [r7, #4]
 80133c0:	f7f1 fb17 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 80133c4:	4603      	mov	r3, r0
 80133c6:	681c      	ldr	r4, [r3, #0]
 80133c8:	6838      	ldr	r0, [r7, #0]
 80133ca:	f7f1 fb12 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 80133ce:	4603      	mov	r3, r0
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	1ae3      	subs	r3, r4, r3
 80133d4:	109b      	asrs	r3, r3, #2
 80133d6:	4618      	mov	r0, r3
 80133d8:	370c      	adds	r7, #12
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd90      	pop	{r4, r7, pc}

080133de <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80133de:	b580      	push	{r7, lr}
 80133e0:	b082      	sub	sp, #8
 80133e2:	af00      	add	r7, sp, #0
 80133e4:	6078      	str	r0, [r7, #4]
 80133e6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d006      	beq.n	80133fc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x1e>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	6839      	ldr	r1, [r7, #0]
 80133f2:	4618      	mov	r0, r3
 80133f4:	f000 fa2f 	bl	8013856 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>
 80133f8:	4603      	mov	r3, r0
 80133fa:	e000      	b.n	80133fe <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x20>
 80133fc:	2300      	movs	r3, #0
      }
 80133fe:	4618      	mov	r0, r3
 8013400:	3708      	adds	r7, #8
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}

08013406 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8013406:	b590      	push	{r4, r7, lr}
 8013408:	b087      	sub	sp, #28
 801340a:	af02      	add	r7, sp, #8
 801340c:	60f8      	str	r0, [r7, #12]
 801340e:	60b9      	str	r1, [r7, #8]
 8013410:	607a      	str	r2, [r7, #4]
 8013412:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8013414:	f88d 4000 	strb.w	r4, [sp]
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	68b9      	ldr	r1, [r7, #8]
 801341e:	68f8      	ldr	r0, [r7, #12]
 8013420:	f000 fa39 	bl	8013896 <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>
 8013424:	4603      	mov	r3, r0
      }
 8013426:	4618      	mov	r0, r3
 8013428:	3714      	adds	r7, #20
 801342a:	46bd      	mov	sp, r7
 801342c:	bd90      	pop	{r4, r7, pc}

0801342e <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 801342e:	b580      	push	{r7, lr}
 8013430:	b084      	sub	sp, #16
 8013432:	af00      	add	r7, sp, #0
 8013434:	6078      	str	r0, [r7, #4]
 8013436:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681a      	ldr	r2, [r3, #0]
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	425b      	negs	r3, r3
 8013442:	4413      	add	r3, r2
 8013444:	60fb      	str	r3, [r7, #12]
 8013446:	f107 020c 	add.w	r2, r7, #12
 801344a:	f107 0308 	add.w	r3, r7, #8
 801344e:	4611      	mov	r1, r2
 8013450:	4618      	mov	r0, r3
 8013452:	f7f1 fff7 	bl	8005444 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	4618      	mov	r0, r3
 801345a:	3710      	adds	r7, #16
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}

08013460 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
 8013468:	6039      	str	r1, [r7, #0]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	60fb      	str	r3, [r7, #12]
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013472:	f7ec ff55 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	d009      	beq.n	8013490 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	4613      	mov	r3, r2
 8013480:	005b      	lsls	r3, r3, #1
 8013482:	4413      	add	r3, r2
 8013484:	00db      	lsls	r3, r3, #3
 8013486:	4618      	mov	r0, r3
 8013488:	f00d f846 	bl	8020518 <_Znwj>
 801348c:	4603      	mov	r3, r0
 801348e:	e006      	b.n	801349e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013490:	2200      	movs	r2, #0
 8013492:	68b9      	ldr	r1, [r7, #8]
 8013494:	68f8      	ldr	r0, [r7, #12]
 8013496:	f000 fb6d 	bl	8013b74 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>
 801349a:	4603      	mov	r3, r0
 801349c:	bf00      	nop
      { return __a.allocate(__n); }
 801349e:	4618      	mov	r0, r3
 80134a0:	3710      	adds	r7, #16
 80134a2:	46bd      	mov	sp, r7
 80134a4:	bd80      	pop	{r7, pc}

080134a6 <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 80134a6:	b580      	push	{r7, lr}
 80134a8:	b082      	sub	sp, #8
 80134aa:	af00      	add	r7, sp, #0
 80134ac:	6078      	str	r0, [r7, #4]
 80134ae:	6039      	str	r1, [r7, #0]
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	683a      	ldr	r2, [r7, #0]
 80134b4:	4611      	mov	r1, r2
 80134b6:	4618      	mov	r0, r3
 80134b8:	f000 f9ff 	bl	80138ba <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	4618      	mov	r0, r3
 80134c0:	3708      	adds	r7, #8
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80134c6:	b5b0      	push	{r4, r5, r7, lr}
 80134c8:	b088      	sub	sp, #32
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	60f8      	str	r0, [r7, #12]
 80134ce:	60b9      	str	r1, [r7, #8]
 80134d0:	607a      	str	r2, [r7, #4]
 80134d2:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80134d4:	68b8      	ldr	r0, [r7, #8]
 80134d6:	f7ed fec6 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f7fe fc1b 	bl	8011d16 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80134e0:	4602      	mov	r2, r0
 80134e2:	f107 0318 	add.w	r3, r7, #24
 80134e6:	4611      	mov	r1, r2
 80134e8:	4618      	mov	r0, r3
 80134ea:	f7ff ffdc 	bl	80134a6 <_ZNSt5tupleIJRKtEEC1EOS2_>
 80134ee:	f107 0418 	add.w	r4, r7, #24
 80134f2:	6838      	ldr	r0, [r7, #0]
 80134f4:	f7ed fecd 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	4619      	mov	r1, r3
 80134fc:	2008      	movs	r0, #8
 80134fe:	f7ec ff17 	bl	8000330 <_ZnwjPv>
 8013502:	4605      	mov	r5, r0
 8013504:	7f3b      	ldrb	r3, [r7, #28]
 8013506:	4622      	mov	r2, r4
 8013508:	7d39      	ldrb	r1, [r7, #20]
 801350a:	4628      	mov	r0, r5
 801350c:	f000 fa06 	bl	801391c <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 8013510:	462b      	mov	r3, r5
 8013512:	4618      	mov	r0, r3
 8013514:	3720      	adds	r7, #32
 8013516:	46bd      	mov	sp, r7
 8013518:	bdb0      	pop	{r4, r5, r7, pc}

0801351a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801351a:	b5b0      	push	{r4, r5, r7, lr}
 801351c:	b084      	sub	sp, #16
 801351e:	af00      	add	r7, sp, #0
 8013520:	60f8      	str	r0, [r7, #12]
 8013522:	60b9      	str	r1, [r7, #8]
 8013524:	607a      	str	r2, [r7, #4]
 8013526:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f7ed fe9c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801352e:	4604      	mov	r4, r0
 8013530:	6838      	ldr	r0, [r7, #0]
 8013532:	f7fe fbf0 	bl	8011d16 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013536:	4605      	mov	r5, r0
 8013538:	6a38      	ldr	r0, [r7, #32]
 801353a:	f7ed feaa 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801353e:	4603      	mov	r3, r0
 8013540:	462a      	mov	r2, r5
 8013542:	4621      	mov	r1, r4
 8013544:	68b8      	ldr	r0, [r7, #8]
 8013546:	f7ff ffbe 	bl	80134c6 <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 801354a:	bf00      	nop
 801354c:	3710      	adds	r7, #16
 801354e:	46bd      	mov	sp, r7
 8013550:	bdb0      	pop	{r4, r5, r7, pc}

08013552 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8013552:	b580      	push	{r7, lr}
 8013554:	b084      	sub	sp, #16
 8013556:	af00      	add	r7, sp, #0
 8013558:	60f8      	str	r0, [r7, #12]
 801355a:	60b9      	str	r1, [r7, #8]
 801355c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801355e:	68b8      	ldr	r0, [r7, #8]
 8013560:	f000 f9f0 	bl	8013944 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8013564:	4603      	mov	r3, r0
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	601a      	str	r2, [r3, #0]
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f7ef f91e 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8013572:	4603      	mov	r3, r0
 8013574:	681a      	ldr	r2, [r3, #0]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	605a      	str	r2, [r3, #4]
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	4618      	mov	r0, r3
 801357e:	3710      	adds	r7, #16
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}

08013584 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8013584:	b580      	push	{r7, lr}
 8013586:	b082      	sub	sp, #8
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f000 f9e4 	bl	801395a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 8013592:	4603      	mov	r3, r0
 8013594:	4618      	mov	r0, r3
 8013596:	3708      	adds	r7, #8
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80135a8:	68f8      	ldr	r0, [r7, #12]
 80135aa:	f000 f9e1 	bl	8013970 <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>
 80135ae:	4602      	mov	r2, r0
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	4293      	cmp	r3, r2
 80135b4:	bf8c      	ite	hi
 80135b6:	2301      	movhi	r3, #1
 80135b8:	2300      	movls	r3, #0
 80135ba:	b2db      	uxtb	r3, r3
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d001      	beq.n	80135c4 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80135c0:	f00d f871 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80135c4:	68bb      	ldr	r3, [r7, #8]
 80135c6:	009b      	lsls	r3, r3, #2
 80135c8:	4618      	mov	r0, r3
 80135ca:	f00c ffa5 	bl	8020518 <_Znwj>
 80135ce:	4603      	mov	r3, r0
 80135d0:	bf00      	nop
      }
 80135d2:	4618      	mov	r0, r3
 80135d4:	3710      	adds	r7, #16
 80135d6:	46bd      	mov	sp, r7
 80135d8:	bd80      	pop	{r7, pc}

080135da <_ZSt12__niter_baseIPP5TimerET_S3_>:
    __niter_base(_Iterator __it)
 80135da:	b480      	push	{r7}
 80135dc:	b083      	sub	sp, #12
 80135de:	af00      	add	r7, sp, #0
 80135e0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	4618      	mov	r0, r3
 80135e6:	370c      	adds	r7, #12
 80135e8:	46bd      	mov	sp, r7
 80135ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ee:	4770      	bx	lr

080135f0 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b086      	sub	sp, #24
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	60f8      	str	r0, [r7, #12]
 80135f8:	60b9      	str	r1, [r7, #8]
 80135fa:	607a      	str	r2, [r7, #4]
 80135fc:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80135fe:	68ba      	ldr	r2, [r7, #8]
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	109b      	asrs	r3, r3, #2
 8013606:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013608:	697b      	ldr	r3, [r7, #20]
 801360a:	2b00      	cmp	r3, #0
 801360c:	dd06      	ble.n	801361c <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	009b      	lsls	r3, r3, #2
 8013612:	461a      	mov	r2, r3
 8013614:	68f9      	ldr	r1, [r7, #12]
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f00d f8b8 	bl	802078c <memmove>
      return __result + __count;
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	687a      	ldr	r2, [r7, #4]
 8013622:	4413      	add	r3, r2
    }
 8013624:	4618      	mov	r0, r3
 8013626:	3718      	adds	r7, #24
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}

0801362c <_ZNKSt6vectorIjSaIjEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	4618      	mov	r0, r3
 8013638:	f000 f9cc 	bl	80139d4 <_ZNKSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>
 801363c:	4603      	mov	r3, r0
 801363e:	4618      	mov	r0, r3
 8013640:	f000 f9ae 	bl	80139a0 <_ZNSt6vectorIjSaIjEE11_S_max_sizeERKS0_>
 8013644:	4603      	mov	r3, r0
 8013646:	4618      	mov	r0, r3
 8013648:	3708      	adds	r7, #8
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}

0801364e <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 801364e:	b580      	push	{r7, lr}
 8013650:	b084      	sub	sp, #16
 8013652:	af00      	add	r7, sp, #0
 8013654:	6078      	str	r0, [r7, #4]
 8013656:	6039      	str	r1, [r7, #0]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	60fb      	str	r3, [r7, #12]
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013660:	f7ec fe5e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013664:	4603      	mov	r3, r0
 8013666:	2b00      	cmp	r3, #0
 8013668:	d006      	beq.n	8013678 <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	009b      	lsls	r3, r3, #2
 801366e:	4618      	mov	r0, r3
 8013670:	f00c ff52 	bl	8020518 <_Znwj>
 8013674:	4603      	mov	r3, r0
 8013676:	e006      	b.n	8013686 <_ZNSt16allocator_traitsISaIjEE8allocateERS0_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013678:	2200      	movs	r2, #0
 801367a:	68b9      	ldr	r1, [r7, #8]
 801367c:	68f8      	ldr	r0, [r7, #12]
 801367e:	f000 fac0 	bl	8013c02 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>
 8013682:	4603      	mov	r3, r0
 8013684:	bf00      	nop
      { return __a.allocate(__n); }
 8013686:	4618      	mov	r0, r3
 8013688:	3710      	adds	r7, #16
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}

0801368e <_ZNSt6vectorIjSaIjEE14_S_do_relocateEPjS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801368e:	b580      	push	{r7, lr}
 8013690:	b084      	sub	sp, #16
 8013692:	af00      	add	r7, sp, #0
 8013694:	60f8      	str	r0, [r7, #12]
 8013696:	60b9      	str	r1, [r7, #8]
 8013698:	607a      	str	r2, [r7, #4]
 801369a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801369c:	683b      	ldr	r3, [r7, #0]
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	68b9      	ldr	r1, [r7, #8]
 80136a2:	68f8      	ldr	r0, [r7, #12]
 80136a4:	f000 f9a1 	bl	80139ea <_ZSt12__relocate_aIPjS0_SaIjEET0_T_S3_S2_RT1_>
 80136a8:	4603      	mov	r3, r0
      }
 80136aa:	4618      	mov	r0, r3
 80136ac:	3710      	adds	r7, #16
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80136b2:	b580      	push	{r7, lr}
 80136b4:	b082      	sub	sp, #8
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	4618      	mov	r0, r3
 80136be:	f000 f9d7 	bl	8013a70 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80136c2:	4603      	mov	r3, r0
 80136c4:	4618      	mov	r0, r3
 80136c6:	f000 f9b9 	bl	8013a3c <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 80136ca:	4603      	mov	r3, r0
 80136cc:	4618      	mov	r0, r3
 80136ce:	3708      	adds	r7, #8
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bd80      	pop	{r7, pc}

080136d4 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80136d4:	b480      	push	{r7}
 80136d6:	b083      	sub	sp, #12
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	685a      	ldr	r2, [r3, #4]
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	1ad3      	subs	r3, r2, r3
 80136e6:	109b      	asrs	r3, r3, #2
 80136e8:	4618      	mov	r0, r3
 80136ea:	370c      	adds	r7, #12
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr

080136f4 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b084      	sub	sp, #16
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	60fb      	str	r3, [r7, #12]
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013706:	f7ec fe0b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d006      	beq.n	801371e <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	009b      	lsls	r3, r3, #2
 8013714:	4618      	mov	r0, r3
 8013716:	f00c feff 	bl	8020518 <_Znwj>
 801371a:	4603      	mov	r3, r0
 801371c:	e006      	b.n	801372c <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801371e:	2200      	movs	r2, #0
 8013720:	68b9      	ldr	r1, [r7, #8]
 8013722:	68f8      	ldr	r0, [r7, #12]
 8013724:	f000 fab5 	bl	8013c92 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 8013728:	4603      	mov	r3, r0
 801372a:	bf00      	nop
      { return __a.allocate(__n); }
 801372c:	4618      	mov	r0, r3
 801372e:	3710      	adds	r7, #16
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8013734:	b580      	push	{r7, lr}
 8013736:	b084      	sub	sp, #16
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
 8013740:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	687a      	ldr	r2, [r7, #4]
 8013746:	68b9      	ldr	r1, [r7, #8]
 8013748:	68f8      	ldr	r0, [r7, #12]
 801374a:	f000 f99c 	bl	8013a86 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 801374e:	4603      	mov	r3, r0
      }
 8013750:	4618      	mov	r0, r3
 8013752:	3710      	adds	r7, #16
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013758:	b580      	push	{r7, lr}
 801375a:	b084      	sub	sp, #16
 801375c:	af00      	add	r7, sp, #0
 801375e:	60f8      	str	r0, [r7, #12]
 8013760:	60b9      	str	r1, [r7, #8]
 8013762:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013764:	68f8      	ldr	r0, [r7, #12]
 8013766:	f000 f9ab 	bl	8013ac0 <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>
 801376a:	4602      	mov	r2, r0
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	4293      	cmp	r3, r2
 8013770:	bf8c      	ite	hi
 8013772:	2301      	movhi	r3, #1
 8013774:	2300      	movls	r3, #0
 8013776:	b2db      	uxtb	r3, r3
 8013778:	2b00      	cmp	r3, #0
 801377a:	d001      	beq.n	8013780 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801377c:	f00c ff93 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	009b      	lsls	r3, r3, #2
 8013784:	4618      	mov	r0, r3
 8013786:	f00c fec7 	bl	8020518 <_Znwj>
 801378a:	4603      	mov	r3, r0
 801378c:	bf00      	nop
      }
 801378e:	4618      	mov	r0, r3
 8013790:	3710      	adds	r7, #16
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}

08013796 <_ZSt12__niter_baseIPP6StreamET_S3_>:
    __niter_base(_Iterator __it)
 8013796:	b480      	push	{r7}
 8013798:	b083      	sub	sp, #12
 801379a:	af00      	add	r7, sp, #0
 801379c:	6078      	str	r0, [r7, #4]
    { return __it; }
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4618      	mov	r0, r3
 80137a2:	370c      	adds	r7, #12
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b086      	sub	sp, #24
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
 80137b8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80137ba:	68ba      	ldr	r2, [r7, #8]
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	1ad3      	subs	r3, r2, r3
 80137c0:	109b      	asrs	r3, r3, #2
 80137c2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	dd06      	ble.n	80137d8 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80137ca:	697b      	ldr	r3, [r7, #20]
 80137cc:	009b      	lsls	r3, r3, #2
 80137ce:	461a      	mov	r2, r3
 80137d0:	68f9      	ldr	r1, [r7, #12]
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f00c ffda 	bl	802078c <memmove>
      return __result + __count;
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	009b      	lsls	r3, r3, #2
 80137dc:	687a      	ldr	r2, [r7, #4]
 80137de:	4413      	add	r3, r2
    }
 80137e0:	4618      	mov	r0, r3
 80137e2:	3718      	adds	r7, #24
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80137e8:	b480      	push	{r7}
 80137ea:	b083      	sub	sp, #12
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80137f0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80137f4:	4618      	mov	r0, r3
 80137f6:	370c      	adds	r7, #12
 80137f8:	46bd      	mov	sp, r7
 80137fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137fe:	4770      	bx	lr

08013800 <_ZSt10destroy_atIP5FieldIJEEEvPT_>:
    destroy_at(_Tp* __location)
 8013800:	b480      	push	{r7}
 8013802:	b083      	sub	sp, #12
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
    }
 8013808:	bf00      	nop
 801380a:	370c      	adds	r7, #12
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr

08013814 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8013814:	b580      	push	{r7, lr}
 8013816:	b082      	sub	sp, #8
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	4618      	mov	r0, r3
 8013820:	f000 f980 	bl	8013b24 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8013824:	4603      	mov	r3, r0
 8013826:	4618      	mov	r0, r3
 8013828:	f000 f962 	bl	8013af0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>
 801382c:	4603      	mov	r3, r0
 801382e:	4618      	mov	r0, r3
 8013830:	3708      	adds	r7, #8
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}

08013836 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013836:	b480      	push	{r7}
 8013838:	b083      	sub	sp, #12
 801383a:	af00      	add	r7, sp, #0
 801383c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	685a      	ldr	r2, [r3, #4]
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	1ad3      	subs	r3, r2, r3
 8013848:	109b      	asrs	r3, r3, #2
 801384a:	4618      	mov	r0, r3
 801384c:	370c      	adds	r7, #12
 801384e:	46bd      	mov	sp, r7
 8013850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013854:	4770      	bx	lr

08013856 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8013856:	b580      	push	{r7, lr}
 8013858:	b084      	sub	sp, #16
 801385a:	af00      	add	r7, sp, #0
 801385c:	6078      	str	r0, [r7, #4]
 801385e:	6039      	str	r1, [r7, #0]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	60fb      	str	r3, [r7, #12]
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013868:	f7ec fd5a 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 801386c:	4603      	mov	r3, r0
 801386e:	2b00      	cmp	r3, #0
 8013870:	d006      	beq.n	8013880 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	4618      	mov	r0, r3
 8013878:	f00c fe4e 	bl	8020518 <_Znwj>
 801387c:	4603      	mov	r3, r0
 801387e:	e006      	b.n	801388e <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013880:	2200      	movs	r2, #0
 8013882:	68b9      	ldr	r1, [r7, #8]
 8013884:	68f8      	ldr	r0, [r7, #12]
 8013886:	f000 fa4c 	bl	8013d22 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>
 801388a:	4603      	mov	r3, r0
 801388c:	bf00      	nop
      { return __a.allocate(__n); }
 801388e:	4618      	mov	r0, r3
 8013890:	3710      	adds	r7, #16
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}

08013896 <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8013896:	b580      	push	{r7, lr}
 8013898:	b084      	sub	sp, #16
 801389a:	af00      	add	r7, sp, #0
 801389c:	60f8      	str	r0, [r7, #12]
 801389e:	60b9      	str	r1, [r7, #8]
 80138a0:	607a      	str	r2, [r7, #4]
 80138a2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	687a      	ldr	r2, [r7, #4]
 80138a8:	68b9      	ldr	r1, [r7, #8]
 80138aa:	68f8      	ldr	r0, [r7, #12]
 80138ac:	f000 f945 	bl	8013b3a <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>
 80138b0:	4603      	mov	r3, r0
      }
 80138b2:	4618      	mov	r0, r3
 80138b4:	3710      	adds	r7, #16
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}

080138ba <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80138ba:	b590      	push	{r4, r7, lr}
 80138bc:	b083      	sub	sp, #12
 80138be:	af00      	add	r7, sp, #0
 80138c0:	6078      	str	r0, [r7, #4]
 80138c2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80138c4:	687c      	ldr	r4, [r7, #4]
 80138c6:	6838      	ldr	r0, [r7, #0]
 80138c8:	f000 f976 	bl	8013bb8 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 80138cc:	4603      	mov	r3, r0
 80138ce:	4618      	mov	r0, r3
 80138d0:	f000 f97f 	bl	8013bd2 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80138d4:	4603      	mov	r3, r0
 80138d6:	4619      	mov	r1, r3
 80138d8:	4620      	mov	r0, r4
 80138da:	f7ff f8ff 	bl	8012adc <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	4618      	mov	r0, r3
 80138e2:	370c      	adds	r7, #12
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd90      	pop	{r4, r7, pc}

080138e8 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b084      	sub	sp, #16
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	60f8      	str	r0, [r7, #12]
 80138f0:	60b9      	str	r1, [r7, #8]
 80138f2:	607a      	str	r2, [r7, #4]
 80138f4:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80138f6:	68b8      	ldr	r0, [r7, #8]
 80138f8:	f000 f976 	bl	8013be8 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80138fc:	4603      	mov	r3, r0
 80138fe:	4618      	mov	r0, r3
 8013900:	f000 f967 	bl	8013bd2 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8013904:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8013906:	881a      	ldrh	r2, [r3, #0]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	801a      	strh	r2, [r3, #0]
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	2200      	movs	r2, #0
 8013910:	605a      	str	r2, [r3, #4]
      { }
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	4618      	mov	r0, r3
 8013916:	3710      	adds	r7, #16
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 801391c:	b5b0      	push	{r4, r5, r7, lr}
 801391e:	b086      	sub	sp, #24
 8013920:	af02      	add	r7, sp, #8
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	7239      	strb	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]
 8013928:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801392a:	463a      	mov	r2, r7
 801392c:	f88d 4000 	strb.w	r4, [sp]
 8013930:	462b      	mov	r3, r5
 8013932:	6879      	ldr	r1, [r7, #4]
 8013934:	68f8      	ldr	r0, [r7, #12]
 8013936:	f7ff ffd7 	bl	80138e8 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	4618      	mov	r0, r3
 801393e:	3710      	adds	r7, #16
 8013940:	46bd      	mov	sp, r7
 8013942:	bdb0      	pop	{r4, r5, r7, pc}

08013944 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013944:	b480      	push	{r7}
 8013946:	b083      	sub	sp, #12
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	4618      	mov	r0, r3
 8013950:	370c      	adds	r7, #12
 8013952:	46bd      	mov	sp, r7
 8013954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013958:	4770      	bx	lr

0801395a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() const noexcept
 801395a:	b480      	push	{r7}
 801395c:	b083      	sub	sp, #12
 801395e:	af00      	add	r7, sp, #0
 8013960:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	4618      	mov	r0, r3
 8013966:	370c      	adds	r7, #12
 8013968:	46bd      	mov	sp, r7
 801396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396e:	4770      	bx	lr

08013970 <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013970:	b480      	push	{r7}
 8013972:	b083      	sub	sp, #12
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013978:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 801397c:	4618      	mov	r0, r3
 801397e:	370c      	adds	r7, #12
 8013980:	46bd      	mov	sp, r7
 8013982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013986:	4770      	bx	lr

08013988 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013988:	b480      	push	{r7}
 801398a:	b083      	sub	sp, #12
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013990:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013994:	4618      	mov	r0, r3
 8013996:	370c      	adds	r7, #12
 8013998:	46bd      	mov	sp, r7
 801399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399e:	4770      	bx	lr

080139a0 <_ZNSt6vectorIjSaIjEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b084      	sub	sp, #16
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80139a8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80139ac:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7ff ffea 	bl	8013988 <_ZNSt16allocator_traitsISaIjEE8max_sizeERKS0_>
 80139b4:	4603      	mov	r3, r0
 80139b6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80139b8:	f107 0208 	add.w	r2, r7, #8
 80139bc:	f107 030c 	add.w	r3, r7, #12
 80139c0:	4611      	mov	r1, r2
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7ef fa0f 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80139c8:	4603      	mov	r3, r0
 80139ca:	681b      	ldr	r3, [r3, #0]
      }
 80139cc:	4618      	mov	r0, r3
 80139ce:	3710      	adds	r7, #16
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd80      	pop	{r7, pc}

080139d4 <_ZNKSt12_Vector_baseIjSaIjEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80139d4:	b480      	push	{r7}
 80139d6:	b083      	sub	sp, #12
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	4618      	mov	r0, r3
 80139e0:	370c      	adds	r7, #12
 80139e2:	46bd      	mov	sp, r7
 80139e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e8:	4770      	bx	lr

080139ea <_ZSt12__relocate_aIPjS0_SaIjEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80139ea:	b5b0      	push	{r4, r5, r7, lr}
 80139ec:	b084      	sub	sp, #16
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	60f8      	str	r0, [r7, #12]
 80139f2:	60b9      	str	r1, [r7, #8]
 80139f4:	607a      	str	r2, [r7, #4]
 80139f6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80139f8:	68f8      	ldr	r0, [r7, #12]
 80139fa:	f000 f921 	bl	8013c40 <_ZSt12__niter_baseIPjET_S1_>
 80139fe:	4604      	mov	r4, r0
 8013a00:	68b8      	ldr	r0, [r7, #8]
 8013a02:	f000 f91d 	bl	8013c40 <_ZSt12__niter_baseIPjET_S1_>
 8013a06:	4605      	mov	r5, r0
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f000 f919 	bl	8013c40 <_ZSt12__niter_baseIPjET_S1_>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	4629      	mov	r1, r5
 8013a14:	4620      	mov	r0, r4
 8013a16:	f000 f91e 	bl	8013c56 <_ZSt14__relocate_a_1IjjENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8013a1a:	4603      	mov	r3, r0
    }
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3710      	adds	r7, #16
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bdb0      	pop	{r4, r5, r7, pc}

08013a24 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013a24:	b480      	push	{r7}
 8013a26:	b083      	sub	sp, #12
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013a2c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013a30:	4618      	mov	r0, r3
 8013a32:	370c      	adds	r7, #12
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr

08013a3c <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b084      	sub	sp, #16
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013a44:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013a48:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7ff ffea 	bl	8013a24 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 8013a50:	4603      	mov	r3, r0
 8013a52:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013a54:	f107 0208 	add.w	r2, r7, #8
 8013a58:	f107 030c 	add.w	r3, r7, #12
 8013a5c:	4611      	mov	r1, r2
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7ef f9c1 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013a64:	4603      	mov	r3, r0
 8013a66:	681b      	ldr	r3, [r3, #0]
      }
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3710      	adds	r7, #16
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}

08013a70 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013a70:	b480      	push	{r7}
 8013a72:	b083      	sub	sp, #12
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	370c      	adds	r7, #12
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a84:	4770      	bx	lr

08013a86 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013a86:	b5b0      	push	{r4, r5, r7, lr}
 8013a88:	b084      	sub	sp, #16
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	60f8      	str	r0, [r7, #12]
 8013a8e:	60b9      	str	r1, [r7, #8]
 8013a90:	607a      	str	r2, [r7, #4]
 8013a92:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013a94:	68f8      	ldr	r0, [r7, #12]
 8013a96:	f000 f91b 	bl	8013cd0 <_ZSt12__niter_baseIPPvET_S2_>
 8013a9a:	4604      	mov	r4, r0
 8013a9c:	68b8      	ldr	r0, [r7, #8]
 8013a9e:	f000 f917 	bl	8013cd0 <_ZSt12__niter_baseIPPvET_S2_>
 8013aa2:	4605      	mov	r5, r0
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f000 f913 	bl	8013cd0 <_ZSt12__niter_baseIPPvET_S2_>
 8013aaa:	4602      	mov	r2, r0
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	4629      	mov	r1, r5
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f000 f918 	bl	8013ce6 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8013ab6:	4603      	mov	r3, r0
    }
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3710      	adds	r7, #16
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bdb0      	pop	{r4, r5, r7, pc}

08013ac0 <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013ac0:	b480      	push	{r7}
 8013ac2:	b083      	sub	sp, #12
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013ac8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013acc:	4618      	mov	r0, r3
 8013ace:	370c      	adds	r7, #12
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad6:	4770      	bx	lr

08013ad8 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013ad8:	b480      	push	{r7}
 8013ada:	b083      	sub	sp, #12
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013ae0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	370c      	adds	r7, #12
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aee:	4770      	bx	lr

08013af0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b084      	sub	sp, #16
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013af8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013afc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f7ff ffea 	bl	8013ad8 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>
 8013b04:	4603      	mov	r3, r0
 8013b06:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013b08:	f107 0208 	add.w	r2, r7, #8
 8013b0c:	f107 030c 	add.w	r3, r7, #12
 8013b10:	4611      	mov	r1, r2
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ef f967 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	681b      	ldr	r3, [r3, #0]
      }
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3710      	adds	r7, #16
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}

08013b24 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013b24:	b480      	push	{r7}
 8013b26:	b083      	sub	sp, #12
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	4618      	mov	r0, r3
 8013b30:	370c      	adds	r7, #12
 8013b32:	46bd      	mov	sp, r7
 8013b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b38:	4770      	bx	lr

08013b3a <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013b3a:	b5b0      	push	{r4, r5, r7, lr}
 8013b3c:	b084      	sub	sp, #16
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	60f8      	str	r0, [r7, #12]
 8013b42:	60b9      	str	r1, [r7, #8]
 8013b44:	607a      	str	r2, [r7, #4]
 8013b46:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013b48:	68f8      	ldr	r0, [r7, #12]
 8013b4a:	f000 f909 	bl	8013d60 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013b4e:	4604      	mov	r4, r0
 8013b50:	68b8      	ldr	r0, [r7, #8]
 8013b52:	f000 f905 	bl	8013d60 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013b56:	4605      	mov	r5, r0
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f000 f901 	bl	8013d60 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013b5e:	4602      	mov	r2, r0
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	4629      	mov	r1, r5
 8013b64:	4620      	mov	r0, r4
 8013b66:	f000 f906 	bl	8013d76 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>
 8013b6a:	4603      	mov	r3, r0
    }
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3710      	adds	r7, #16
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bdb0      	pop	{r4, r5, r7, pc}

08013b74 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b084      	sub	sp, #16
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	60b9      	str	r1, [r7, #8]
 8013b7e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013b80:	68f8      	ldr	r0, [r7, #12]
 8013b82:	f000 f917 	bl	8013db4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>
 8013b86:	4602      	mov	r2, r0
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	4293      	cmp	r3, r2
 8013b8c:	bf8c      	ite	hi
 8013b8e:	2301      	movhi	r3, #1
 8013b90:	2300      	movls	r3, #0
 8013b92:	b2db      	uxtb	r3, r3
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d001      	beq.n	8013b9c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013b98:	f00c fd85 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013b9c:	68ba      	ldr	r2, [r7, #8]
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	005b      	lsls	r3, r3, #1
 8013ba2:	4413      	add	r3, r2
 8013ba4:	00db      	lsls	r3, r3, #3
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f00c fcb6 	bl	8020518 <_Znwj>
 8013bac:	4603      	mov	r3, r0
 8013bae:	bf00      	nop
      }
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	3710      	adds	r7, #16
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}

08013bb8 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f000 f904 	bl	8013dd0 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3708      	adds	r7, #8
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}

08013bd2 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013bd2:	b480      	push	{r7}
 8013bd4:	b083      	sub	sp, #12
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	370c      	adds	r7, #12
 8013be0:	46bd      	mov	sp, r7
 8013be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be6:	4770      	bx	lr

08013be8 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f000 f8f8 	bl	8013de8 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3708      	adds	r7, #8
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}

08013c02 <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013c02:	b580      	push	{r7, lr}
 8013c04:	b084      	sub	sp, #16
 8013c06:	af00      	add	r7, sp, #0
 8013c08:	60f8      	str	r0, [r7, #12]
 8013c0a:	60b9      	str	r1, [r7, #8]
 8013c0c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013c0e:	68f8      	ldr	r0, [r7, #12]
 8013c10:	f000 f8f6 	bl	8013e00 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>
 8013c14:	4602      	mov	r2, r0
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	4293      	cmp	r3, r2
 8013c1a:	bf8c      	ite	hi
 8013c1c:	2301      	movhi	r3, #1
 8013c1e:	2300      	movls	r3, #0
 8013c20:	b2db      	uxtb	r3, r3
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d001      	beq.n	8013c2a <_ZN9__gnu_cxx13new_allocatorIjE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013c26:	f00c fd3e 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	009b      	lsls	r3, r3, #2
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f00c fc72 	bl	8020518 <_Znwj>
 8013c34:	4603      	mov	r3, r0
 8013c36:	bf00      	nop
      }
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3710      	adds	r7, #16
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}

08013c40 <_ZSt12__niter_baseIPjET_S1_>:
    __niter_base(_Iterator __it)
 8013c40:	b480      	push	{r7}
 8013c42:	b083      	sub	sp, #12
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	370c      	adds	r7, #12
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c54:	4770      	bx	lr

08013c56 <_ZSt14__relocate_a_1IjjENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013c56:	b580      	push	{r7, lr}
 8013c58:	b086      	sub	sp, #24
 8013c5a:	af00      	add	r7, sp, #0
 8013c5c:	60f8      	str	r0, [r7, #12]
 8013c5e:	60b9      	str	r1, [r7, #8]
 8013c60:	607a      	str	r2, [r7, #4]
 8013c62:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013c64:	68ba      	ldr	r2, [r7, #8]
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	1ad3      	subs	r3, r2, r3
 8013c6a:	109b      	asrs	r3, r3, #2
 8013c6c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	dd06      	ble.n	8013c82 <_ZSt14__relocate_a_1IjjENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	009b      	lsls	r3, r3, #2
 8013c78:	461a      	mov	r2, r3
 8013c7a:	68f9      	ldr	r1, [r7, #12]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f00c fd85 	bl	802078c <memmove>
      return __result + __count;
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	687a      	ldr	r2, [r7, #4]
 8013c88:	4413      	add	r3, r2
    }
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3718      	adds	r7, #24
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}

08013c92 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013c92:	b580      	push	{r7, lr}
 8013c94:	b084      	sub	sp, #16
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	60f8      	str	r0, [r7, #12]
 8013c9a:	60b9      	str	r1, [r7, #8]
 8013c9c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013c9e:	68f8      	ldr	r0, [r7, #12]
 8013ca0:	f000 f8ba 	bl	8013e18 <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>
 8013ca4:	4602      	mov	r2, r0
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	4293      	cmp	r3, r2
 8013caa:	bf8c      	ite	hi
 8013cac:	2301      	movhi	r3, #1
 8013cae:	2300      	movls	r3, #0
 8013cb0:	b2db      	uxtb	r3, r3
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d001      	beq.n	8013cba <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013cb6:	f00c fcf6 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	009b      	lsls	r3, r3, #2
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f00c fc2a 	bl	8020518 <_Znwj>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	bf00      	nop
      }
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3710      	adds	r7, #16
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <_ZSt12__niter_baseIPPvET_S2_>:
    __niter_base(_Iterator __it)
 8013cd0:	b480      	push	{r7}
 8013cd2:	b083      	sub	sp, #12
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	4618      	mov	r0, r3
 8013cdc:	370c      	adds	r7, #12
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce4:	4770      	bx	lr

08013ce6 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013ce6:	b580      	push	{r7, lr}
 8013ce8:	b086      	sub	sp, #24
 8013cea:	af00      	add	r7, sp, #0
 8013cec:	60f8      	str	r0, [r7, #12]
 8013cee:	60b9      	str	r1, [r7, #8]
 8013cf0:	607a      	str	r2, [r7, #4]
 8013cf2:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013cf4:	68ba      	ldr	r2, [r7, #8]
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	1ad3      	subs	r3, r2, r3
 8013cfa:	109b      	asrs	r3, r3, #2
 8013cfc:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	dd06      	ble.n	8013d12 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	009b      	lsls	r3, r3, #2
 8013d08:	461a      	mov	r2, r3
 8013d0a:	68f9      	ldr	r1, [r7, #12]
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f00c fd3d 	bl	802078c <memmove>
      return __result + __count;
 8013d12:	697b      	ldr	r3, [r7, #20]
 8013d14:	009b      	lsls	r3, r3, #2
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	4413      	add	r3, r2
    }
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	3718      	adds	r7, #24
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	bd80      	pop	{r7, pc}

08013d22 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013d22:	b580      	push	{r7, lr}
 8013d24:	b084      	sub	sp, #16
 8013d26:	af00      	add	r7, sp, #0
 8013d28:	60f8      	str	r0, [r7, #12]
 8013d2a:	60b9      	str	r1, [r7, #8]
 8013d2c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013d2e:	68f8      	ldr	r0, [r7, #12]
 8013d30:	f000 f87e 	bl	8013e30 <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>
 8013d34:	4602      	mov	r2, r0
 8013d36:	68bb      	ldr	r3, [r7, #8]
 8013d38:	4293      	cmp	r3, r2
 8013d3a:	bf8c      	ite	hi
 8013d3c:	2301      	movhi	r3, #1
 8013d3e:	2300      	movls	r3, #0
 8013d40:	b2db      	uxtb	r3, r3
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d001      	beq.n	8013d4a <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013d46:	f00c fcae 	bl	80206a6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	009b      	lsls	r3, r3, #2
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f00c fbe2 	bl	8020518 <_Znwj>
 8013d54:	4603      	mov	r3, r0
 8013d56:	bf00      	nop
      }
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3710      	adds	r7, #16
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>:
    __niter_base(_Iterator __it)
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	370c      	adds	r7, #12
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d74:	4770      	bx	lr

08013d76 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013d76:	b580      	push	{r7, lr}
 8013d78:	b086      	sub	sp, #24
 8013d7a:	af00      	add	r7, sp, #0
 8013d7c:	60f8      	str	r0, [r7, #12]
 8013d7e:	60b9      	str	r1, [r7, #8]
 8013d80:	607a      	str	r2, [r7, #4]
 8013d82:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013d84:	68ba      	ldr	r2, [r7, #8]
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	1ad3      	subs	r3, r2, r3
 8013d8a:	109b      	asrs	r3, r3, #2
 8013d8c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	dd06      	ble.n	8013da2 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	009b      	lsls	r3, r3, #2
 8013d98:	461a      	mov	r2, r3
 8013d9a:	68f9      	ldr	r1, [r7, #12]
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f00c fcf5 	bl	802078c <memmove>
      return __result + __count;
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	009b      	lsls	r3, r3, #2
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	4413      	add	r3, r2
    }
 8013daa:	4618      	mov	r0, r3
 8013dac:	3718      	adds	r7, #24
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
	...

08013db4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013db4:	b480      	push	{r7}
 8013db6:	b083      	sub	sp, #12
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013dbc:	4b03      	ldr	r3, [pc, #12]	; (8013dcc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv+0x18>)
      }
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	370c      	adds	r7, #12
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc8:	4770      	bx	lr
 8013dca:	bf00      	nop
 8013dcc:	05555555 	.word	0x05555555

08013dd0 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013dd0:	b480      	push	{r7}
 8013dd2:	b083      	sub	sp, #12
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	370c      	adds	r7, #12
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr

08013de8 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f7ff fee1 	bl	8013bb8 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8013df6:	4603      	mov	r3, r0
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <_ZNK9__gnu_cxx13new_allocatorIjE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013e00:	b480      	push	{r7}
 8013e02:	b083      	sub	sp, #12
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013e08:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	370c      	adds	r7, #12
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr

08013e18 <_ZNK9__gnu_cxx13new_allocatorIPvE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013e18:	b480      	push	{r7}
 8013e1a:	b083      	sub	sp, #12
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013e20:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013e24:	4618      	mov	r0, r3
 8013e26:	370c      	adds	r7, #12
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2e:	4770      	bx	lr

08013e30 <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013e30:	b480      	push	{r7}
 8013e32:	b083      	sub	sp, #12
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013e38:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	370c      	adds	r7, #12
 8013e40:	46bd      	mov	sp, r7
 8013e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e46:	4770      	bx	lr

08013e48 <_ZN6StreamD1Ev>:
class Stream {
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b082      	sub	sp, #8
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7fb fa4a 	bl	800f2ec <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3708      	adds	r7, #8
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}

08013e62 <_ZN5TimerD1Ev>:
class Timer {
 8013e62:	b580      	push	{r7, lr}
 8013e64:	b082      	sub	sp, #8
 8013e66:	af00      	add	r7, sp, #0
 8013e68:	6078      	str	r0, [r7, #4]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	3308      	adds	r3, #8
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7f8 fe84 	bl	800cb7c <_ZNSt8functionIFvvEED1Ev>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	4618      	mov	r0, r3
 8013e78:	3708      	adds	r7, #8
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}

08013e7e <_ZN6PacketD1Ev>:
class Packet {
 8013e7e:	b580      	push	{r7, lr}
 8013e80:	b082      	sub	sp, #8
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	6078      	str	r0, [r7, #4]
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	3308      	adds	r3, #8
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fb ffff 	bl	800fe8e <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	4618      	mov	r0, r3
 8013e94:	3708      	adds	r7, #8
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}
	...

08013e9c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af02      	add	r7, sp, #8
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	6039      	str	r1, [r7, #0]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2b01      	cmp	r3, #1
 8013eaa:	f040 827c 	bne.w	80143a6 <_Z41__static_initialization_and_destruction_0ii+0x50a>
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013eb4:	4293      	cmp	r3, r2
 8013eb6:	f040 8276 	bne.w	80143a6 <_Z41__static_initialization_and_destruction_0ii+0x50a>
InputCapture ic_PA1	(&htim2, TIM_CHANNEL_2, &PA1);
 8013eba:	4bae      	ldr	r3, [pc, #696]	; (8014174 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013ebc:	2204      	movs	r2, #4
 8013ebe:	49ae      	ldr	r1, [pc, #696]	; (8014178 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8013ec0:	48ae      	ldr	r0, [pc, #696]	; (801417c <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8013ec2:	f7f5 fae9 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PA5	(&htim2, TIM_CHANNEL_1, &PA5);
 8013ec6:	4bae      	ldr	r3, [pc, #696]	; (8014180 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8013ec8:	2200      	movs	r2, #0
 8013eca:	49ab      	ldr	r1, [pc, #684]	; (8014178 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8013ecc:	48ad      	ldr	r0, [pc, #692]	; (8014184 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8013ece:	f7f5 fae3 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB0	(&htim3, TIM_CHANNEL_3, &PB0);
 8013ed2:	4bad      	ldr	r3, [pc, #692]	; (8014188 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013ed4:	2208      	movs	r2, #8
 8013ed6:	49ad      	ldr	r1, [pc, #692]	; (801418c <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8013ed8:	48ad      	ldr	r0, [pc, #692]	; (8014190 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8013eda:	f7f5 fadd 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB1	(&htim3, TIM_CHANNEL_4, &PB1);
 8013ede:	4bad      	ldr	r3, [pc, #692]	; (8014194 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8013ee0:	220c      	movs	r2, #12
 8013ee2:	49aa      	ldr	r1, [pc, #680]	; (801418c <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8013ee4:	48ac      	ldr	r0, [pc, #688]	; (8014198 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8013ee6:	f7f5 fad7 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB4	(&htim3, TIM_CHANNEL_1, &PB4);
 8013eea:	4bac      	ldr	r3, [pc, #688]	; (801419c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8013eec:	2200      	movs	r2, #0
 8013eee:	49a7      	ldr	r1, [pc, #668]	; (801418c <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8013ef0:	48ab      	ldr	r0, [pc, #684]	; (80141a0 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8013ef2:	f7f5 fad1 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB5	(&htim3, TIM_CHANNEL_2, &PB5);
 8013ef6:	4bab      	ldr	r3, [pc, #684]	; (80141a4 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8013ef8:	2204      	movs	r2, #4
 8013efa:	49a4      	ldr	r1, [pc, #656]	; (801418c <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8013efc:	48aa      	ldr	r0, [pc, #680]	; (80141a8 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8013efe:	f7f5 facb 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB10(&htim2, TIM_CHANNEL_3, &PB10);
 8013f02:	4baa      	ldr	r3, [pc, #680]	; (80141ac <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8013f04:	2208      	movs	r2, #8
 8013f06:	499c      	ldr	r1, [pc, #624]	; (8014178 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8013f08:	48a9      	ldr	r0, [pc, #676]	; (80141b0 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8013f0a:	f7f5 fac5 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB11(&htim2, TIM_CHANNEL_4, &PB11);
 8013f0e:	4ba9      	ldr	r3, [pc, #676]	; (80141b4 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8013f10:	220c      	movs	r2, #12
 8013f12:	4999      	ldr	r1, [pc, #612]	; (8014178 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8013f14:	48a8      	ldr	r0, [pc, #672]	; (80141b8 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8013f16:	f7f5 fabf 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PC6	(&htim8, TIM_CHANNEL_1, &PC6);
 8013f1a:	4ba8      	ldr	r3, [pc, #672]	; (80141bc <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	49a8      	ldr	r1, [pc, #672]	; (80141c0 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8013f20:	48a8      	ldr	r0, [pc, #672]	; (80141c4 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8013f22:	f7f5 fab9 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD12(&htim4, TIM_CHANNEL_1, &PD12);
 8013f26:	4ba8      	ldr	r3, [pc, #672]	; (80141c8 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013f28:	2200      	movs	r2, #0
 8013f2a:	49a8      	ldr	r1, [pc, #672]	; (80141cc <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8013f2c:	48a8      	ldr	r0, [pc, #672]	; (80141d0 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8013f2e:	f7f5 fab3 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD13(&htim4, TIM_CHANNEL_2, &PD13);
 8013f32:	4ba8      	ldr	r3, [pc, #672]	; (80141d4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8013f34:	2204      	movs	r2, #4
 8013f36:	49a5      	ldr	r1, [pc, #660]	; (80141cc <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8013f38:	48a7      	ldr	r0, [pc, #668]	; (80141d8 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8013f3a:	f7f5 faad 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD14(&htim4, TIM_CHANNEL_3, &PD14);
 8013f3e:	4ba7      	ldr	r3, [pc, #668]	; (80141dc <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8013f40:	2208      	movs	r2, #8
 8013f42:	49a2      	ldr	r1, [pc, #648]	; (80141cc <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8013f44:	48a6      	ldr	r0, [pc, #664]	; (80141e0 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8013f46:	f7f5 faa7 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD15(&htim4, TIM_CHANNEL_4, &PD15);
 8013f4a:	4ba6      	ldr	r3, [pc, #664]	; (80141e4 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8013f4c:	220c      	movs	r2, #12
 8013f4e:	499f      	ldr	r1, [pc, #636]	; (80141cc <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8013f50:	48a5      	ldr	r0, [pc, #660]	; (80141e8 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8013f52:	f7f5 faa1 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE9	(&htim1, TIM_CHANNEL_1,	&PE9);
 8013f56:	4ba5      	ldr	r3, [pc, #660]	; (80141ec <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013f58:	2200      	movs	r2, #0
 8013f5a:	49a5      	ldr	r1, [pc, #660]	; (80141f0 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8013f5c:	48a5      	ldr	r0, [pc, #660]	; (80141f4 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8013f5e:	f7f5 fa9b 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE11(&htim1, TIM_CHANNEL_2,	&PE11);
 8013f62:	4ba5      	ldr	r3, [pc, #660]	; (80141f8 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8013f64:	2204      	movs	r2, #4
 8013f66:	49a2      	ldr	r1, [pc, #648]	; (80141f0 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8013f68:	48a4      	ldr	r0, [pc, #656]	; (80141fc <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8013f6a:	f7f5 fa95 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE13(&htim1, TIM_CHANNEL_3, &PE13);
 8013f6e:	4ba4      	ldr	r3, [pc, #656]	; (8014200 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8013f70:	2208      	movs	r2, #8
 8013f72:	499f      	ldr	r1, [pc, #636]	; (80141f0 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8013f74:	48a3      	ldr	r0, [pc, #652]	; (8014204 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8013f76:	f7f5 fa8f 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE14(&htim1, TIM_CHANNEL_4, &PE14);
 8013f7a:	4ba3      	ldr	r3, [pc, #652]	; (8014208 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8013f7c:	220c      	movs	r2, #12
 8013f7e:	499c      	ldr	r1, [pc, #624]	; (80141f0 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8013f80:	48a2      	ldr	r0, [pc, #648]	; (801420c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8013f82:	f7f5 fa89 	bl	8009498 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
DigitalIn digital_in_PC1(&PC1);
 8013f86:	49a2      	ldr	r1, [pc, #648]	; (8014210 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8013f88:	48a2      	ldr	r0, [pc, #648]	; (8014214 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8013f8a:	f7f2 fb05 	bl	8006598 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC2(&PC2);
 8013f8e:	49a2      	ldr	r1, [pc, #648]	; (8014218 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8013f90:	48a2      	ldr	r0, [pc, #648]	; (801421c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8013f92:	f7f2 fb01 	bl	8006598 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC3(&PC3);
 8013f96:	49a2      	ldr	r1, [pc, #648]	; (8014220 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8013f98:	48a2      	ldr	r0, [pc, #648]	; (8014224 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8013f9a:	f7f2 fafd 	bl	8006598 <_ZN9DigitalInC1EP3Pin>
AnalogIn analog_in_PA6(&hadc1, &htim6, &PA6);
 8013f9e:	4ba2      	ldr	r3, [pc, #648]	; (8014228 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013fa0:	4aa2      	ldr	r2, [pc, #648]	; (801422c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8013fa2:	49a3      	ldr	r1, [pc, #652]	; (8014230 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8013fa4:	48a3      	ldr	r0, [pc, #652]	; (8014234 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8013fa6:	f7ec faa1 	bl	80004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>
AnalogOut analog_out_PF1 (3.3, &htim23, TIM_CHANNEL_2, &PF1);
 8013faa:	4ba3      	ldr	r3, [pc, #652]	; (8014238 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013fac:	2204      	movs	r2, #4
 8013fae:	49a3      	ldr	r1, [pc, #652]	; (801423c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8013fb0:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8013fb4:	48a3      	ldr	r0, [pc, #652]	; (8014244 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8013fb6:	f7ef f8eb 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF0 (3.3, &htim23, TIM_CHANNEL_1, &PF0);
 8013fba:	4ba3      	ldr	r3, [pc, #652]	; (8014248 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8013fbc:	2200      	movs	r2, #0
 8013fbe:	499f      	ldr	r1, [pc, #636]	; (801423c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8013fc0:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8013fc4:	48a1      	ldr	r0, [pc, #644]	; (801424c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013fc6:	f7ef f8e3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA0 (3.3, &htim5, 	TIM_CHANNEL_1, &PA0);
 8013fca:	4ba1      	ldr	r3, [pc, #644]	; (8014250 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013fcc:	2200      	movs	r2, #0
 8013fce:	49a1      	ldr	r1, [pc, #644]	; (8014254 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8013fd0:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8013fd4:	48a0      	ldr	r0, [pc, #640]	; (8014258 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8013fd6:	f7ef f8db 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA2 (3.3, &htim5, 	TIM_CHANNEL_3, &PA2);
 8013fda:	4ba0      	ldr	r3, [pc, #640]	; (801425c <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8013fdc:	2208      	movs	r2, #8
 8013fde:	499d      	ldr	r1, [pc, #628]	; (8014254 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8013fe0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8013fe4:	489e      	ldr	r0, [pc, #632]	; (8014260 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8013fe6:	f7ef f8d3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA3 (3.3, &htim5, 	TIM_CHANNEL_4, &PA3);
 8013fea:	4b9e      	ldr	r3, [pc, #632]	; (8014264 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8013fec:	220c      	movs	r2, #12
 8013fee:	4999      	ldr	r1, [pc, #612]	; (8014254 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8013ff0:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8013ff4:	489c      	ldr	r0, [pc, #624]	; (8014268 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8013ff6:	f7ef f8cb 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC7 (3.3, &htim8, 	TIM_CHANNEL_2, &PC7);
 8013ffa:	4b9c      	ldr	r3, [pc, #624]	; (801426c <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8013ffc:	2204      	movs	r2, #4
 8013ffe:	4970      	ldr	r1, [pc, #448]	; (80141c0 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8014000:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8014004:	489a      	ldr	r0, [pc, #616]	; (8014270 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8014006:	f7ef f8c3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC6 (3.3, &htim8, 	TIM_CHANNEL_1, &PC6);
 801400a:	4b6c      	ldr	r3, [pc, #432]	; (80141bc <_Z41__static_initialization_and_destruction_0ii+0x320>)
 801400c:	2200      	movs	r2, #0
 801400e:	496c      	ldr	r1, [pc, #432]	; (80141c0 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8014010:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8014014:	4897      	ldr	r0, [pc, #604]	; (8014274 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8014016:	f7ef f8bb 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC8 (3.3, &htim8, 	TIM_CHANNEL_3, &PC8);
 801401a:	4b97      	ldr	r3, [pc, #604]	; (8014278 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 801401c:	2208      	movs	r2, #8
 801401e:	4968      	ldr	r1, [pc, #416]	; (80141c0 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8014020:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8014024:	4895      	ldr	r0, [pc, #596]	; (801427c <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8014026:	f7ef f8b3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC9 (3.3, &htim8, 	TIM_CHANNEL_4, &PC9);
 801402a:	4b95      	ldr	r3, [pc, #596]	; (8014280 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 801402c:	220c      	movs	r2, #12
 801402e:	4964      	ldr	r1, [pc, #400]	; (80141c0 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8014030:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8014034:	4893      	ldr	r0, [pc, #588]	; (8014284 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8014036:	f7ef f8ab 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF2 (3.3, &htim23, TIM_CHANNEL_3, &PF2);
 801403a:	4b93      	ldr	r3, [pc, #588]	; (8014288 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 801403c:	2208      	movs	r2, #8
 801403e:	497f      	ldr	r1, [pc, #508]	; (801423c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8014040:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8014044:	4891      	ldr	r0, [pc, #580]	; (801428c <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8014046:	f7ef f8a3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF13(3.3, &htim24, TIM_CHANNEL_3, &PF13);
 801404a:	4b91      	ldr	r3, [pc, #580]	; (8014290 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 801404c:	2208      	movs	r2, #8
 801404e:	4991      	ldr	r1, [pc, #580]	; (8014294 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8014050:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8014054:	4890      	ldr	r0, [pc, #576]	; (8014298 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8014056:	f7ef f89b 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF12(3.3, &htim24, TIM_CHANNEL_2, &PF12);
 801405a:	4b90      	ldr	r3, [pc, #576]	; (801429c <_Z41__static_initialization_and_destruction_0ii+0x400>)
 801405c:	2204      	movs	r2, #4
 801405e:	498d      	ldr	r1, [pc, #564]	; (8014294 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8014060:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8014064:	488e      	ldr	r0, [pc, #568]	; (80142a0 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8014066:	f7ef f893 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PB14(3.3, &htim12, TIM_CHANNEL_1, &PB14);
 801406a:	4b8e      	ldr	r3, [pc, #568]	; (80142a4 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 801406c:	2200      	movs	r2, #0
 801406e:	498e      	ldr	r1, [pc, #568]	; (80142a8 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8014070:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8014074:	488d      	ldr	r0, [pc, #564]	; (80142ac <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8014076:	f7ef f88b 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF14(3.3, &htim24, TIM_CHANNEL_4, &PF14);
 801407a:	4b8d      	ldr	r3, [pc, #564]	; (80142b0 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 801407c:	220c      	movs	r2, #12
 801407e:	4985      	ldr	r1, [pc, #532]	; (8014294 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8014080:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8014084:	488b      	ldr	r0, [pc, #556]	; (80142b4 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8014086:	f7ef f883 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF3 (3.3, &htim23, TIM_CHANNEL_4, &PF3);
 801408a:	4b8b      	ldr	r3, [pc, #556]	; (80142b8 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 801408c:	220c      	movs	r2, #12
 801408e:	496b      	ldr	r1, [pc, #428]	; (801423c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8014090:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 8014094:	4889      	ldr	r0, [pc, #548]	; (80142bc <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8014096:	f7ef f87b 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF11(3.3, &htim24, TIM_CHANNEL_1, &PF11);
 801409a:	4b89      	ldr	r3, [pc, #548]	; (80142c0 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 801409c:	2200      	movs	r2, #0
 801409e:	497d      	ldr	r1, [pc, #500]	; (8014294 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 80140a0:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8014240 <_Z41__static_initialization_and_destruction_0ii+0x3a4>
 80140a4:	4887      	ldr	r0, [pc, #540]	; (80142c4 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 80140a6:	f7ef f873 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
DigitalOut digital_out_PC10(&PC10);
 80140aa:	4987      	ldr	r1, [pc, #540]	; (80142c8 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 80140ac:	4887      	ldr	r0, [pc, #540]	; (80142cc <_Z41__static_initialization_and_destruction_0ii+0x430>)
 80140ae:	f7f3 fe21 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC11(&PC11);
 80140b2:	4987      	ldr	r1, [pc, #540]	; (80142d0 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 80140b4:	4887      	ldr	r0, [pc, #540]	; (80142d4 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 80140b6:	f7f3 fe1d 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC12(&PC12);
 80140ba:	4987      	ldr	r1, [pc, #540]	; (80142d8 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 80140bc:	4887      	ldr	r0, [pc, #540]	; (80142dc <_Z41__static_initialization_and_destruction_0ii+0x440>)
 80140be:	f7f3 fe19 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC13(&PC13);
 80140c2:	4987      	ldr	r1, [pc, #540]	; (80142e0 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 80140c4:	4887      	ldr	r0, [pc, #540]	; (80142e4 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 80140c6:	f7f3 fe15 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC14(&PC14);
 80140ca:	4987      	ldr	r1, [pc, #540]	; (80142e8 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 80140cc:	4887      	ldr	r0, [pc, #540]	; (80142ec <_Z41__static_initialization_and_destruction_0ii+0x450>)
 80140ce:	f7f3 fe11 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC15(&PC15);
 80140d2:	4987      	ldr	r1, [pc, #540]	; (80142f0 <_Z41__static_initialization_and_destruction_0ii+0x454>)
 80140d4:	4887      	ldr	r0, [pc, #540]	; (80142f4 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 80140d6:	f7f3 fe0d 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF6 (&PF6);
 80140da:	4987      	ldr	r1, [pc, #540]	; (80142f8 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 80140dc:	4887      	ldr	r0, [pc, #540]	; (80142fc <_Z41__static_initialization_and_destruction_0ii+0x460>)
 80140de:	f7f3 fe09 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF7 (&PF7);
 80140e2:	4987      	ldr	r1, [pc, #540]	; (8014300 <_Z41__static_initialization_and_destruction_0ii+0x464>)
 80140e4:	4887      	ldr	r0, [pc, #540]	; (8014304 <_Z41__static_initialization_and_destruction_0ii+0x468>)
 80140e6:	f7f3 fe05 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB7 (&PB7);
 80140ea:	4987      	ldr	r1, [pc, #540]	; (8014308 <_Z41__static_initialization_and_destruction_0ii+0x46c>)
 80140ec:	4887      	ldr	r0, [pc, #540]	; (801430c <_Z41__static_initialization_and_destruction_0ii+0x470>)
 80140ee:	f7f3 fe01 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB9 (&PB9);
 80140f2:	4987      	ldr	r1, [pc, #540]	; (8014310 <_Z41__static_initialization_and_destruction_0ii+0x474>)
 80140f4:	4887      	ldr	r0, [pc, #540]	; (8014314 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 80140f6:	f7f3 fdfd 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PD8 (&PD8);
 80140fa:	4987      	ldr	r1, [pc, #540]	; (8014318 <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 80140fc:	4887      	ldr	r0, [pc, #540]	; (801431c <_Z41__static_initialization_and_destruction_0ii+0x480>)
 80140fe:	f7f3 fdf9 	bl	8007cf4 <_ZN10DigitalOutC1EP3Pin>
Can main_can(&hfdcan1);
 8014102:	4987      	ldr	r1, [pc, #540]	; (8014320 <_Z41__static_initialization_and_destruction_0ii+0x484>)
 8014104:	4887      	ldr	r0, [pc, #540]	; (8014324 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8014106:	f7f0 fd3f 	bl	8004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>
Packet read_once			(READ_ONCE_ID	, read_once_callback			, &read_once_pin);
 801410a:	4b87      	ldr	r3, [pc, #540]	; (8014328 <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 801410c:	4a87      	ldr	r2, [pc, #540]	; (801432c <_Z41__static_initialization_and_destruction_0ii+0x490>)
 801410e:	2104      	movs	r1, #4
 8014110:	4887      	ldr	r0, [pc, #540]	; (8014330 <_Z41__static_initialization_and_destruction_0ii+0x494>)
 8014112:	f7fb f9e7 	bl	800f4e4 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_stream			(READ_STREAM_ID	, read_stream_callback			, &read_stream_pin, &read_stream_freq);
 8014116:	4b87      	ldr	r3, [pc, #540]	; (8014334 <_Z41__static_initialization_and_destruction_0ii+0x498>)
 8014118:	9300      	str	r3, [sp, #0]
 801411a:	4b87      	ldr	r3, [pc, #540]	; (8014338 <_Z41__static_initialization_and_destruction_0ii+0x49c>)
 801411c:	4a87      	ldr	r2, [pc, #540]	; (801433c <_Z41__static_initialization_and_destruction_0ii+0x4a0>)
 801411e:	2105      	movs	r1, #5
 8014120:	4887      	ldr	r0, [pc, #540]	; (8014340 <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 8014122:	f7fb fa09 	bl	800f538 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet write_once			(WRITE_ONCE_ID	, write_once_callback			, &write_once_pin,	&write_once_value);
 8014126:	4b87      	ldr	r3, [pc, #540]	; (8014344 <_Z41__static_initialization_and_destruction_0ii+0x4a8>)
 8014128:	9300      	str	r3, [sp, #0]
 801412a:	4b87      	ldr	r3, [pc, #540]	; (8014348 <_Z41__static_initialization_and_destruction_0ii+0x4ac>)
 801412c:	4a87      	ldr	r2, [pc, #540]	; (801434c <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 801412e:	2106      	movs	r1, #6
 8014130:	4887      	ldr	r0, [pc, #540]	; (8014350 <_Z41__static_initialization_and_destruction_0ii+0x4b4>)
 8014132:	f7fb fa2d 	bl	800f590 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Timer timer_7(&htim7);
 8014136:	4987      	ldr	r1, [pc, #540]	; (8014354 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 8014138:	4887      	ldr	r0, [pc, #540]	; (8014358 <_Z41__static_initialization_and_destruction_0ii+0x4bc>)
 801413a:	f7f8 fd2d 	bl	800cb98 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_13(&htim13);
 801413e:	4987      	ldr	r1, [pc, #540]	; (801435c <_Z41__static_initialization_and_destruction_0ii+0x4c0>)
 8014140:	4887      	ldr	r0, [pc, #540]	; (8014360 <_Z41__static_initialization_and_destruction_0ii+0x4c4>)
 8014142:	f7f8 fd29 	bl	800cb98 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_14(&htim14);
 8014146:	4987      	ldr	r1, [pc, #540]	; (8014364 <_Z41__static_initialization_and_destruction_0ii+0x4c8>)
 8014148:	4887      	ldr	r0, [pc, #540]	; (8014368 <_Z41__static_initialization_and_destruction_0ii+0x4cc>)
 801414a:	f7f8 fd25 	bl	800cb98 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_15(&htim15);
 801414e:	4987      	ldr	r1, [pc, #540]	; (801436c <_Z41__static_initialization_and_destruction_0ii+0x4d0>)
 8014150:	4887      	ldr	r0, [pc, #540]	; (8014370 <_Z41__static_initialization_and_destruction_0ii+0x4d4>)
 8014152:	f7f8 fd21 	bl	800cb98 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_16(&htim16);
 8014156:	4987      	ldr	r1, [pc, #540]	; (8014374 <_Z41__static_initialization_and_destruction_0ii+0x4d8>)
 8014158:	4887      	ldr	r0, [pc, #540]	; (8014378 <_Z41__static_initialization_and_destruction_0ii+0x4dc>)
 801415a:	f7f8 fd1d 	bl	800cb98 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_17(&htim17);
 801415e:	4987      	ldr	r1, [pc, #540]	; (801437c <_Z41__static_initialization_and_destruction_0ii+0x4e0>)
 8014160:	4887      	ldr	r0, [pc, #540]	; (8014380 <_Z41__static_initialization_and_destruction_0ii+0x4e4>)
 8014162:	f7f8 fd19 	bl	800cb98 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Stream stream1(&timer_14, &main_can);
 8014166:	4a6f      	ldr	r2, [pc, #444]	; (8014324 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8014168:	497f      	ldr	r1, [pc, #508]	; (8014368 <_Z41__static_initialization_and_destruction_0ii+0x4cc>)
 801416a:	4886      	ldr	r0, [pc, #536]	; (8014384 <_Z41__static_initialization_and_destruction_0ii+0x4e8>)
 801416c:	f7f9 f81e 	bl	800d1ac <_ZN6StreamC1EP5TimerP3Can>
 8014170:	e10a      	b.n	8014388 <_Z41__static_initialization_and_destruction_0ii+0x4ec>
 8014172:	bf00      	nop
 8014174:	240001c0 	.word	0x240001c0
 8014178:	24001130 	.word	0x24001130
 801417c:	240004b8 	.word	0x240004b8
 8014180:	240001e0 	.word	0x240001e0
 8014184:	24000514 	.word	0x24000514
 8014188:	24000238 	.word	0x24000238
 801418c:	2400117c 	.word	0x2400117c
 8014190:	24000570 	.word	0x24000570
 8014194:	24000240 	.word	0x24000240
 8014198:	240005cc 	.word	0x240005cc
 801419c:	24000258 	.word	0x24000258
 80141a0:	24000628 	.word	0x24000628
 80141a4:	24000260 	.word	0x24000260
 80141a8:	24000684 	.word	0x24000684
 80141ac:	24000288 	.word	0x24000288
 80141b0:	240006e0 	.word	0x240006e0
 80141b4:	24000290 	.word	0x24000290
 80141b8:	2400073c 	.word	0x2400073c
 80141bc:	240002e8 	.word	0x240002e8
 80141c0:	240012f8 	.word	0x240012f8
 80141c4:	24000798 	.word	0x24000798
 80141c8:	24000398 	.word	0x24000398
 80141cc:	240011c8 	.word	0x240011c8
 80141d0:	240007f4 	.word	0x240007f4
 80141d4:	240003a0 	.word	0x240003a0
 80141d8:	24000850 	.word	0x24000850
 80141dc:	240003a8 	.word	0x240003a8
 80141e0:	240008ac 	.word	0x240008ac
 80141e4:	240003b0 	.word	0x240003b0
 80141e8:	24000908 	.word	0x24000908
 80141ec:	24000400 	.word	0x24000400
 80141f0:	240010e4 	.word	0x240010e4
 80141f4:	24000964 	.word	0x24000964
 80141f8:	24000410 	.word	0x24000410
 80141fc:	240009c0 	.word	0x240009c0
 8014200:	24000420 	.word	0x24000420
 8014204:	24000a1c 	.word	0x24000a1c
 8014208:	24000428 	.word	0x24000428
 801420c:	24000a78 	.word	0x24000a78
 8014210:	240002c0 	.word	0x240002c0
 8014214:	24000ad4 	.word	0x24000ad4
 8014218:	240002c8 	.word	0x240002c8
 801421c:	24000ae0 	.word	0x24000ae0
 8014220:	240002d0 	.word	0x240002d0
 8014224:	24000aec 	.word	0x24000aec
 8014228:	240001e8 	.word	0x240001e8
 801422c:	24001260 	.word	0x24001260
 8014230:	24000f5c 	.word	0x24000f5c
 8014234:	24000af8 	.word	0x24000af8
 8014238:	24000440 	.word	0x24000440
 801423c:	2400150c 	.word	0x2400150c
 8014240:	40533333 	.word	0x40533333
 8014244:	24000b10 	.word	0x24000b10
 8014248:	24000438 	.word	0x24000438
 801424c:	24000b28 	.word	0x24000b28
 8014250:	240001b8 	.word	0x240001b8
 8014254:	24001214 	.word	0x24001214
 8014258:	24000b40 	.word	0x24000b40
 801425c:	240001c8 	.word	0x240001c8
 8014260:	24000b58 	.word	0x24000b58
 8014264:	240001d0 	.word	0x240001d0
 8014268:	24000b70 	.word	0x24000b70
 801426c:	240002f0 	.word	0x240002f0
 8014270:	24000b88 	.word	0x24000b88
 8014274:	24000ba0 	.word	0x24000ba0
 8014278:	240002f8 	.word	0x240002f8
 801427c:	24000bb8 	.word	0x24000bb8
 8014280:	24000300 	.word	0x24000300
 8014284:	24000bd0 	.word	0x24000bd0
 8014288:	24000448 	.word	0x24000448
 801428c:	24000be8 	.word	0x24000be8
 8014290:	240004a0 	.word	0x240004a0
 8014294:	24001558 	.word	0x24001558
 8014298:	24000c00 	.word	0x24000c00
 801429c:	24000498 	.word	0x24000498
 80142a0:	24000c18 	.word	0x24000c18
 80142a4:	240002a8 	.word	0x240002a8
 80142a8:	24001344 	.word	0x24001344
 80142ac:	24000c30 	.word	0x24000c30
 80142b0:	240004a8 	.word	0x240004a8
 80142b4:	24000c48 	.word	0x24000c48
 80142b8:	24000450 	.word	0x24000450
 80142bc:	24000c60 	.word	0x24000c60
 80142c0:	24000490 	.word	0x24000490
 80142c4:	24000c78 	.word	0x24000c78
 80142c8:	24000308 	.word	0x24000308
 80142cc:	24000c90 	.word	0x24000c90
 80142d0:	24000310 	.word	0x24000310
 80142d4:	24000c98 	.word	0x24000c98
 80142d8:	24000318 	.word	0x24000318
 80142dc:	24000ca0 	.word	0x24000ca0
 80142e0:	24000320 	.word	0x24000320
 80142e4:	24000ca8 	.word	0x24000ca8
 80142e8:	24000328 	.word	0x24000328
 80142ec:	24000cb0 	.word	0x24000cb0
 80142f0:	24000330 	.word	0x24000330
 80142f4:	24000cb8 	.word	0x24000cb8
 80142f8:	24000468 	.word	0x24000468
 80142fc:	24000cc0 	.word	0x24000cc0
 8014300:	24000470 	.word	0x24000470
 8014304:	24000cc8 	.word	0x24000cc8
 8014308:	24000270 	.word	0x24000270
 801430c:	24000cd0 	.word	0x24000cd0
 8014310:	24000280 	.word	0x24000280
 8014314:	24000cd8 	.word	0x24000cd8
 8014318:	24000378 	.word	0x24000378
 801431c:	24000ce0 	.word	0x24000ce0
 8014320:	24001044 	.word	0x24001044
 8014324:	24000ce8 	.word	0x24000ce8
 8014328:	24000db8 	.word	0x24000db8
 801432c:	0800d605 	.word	0x0800d605
 8014330:	24000dc4 	.word	0x24000dc4
 8014334:	24000dc2 	.word	0x24000dc2
 8014338:	24000dc0 	.word	0x24000dc0
 801433c:	0800d6f5 	.word	0x0800d6f5
 8014340:	24000ddc 	.word	0x24000ddc
 8014344:	24000dbc 	.word	0x24000dbc
 8014348:	24000db9 	.word	0x24000db9
 801434c:	0800d761 	.word	0x0800d761
 8014350:	24000df4 	.word	0x24000df4
 8014354:	240012ac 	.word	0x240012ac
 8014358:	24000e0c 	.word	0x24000e0c
 801435c:	24001390 	.word	0x24001390
 8014360:	24000e2c 	.word	0x24000e2c
 8014364:	240013dc 	.word	0x240013dc
 8014368:	24000e4c 	.word	0x24000e4c
 801436c:	24001428 	.word	0x24001428
 8014370:	24000e6c 	.word	0x24000e6c
 8014374:	24001474 	.word	0x24001474
 8014378:	24000e8c 	.word	0x24000e8c
 801437c:	240014c0 	.word	0x240014c0
 8014380:	24000eac 	.word	0x24000eac
 8014384:	24000ecc 	.word	0x24000ecc
Stream stream2(&timer_15, &main_can);
 8014388:	4a20      	ldr	r2, [pc, #128]	; (801440c <_Z41__static_initialization_and_destruction_0ii+0x570>)
 801438a:	4921      	ldr	r1, [pc, #132]	; (8014410 <_Z41__static_initialization_and_destruction_0ii+0x574>)
 801438c:	4821      	ldr	r0, [pc, #132]	; (8014414 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 801438e:	f7f8 ff0d 	bl	800d1ac <_ZN6StreamC1EP5TimerP3Can>
Stream stream3(&timer_16, &main_can);
 8014392:	4a1e      	ldr	r2, [pc, #120]	; (801440c <_Z41__static_initialization_and_destruction_0ii+0x570>)
 8014394:	4920      	ldr	r1, [pc, #128]	; (8014418 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 8014396:	4821      	ldr	r0, [pc, #132]	; (801441c <_Z41__static_initialization_and_destruction_0ii+0x580>)
 8014398:	f7f8 ff08 	bl	800d1ac <_ZN6StreamC1EP5TimerP3Can>
Stream stream4(&timer_17, &main_can);
 801439c:	4a1b      	ldr	r2, [pc, #108]	; (801440c <_Z41__static_initialization_and_destruction_0ii+0x570>)
 801439e:	4920      	ldr	r1, [pc, #128]	; (8014420 <_Z41__static_initialization_and_destruction_0ii+0x584>)
 80143a0:	4820      	ldr	r0, [pc, #128]	; (8014424 <_Z41__static_initialization_and_destruction_0ii+0x588>)
 80143a2:	f7f8 ff03 	bl	800d1ac <_ZN6StreamC1EP5TimerP3Can>
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d12b      	bne.n	8014404 <_Z41__static_initialization_and_destruction_0ii+0x568>
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d126      	bne.n	8014404 <_Z41__static_initialization_and_destruction_0ii+0x568>
 80143b6:	481b      	ldr	r0, [pc, #108]	; (8014424 <_Z41__static_initialization_and_destruction_0ii+0x588>)
 80143b8:	f7ff fd46 	bl	8013e48 <_ZN6StreamD1Ev>
Stream stream3(&timer_16, &main_can);
 80143bc:	4817      	ldr	r0, [pc, #92]	; (801441c <_Z41__static_initialization_and_destruction_0ii+0x580>)
 80143be:	f7ff fd43 	bl	8013e48 <_ZN6StreamD1Ev>
Stream stream2(&timer_15, &main_can);
 80143c2:	4814      	ldr	r0, [pc, #80]	; (8014414 <_Z41__static_initialization_and_destruction_0ii+0x578>)
 80143c4:	f7ff fd40 	bl	8013e48 <_ZN6StreamD1Ev>
Stream stream1(&timer_14, &main_can);
 80143c8:	4817      	ldr	r0, [pc, #92]	; (8014428 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 80143ca:	f7ff fd3d 	bl	8013e48 <_ZN6StreamD1Ev>
Timer timer_17(&htim17);
 80143ce:	4814      	ldr	r0, [pc, #80]	; (8014420 <_Z41__static_initialization_and_destruction_0ii+0x584>)
 80143d0:	f7ff fd47 	bl	8013e62 <_ZN5TimerD1Ev>
Timer timer_16(&htim16);
 80143d4:	4810      	ldr	r0, [pc, #64]	; (8014418 <_Z41__static_initialization_and_destruction_0ii+0x57c>)
 80143d6:	f7ff fd44 	bl	8013e62 <_ZN5TimerD1Ev>
Timer timer_15(&htim15);
 80143da:	480d      	ldr	r0, [pc, #52]	; (8014410 <_Z41__static_initialization_and_destruction_0ii+0x574>)
 80143dc:	f7ff fd41 	bl	8013e62 <_ZN5TimerD1Ev>
Timer timer_14(&htim14);
 80143e0:	4812      	ldr	r0, [pc, #72]	; (801442c <_Z41__static_initialization_and_destruction_0ii+0x590>)
 80143e2:	f7ff fd3e 	bl	8013e62 <_ZN5TimerD1Ev>
Timer timer_13(&htim13);
 80143e6:	4812      	ldr	r0, [pc, #72]	; (8014430 <_Z41__static_initialization_and_destruction_0ii+0x594>)
 80143e8:	f7ff fd3b 	bl	8013e62 <_ZN5TimerD1Ev>
Timer timer_7(&htim7);
 80143ec:	4811      	ldr	r0, [pc, #68]	; (8014434 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 80143ee:	f7ff fd38 	bl	8013e62 <_ZN5TimerD1Ev>
Packet write_once			(WRITE_ONCE_ID	, write_once_callback			, &write_once_pin,	&write_once_value);
 80143f2:	4811      	ldr	r0, [pc, #68]	; (8014438 <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 80143f4:	f7ff fd43 	bl	8013e7e <_ZN6PacketD1Ev>
Packet read_stream			(READ_STREAM_ID	, read_stream_callback			, &read_stream_pin, &read_stream_freq);
 80143f8:	4810      	ldr	r0, [pc, #64]	; (801443c <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 80143fa:	f7ff fd40 	bl	8013e7e <_ZN6PacketD1Ev>
Packet read_once			(READ_ONCE_ID	, read_once_callback			, &read_once_pin);
 80143fe:	4810      	ldr	r0, [pc, #64]	; (8014440 <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 8014400:	f7ff fd3d 	bl	8013e7e <_ZN6PacketD1Ev>
 8014404:	bf00      	nop
 8014406:	3708      	adds	r7, #8
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}
 801440c:	24000ce8 	.word	0x24000ce8
 8014410:	24000e6c 	.word	0x24000e6c
 8014414:	24000ef0 	.word	0x24000ef0
 8014418:	24000e8c 	.word	0x24000e8c
 801441c:	24000f14 	.word	0x24000f14
 8014420:	24000eac 	.word	0x24000eac
 8014424:	24000f38 	.word	0x24000f38
 8014428:	24000ecc 	.word	0x24000ecc
 801442c:	24000e4c 	.word	0x24000e4c
 8014430:	24000e2c 	.word	0x24000e2c
 8014434:	24000e0c 	.word	0x24000e0c
 8014438:	24000df4 	.word	0x24000df4
 801443c:	24000ddc 	.word	0x24000ddc
 8014440:	24000dc4 	.word	0x24000dc4

08014444 <_ZN5FieldIJmEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014444:	b480      	push	{r7}
 8014446:	b083      	sub	sp, #12
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	685b      	ldr	r3, [r3, #4]
 8014452:	683a      	ldr	r2, [r7, #0]
 8014454:	6812      	ldr	r2, [r2, #0]
 8014456:	601a      	str	r2, [r3, #0]
 8014458:	bf00      	nop
 801445a:	370c      	adds	r7, #12
 801445c:	46bd      	mov	sp, r7
 801445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014462:	4770      	bx	lr

08014464 <_ZN5FieldIJmEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014464:	b480      	push	{r7}
 8014466:	b083      	sub	sp, #12
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	6039      	str	r1, [r7, #0]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	685b      	ldr	r3, [r3, #4]
 8014472:	681a      	ldr	r2, [r3, #0]
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	601a      	str	r2, [r3, #0]
 8014478:	bf00      	nop
 801447a:	370c      	adds	r7, #12
 801447c:	46bd      	mov	sp, r7
 801447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014482:	4770      	bx	lr

08014484 <_ZN5FieldIJmEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014484:	b480      	push	{r7}
 8014486:	b083      	sub	sp, #12
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
 801448c:	2304      	movs	r3, #4
 801448e:	4618      	mov	r0, r3
 8014490:	370c      	adds	r7, #12
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr

0801449a <_ZN5FieldIJtEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 801449a:	b480      	push	{r7}
 801449c:	b083      	sub	sp, #12
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
 80144a2:	6039      	str	r1, [r7, #0]
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	685b      	ldr	r3, [r3, #4]
 80144a8:	683a      	ldr	r2, [r7, #0]
 80144aa:	8812      	ldrh	r2, [r2, #0]
 80144ac:	801a      	strh	r2, [r3, #0]
 80144ae:	bf00      	nop
 80144b0:	370c      	adds	r7, #12
 80144b2:	46bd      	mov	sp, r7
 80144b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b8:	4770      	bx	lr

080144ba <_ZN5FieldIJtEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 80144ba:	b480      	push	{r7}
 80144bc:	b083      	sub	sp, #12
 80144be:	af00      	add	r7, sp, #0
 80144c0:	6078      	str	r0, [r7, #4]
 80144c2:	6039      	str	r1, [r7, #0]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	881a      	ldrh	r2, [r3, #0]
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	801a      	strh	r2, [r3, #0]
 80144ce:	bf00      	nop
 80144d0:	370c      	adds	r7, #12
 80144d2:	46bd      	mov	sp, r7
 80144d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d8:	4770      	bx	lr

080144da <_ZN5FieldIJtEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 80144da:	b480      	push	{r7}
 80144dc:	b083      	sub	sp, #12
 80144de:	af00      	add	r7, sp, #0
 80144e0:	6078      	str	r0, [r7, #4]
 80144e2:	2302      	movs	r3, #2
 80144e4:	4618      	mov	r0, r3
 80144e6:	370c      	adds	r7, #12
 80144e8:	46bd      	mov	sp, r7
 80144ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ee:	4770      	bx	lr

080144f0 <_ZN5FieldIJhEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 80144f0:	b480      	push	{r7}
 80144f2:	b083      	sub	sp, #12
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	6039      	str	r1, [r7, #0]
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	685b      	ldr	r3, [r3, #4]
 80144fe:	683a      	ldr	r2, [r7, #0]
 8014500:	7812      	ldrb	r2, [r2, #0]
 8014502:	701a      	strb	r2, [r3, #0]
 8014504:	bf00      	nop
 8014506:	370c      	adds	r7, #12
 8014508:	46bd      	mov	sp, r7
 801450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801450e:	4770      	bx	lr

08014510 <_ZN5FieldIJhEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014510:	b480      	push	{r7}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	781a      	ldrb	r2, [r3, #0]
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	701a      	strb	r2, [r3, #0]
 8014524:	bf00      	nop
 8014526:	370c      	adds	r7, #12
 8014528:	46bd      	mov	sp, r7
 801452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452e:	4770      	bx	lr

08014530 <_ZN5FieldIJhEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014530:	b480      	push	{r7}
 8014532:	b083      	sub	sp, #12
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	2301      	movs	r3, #1
 801453a:	4618      	mov	r0, r3
 801453c:	370c      	adds	r7, #12
 801453e:	46bd      	mov	sp, r7
 8014540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014544:	4770      	bx	lr

08014546 <_GLOBAL__sub_I_data_adc_1>:
 8014546:	b580      	push	{r7, lr}
 8014548:	af00      	add	r7, sp, #0
 801454a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801454e:	2001      	movs	r0, #1
 8014550:	f7ff fca4 	bl	8013e9c <_Z41__static_initialization_and_destruction_0ii>
 8014554:	bd80      	pop	{r7, pc}

08014556 <_GLOBAL__sub_D_data_adc_1>:
 8014556:	b580      	push	{r7, lr}
 8014558:	af00      	add	r7, sp, #0
 801455a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801455e:	2000      	movs	r0, #0
 8014560:	f7ff fc9c 	bl	8013e9c <_Z41__static_initialization_and_destruction_0ii>
 8014564:	bd80      	pop	{r7, pc}
	...

08014568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014568:	b480      	push	{r7}
 801456a:	b083      	sub	sp, #12
 801456c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801456e:	4b0a      	ldr	r3, [pc, #40]	; (8014598 <HAL_MspInit+0x30>)
 8014570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014574:	4a08      	ldr	r2, [pc, #32]	; (8014598 <HAL_MspInit+0x30>)
 8014576:	f043 0302 	orr.w	r3, r3, #2
 801457a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801457e:	4b06      	ldr	r3, [pc, #24]	; (8014598 <HAL_MspInit+0x30>)
 8014580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014584:	f003 0302 	and.w	r3, r3, #2
 8014588:	607b      	str	r3, [r7, #4]
 801458a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801458c:	bf00      	nop
 801458e:	370c      	adds	r7, #12
 8014590:	46bd      	mov	sp, r7
 8014592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014596:	4770      	bx	lr
 8014598:	58024400 	.word	0x58024400

0801459c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b08a      	sub	sp, #40	; 0x28
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80145a4:	f107 0314 	add.w	r3, r7, #20
 80145a8:	2200      	movs	r2, #0
 80145aa:	601a      	str	r2, [r3, #0]
 80145ac:	605a      	str	r2, [r3, #4]
 80145ae:	609a      	str	r2, [r3, #8]
 80145b0:	60da      	str	r2, [r3, #12]
 80145b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	4a34      	ldr	r2, [pc, #208]	; (801468c <HAL_ADC_MspInit+0xf0>)
 80145ba:	4293      	cmp	r3, r2
 80145bc:	d161      	bne.n	8014682 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80145be:	4b34      	ldr	r3, [pc, #208]	; (8014690 <HAL_ADC_MspInit+0xf4>)
 80145c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80145c4:	4a32      	ldr	r2, [pc, #200]	; (8014690 <HAL_ADC_MspInit+0xf4>)
 80145c6:	f043 0320 	orr.w	r3, r3, #32
 80145ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80145ce:	4b30      	ldr	r3, [pc, #192]	; (8014690 <HAL_ADC_MspInit+0xf4>)
 80145d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80145d4:	f003 0320 	and.w	r3, r3, #32
 80145d8:	613b      	str	r3, [r7, #16]
 80145da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80145dc:	4b2c      	ldr	r3, [pc, #176]	; (8014690 <HAL_ADC_MspInit+0xf4>)
 80145de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80145e2:	4a2b      	ldr	r2, [pc, #172]	; (8014690 <HAL_ADC_MspInit+0xf4>)
 80145e4:	f043 0301 	orr.w	r3, r3, #1
 80145e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80145ec:	4b28      	ldr	r3, [pc, #160]	; (8014690 <HAL_ADC_MspInit+0xf4>)
 80145ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80145f2:	f003 0301 	and.w	r3, r3, #1
 80145f6:	60fb      	str	r3, [r7, #12]
 80145f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80145fa:	2340      	movs	r3, #64	; 0x40
 80145fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80145fe:	2303      	movs	r3, #3
 8014600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014602:	2300      	movs	r3, #0
 8014604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014606:	f107 0314 	add.w	r3, r7, #20
 801460a:	4619      	mov	r1, r3
 801460c:	4821      	ldr	r0, [pc, #132]	; (8014694 <HAL_ADC_MspInit+0xf8>)
 801460e:	f006 fa73 	bl	801aaf8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8014612:	4b21      	ldr	r3, [pc, #132]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 8014614:	4a21      	ldr	r2, [pc, #132]	; (801469c <HAL_ADC_MspInit+0x100>)
 8014616:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8014618:	4b1f      	ldr	r3, [pc, #124]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 801461a:	2209      	movs	r2, #9
 801461c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 801461e:	4b1e      	ldr	r3, [pc, #120]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 8014620:	2200      	movs	r2, #0
 8014622:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014624:	4b1c      	ldr	r3, [pc, #112]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 8014626:	2200      	movs	r2, #0
 8014628:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801462a:	4b1b      	ldr	r3, [pc, #108]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 801462c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014630:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014632:	4b19      	ldr	r3, [pc, #100]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 8014634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014638:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801463a:	4b17      	ldr	r3, [pc, #92]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 801463c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014640:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014642:	4b15      	ldr	r3, [pc, #84]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 8014644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014648:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 801464a:	4b13      	ldr	r3, [pc, #76]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 801464c:	2200      	movs	r2, #0
 801464e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014650:	4b11      	ldr	r3, [pc, #68]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 8014652:	2200      	movs	r2, #0
 8014654:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8014656:	4810      	ldr	r0, [pc, #64]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 8014658:	f003 f81e 	bl	8017698 <HAL_DMA_Init>
 801465c:	4603      	mov	r3, r0
 801465e:	2b00      	cmp	r3, #0
 8014660:	d001      	beq.n	8014666 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 8014662:	f7fa fccf 	bl	800f004 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	4a0b      	ldr	r2, [pc, #44]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 801466a:	659a      	str	r2, [r3, #88]	; 0x58
 801466c:	4a0a      	ldr	r2, [pc, #40]	; (8014698 <HAL_ADC_MspInit+0xfc>)
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8014672:	2200      	movs	r2, #0
 8014674:	2100      	movs	r1, #0
 8014676:	2012      	movs	r0, #18
 8014678:	f002 ffd9 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 801467c:	2012      	movs	r0, #18
 801467e:	f002 fff0 	bl	8017662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8014682:	bf00      	nop
 8014684:	3728      	adds	r7, #40	; 0x28
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}
 801468a:	bf00      	nop
 801468c:	40022000 	.word	0x40022000
 8014690:	58024400 	.word	0x58024400
 8014694:	58020000 	.word	0x58020000
 8014698:	24000fcc 	.word	0x24000fcc
 801469c:	40020028 	.word	0x40020028

080146a0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b08a      	sub	sp, #40	; 0x28
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80146a8:	f107 0314 	add.w	r3, r7, #20
 80146ac:	2200      	movs	r2, #0
 80146ae:	601a      	str	r2, [r3, #0]
 80146b0:	605a      	str	r2, [r3, #4]
 80146b2:	609a      	str	r2, [r3, #8]
 80146b4:	60da      	str	r2, [r3, #12]
 80146b6:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	4a22      	ldr	r2, [pc, #136]	; (8014748 <HAL_FDCAN_MspInit+0xa8>)
 80146be:	4293      	cmp	r3, r2
 80146c0:	d13e      	bne.n	8014740 <HAL_FDCAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80146c2:	4b22      	ldr	r3, [pc, #136]	; (801474c <HAL_FDCAN_MspInit+0xac>)
 80146c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80146c8:	4a20      	ldr	r2, [pc, #128]	; (801474c <HAL_FDCAN_MspInit+0xac>)
 80146ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80146ce:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80146d2:	4b1e      	ldr	r3, [pc, #120]	; (801474c <HAL_FDCAN_MspInit+0xac>)
 80146d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80146d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80146dc:	613b      	str	r3, [r7, #16]
 80146de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80146e0:	4b1a      	ldr	r3, [pc, #104]	; (801474c <HAL_FDCAN_MspInit+0xac>)
 80146e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80146e6:	4a19      	ldr	r2, [pc, #100]	; (801474c <HAL_FDCAN_MspInit+0xac>)
 80146e8:	f043 0301 	orr.w	r3, r3, #1
 80146ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80146f0:	4b16      	ldr	r3, [pc, #88]	; (801474c <HAL_FDCAN_MspInit+0xac>)
 80146f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80146f6:	f003 0301 	and.w	r3, r3, #1
 80146fa:	60fb      	str	r3, [r7, #12]
 80146fc:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80146fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014704:	2302      	movs	r3, #2
 8014706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014708:	2300      	movs	r3, #0
 801470a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801470c:	2300      	movs	r3, #0
 801470e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8014710:	2309      	movs	r3, #9
 8014712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014714:	f107 0314 	add.w	r3, r7, #20
 8014718:	4619      	mov	r1, r3
 801471a:	480d      	ldr	r0, [pc, #52]	; (8014750 <HAL_FDCAN_MspInit+0xb0>)
 801471c:	f006 f9ec 	bl	801aaf8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8014720:	2200      	movs	r2, #0
 8014722:	2100      	movs	r1, #0
 8014724:	2013      	movs	r0, #19
 8014726:	f002 ff82 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 801472a:	2013      	movs	r0, #19
 801472c:	f002 ff99 	bl	8017662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8014730:	2200      	movs	r2, #0
 8014732:	2100      	movs	r1, #0
 8014734:	2015      	movs	r0, #21
 8014736:	f002 ff7a 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 801473a:	2015      	movs	r0, #21
 801473c:	f002 ff91 	bl	8017662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8014740:	bf00      	nop
 8014742:	3728      	adds	r7, #40	; 0x28
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}
 8014748:	4000a000 	.word	0x4000a000
 801474c:	58024400 	.word	0x58024400
 8014750:	58020000 	.word	0x58020000

08014754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b09c      	sub	sp, #112	; 0x70
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801475c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014760:	2200      	movs	r2, #0
 8014762:	601a      	str	r2, [r3, #0]
 8014764:	605a      	str	r2, [r3, #4]
 8014766:	609a      	str	r2, [r3, #8]
 8014768:	60da      	str	r2, [r3, #12]
 801476a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	4ab3      	ldr	r2, [pc, #716]	; (8014a40 <HAL_TIM_Base_MspInit+0x2ec>)
 8014772:	4293      	cmp	r3, r2
 8014774:	d137      	bne.n	80147e6 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8014776:	4bb3      	ldr	r3, [pc, #716]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014778:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801477c:	4ab1      	ldr	r2, [pc, #708]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 801477e:	f043 0301 	orr.w	r3, r3, #1
 8014782:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014786:	4baf      	ldr	r3, [pc, #700]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801478c:	f003 0301 	and.w	r3, r3, #1
 8014790:	65bb      	str	r3, [r7, #88]	; 0x58
 8014792:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014794:	4bab      	ldr	r3, [pc, #684]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801479a:	4aaa      	ldr	r2, [pc, #680]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 801479c:	f043 0310 	orr.w	r3, r3, #16
 80147a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80147a4:	4ba7      	ldr	r3, [pc, #668]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80147a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80147aa:	f003 0310 	and.w	r3, r3, #16
 80147ae:	657b      	str	r3, [r7, #84]	; 0x54
 80147b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|PWM_5V_8_Pin|PWM_5V_7_Pin;
 80147b2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80147b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147b8:	2302      	movs	r3, #2
 80147ba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80147bc:	2302      	movs	r3, #2
 80147be:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80147c0:	2300      	movs	r3, #0
 80147c2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80147c4:	2301      	movs	r3, #1
 80147c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80147c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80147cc:	4619      	mov	r1, r3
 80147ce:	489e      	ldr	r0, [pc, #632]	; (8014a48 <HAL_TIM_Base_MspInit+0x2f4>)
 80147d0:	f006 f992 	bl	801aaf8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80147d4:	2200      	movs	r2, #0
 80147d6:	2100      	movs	r1, #0
 80147d8:	201b      	movs	r0, #27
 80147da:	f002 ff28 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80147de:	201b      	movs	r0, #27
 80147e0:	f002 ff3f 	bl	8017662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80147e4:	e23e      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM2)
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80147ee:	d156      	bne.n	801489e <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80147f0:	4b94      	ldr	r3, [pc, #592]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80147f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80147f6:	4a93      	ldr	r2, [pc, #588]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80147f8:	f043 0301 	orr.w	r3, r3, #1
 80147fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014800:	4b90      	ldr	r3, [pc, #576]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014806:	f003 0301 	and.w	r3, r3, #1
 801480a:	653b      	str	r3, [r7, #80]	; 0x50
 801480c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801480e:	4b8d      	ldr	r3, [pc, #564]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014814:	4a8b      	ldr	r2, [pc, #556]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014816:	f043 0301 	orr.w	r3, r3, #1
 801481a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801481e:	4b89      	ldr	r3, [pc, #548]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014824:	f003 0301 	and.w	r3, r3, #1
 8014828:	64fb      	str	r3, [r7, #76]	; 0x4c
 801482a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801482c:	4b85      	ldr	r3, [pc, #532]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 801482e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014832:	4a84      	ldr	r2, [pc, #528]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014834:	f043 0302 	orr.w	r3, r3, #2
 8014838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801483c:	4b81      	ldr	r3, [pc, #516]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 801483e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014842:	f003 0302 	and.w	r3, r3, #2
 8014846:	64bb      	str	r3, [r7, #72]	; 0x48
 8014848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pin = PWM_5V_1_Pin|SENSOR_3V_1A5_Pin;
 801484a:	2322      	movs	r3, #34	; 0x22
 801484c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801484e:	2302      	movs	r3, #2
 8014850:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014852:	2302      	movs	r3, #2
 8014854:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014856:	2300      	movs	r3, #0
 8014858:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801485a:	2301      	movs	r3, #1
 801485c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801485e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014862:	4619      	mov	r1, r3
 8014864:	4879      	ldr	r0, [pc, #484]	; (8014a4c <HAL_TIM_Base_MspInit+0x2f8>)
 8014866:	f006 f947 	bl	801aaf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_5_Pin|SENSOR_3V_8_Pin;
 801486a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801486e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014870:	2302      	movs	r3, #2
 8014872:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014874:	2300      	movs	r3, #0
 8014876:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014878:	2300      	movs	r3, #0
 801487a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801487c:	2301      	movs	r3, #1
 801487e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014880:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014884:	4619      	mov	r1, r3
 8014886:	4872      	ldr	r0, [pc, #456]	; (8014a50 <HAL_TIM_Base_MspInit+0x2fc>)
 8014888:	f006 f936 	bl	801aaf8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801488c:	2200      	movs	r2, #0
 801488e:	2100      	movs	r1, #0
 8014890:	201c      	movs	r0, #28
 8014892:	f002 fecc 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8014896:	201c      	movs	r0, #28
 8014898:	f002 fee3 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 801489c:	e1e2      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM3)
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	4a6c      	ldr	r2, [pc, #432]	; (8014a54 <HAL_TIM_Base_MspInit+0x300>)
 80148a4:	4293      	cmp	r3, r2
 80148a6:	d136      	bne.n	8014916 <HAL_TIM_Base_MspInit+0x1c2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80148a8:	4b66      	ldr	r3, [pc, #408]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80148aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80148ae:	4a65      	ldr	r2, [pc, #404]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80148b0:	f043 0302 	orr.w	r3, r3, #2
 80148b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80148b8:	4b62      	ldr	r3, [pc, #392]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80148ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80148be:	f003 0302 	and.w	r3, r3, #2
 80148c2:	647b      	str	r3, [r7, #68]	; 0x44
 80148c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80148c6:	4b5f      	ldr	r3, [pc, #380]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80148c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80148cc:	4a5d      	ldr	r2, [pc, #372]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80148ce:	f043 0302 	orr.w	r3, r3, #2
 80148d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80148d6:	4b5b      	ldr	r3, [pc, #364]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80148d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80148dc:	f003 0302 	and.w	r3, r3, #2
 80148e0:	643b      	str	r3, [r7, #64]	; 0x40
 80148e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin = PWM_5V_2_Pin|PWM_5V_9_Pin|GPIO_PIN_4|PWM_5V_4_Pin;
 80148e4:	2333      	movs	r3, #51	; 0x33
 80148e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148e8:	2302      	movs	r3, #2
 80148ea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80148ec:	2302      	movs	r3, #2
 80148ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148f0:	2300      	movs	r3, #0
 80148f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80148f4:	2302      	movs	r3, #2
 80148f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80148f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80148fc:	4619      	mov	r1, r3
 80148fe:	4854      	ldr	r0, [pc, #336]	; (8014a50 <HAL_TIM_Base_MspInit+0x2fc>)
 8014900:	f006 f8fa 	bl	801aaf8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8014904:	2200      	movs	r2, #0
 8014906:	2100      	movs	r1, #0
 8014908:	201d      	movs	r0, #29
 801490a:	f002 fe90 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 801490e:	201d      	movs	r0, #29
 8014910:	f002 fea7 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 8014914:	e1a6      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM4)
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	4a4f      	ldr	r2, [pc, #316]	; (8014a58 <HAL_TIM_Base_MspInit+0x304>)
 801491c:	4293      	cmp	r3, r2
 801491e:	d137      	bne.n	8014990 <HAL_TIM_Base_MspInit+0x23c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8014920:	4b48      	ldr	r3, [pc, #288]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014922:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014926:	4a47      	ldr	r2, [pc, #284]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014928:	f043 0304 	orr.w	r3, r3, #4
 801492c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014930:	4b44      	ldr	r3, [pc, #272]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014936:	f003 0304 	and.w	r3, r3, #4
 801493a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801493c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801493e:	4b41      	ldr	r3, [pc, #260]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014944:	4a3f      	ldr	r2, [pc, #252]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014946:	f043 0308 	orr.w	r3, r3, #8
 801494a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801494e:	4b3d      	ldr	r3, [pc, #244]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014954:	f003 0308 	and.w	r3, r3, #8
 8014958:	63bb      	str	r3, [r7, #56]	; 0x38
 801495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = PWM_5V_6_Pin|PWM_5V_5_Pin|PWM_5V_10_Pin|PWM_5V_11_Pin;
 801495c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8014960:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014962:	2302      	movs	r3, #2
 8014964:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014966:	2300      	movs	r3, #0
 8014968:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801496a:	2300      	movs	r3, #0
 801496c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801496e:	2302      	movs	r3, #2
 8014970:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014972:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014976:	4619      	mov	r1, r3
 8014978:	4838      	ldr	r0, [pc, #224]	; (8014a5c <HAL_TIM_Base_MspInit+0x308>)
 801497a:	f006 f8bd 	bl	801aaf8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801497e:	2200      	movs	r2, #0
 8014980:	2100      	movs	r1, #0
 8014982:	201e      	movs	r0, #30
 8014984:	f002 fe53 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8014988:	201e      	movs	r0, #30
 801498a:	f002 fe6a 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 801498e:	e169      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM5)
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	4a32      	ldr	r2, [pc, #200]	; (8014a60 <HAL_TIM_Base_MspInit+0x30c>)
 8014996:	4293      	cmp	r3, r2
 8014998:	d117      	bne.n	80149ca <HAL_TIM_Base_MspInit+0x276>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801499a:	4b2a      	ldr	r3, [pc, #168]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 801499c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149a0:	4a28      	ldr	r2, [pc, #160]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80149a2:	f043 0308 	orr.w	r3, r3, #8
 80149a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80149aa:	4b26      	ldr	r3, [pc, #152]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80149ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149b0:	f003 0308 	and.w	r3, r3, #8
 80149b4:	637b      	str	r3, [r7, #52]	; 0x34
 80149b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80149b8:	2200      	movs	r2, #0
 80149ba:	2100      	movs	r1, #0
 80149bc:	2032      	movs	r0, #50	; 0x32
 80149be:	f002 fe36 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80149c2:	2032      	movs	r0, #50	; 0x32
 80149c4:	f002 fe4d 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 80149c8:	e14c      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM6)
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	4a25      	ldr	r2, [pc, #148]	; (8014a64 <HAL_TIM_Base_MspInit+0x310>)
 80149d0:	4293      	cmp	r3, r2
 80149d2:	d117      	bne.n	8014a04 <HAL_TIM_Base_MspInit+0x2b0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80149d4:	4b1b      	ldr	r3, [pc, #108]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80149d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149da:	4a1a      	ldr	r2, [pc, #104]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80149dc:	f043 0310 	orr.w	r3, r3, #16
 80149e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80149e4:	4b17      	ldr	r3, [pc, #92]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 80149e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149ea:	f003 0310 	and.w	r3, r3, #16
 80149ee:	633b      	str	r3, [r7, #48]	; 0x30
 80149f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80149f2:	2200      	movs	r2, #0
 80149f4:	2100      	movs	r1, #0
 80149f6:	2036      	movs	r0, #54	; 0x36
 80149f8:	f002 fe19 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80149fc:	2036      	movs	r0, #54	; 0x36
 80149fe:	f002 fe30 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 8014a02:	e12f      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM7)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	4a17      	ldr	r2, [pc, #92]	; (8014a68 <HAL_TIM_Base_MspInit+0x314>)
 8014a0a:	4293      	cmp	r3, r2
 8014a0c:	d12e      	bne.n	8014a6c <HAL_TIM_Base_MspInit+0x318>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8014a0e:	4b0d      	ldr	r3, [pc, #52]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a14:	4a0b      	ldr	r2, [pc, #44]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014a16:	f043 0320 	orr.w	r3, r3, #32
 8014a1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014a1e:	4b09      	ldr	r3, [pc, #36]	; (8014a44 <HAL_TIM_Base_MspInit+0x2f0>)
 8014a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a24:	f003 0320 	and.w	r3, r3, #32
 8014a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	2100      	movs	r1, #0
 8014a30:	2037      	movs	r0, #55	; 0x37
 8014a32:	f002 fdfc 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8014a36:	2037      	movs	r0, #55	; 0x37
 8014a38:	f002 fe13 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 8014a3c:	e112      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
 8014a3e:	bf00      	nop
 8014a40:	40010000 	.word	0x40010000
 8014a44:	58024400 	.word	0x58024400
 8014a48:	58021000 	.word	0x58021000
 8014a4c:	58020000 	.word	0x58020000
 8014a50:	58020400 	.word	0x58020400
 8014a54:	40000400 	.word	0x40000400
 8014a58:	40000800 	.word	0x40000800
 8014a5c:	58020c00 	.word	0x58020c00
 8014a60:	40000c00 	.word	0x40000c00
 8014a64:	40001000 	.word	0x40001000
 8014a68:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	4a7e      	ldr	r2, [pc, #504]	; (8014c6c <HAL_TIM_Base_MspInit+0x518>)
 8014a72:	4293      	cmp	r3, r2
 8014a74:	d127      	bne.n	8014ac6 <HAL_TIM_Base_MspInit+0x372>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8014a76:	4b7e      	ldr	r3, [pc, #504]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014a7c:	4a7c      	ldr	r2, [pc, #496]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014a7e:	f043 0302 	orr.w	r3, r3, #2
 8014a82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014a86:	4b7a      	ldr	r3, [pc, #488]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014a8c:	f003 0302 	and.w	r3, r3, #2
 8014a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8014a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8014a94:	2200      	movs	r2, #0
 8014a96:	2100      	movs	r1, #0
 8014a98:	202c      	movs	r0, #44	; 0x2c
 8014a9a:	f002 fdc8 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8014a9e:	202c      	movs	r0, #44	; 0x2c
 8014aa0:	f002 fddf 	bl	8017662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	2100      	movs	r1, #0
 8014aa8:	202d      	movs	r0, #45	; 0x2d
 8014aaa:	f002 fdc0 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8014aae:	202d      	movs	r0, #45	; 0x2d
 8014ab0:	f002 fdd7 	bl	8017662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	2100      	movs	r1, #0
 8014ab8:	202e      	movs	r0, #46	; 0x2e
 8014aba:	f002 fdb8 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8014abe:	202e      	movs	r0, #46	; 0x2e
 8014ac0:	f002 fdcf 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 8014ac4:	e0ce      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM12)
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	4a6a      	ldr	r2, [pc, #424]	; (8014c74 <HAL_TIM_Base_MspInit+0x520>)
 8014acc:	4293      	cmp	r3, r2
 8014ace:	d10f      	bne.n	8014af0 <HAL_TIM_Base_MspInit+0x39c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8014ad0:	4b67      	ldr	r3, [pc, #412]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014ad6:	4a66      	ldr	r2, [pc, #408]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014adc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014ae0:	4b63      	ldr	r3, [pc, #396]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aea:	627b      	str	r3, [r7, #36]	; 0x24
 8014aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014aee:	e0b9      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM13)
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4a60      	ldr	r2, [pc, #384]	; (8014c78 <HAL_TIM_Base_MspInit+0x524>)
 8014af6:	4293      	cmp	r3, r2
 8014af8:	d117      	bne.n	8014b2a <HAL_TIM_Base_MspInit+0x3d6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8014afa:	4b5d      	ldr	r3, [pc, #372]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b00:	4a5b      	ldr	r2, [pc, #364]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014b0a:	4b59      	ldr	r3, [pc, #356]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b14:	623b      	str	r3, [r7, #32]
 8014b16:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8014b18:	2200      	movs	r2, #0
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	202c      	movs	r0, #44	; 0x2c
 8014b1e:	f002 fd86 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8014b22:	202c      	movs	r0, #44	; 0x2c
 8014b24:	f002 fd9d 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 8014b28:	e09c      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM14)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	4a53      	ldr	r2, [pc, #332]	; (8014c7c <HAL_TIM_Base_MspInit+0x528>)
 8014b30:	4293      	cmp	r3, r2
 8014b32:	d117      	bne.n	8014b64 <HAL_TIM_Base_MspInit+0x410>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8014b34:	4b4e      	ldr	r3, [pc, #312]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b3a:	4a4d      	ldr	r2, [pc, #308]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014b44:	4b4a      	ldr	r3, [pc, #296]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b4e:	61fb      	str	r3, [r7, #28]
 8014b50:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8014b52:	2200      	movs	r2, #0
 8014b54:	2100      	movs	r1, #0
 8014b56:	202d      	movs	r0, #45	; 0x2d
 8014b58:	f002 fd69 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8014b5c:	202d      	movs	r0, #45	; 0x2d
 8014b5e:	f002 fd80 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 8014b62:	e07f      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM15)
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	4a45      	ldr	r2, [pc, #276]	; (8014c80 <HAL_TIM_Base_MspInit+0x52c>)
 8014b6a:	4293      	cmp	r3, r2
 8014b6c:	d117      	bne.n	8014b9e <HAL_TIM_Base_MspInit+0x44a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8014b6e:	4b40      	ldr	r3, [pc, #256]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b74:	4a3e      	ldr	r2, [pc, #248]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014b7e:	4b3c      	ldr	r3, [pc, #240]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014b88:	61bb      	str	r3, [r7, #24]
 8014b8a:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	2100      	movs	r1, #0
 8014b90:	2074      	movs	r0, #116	; 0x74
 8014b92:	f002 fd4c 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8014b96:	2074      	movs	r0, #116	; 0x74
 8014b98:	f002 fd63 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 8014b9c:	e062      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM16)
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	4a38      	ldr	r2, [pc, #224]	; (8014c84 <HAL_TIM_Base_MspInit+0x530>)
 8014ba4:	4293      	cmp	r3, r2
 8014ba6:	d117      	bne.n	8014bd8 <HAL_TIM_Base_MspInit+0x484>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8014ba8:	4b31      	ldr	r3, [pc, #196]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014bae:	4a30      	ldr	r2, [pc, #192]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014bb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014bb8:	4b2d      	ldr	r3, [pc, #180]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014bc2:	617b      	str	r3, [r7, #20]
 8014bc4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	2100      	movs	r1, #0
 8014bca:	2075      	movs	r0, #117	; 0x75
 8014bcc:	f002 fd2f 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8014bd0:	2075      	movs	r0, #117	; 0x75
 8014bd2:	f002 fd46 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 8014bd6:	e045      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM17)
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	4a2a      	ldr	r2, [pc, #168]	; (8014c88 <HAL_TIM_Base_MspInit+0x534>)
 8014bde:	4293      	cmp	r3, r2
 8014be0:	d117      	bne.n	8014c12 <HAL_TIM_Base_MspInit+0x4be>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8014be2:	4b23      	ldr	r3, [pc, #140]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014be8:	4a21      	ldr	r2, [pc, #132]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014bea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014bee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014bf2:	4b1f      	ldr	r3, [pc, #124]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014bfc:	613b      	str	r3, [r7, #16]
 8014bfe:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8014c00:	2200      	movs	r2, #0
 8014c02:	2100      	movs	r1, #0
 8014c04:	2076      	movs	r0, #118	; 0x76
 8014c06:	f002 fd12 	bl	801762e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8014c0a:	2076      	movs	r0, #118	; 0x76
 8014c0c:	f002 fd29 	bl	8017662 <HAL_NVIC_EnableIRQ>
}
 8014c10:	e028      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM23)
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	4a1d      	ldr	r2, [pc, #116]	; (8014c8c <HAL_TIM_Base_MspInit+0x538>)
 8014c18:	4293      	cmp	r3, r2
 8014c1a:	d10f      	bne.n	8014c3c <HAL_TIM_Base_MspInit+0x4e8>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8014c1c:	4b14      	ldr	r3, [pc, #80]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014c22:	4a13      	ldr	r2, [pc, #76]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014c28:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014c2c:	4b10      	ldr	r3, [pc, #64]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014c2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014c36:	60fb      	str	r3, [r7, #12]
 8014c38:	68fb      	ldr	r3, [r7, #12]
}
 8014c3a:	e013      	b.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM24)
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	4a13      	ldr	r2, [pc, #76]	; (8014c90 <HAL_TIM_Base_MspInit+0x53c>)
 8014c42:	4293      	cmp	r3, r2
 8014c44:	d10e      	bne.n	8014c64 <HAL_TIM_Base_MspInit+0x510>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8014c46:	4b0a      	ldr	r3, [pc, #40]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014c48:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014c4c:	4a08      	ldr	r2, [pc, #32]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014c52:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014c56:	4b06      	ldr	r3, [pc, #24]	; (8014c70 <HAL_TIM_Base_MspInit+0x51c>)
 8014c58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014c60:	60bb      	str	r3, [r7, #8]
 8014c62:	68bb      	ldr	r3, [r7, #8]
}
 8014c64:	bf00      	nop
 8014c66:	3770      	adds	r7, #112	; 0x70
 8014c68:	46bd      	mov	sp, r7
 8014c6a:	bd80      	pop	{r7, pc}
 8014c6c:	40010400 	.word	0x40010400
 8014c70:	58024400 	.word	0x58024400
 8014c74:	40001800 	.word	0x40001800
 8014c78:	40001c00 	.word	0x40001c00
 8014c7c:	40002000 	.word	0x40002000
 8014c80:	40014000 	.word	0x40014000
 8014c84:	40014400 	.word	0x40014400
 8014c88:	40014800 	.word	0x40014800
 8014c8c:	4000e000 	.word	0x4000e000
 8014c90:	4000e400 	.word	0x4000e400

08014c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b08c      	sub	sp, #48	; 0x30
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014c9c:	f107 031c 	add.w	r3, r7, #28
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	601a      	str	r2, [r3, #0]
 8014ca4:	605a      	str	r2, [r3, #4]
 8014ca6:	609a      	str	r2, [r3, #8]
 8014ca8:	60da      	str	r2, [r3, #12]
 8014caa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	4a66      	ldr	r2, [pc, #408]	; (8014e4c <HAL_TIM_MspPostInit+0x1b8>)
 8014cb2:	4293      	cmp	r3, r2
 8014cb4:	d11f      	bne.n	8014cf6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014cb6:	4b66      	ldr	r3, [pc, #408]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014cbc:	4a64      	ldr	r2, [pc, #400]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014cbe:	f043 0301 	orr.w	r3, r3, #1
 8014cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014cc6:	4b62      	ldr	r3, [pc, #392]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014ccc:	f003 0301 	and.w	r3, r3, #1
 8014cd0:	61bb      	str	r3, [r7, #24]
 8014cd2:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8014cd4:	230d      	movs	r3, #13
 8014cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014cd8:	2302      	movs	r3, #2
 8014cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014cdc:	2300      	movs	r3, #0
 8014cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8014ce4:	2302      	movs	r3, #2
 8014ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014ce8:	f107 031c 	add.w	r3, r7, #28
 8014cec:	4619      	mov	r1, r3
 8014cee:	4859      	ldr	r0, [pc, #356]	; (8014e54 <HAL_TIM_MspPostInit+0x1c0>)
 8014cf0:	f005 ff02 	bl	801aaf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspPostInit 1 */

  /* USER CODE END TIM24_MspPostInit 1 */
  }

}
 8014cf4:	e0a5      	b.n	8014e42 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM8)
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	4a57      	ldr	r2, [pc, #348]	; (8014e58 <HAL_TIM_MspPostInit+0x1c4>)
 8014cfc:	4293      	cmp	r3, r2
 8014cfe:	d130      	bne.n	8014d62 <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014d00:	4b53      	ldr	r3, [pc, #332]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d06:	4a52      	ldr	r2, [pc, #328]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014d08:	f043 0304 	orr.w	r3, r3, #4
 8014d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014d10:	4b4f      	ldr	r3, [pc, #316]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d16:	f003 0304 	and.w	r3, r3, #4
 8014d1a:	617b      	str	r3, [r7, #20]
 8014d1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014d1e:	2340      	movs	r3, #64	; 0x40
 8014d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d22:	2302      	movs	r3, #2
 8014d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014d26:	2302      	movs	r3, #2
 8014d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014d2e:	2303      	movs	r3, #3
 8014d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014d32:	f107 031c 	add.w	r3, r7, #28
 8014d36:	4619      	mov	r1, r3
 8014d38:	4848      	ldr	r0, [pc, #288]	; (8014e5c <HAL_TIM_MspPostInit+0x1c8>)
 8014d3a:	f005 fedd 	bl	801aaf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_6_Pin|SENSOR_3V_11_Pin|SENSOR_3V_5C9_Pin;
 8014d3e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8014d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d44:	2302      	movs	r3, #2
 8014d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014d50:	2303      	movs	r3, #3
 8014d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014d54:	f107 031c 	add.w	r3, r7, #28
 8014d58:	4619      	mov	r1, r3
 8014d5a:	4840      	ldr	r0, [pc, #256]	; (8014e5c <HAL_TIM_MspPostInit+0x1c8>)
 8014d5c:	f005 fecc 	bl	801aaf8 <HAL_GPIO_Init>
}
 8014d60:	e06f      	b.n	8014e42 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM12)
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	4a3e      	ldr	r2, [pc, #248]	; (8014e60 <HAL_TIM_MspPostInit+0x1cc>)
 8014d68:	4293      	cmp	r3, r2
 8014d6a:	d120      	bne.n	8014dae <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014d6c:	4b38      	ldr	r3, [pc, #224]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d72:	4a37      	ldr	r2, [pc, #220]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014d74:	f043 0302 	orr.w	r3, r3, #2
 8014d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014d7c:	4b34      	ldr	r3, [pc, #208]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d82:	f003 0302 	and.w	r3, r3, #2
 8014d86:	613b      	str	r3, [r7, #16]
 8014d88:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SENSOR_3V_14B14_Pin;
 8014d8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d90:	2302      	movs	r3, #2
 8014d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d94:	2300      	movs	r3, #0
 8014d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d98:	2300      	movs	r3, #0
 8014d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8014d9c:	2302      	movs	r3, #2
 8014d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENSOR_3V_14B14_GPIO_Port, &GPIO_InitStruct);
 8014da0:	f107 031c 	add.w	r3, r7, #28
 8014da4:	4619      	mov	r1, r3
 8014da6:	482f      	ldr	r0, [pc, #188]	; (8014e64 <HAL_TIM_MspPostInit+0x1d0>)
 8014da8:	f005 fea6 	bl	801aaf8 <HAL_GPIO_Init>
}
 8014dac:	e049      	b.n	8014e42 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM23)
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	4a2d      	ldr	r2, [pc, #180]	; (8014e68 <HAL_TIM_MspPostInit+0x1d4>)
 8014db4:	4293      	cmp	r3, r2
 8014db6:	d11f      	bne.n	8014df8 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014db8:	4b25      	ldr	r3, [pc, #148]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014dbe:	4a24      	ldr	r2, [pc, #144]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014dc0:	f043 0320 	orr.w	r3, r3, #32
 8014dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014dc8:	4b21      	ldr	r3, [pc, #132]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014dce:	f003 0320 	and.w	r3, r3, #32
 8014dd2:	60fb      	str	r3, [r7, #12]
 8014dd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_3V_2_Pin|SENSOR_3V_1_Pin|SENSOR_3V_3_Pin|SENSOR_3V_15_Pin;
 8014dd6:	230f      	movs	r3, #15
 8014dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014dda:	2302      	movs	r3, #2
 8014ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014dde:	2300      	movs	r3, #0
 8014de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014de2:	2300      	movs	r3, #0
 8014de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8014de6:	230d      	movs	r3, #13
 8014de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014dea:	f107 031c 	add.w	r3, r7, #28
 8014dee:	4619      	mov	r1, r3
 8014df0:	481e      	ldr	r0, [pc, #120]	; (8014e6c <HAL_TIM_MspPostInit+0x1d8>)
 8014df2:	f005 fe81 	bl	801aaf8 <HAL_GPIO_Init>
}
 8014df6:	e024      	b.n	8014e42 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM24)
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	4a1c      	ldr	r2, [pc, #112]	; (8014e70 <HAL_TIM_MspPostInit+0x1dc>)
 8014dfe:	4293      	cmp	r3, r2
 8014e00:	d11f      	bne.n	8014e42 <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014e02:	4b13      	ldr	r3, [pc, #76]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e08:	4a11      	ldr	r2, [pc, #68]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014e0a:	f043 0320 	orr.w	r3, r3, #32
 8014e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014e12:	4b0f      	ldr	r3, [pc, #60]	; (8014e50 <HAL_TIM_MspPostInit+0x1bc>)
 8014e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014e18:	f003 0320 	and.w	r3, r3, #32
 8014e1c:	60bb      	str	r3, [r7, #8]
 8014e1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENSOR_3V_16_Pin|SENSOR_3V_10_Pin|SENSOR_3V_9_Pin|SENSOR_3V_14_Pin;
 8014e20:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8014e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e26:	2302      	movs	r3, #2
 8014e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e2e:	2300      	movs	r3, #0
 8014e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8014e32:	230e      	movs	r3, #14
 8014e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014e36:	f107 031c 	add.w	r3, r7, #28
 8014e3a:	4619      	mov	r1, r3
 8014e3c:	480b      	ldr	r0, [pc, #44]	; (8014e6c <HAL_TIM_MspPostInit+0x1d8>)
 8014e3e:	f005 fe5b 	bl	801aaf8 <HAL_GPIO_Init>
}
 8014e42:	bf00      	nop
 8014e44:	3730      	adds	r7, #48	; 0x30
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bd80      	pop	{r7, pc}
 8014e4a:	bf00      	nop
 8014e4c:	40000c00 	.word	0x40000c00
 8014e50:	58024400 	.word	0x58024400
 8014e54:	58020000 	.word	0x58020000
 8014e58:	40010400 	.word	0x40010400
 8014e5c:	58020800 	.word	0x58020800
 8014e60:	40001800 	.word	0x40001800
 8014e64:	58020400 	.word	0x58020400
 8014e68:	4000e000 	.word	0x4000e000
 8014e6c:	58021400 	.word	0x58021400
 8014e70:	4000e400 	.word	0x4000e400

08014e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014e74:	b480      	push	{r7}
 8014e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8014e78:	e7fe      	b.n	8014e78 <NMI_Handler+0x4>

08014e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014e7a:	b480      	push	{r7}
 8014e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014e7e:	e7fe      	b.n	8014e7e <HardFault_Handler+0x4>

08014e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014e80:	b480      	push	{r7}
 8014e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014e84:	e7fe      	b.n	8014e84 <MemManage_Handler+0x4>

08014e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014e86:	b480      	push	{r7}
 8014e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014e8a:	e7fe      	b.n	8014e8a <BusFault_Handler+0x4>

08014e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014e90:	e7fe      	b.n	8014e90 <UsageFault_Handler+0x4>

08014e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014e92:	b480      	push	{r7}
 8014e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014e96:	bf00      	nop
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9e:	4770      	bx	lr

08014ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014ea0:	b480      	push	{r7}
 8014ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014ea4:	bf00      	nop
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr

08014eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014eae:	b480      	push	{r7}
 8014eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014eb2:	bf00      	nop
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eba:	4770      	bx	lr

08014ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014ec0:	f000 fa20 	bl	8015304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014ec4:	bf00      	nop
 8014ec6:	bd80      	pop	{r7, pc}

08014ec8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8014ecc:	4802      	ldr	r0, [pc, #8]	; (8014ed8 <DMA1_Stream1_IRQHandler+0x10>)
 8014ece:	f003 f9a7 	bl	8018220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8014ed2:	bf00      	nop
 8014ed4:	bd80      	pop	{r7, pc}
 8014ed6:	bf00      	nop
 8014ed8:	24000fcc 	.word	0x24000fcc

08014edc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8014ee0:	4802      	ldr	r0, [pc, #8]	; (8014eec <ADC_IRQHandler+0x10>)
 8014ee2:	f000 ffff 	bl	8015ee4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8014ee6:	bf00      	nop
 8014ee8:	bd80      	pop	{r7, pc}
 8014eea:	bf00      	nop
 8014eec:	24000f5c 	.word	0x24000f5c

08014ef0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8014ef4:	4802      	ldr	r0, [pc, #8]	; (8014f00 <FDCAN1_IT0_IRQHandler+0x10>)
 8014ef6:	f005 f8f1 	bl	801a0dc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8014efa:	bf00      	nop
 8014efc:	bd80      	pop	{r7, pc}
 8014efe:	bf00      	nop
 8014f00:	24001044 	.word	0x24001044

08014f04 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8014f04:	b580      	push	{r7, lr}
 8014f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8014f08:	4802      	ldr	r0, [pc, #8]	; (8014f14 <FDCAN1_IT1_IRQHandler+0x10>)
 8014f0a:	f005 f8e7 	bl	801a0dc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8014f0e:	bf00      	nop
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	24001044 	.word	0x24001044

08014f18 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014f1c:	4802      	ldr	r0, [pc, #8]	; (8014f28 <TIM1_CC_IRQHandler+0x10>)
 8014f1e:	f009 fffd 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8014f22:	bf00      	nop
 8014f24:	bd80      	pop	{r7, pc}
 8014f26:	bf00      	nop
 8014f28:	240010e4 	.word	0x240010e4

08014f2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8014f30:	4802      	ldr	r0, [pc, #8]	; (8014f3c <TIM2_IRQHandler+0x10>)
 8014f32:	f009 fff3 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8014f36:	bf00      	nop
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	24001130 	.word	0x24001130

08014f40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8014f44:	4802      	ldr	r0, [pc, #8]	; (8014f50 <TIM3_IRQHandler+0x10>)
 8014f46:	f009 ffe9 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8014f4a:	bf00      	nop
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	2400117c 	.word	0x2400117c

08014f54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014f58:	4802      	ldr	r0, [pc, #8]	; (8014f64 <TIM4_IRQHandler+0x10>)
 8014f5a:	f009 ffdf 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8014f5e:	bf00      	nop
 8014f60:	bd80      	pop	{r7, pc}
 8014f62:	bf00      	nop
 8014f64:	240011c8 	.word	0x240011c8

08014f68 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014f6c:	4803      	ldr	r0, [pc, #12]	; (8014f7c <TIM8_UP_TIM13_IRQHandler+0x14>)
 8014f6e:	f009 ffd5 	bl	801ef1c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8014f72:	4803      	ldr	r0, [pc, #12]	; (8014f80 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8014f74:	f009 ffd2 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8014f78:	bf00      	nop
 8014f7a:	bd80      	pop	{r7, pc}
 8014f7c:	240012f8 	.word	0x240012f8
 8014f80:	24001390 	.word	0x24001390

08014f84 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014f88:	4803      	ldr	r0, [pc, #12]	; (8014f98 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8014f8a:	f009 ffc7 	bl	801ef1c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8014f8e:	4803      	ldr	r0, [pc, #12]	; (8014f9c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8014f90:	f009 ffc4 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8014f94:	bf00      	nop
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	240012f8 	.word	0x240012f8
 8014f9c:	240013dc 	.word	0x240013dc

08014fa0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014fa4:	4802      	ldr	r0, [pc, #8]	; (8014fb0 <TIM8_CC_IRQHandler+0x10>)
 8014fa6:	f009 ffb9 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8014faa:	bf00      	nop
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	240012f8 	.word	0x240012f8

08014fb4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8014fb8:	4802      	ldr	r0, [pc, #8]	; (8014fc4 <TIM5_IRQHandler+0x10>)
 8014fba:	f009 ffaf 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8014fbe:	bf00      	nop
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	24001214 	.word	0x24001214

08014fc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8014fcc:	4802      	ldr	r0, [pc, #8]	; (8014fd8 <TIM6_DAC_IRQHandler+0x10>)
 8014fce:	f009 ffa5 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8014fd2:	bf00      	nop
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	24001260 	.word	0x24001260

08014fdc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8014fe0:	4802      	ldr	r0, [pc, #8]	; (8014fec <TIM7_IRQHandler+0x10>)
 8014fe2:	f009 ff9b 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8014fe6:	bf00      	nop
 8014fe8:	bd80      	pop	{r7, pc}
 8014fea:	bf00      	nop
 8014fec:	240012ac 	.word	0x240012ac

08014ff0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8014ff4:	4802      	ldr	r0, [pc, #8]	; (8015000 <TIM15_IRQHandler+0x10>)
 8014ff6:	f009 ff91 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8014ffa:	bf00      	nop
 8014ffc:	bd80      	pop	{r7, pc}
 8014ffe:	bf00      	nop
 8015000:	24001428 	.word	0x24001428

08015004 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8015008:	4802      	ldr	r0, [pc, #8]	; (8015014 <TIM16_IRQHandler+0x10>)
 801500a:	f009 ff87 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 801500e:	bf00      	nop
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	24001474 	.word	0x24001474

08015018 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 801501c:	4802      	ldr	r0, [pc, #8]	; (8015028 <TIM17_IRQHandler+0x10>)
 801501e:	f009 ff7d 	bl	801ef1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8015022:	bf00      	nop
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	240014c0 	.word	0x240014c0

0801502c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801502c:	b480      	push	{r7}
 801502e:	af00      	add	r7, sp, #0
  return 1;
 8015030:	2301      	movs	r3, #1
}
 8015032:	4618      	mov	r0, r3
 8015034:	46bd      	mov	sp, r7
 8015036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503a:	4770      	bx	lr

0801503c <_kill>:

int _kill(int pid, int sig)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b082      	sub	sp, #8
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
 8015044:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8015046:	f00b fb59 	bl	80206fc <__errno>
 801504a:	4603      	mov	r3, r0
 801504c:	2216      	movs	r2, #22
 801504e:	601a      	str	r2, [r3, #0]
  return -1;
 8015050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015054:	4618      	mov	r0, r3
 8015056:	3708      	adds	r7, #8
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}

0801505c <_exit>:

void _exit (int status)
{
 801505c:	b580      	push	{r7, lr}
 801505e:	b082      	sub	sp, #8
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8015064:	f04f 31ff 	mov.w	r1, #4294967295
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f7ff ffe7 	bl	801503c <_kill>
  while (1) {}    /* Make sure we hang here */
 801506e:	e7fe      	b.n	801506e <_exit+0x12>

08015070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b086      	sub	sp, #24
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8015078:	4a14      	ldr	r2, [pc, #80]	; (80150cc <_sbrk+0x5c>)
 801507a:	4b15      	ldr	r3, [pc, #84]	; (80150d0 <_sbrk+0x60>)
 801507c:	1ad3      	subs	r3, r2, r3
 801507e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8015080:	697b      	ldr	r3, [r7, #20]
 8015082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8015084:	4b13      	ldr	r3, [pc, #76]	; (80150d4 <_sbrk+0x64>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d102      	bne.n	8015092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801508c:	4b11      	ldr	r3, [pc, #68]	; (80150d4 <_sbrk+0x64>)
 801508e:	4a12      	ldr	r2, [pc, #72]	; (80150d8 <_sbrk+0x68>)
 8015090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8015092:	4b10      	ldr	r3, [pc, #64]	; (80150d4 <_sbrk+0x64>)
 8015094:	681a      	ldr	r2, [r3, #0]
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	4413      	add	r3, r2
 801509a:	693a      	ldr	r2, [r7, #16]
 801509c:	429a      	cmp	r2, r3
 801509e:	d207      	bcs.n	80150b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80150a0:	f00b fb2c 	bl	80206fc <__errno>
 80150a4:	4603      	mov	r3, r0
 80150a6:	220c      	movs	r2, #12
 80150a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80150aa:	f04f 33ff 	mov.w	r3, #4294967295
 80150ae:	e009      	b.n	80150c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80150b0:	4b08      	ldr	r3, [pc, #32]	; (80150d4 <_sbrk+0x64>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80150b6:	4b07      	ldr	r3, [pc, #28]	; (80150d4 <_sbrk+0x64>)
 80150b8:	681a      	ldr	r2, [r3, #0]
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	4413      	add	r3, r2
 80150be:	4a05      	ldr	r2, [pc, #20]	; (80150d4 <_sbrk+0x64>)
 80150c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80150c2:	68fb      	ldr	r3, [r7, #12]
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	3718      	adds	r7, #24
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	24050000 	.word	0x24050000
 80150d0:	00000400 	.word	0x00000400
 80150d4:	240015a4 	.word	0x240015a4
 80150d8:	240015c0 	.word	0x240015c0

080150dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80150dc:	b480      	push	{r7}
 80150de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80150e0:	4b32      	ldr	r3, [pc, #200]	; (80151ac <SystemInit+0xd0>)
 80150e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80150e6:	4a31      	ldr	r2, [pc, #196]	; (80151ac <SystemInit+0xd0>)
 80150e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80150ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80150f0:	4b2f      	ldr	r3, [pc, #188]	; (80151b0 <SystemInit+0xd4>)
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	f003 030f 	and.w	r3, r3, #15
 80150f8:	2b06      	cmp	r3, #6
 80150fa:	d807      	bhi.n	801510c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80150fc:	4b2c      	ldr	r3, [pc, #176]	; (80151b0 <SystemInit+0xd4>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	f023 030f 	bic.w	r3, r3, #15
 8015104:	4a2a      	ldr	r2, [pc, #168]	; (80151b0 <SystemInit+0xd4>)
 8015106:	f043 0307 	orr.w	r3, r3, #7
 801510a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 801510c:	4b29      	ldr	r3, [pc, #164]	; (80151b4 <SystemInit+0xd8>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	4a28      	ldr	r2, [pc, #160]	; (80151b4 <SystemInit+0xd8>)
 8015112:	f043 0301 	orr.w	r3, r3, #1
 8015116:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8015118:	4b26      	ldr	r3, [pc, #152]	; (80151b4 <SystemInit+0xd8>)
 801511a:	2200      	movs	r2, #0
 801511c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 801511e:	4b25      	ldr	r3, [pc, #148]	; (80151b4 <SystemInit+0xd8>)
 8015120:	681a      	ldr	r2, [r3, #0]
 8015122:	4924      	ldr	r1, [pc, #144]	; (80151b4 <SystemInit+0xd8>)
 8015124:	4b24      	ldr	r3, [pc, #144]	; (80151b8 <SystemInit+0xdc>)
 8015126:	4013      	ands	r3, r2
 8015128:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 801512a:	4b21      	ldr	r3, [pc, #132]	; (80151b0 <SystemInit+0xd4>)
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	f003 0308 	and.w	r3, r3, #8
 8015132:	2b00      	cmp	r3, #0
 8015134:	d007      	beq.n	8015146 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8015136:	4b1e      	ldr	r3, [pc, #120]	; (80151b0 <SystemInit+0xd4>)
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	f023 030f 	bic.w	r3, r3, #15
 801513e:	4a1c      	ldr	r2, [pc, #112]	; (80151b0 <SystemInit+0xd4>)
 8015140:	f043 0307 	orr.w	r3, r3, #7
 8015144:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8015146:	4b1b      	ldr	r3, [pc, #108]	; (80151b4 <SystemInit+0xd8>)
 8015148:	2200      	movs	r2, #0
 801514a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 801514c:	4b19      	ldr	r3, [pc, #100]	; (80151b4 <SystemInit+0xd8>)
 801514e:	2200      	movs	r2, #0
 8015150:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8015152:	4b18      	ldr	r3, [pc, #96]	; (80151b4 <SystemInit+0xd8>)
 8015154:	2200      	movs	r2, #0
 8015156:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8015158:	4b16      	ldr	r3, [pc, #88]	; (80151b4 <SystemInit+0xd8>)
 801515a:	4a18      	ldr	r2, [pc, #96]	; (80151bc <SystemInit+0xe0>)
 801515c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 801515e:	4b15      	ldr	r3, [pc, #84]	; (80151b4 <SystemInit+0xd8>)
 8015160:	4a17      	ldr	r2, [pc, #92]	; (80151c0 <SystemInit+0xe4>)
 8015162:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8015164:	4b13      	ldr	r3, [pc, #76]	; (80151b4 <SystemInit+0xd8>)
 8015166:	4a17      	ldr	r2, [pc, #92]	; (80151c4 <SystemInit+0xe8>)
 8015168:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 801516a:	4b12      	ldr	r3, [pc, #72]	; (80151b4 <SystemInit+0xd8>)
 801516c:	2200      	movs	r2, #0
 801516e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8015170:	4b10      	ldr	r3, [pc, #64]	; (80151b4 <SystemInit+0xd8>)
 8015172:	4a14      	ldr	r2, [pc, #80]	; (80151c4 <SystemInit+0xe8>)
 8015174:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8015176:	4b0f      	ldr	r3, [pc, #60]	; (80151b4 <SystemInit+0xd8>)
 8015178:	2200      	movs	r2, #0
 801517a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 801517c:	4b0d      	ldr	r3, [pc, #52]	; (80151b4 <SystemInit+0xd8>)
 801517e:	4a11      	ldr	r2, [pc, #68]	; (80151c4 <SystemInit+0xe8>)
 8015180:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8015182:	4b0c      	ldr	r3, [pc, #48]	; (80151b4 <SystemInit+0xd8>)
 8015184:	2200      	movs	r2, #0
 8015186:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8015188:	4b0a      	ldr	r3, [pc, #40]	; (80151b4 <SystemInit+0xd8>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	4a09      	ldr	r2, [pc, #36]	; (80151b4 <SystemInit+0xd8>)
 801518e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015192:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8015194:	4b07      	ldr	r3, [pc, #28]	; (80151b4 <SystemInit+0xd8>)
 8015196:	2200      	movs	r2, #0
 8015198:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 801519a:	4b0b      	ldr	r3, [pc, #44]	; (80151c8 <SystemInit+0xec>)
 801519c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80151a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80151a2:	bf00      	nop
 80151a4:	46bd      	mov	sp, r7
 80151a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151aa:	4770      	bx	lr
 80151ac:	e000ed00 	.word	0xe000ed00
 80151b0:	52002000 	.word	0x52002000
 80151b4:	58024400 	.word	0x58024400
 80151b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80151bc:	02020200 	.word	0x02020200
 80151c0:	01ff0000 	.word	0x01ff0000
 80151c4:	01010280 	.word	0x01010280
 80151c8:	52004000 	.word	0x52004000

080151cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80151cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015204 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80151d0:	f7ff ff84 	bl	80150dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80151d4:	480c      	ldr	r0, [pc, #48]	; (8015208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80151d6:	490d      	ldr	r1, [pc, #52]	; (801520c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80151d8:	4a0d      	ldr	r2, [pc, #52]	; (8015210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80151da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80151dc:	e002      	b.n	80151e4 <LoopCopyDataInit>

080151de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80151de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80151e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80151e2:	3304      	adds	r3, #4

080151e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80151e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80151e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80151e8:	d3f9      	bcc.n	80151de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80151ea:	4a0a      	ldr	r2, [pc, #40]	; (8015214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80151ec:	4c0a      	ldr	r4, [pc, #40]	; (8015218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80151ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80151f0:	e001      	b.n	80151f6 <LoopFillZerobss>

080151f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80151f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80151f4:	3204      	adds	r2, #4

080151f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80151f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80151f8:	d3fb      	bcc.n	80151f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80151fa:	f00b fa85 	bl	8020708 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80151fe:	f7f8 fbca 	bl	800d996 <main>
  bx  lr
 8015202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015204:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8015208:	24000000 	.word	0x24000000
  ldr r1, =_edata
 801520c:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8015210:	08020d60 	.word	0x08020d60
  ldr r2, =_sbss
 8015214:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8015218:	240015c0 	.word	0x240015c0

0801521c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801521c:	e7fe      	b.n	801521c <ADC3_IRQHandler>
	...

08015220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b082      	sub	sp, #8
 8015224:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015226:	2003      	movs	r0, #3
 8015228:	f002 f9f6 	bl	8017618 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801522c:	f006 fc08 	bl	801ba40 <HAL_RCC_GetSysClockFreq>
 8015230:	4602      	mov	r2, r0
 8015232:	4b15      	ldr	r3, [pc, #84]	; (8015288 <HAL_Init+0x68>)
 8015234:	699b      	ldr	r3, [r3, #24]
 8015236:	0a1b      	lsrs	r3, r3, #8
 8015238:	f003 030f 	and.w	r3, r3, #15
 801523c:	4913      	ldr	r1, [pc, #76]	; (801528c <HAL_Init+0x6c>)
 801523e:	5ccb      	ldrb	r3, [r1, r3]
 8015240:	f003 031f 	and.w	r3, r3, #31
 8015244:	fa22 f303 	lsr.w	r3, r2, r3
 8015248:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801524a:	4b0f      	ldr	r3, [pc, #60]	; (8015288 <HAL_Init+0x68>)
 801524c:	699b      	ldr	r3, [r3, #24]
 801524e:	f003 030f 	and.w	r3, r3, #15
 8015252:	4a0e      	ldr	r2, [pc, #56]	; (801528c <HAL_Init+0x6c>)
 8015254:	5cd3      	ldrb	r3, [r2, r3]
 8015256:	f003 031f 	and.w	r3, r3, #31
 801525a:	687a      	ldr	r2, [r7, #4]
 801525c:	fa22 f303 	lsr.w	r3, r2, r3
 8015260:	4a0b      	ldr	r2, [pc, #44]	; (8015290 <HAL_Init+0x70>)
 8015262:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015264:	4a0b      	ldr	r2, [pc, #44]	; (8015294 <HAL_Init+0x74>)
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801526a:	2000      	movs	r0, #0
 801526c:	f000 f814 	bl	8015298 <HAL_InitTick>
 8015270:	4603      	mov	r3, r0
 8015272:	2b00      	cmp	r3, #0
 8015274:	d001      	beq.n	801527a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8015276:	2301      	movs	r3, #1
 8015278:	e002      	b.n	8015280 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801527a:	f7ff f975 	bl	8014568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801527e:	2300      	movs	r3, #0
}
 8015280:	4618      	mov	r0, r3
 8015282:	3708      	adds	r7, #8
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}
 8015288:	58024400 	.word	0x58024400
 801528c:	08020cd8 	.word	0x08020cd8
 8015290:	24000008 	.word	0x24000008
 8015294:	24000004 	.word	0x24000004

08015298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015298:	b580      	push	{r7, lr}
 801529a:	b082      	sub	sp, #8
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80152a0:	4b15      	ldr	r3, [pc, #84]	; (80152f8 <HAL_InitTick+0x60>)
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d101      	bne.n	80152ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80152a8:	2301      	movs	r3, #1
 80152aa:	e021      	b.n	80152f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80152ac:	4b13      	ldr	r3, [pc, #76]	; (80152fc <HAL_InitTick+0x64>)
 80152ae:	681a      	ldr	r2, [r3, #0]
 80152b0:	4b11      	ldr	r3, [pc, #68]	; (80152f8 <HAL_InitTick+0x60>)
 80152b2:	781b      	ldrb	r3, [r3, #0]
 80152b4:	4619      	mov	r1, r3
 80152b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80152ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80152be:	fbb2 f3f3 	udiv	r3, r2, r3
 80152c2:	4618      	mov	r0, r3
 80152c4:	f002 f9db 	bl	801767e <HAL_SYSTICK_Config>
 80152c8:	4603      	mov	r3, r0
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d001      	beq.n	80152d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80152ce:	2301      	movs	r3, #1
 80152d0:	e00e      	b.n	80152f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2b0f      	cmp	r3, #15
 80152d6:	d80a      	bhi.n	80152ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80152d8:	2200      	movs	r2, #0
 80152da:	6879      	ldr	r1, [r7, #4]
 80152dc:	f04f 30ff 	mov.w	r0, #4294967295
 80152e0:	f002 f9a5 	bl	801762e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80152e4:	4a06      	ldr	r2, [pc, #24]	; (8015300 <HAL_InitTick+0x68>)
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80152ea:	2300      	movs	r3, #0
 80152ec:	e000      	b.n	80152f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80152ee:	2301      	movs	r3, #1
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3708      	adds	r7, #8
 80152f4:	46bd      	mov	sp, r7
 80152f6:	bd80      	pop	{r7, pc}
 80152f8:	24000010 	.word	0x24000010
 80152fc:	24000004 	.word	0x24000004
 8015300:	2400000c 	.word	0x2400000c

08015304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015304:	b480      	push	{r7}
 8015306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8015308:	4b06      	ldr	r3, [pc, #24]	; (8015324 <HAL_IncTick+0x20>)
 801530a:	781b      	ldrb	r3, [r3, #0]
 801530c:	461a      	mov	r2, r3
 801530e:	4b06      	ldr	r3, [pc, #24]	; (8015328 <HAL_IncTick+0x24>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	4413      	add	r3, r2
 8015314:	4a04      	ldr	r2, [pc, #16]	; (8015328 <HAL_IncTick+0x24>)
 8015316:	6013      	str	r3, [r2, #0]
}
 8015318:	bf00      	nop
 801531a:	46bd      	mov	sp, r7
 801531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015320:	4770      	bx	lr
 8015322:	bf00      	nop
 8015324:	24000010 	.word	0x24000010
 8015328:	240015a8 	.word	0x240015a8

0801532c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801532c:	b480      	push	{r7}
 801532e:	af00      	add	r7, sp, #0
  return uwTick;
 8015330:	4b03      	ldr	r3, [pc, #12]	; (8015340 <HAL_GetTick+0x14>)
 8015332:	681b      	ldr	r3, [r3, #0]
}
 8015334:	4618      	mov	r0, r3
 8015336:	46bd      	mov	sp, r7
 8015338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533c:	4770      	bx	lr
 801533e:	bf00      	nop
 8015340:	240015a8 	.word	0x240015a8

08015344 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8015344:	b480      	push	{r7}
 8015346:	b083      	sub	sp, #12
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
 801534c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	689b      	ldr	r3, [r3, #8]
 8015352:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	431a      	orrs	r2, r3
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	609a      	str	r2, [r3, #8]
}
 801535e:	bf00      	nop
 8015360:	370c      	adds	r7, #12
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr

0801536a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801536a:	b480      	push	{r7}
 801536c:	b083      	sub	sp, #12
 801536e:	af00      	add	r7, sp, #0
 8015370:	6078      	str	r0, [r7, #4]
 8015372:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	689b      	ldr	r3, [r3, #8]
 8015378:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	431a      	orrs	r2, r3
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	609a      	str	r2, [r3, #8]
}
 8015384:	bf00      	nop
 8015386:	370c      	adds	r7, #12
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	689b      	ldr	r3, [r3, #8]
 801539c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80153a0:	4618      	mov	r0, r3
 80153a2:	370c      	adds	r7, #12
 80153a4:	46bd      	mov	sp, r7
 80153a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153aa:	4770      	bx	lr

080153ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b087      	sub	sp, #28
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	60f8      	str	r0, [r7, #12]
 80153b4:	60b9      	str	r1, [r7, #8]
 80153b6:	607a      	str	r2, [r7, #4]
 80153b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	3360      	adds	r3, #96	; 0x60
 80153be:	461a      	mov	r2, r3
 80153c0:	68bb      	ldr	r3, [r7, #8]
 80153c2:	009b      	lsls	r3, r3, #2
 80153c4:	4413      	add	r3, r2
 80153c6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	4a10      	ldr	r2, [pc, #64]	; (801540c <LL_ADC_SetOffset+0x60>)
 80153cc:	4293      	cmp	r3, r2
 80153ce:	d10b      	bne.n	80153e8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	4313      	orrs	r3, r2
 80153de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80153e6:	e00b      	b.n	8015400 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	430b      	orrs	r3, r1
 80153fa:	431a      	orrs	r2, r3
 80153fc:	697b      	ldr	r3, [r7, #20]
 80153fe:	601a      	str	r2, [r3, #0]
}
 8015400:	bf00      	nop
 8015402:	371c      	adds	r7, #28
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr
 801540c:	58026000 	.word	0x58026000

08015410 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8015410:	b480      	push	{r7}
 8015412:	b085      	sub	sp, #20
 8015414:	af00      	add	r7, sp, #0
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	3360      	adds	r3, #96	; 0x60
 801541e:	461a      	mov	r2, r3
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	009b      	lsls	r3, r3, #2
 8015424:	4413      	add	r3, r2
 8015426:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8015430:	4618      	mov	r0, r3
 8015432:	3714      	adds	r7, #20
 8015434:	46bd      	mov	sp, r7
 8015436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801543a:	4770      	bx	lr

0801543c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 801543c:	b480      	push	{r7}
 801543e:	b085      	sub	sp, #20
 8015440:	af00      	add	r7, sp, #0
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	691b      	ldr	r3, [r3, #16]
 801544c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	f003 031f 	and.w	r3, r3, #31
 8015456:	6879      	ldr	r1, [r7, #4]
 8015458:	fa01 f303 	lsl.w	r3, r1, r3
 801545c:	431a      	orrs	r2, r3
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	611a      	str	r2, [r3, #16]
}
 8015462:	bf00      	nop
 8015464:	3714      	adds	r7, #20
 8015466:	46bd      	mov	sp, r7
 8015468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801546c:	4770      	bx	lr
	...

08015470 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8015470:	b480      	push	{r7}
 8015472:	b087      	sub	sp, #28
 8015474:	af00      	add	r7, sp, #0
 8015476:	60f8      	str	r0, [r7, #12]
 8015478:	60b9      	str	r1, [r7, #8]
 801547a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	4a0c      	ldr	r2, [pc, #48]	; (80154b0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8015480:	4293      	cmp	r3, r2
 8015482:	d00e      	beq.n	80154a2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	3360      	adds	r3, #96	; 0x60
 8015488:	461a      	mov	r2, r3
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	009b      	lsls	r3, r3, #2
 801548e:	4413      	add	r3, r2
 8015490:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	431a      	orrs	r2, r3
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	601a      	str	r2, [r3, #0]
  }
}
 80154a2:	bf00      	nop
 80154a4:	371c      	adds	r7, #28
 80154a6:	46bd      	mov	sp, r7
 80154a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ac:	4770      	bx	lr
 80154ae:	bf00      	nop
 80154b0:	58026000 	.word	0x58026000

080154b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80154b4:	b480      	push	{r7}
 80154b6:	b087      	sub	sp, #28
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	60f8      	str	r0, [r7, #12]
 80154bc:	60b9      	str	r1, [r7, #8]
 80154be:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	4a0c      	ldr	r2, [pc, #48]	; (80154f4 <LL_ADC_SetOffsetSaturation+0x40>)
 80154c4:	4293      	cmp	r3, r2
 80154c6:	d10e      	bne.n	80154e6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	3360      	adds	r3, #96	; 0x60
 80154cc:	461a      	mov	r2, r3
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	009b      	lsls	r3, r3, #2
 80154d2:	4413      	add	r3, r2
 80154d4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	431a      	orrs	r2, r3
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80154e6:	bf00      	nop
 80154e8:	371c      	adds	r7, #28
 80154ea:	46bd      	mov	sp, r7
 80154ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop
 80154f4:	58026000 	.word	0x58026000

080154f8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80154f8:	b480      	push	{r7}
 80154fa:	b087      	sub	sp, #28
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	4a0c      	ldr	r2, [pc, #48]	; (8015538 <LL_ADC_SetOffsetSign+0x40>)
 8015508:	4293      	cmp	r3, r2
 801550a:	d10e      	bne.n	801552a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	3360      	adds	r3, #96	; 0x60
 8015510:	461a      	mov	r2, r3
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	4413      	add	r3, r2
 8015518:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	431a      	orrs	r2, r3
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 801552a:	bf00      	nop
 801552c:	371c      	adds	r7, #28
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr
 8015536:	bf00      	nop
 8015538:	58026000 	.word	0x58026000

0801553c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 801553c:	b480      	push	{r7}
 801553e:	b087      	sub	sp, #28
 8015540:	af00      	add	r7, sp, #0
 8015542:	60f8      	str	r0, [r7, #12]
 8015544:	60b9      	str	r1, [r7, #8]
 8015546:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	3360      	adds	r3, #96	; 0x60
 801554c:	461a      	mov	r2, r3
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	009b      	lsls	r3, r3, #2
 8015552:	4413      	add	r3, r2
 8015554:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	4a0c      	ldr	r2, [pc, #48]	; (801558c <LL_ADC_SetOffsetState+0x50>)
 801555a:	4293      	cmp	r3, r2
 801555c:	d108      	bne.n	8015570 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	431a      	orrs	r2, r3
 801556a:	697b      	ldr	r3, [r7, #20]
 801556c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 801556e:	e007      	b.n	8015580 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	431a      	orrs	r2, r3
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	601a      	str	r2, [r3, #0]
}
 8015580:	bf00      	nop
 8015582:	371c      	adds	r7, #28
 8015584:	46bd      	mov	sp, r7
 8015586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558a:	4770      	bx	lr
 801558c:	58026000 	.word	0x58026000

08015590 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8015590:	b480      	push	{r7}
 8015592:	b083      	sub	sp, #12
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	68db      	ldr	r3, [r3, #12]
 801559c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d101      	bne.n	80155a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80155a4:	2301      	movs	r3, #1
 80155a6:	e000      	b.n	80155aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80155a8:	2300      	movs	r3, #0
}
 80155aa:	4618      	mov	r0, r3
 80155ac:	370c      	adds	r7, #12
 80155ae:	46bd      	mov	sp, r7
 80155b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b4:	4770      	bx	lr

080155b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80155b6:	b480      	push	{r7}
 80155b8:	b087      	sub	sp, #28
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	60f8      	str	r0, [r7, #12]
 80155be:	60b9      	str	r1, [r7, #8]
 80155c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	3330      	adds	r3, #48	; 0x30
 80155c6:	461a      	mov	r2, r3
 80155c8:	68bb      	ldr	r3, [r7, #8]
 80155ca:	0a1b      	lsrs	r3, r3, #8
 80155cc:	009b      	lsls	r3, r3, #2
 80155ce:	f003 030c 	and.w	r3, r3, #12
 80155d2:	4413      	add	r3, r2
 80155d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	681a      	ldr	r2, [r3, #0]
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	f003 031f 	and.w	r3, r3, #31
 80155e0:	211f      	movs	r1, #31
 80155e2:	fa01 f303 	lsl.w	r3, r1, r3
 80155e6:	43db      	mvns	r3, r3
 80155e8:	401a      	ands	r2, r3
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	0e9b      	lsrs	r3, r3, #26
 80155ee:	f003 011f 	and.w	r1, r3, #31
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	f003 031f 	and.w	r3, r3, #31
 80155f8:	fa01 f303 	lsl.w	r3, r1, r3
 80155fc:	431a      	orrs	r2, r3
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8015602:	bf00      	nop
 8015604:	371c      	adds	r7, #28
 8015606:	46bd      	mov	sp, r7
 8015608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801560c:	4770      	bx	lr

0801560e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 801560e:	b480      	push	{r7}
 8015610:	b083      	sub	sp, #12
 8015612:	af00      	add	r7, sp, #0
 8015614:	6078      	str	r0, [r7, #4]
 8015616:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	f023 0203 	bic.w	r2, r3, #3
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	431a      	orrs	r2, r3
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	60da      	str	r2, [r3, #12]
}
 8015628:	bf00      	nop
 801562a:	370c      	adds	r7, #12
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr

08015634 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8015634:	b480      	push	{r7}
 8015636:	b083      	sub	sp, #12
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	68db      	ldr	r3, [r3, #12]
 8015640:	f043 0201 	orr.w	r2, r3, #1
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	60da      	str	r2, [r3, #12]
}
 8015648:	bf00      	nop
 801564a:	370c      	adds	r7, #12
 801564c:	46bd      	mov	sp, r7
 801564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015652:	4770      	bx	lr

08015654 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8015654:	b480      	push	{r7}
 8015656:	b083      	sub	sp, #12
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
 801565c:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	4a08      	ldr	r2, [pc, #32]	; (8015684 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8015662:	4293      	cmp	r3, r2
 8015664:	d107      	bne.n	8015676 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	68db      	ldr	r3, [r3, #12]
 801566a:	f023 0203 	bic.w	r2, r3, #3
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	431a      	orrs	r2, r3
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	60da      	str	r2, [r3, #12]
  }
}
 8015676:	bf00      	nop
 8015678:	370c      	adds	r7, #12
 801567a:	46bd      	mov	sp, r7
 801567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015680:	4770      	bx	lr
 8015682:	bf00      	nop
 8015684:	58026000 	.word	0x58026000

08015688 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8015688:	b480      	push	{r7}
 801568a:	b083      	sub	sp, #12
 801568c:	af00      	add	r7, sp, #0
 801568e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015694:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8015698:	2b00      	cmp	r3, #0
 801569a:	d101      	bne.n	80156a0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 801569c:	2301      	movs	r3, #1
 801569e:	e000      	b.n	80156a2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80156a0:	2300      	movs	r3, #0
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	370c      	adds	r7, #12
 80156a6:	46bd      	mov	sp, r7
 80156a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ac:	4770      	bx	lr

080156ae <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80156ae:	b480      	push	{r7}
 80156b0:	b087      	sub	sp, #28
 80156b2:	af00      	add	r7, sp, #0
 80156b4:	60f8      	str	r0, [r7, #12]
 80156b6:	60b9      	str	r1, [r7, #8]
 80156b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	3314      	adds	r3, #20
 80156be:	461a      	mov	r2, r3
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	0e5b      	lsrs	r3, r3, #25
 80156c4:	009b      	lsls	r3, r3, #2
 80156c6:	f003 0304 	and.w	r3, r3, #4
 80156ca:	4413      	add	r3, r2
 80156cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	681a      	ldr	r2, [r3, #0]
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	0d1b      	lsrs	r3, r3, #20
 80156d6:	f003 031f 	and.w	r3, r3, #31
 80156da:	2107      	movs	r1, #7
 80156dc:	fa01 f303 	lsl.w	r3, r1, r3
 80156e0:	43db      	mvns	r3, r3
 80156e2:	401a      	ands	r2, r3
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	0d1b      	lsrs	r3, r3, #20
 80156e8:	f003 031f 	and.w	r3, r3, #31
 80156ec:	6879      	ldr	r1, [r7, #4]
 80156ee:	fa01 f303 	lsl.w	r3, r1, r3
 80156f2:	431a      	orrs	r2, r3
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80156f8:	bf00      	nop
 80156fa:	371c      	adds	r7, #28
 80156fc:	46bd      	mov	sp, r7
 80156fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015702:	4770      	bx	lr

08015704 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8015704:	b480      	push	{r7}
 8015706:	b085      	sub	sp, #20
 8015708:	af00      	add	r7, sp, #0
 801570a:	60f8      	str	r0, [r7, #12]
 801570c:	60b9      	str	r1, [r7, #8]
 801570e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	4a1a      	ldr	r2, [pc, #104]	; (801577c <LL_ADC_SetChannelSingleDiff+0x78>)
 8015714:	4293      	cmp	r3, r2
 8015716:	d115      	bne.n	8015744 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015724:	43db      	mvns	r3, r3
 8015726:	401a      	ands	r2, r3
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f003 0318 	and.w	r3, r3, #24
 801572e:	4914      	ldr	r1, [pc, #80]	; (8015780 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8015730:	40d9      	lsrs	r1, r3
 8015732:	68bb      	ldr	r3, [r7, #8]
 8015734:	400b      	ands	r3, r1
 8015736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801573a:	431a      	orrs	r2, r3
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8015742:	e014      	b.n	801576e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015750:	43db      	mvns	r3, r3
 8015752:	401a      	ands	r2, r3
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f003 0318 	and.w	r3, r3, #24
 801575a:	4909      	ldr	r1, [pc, #36]	; (8015780 <LL_ADC_SetChannelSingleDiff+0x7c>)
 801575c:	40d9      	lsrs	r1, r3
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	400b      	ands	r3, r1
 8015762:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015766:	431a      	orrs	r2, r3
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 801576e:	bf00      	nop
 8015770:	3714      	adds	r7, #20
 8015772:	46bd      	mov	sp, r7
 8015774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015778:	4770      	bx	lr
 801577a:	bf00      	nop
 801577c:	58026000 	.word	0x58026000
 8015780:	000fffff 	.word	0x000fffff

08015784 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015784:	b480      	push	{r7}
 8015786:	b083      	sub	sp, #12
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	689b      	ldr	r3, [r3, #8]
 8015790:	f003 031f 	and.w	r3, r3, #31
}
 8015794:	4618      	mov	r0, r3
 8015796:	370c      	adds	r7, #12
 8015798:	46bd      	mov	sp, r7
 801579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801579e:	4770      	bx	lr

080157a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80157a0:	b480      	push	{r7}
 80157a2:	b083      	sub	sp, #12
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	689b      	ldr	r3, [r3, #8]
 80157ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80157b0:	4618      	mov	r0, r3
 80157b2:	370c      	adds	r7, #12
 80157b4:	46bd      	mov	sp, r7
 80157b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ba:	4770      	bx	lr

080157bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80157bc:	b480      	push	{r7}
 80157be:	b083      	sub	sp, #12
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	689a      	ldr	r2, [r3, #8]
 80157c8:	4b04      	ldr	r3, [pc, #16]	; (80157dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80157ca:	4013      	ands	r3, r2
 80157cc:	687a      	ldr	r2, [r7, #4]
 80157ce:	6093      	str	r3, [r2, #8]
}
 80157d0:	bf00      	nop
 80157d2:	370c      	adds	r7, #12
 80157d4:	46bd      	mov	sp, r7
 80157d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157da:	4770      	bx	lr
 80157dc:	5fffffc0 	.word	0x5fffffc0

080157e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80157e0:	b480      	push	{r7}
 80157e2:	b083      	sub	sp, #12
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	689b      	ldr	r3, [r3, #8]
 80157ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80157f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80157f4:	d101      	bne.n	80157fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80157f6:	2301      	movs	r3, #1
 80157f8:	e000      	b.n	80157fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80157fa:	2300      	movs	r3, #0
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	370c      	adds	r7, #12
 8015800:	46bd      	mov	sp, r7
 8015802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015806:	4770      	bx	lr

08015808 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8015808:	b480      	push	{r7}
 801580a:	b083      	sub	sp, #12
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	689a      	ldr	r2, [r3, #8]
 8015814:	4b05      	ldr	r3, [pc, #20]	; (801582c <LL_ADC_EnableInternalRegulator+0x24>)
 8015816:	4013      	ands	r3, r2
 8015818:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8015820:	bf00      	nop
 8015822:	370c      	adds	r7, #12
 8015824:	46bd      	mov	sp, r7
 8015826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582a:	4770      	bx	lr
 801582c:	6fffffc0 	.word	0x6fffffc0

08015830 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8015830:	b480      	push	{r7}
 8015832:	b083      	sub	sp, #12
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	689b      	ldr	r3, [r3, #8]
 801583c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015844:	d101      	bne.n	801584a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8015846:	2301      	movs	r3, #1
 8015848:	e000      	b.n	801584c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801584a:	2300      	movs	r3, #0
}
 801584c:	4618      	mov	r0, r3
 801584e:	370c      	adds	r7, #12
 8015850:	46bd      	mov	sp, r7
 8015852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015856:	4770      	bx	lr

08015858 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8015858:	b480      	push	{r7}
 801585a:	b083      	sub	sp, #12
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	689a      	ldr	r2, [r3, #8]
 8015864:	4b05      	ldr	r3, [pc, #20]	; (801587c <LL_ADC_Enable+0x24>)
 8015866:	4013      	ands	r3, r2
 8015868:	f043 0201 	orr.w	r2, r3, #1
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8015870:	bf00      	nop
 8015872:	370c      	adds	r7, #12
 8015874:	46bd      	mov	sp, r7
 8015876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587a:	4770      	bx	lr
 801587c:	7fffffc0 	.word	0x7fffffc0

08015880 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8015880:	b480      	push	{r7}
 8015882:	b083      	sub	sp, #12
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	689b      	ldr	r3, [r3, #8]
 801588c:	f003 0301 	and.w	r3, r3, #1
 8015890:	2b01      	cmp	r3, #1
 8015892:	d101      	bne.n	8015898 <LL_ADC_IsEnabled+0x18>
 8015894:	2301      	movs	r3, #1
 8015896:	e000      	b.n	801589a <LL_ADC_IsEnabled+0x1a>
 8015898:	2300      	movs	r3, #0
}
 801589a:	4618      	mov	r0, r3
 801589c:	370c      	adds	r7, #12
 801589e:	46bd      	mov	sp, r7
 80158a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a4:	4770      	bx	lr
	...

080158a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80158a8:	b480      	push	{r7}
 80158aa:	b083      	sub	sp, #12
 80158ac:	af00      	add	r7, sp, #0
 80158ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	689a      	ldr	r2, [r3, #8]
 80158b4:	4b05      	ldr	r3, [pc, #20]	; (80158cc <LL_ADC_REG_StartConversion+0x24>)
 80158b6:	4013      	ands	r3, r2
 80158b8:	f043 0204 	orr.w	r2, r3, #4
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80158c0:	bf00      	nop
 80158c2:	370c      	adds	r7, #12
 80158c4:	46bd      	mov	sp, r7
 80158c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ca:	4770      	bx	lr
 80158cc:	7fffffc0 	.word	0x7fffffc0

080158d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b083      	sub	sp, #12
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	689b      	ldr	r3, [r3, #8]
 80158dc:	f003 0304 	and.w	r3, r3, #4
 80158e0:	2b04      	cmp	r3, #4
 80158e2:	d101      	bne.n	80158e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80158e4:	2301      	movs	r3, #1
 80158e6:	e000      	b.n	80158ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80158e8:	2300      	movs	r3, #0
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	370c      	adds	r7, #12
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr

080158f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80158f6:	b480      	push	{r7}
 80158f8:	b083      	sub	sp, #12
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	689b      	ldr	r3, [r3, #8]
 8015902:	f003 0308 	and.w	r3, r3, #8
 8015906:	2b08      	cmp	r3, #8
 8015908:	d101      	bne.n	801590e <LL_ADC_INJ_IsConversionOngoing+0x18>
 801590a:	2301      	movs	r3, #1
 801590c:	e000      	b.n	8015910 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 801590e:	2300      	movs	r3, #0
}
 8015910:	4618      	mov	r0, r3
 8015912:	370c      	adds	r7, #12
 8015914:	46bd      	mov	sp, r7
 8015916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801591a:	4770      	bx	lr

0801591c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 801591c:	b590      	push	{r4, r7, lr}
 801591e:	b089      	sub	sp, #36	; 0x24
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015924:	2300      	movs	r3, #0
 8015926:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8015928:	2300      	movs	r3, #0
 801592a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	2b00      	cmp	r3, #0
 8015930:	d101      	bne.n	8015936 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8015932:	2301      	movs	r3, #1
 8015934:	e1ee      	b.n	8015d14 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	691b      	ldr	r3, [r3, #16]
 801593a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015940:	2b00      	cmp	r3, #0
 8015942:	d109      	bne.n	8015958 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8015944:	6878      	ldr	r0, [r7, #4]
 8015946:	f7fe fe29 	bl	801459c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	2200      	movs	r2, #0
 801594e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	2200      	movs	r2, #0
 8015954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	4618      	mov	r0, r3
 801595e:	f7ff ff3f 	bl	80157e0 <LL_ADC_IsDeepPowerDownEnabled>
 8015962:	4603      	mov	r3, r0
 8015964:	2b00      	cmp	r3, #0
 8015966:	d004      	beq.n	8015972 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	4618      	mov	r0, r3
 801596e:	f7ff ff25 	bl	80157bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	4618      	mov	r0, r3
 8015978:	f7ff ff5a 	bl	8015830 <LL_ADC_IsInternalRegulatorEnabled>
 801597c:	4603      	mov	r3, r0
 801597e:	2b00      	cmp	r3, #0
 8015980:	d114      	bne.n	80159ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	4618      	mov	r0, r3
 8015988:	f7ff ff3e 	bl	8015808 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801598c:	4b8e      	ldr	r3, [pc, #568]	; (8015bc8 <HAL_ADC_Init+0x2ac>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	099b      	lsrs	r3, r3, #6
 8015992:	4a8e      	ldr	r2, [pc, #568]	; (8015bcc <HAL_ADC_Init+0x2b0>)
 8015994:	fba2 2303 	umull	r2, r3, r2, r3
 8015998:	099b      	lsrs	r3, r3, #6
 801599a:	3301      	adds	r3, #1
 801599c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 801599e:	e002      	b.n	80159a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	3b01      	subs	r3, #1
 80159a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80159a6:	68bb      	ldr	r3, [r7, #8]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d1f9      	bne.n	80159a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7ff ff3d 	bl	8015830 <LL_ADC_IsInternalRegulatorEnabled>
 80159b6:	4603      	mov	r3, r0
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d10d      	bne.n	80159d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80159c0:	f043 0210 	orr.w	r2, r3, #16
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80159cc:	f043 0201 	orr.w	r2, r3, #1
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80159d4:	2301      	movs	r3, #1
 80159d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	4618      	mov	r0, r3
 80159de:	f7ff ff77 	bl	80158d0 <LL_ADC_REG_IsConversionOngoing>
 80159e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80159e8:	f003 0310 	and.w	r3, r3, #16
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	f040 8188 	bne.w	8015d02 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	f040 8184 	bne.w	8015d02 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80159fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8015a02:	f043 0202 	orr.w	r2, r3, #2
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f7ff ff36 	bl	8015880 <LL_ADC_IsEnabled>
 8015a14:	4603      	mov	r3, r0
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d136      	bne.n	8015a88 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	4a6c      	ldr	r2, [pc, #432]	; (8015bd0 <HAL_ADC_Init+0x2b4>)
 8015a20:	4293      	cmp	r3, r2
 8015a22:	d004      	beq.n	8015a2e <HAL_ADC_Init+0x112>
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	4a6a      	ldr	r2, [pc, #424]	; (8015bd4 <HAL_ADC_Init+0x2b8>)
 8015a2a:	4293      	cmp	r3, r2
 8015a2c:	d10e      	bne.n	8015a4c <HAL_ADC_Init+0x130>
 8015a2e:	4868      	ldr	r0, [pc, #416]	; (8015bd0 <HAL_ADC_Init+0x2b4>)
 8015a30:	f7ff ff26 	bl	8015880 <LL_ADC_IsEnabled>
 8015a34:	4604      	mov	r4, r0
 8015a36:	4867      	ldr	r0, [pc, #412]	; (8015bd4 <HAL_ADC_Init+0x2b8>)
 8015a38:	f7ff ff22 	bl	8015880 <LL_ADC_IsEnabled>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	4323      	orrs	r3, r4
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	bf0c      	ite	eq
 8015a44:	2301      	moveq	r3, #1
 8015a46:	2300      	movne	r3, #0
 8015a48:	b2db      	uxtb	r3, r3
 8015a4a:	e008      	b.n	8015a5e <HAL_ADC_Init+0x142>
 8015a4c:	4862      	ldr	r0, [pc, #392]	; (8015bd8 <HAL_ADC_Init+0x2bc>)
 8015a4e:	f7ff ff17 	bl	8015880 <LL_ADC_IsEnabled>
 8015a52:	4603      	mov	r3, r0
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	bf0c      	ite	eq
 8015a58:	2301      	moveq	r3, #1
 8015a5a:	2300      	movne	r3, #0
 8015a5c:	b2db      	uxtb	r3, r3
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d012      	beq.n	8015a88 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	4a5a      	ldr	r2, [pc, #360]	; (8015bd0 <HAL_ADC_Init+0x2b4>)
 8015a68:	4293      	cmp	r3, r2
 8015a6a:	d004      	beq.n	8015a76 <HAL_ADC_Init+0x15a>
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	4a58      	ldr	r2, [pc, #352]	; (8015bd4 <HAL_ADC_Init+0x2b8>)
 8015a72:	4293      	cmp	r3, r2
 8015a74:	d101      	bne.n	8015a7a <HAL_ADC_Init+0x15e>
 8015a76:	4a59      	ldr	r2, [pc, #356]	; (8015bdc <HAL_ADC_Init+0x2c0>)
 8015a78:	e000      	b.n	8015a7c <HAL_ADC_Init+0x160>
 8015a7a:	4a59      	ldr	r2, [pc, #356]	; (8015be0 <HAL_ADC_Init+0x2c4>)
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	685b      	ldr	r3, [r3, #4]
 8015a80:	4619      	mov	r1, r3
 8015a82:	4610      	mov	r0, r2
 8015a84:	f7ff fc5e 	bl	8015344 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	4a52      	ldr	r2, [pc, #328]	; (8015bd8 <HAL_ADC_Init+0x2bc>)
 8015a8e:	4293      	cmp	r3, r2
 8015a90:	d129      	bne.n	8015ae6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	7e5b      	ldrb	r3, [r3, #25]
 8015a96:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015a9c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8015aa2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	689b      	ldr	r3, [r3, #8]
 8015aa8:	2b08      	cmp	r3, #8
 8015aaa:	d013      	beq.n	8015ad4 <HAL_ADC_Init+0x1b8>
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	689b      	ldr	r3, [r3, #8]
 8015ab0:	2b0c      	cmp	r3, #12
 8015ab2:	d00d      	beq.n	8015ad0 <HAL_ADC_Init+0x1b4>
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	689b      	ldr	r3, [r3, #8]
 8015ab8:	2b1c      	cmp	r3, #28
 8015aba:	d007      	beq.n	8015acc <HAL_ADC_Init+0x1b0>
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	689b      	ldr	r3, [r3, #8]
 8015ac0:	2b18      	cmp	r3, #24
 8015ac2:	d101      	bne.n	8015ac8 <HAL_ADC_Init+0x1ac>
 8015ac4:	2318      	movs	r3, #24
 8015ac6:	e006      	b.n	8015ad6 <HAL_ADC_Init+0x1ba>
 8015ac8:	2300      	movs	r3, #0
 8015aca:	e004      	b.n	8015ad6 <HAL_ADC_Init+0x1ba>
 8015acc:	2310      	movs	r3, #16
 8015ace:	e002      	b.n	8015ad6 <HAL_ADC_Init+0x1ba>
 8015ad0:	2308      	movs	r3, #8
 8015ad2:	e000      	b.n	8015ad6 <HAL_ADC_Init+0x1ba>
 8015ad4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8015ad6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ade:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015ae0:	4313      	orrs	r3, r2
 8015ae2:	61bb      	str	r3, [r7, #24]
 8015ae4:	e00e      	b.n	8015b04 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	7e5b      	ldrb	r3, [r3, #25]
 8015aea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015af0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8015af6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015afe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015b00:	4313      	orrs	r3, r2
 8015b02:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b0a:	2b01      	cmp	r3, #1
 8015b0c:	d106      	bne.n	8015b1c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b12:	3b01      	subs	r3, #1
 8015b14:	045b      	lsls	r3, r3, #17
 8015b16:	69ba      	ldr	r2, [r7, #24]
 8015b18:	4313      	orrs	r3, r2
 8015b1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d009      	beq.n	8015b38 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b28:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015b32:	69ba      	ldr	r2, [r7, #24]
 8015b34:	4313      	orrs	r3, r2
 8015b36:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	4a26      	ldr	r2, [pc, #152]	; (8015bd8 <HAL_ADC_Init+0x2bc>)
 8015b3e:	4293      	cmp	r3, r2
 8015b40:	d115      	bne.n	8015b6e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	68da      	ldr	r2, [r3, #12]
 8015b48:	4b26      	ldr	r3, [pc, #152]	; (8015be4 <HAL_ADC_Init+0x2c8>)
 8015b4a:	4013      	ands	r3, r2
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	6812      	ldr	r2, [r2, #0]
 8015b50:	69b9      	ldr	r1, [r7, #24]
 8015b52:	430b      	orrs	r3, r1
 8015b54:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	691b      	ldr	r3, [r3, #16]
 8015b5c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	430a      	orrs	r2, r1
 8015b6a:	611a      	str	r2, [r3, #16]
 8015b6c:	e009      	b.n	8015b82 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	68da      	ldr	r2, [r3, #12]
 8015b74:	4b1c      	ldr	r3, [pc, #112]	; (8015be8 <HAL_ADC_Init+0x2cc>)
 8015b76:	4013      	ands	r3, r2
 8015b78:	687a      	ldr	r2, [r7, #4]
 8015b7a:	6812      	ldr	r2, [r2, #0]
 8015b7c:	69b9      	ldr	r1, [r7, #24]
 8015b7e:	430b      	orrs	r3, r1
 8015b80:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7ff fea2 	bl	80158d0 <LL_ADC_REG_IsConversionOngoing>
 8015b8c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	4618      	mov	r0, r3
 8015b94:	f7ff feaf 	bl	80158f6 <LL_ADC_INJ_IsConversionOngoing>
 8015b98:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	f040 808e 	bne.w	8015cbe <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	f040 808a 	bne.w	8015cbe <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	4a0a      	ldr	r2, [pc, #40]	; (8015bd8 <HAL_ADC_Init+0x2bc>)
 8015bb0:	4293      	cmp	r3, r2
 8015bb2:	d11b      	bne.n	8015bec <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	7e1b      	ldrb	r3, [r3, #24]
 8015bb8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015bc0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8015bc2:	4313      	orrs	r3, r2
 8015bc4:	61bb      	str	r3, [r7, #24]
 8015bc6:	e018      	b.n	8015bfa <HAL_ADC_Init+0x2de>
 8015bc8:	24000004 	.word	0x24000004
 8015bcc:	053e2d63 	.word	0x053e2d63
 8015bd0:	40022000 	.word	0x40022000
 8015bd4:	40022100 	.word	0x40022100
 8015bd8:	58026000 	.word	0x58026000
 8015bdc:	40022300 	.word	0x40022300
 8015be0:	58026300 	.word	0x58026300
 8015be4:	fff04007 	.word	0xfff04007
 8015be8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	7e1b      	ldrb	r3, [r3, #24]
 8015bf0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8015bf6:	4313      	orrs	r3, r2
 8015bf8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	68da      	ldr	r2, [r3, #12]
 8015c00:	4b46      	ldr	r3, [pc, #280]	; (8015d1c <HAL_ADC_Init+0x400>)
 8015c02:	4013      	ands	r3, r2
 8015c04:	687a      	ldr	r2, [r7, #4]
 8015c06:	6812      	ldr	r2, [r2, #0]
 8015c08:	69b9      	ldr	r1, [r7, #24]
 8015c0a:	430b      	orrs	r3, r1
 8015c0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015c14:	2b01      	cmp	r3, #1
 8015c16:	d137      	bne.n	8015c88 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c1c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	4a3f      	ldr	r2, [pc, #252]	; (8015d20 <HAL_ADC_Init+0x404>)
 8015c24:	4293      	cmp	r3, r2
 8015c26:	d116      	bne.n	8015c56 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	691a      	ldr	r2, [r3, #16]
 8015c2e:	4b3d      	ldr	r3, [pc, #244]	; (8015d24 <HAL_ADC_Init+0x408>)
 8015c30:	4013      	ands	r3, r2
 8015c32:	687a      	ldr	r2, [r7, #4]
 8015c34:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8015c36:	687a      	ldr	r2, [r7, #4]
 8015c38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015c3a:	4311      	orrs	r1, r2
 8015c3c:	687a      	ldr	r2, [r7, #4]
 8015c3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015c40:	4311      	orrs	r1, r2
 8015c42:	687a      	ldr	r2, [r7, #4]
 8015c44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8015c46:	430a      	orrs	r2, r1
 8015c48:	431a      	orrs	r2, r3
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	f042 0201 	orr.w	r2, r2, #1
 8015c52:	611a      	str	r2, [r3, #16]
 8015c54:	e020      	b.n	8015c98 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	691a      	ldr	r2, [r3, #16]
 8015c5c:	4b32      	ldr	r3, [pc, #200]	; (8015d28 <HAL_ADC_Init+0x40c>)
 8015c5e:	4013      	ands	r3, r2
 8015c60:	687a      	ldr	r2, [r7, #4]
 8015c62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8015c64:	3a01      	subs	r2, #1
 8015c66:	0411      	lsls	r1, r2, #16
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015c6c:	4311      	orrs	r1, r2
 8015c6e:	687a      	ldr	r2, [r7, #4]
 8015c70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015c72:	4311      	orrs	r1, r2
 8015c74:	687a      	ldr	r2, [r7, #4]
 8015c76:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8015c78:	430a      	orrs	r2, r1
 8015c7a:	431a      	orrs	r2, r3
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	f042 0201 	orr.w	r2, r2, #1
 8015c84:	611a      	str	r2, [r3, #16]
 8015c86:	e007      	b.n	8015c98 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	691a      	ldr	r2, [r3, #16]
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	f022 0201 	bic.w	r2, r2, #1
 8015c96:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	691b      	ldr	r3, [r3, #16]
 8015c9e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	430a      	orrs	r2, r1
 8015cac:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	4a1b      	ldr	r2, [pc, #108]	; (8015d20 <HAL_ADC_Init+0x404>)
 8015cb4:	4293      	cmp	r3, r2
 8015cb6:	d002      	beq.n	8015cbe <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f001 f9b5 	bl	8017028 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	691b      	ldr	r3, [r3, #16]
 8015cc2:	2b01      	cmp	r3, #1
 8015cc4:	d10c      	bne.n	8015ce0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ccc:	f023 010f 	bic.w	r1, r3, #15
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	69db      	ldr	r3, [r3, #28]
 8015cd4:	1e5a      	subs	r2, r3, #1
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	430a      	orrs	r2, r1
 8015cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8015cde:	e007      	b.n	8015cf0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	f022 020f 	bic.w	r2, r2, #15
 8015cee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015cf4:	f023 0303 	bic.w	r3, r3, #3
 8015cf8:	f043 0201 	orr.w	r2, r3, #1
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	661a      	str	r2, [r3, #96]	; 0x60
 8015d00:	e007      	b.n	8015d12 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d06:	f043 0210 	orr.w	r2, r3, #16
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8015d0e:	2301      	movs	r3, #1
 8015d10:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8015d12:	7ffb      	ldrb	r3, [r7, #31]
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3724      	adds	r7, #36	; 0x24
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd90      	pop	{r4, r7, pc}
 8015d1c:	ffffbffc 	.word	0xffffbffc
 8015d20:	58026000 	.word	0x58026000
 8015d24:	fc00f81f 	.word	0xfc00f81f
 8015d28:	fc00f81e 	.word	0xfc00f81e

08015d2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b086      	sub	sp, #24
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	60f8      	str	r0, [r7, #12]
 8015d34:	60b9      	str	r1, [r7, #8]
 8015d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	4a60      	ldr	r2, [pc, #384]	; (8015ec0 <HAL_ADC_Start_DMA+0x194>)
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	d004      	beq.n	8015d4c <HAL_ADC_Start_DMA+0x20>
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	4a5f      	ldr	r2, [pc, #380]	; (8015ec4 <HAL_ADC_Start_DMA+0x198>)
 8015d48:	4293      	cmp	r3, r2
 8015d4a:	d101      	bne.n	8015d50 <HAL_ADC_Start_DMA+0x24>
 8015d4c:	4b5e      	ldr	r3, [pc, #376]	; (8015ec8 <HAL_ADC_Start_DMA+0x19c>)
 8015d4e:	e000      	b.n	8015d52 <HAL_ADC_Start_DMA+0x26>
 8015d50:	4b5e      	ldr	r3, [pc, #376]	; (8015ecc <HAL_ADC_Start_DMA+0x1a0>)
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7ff fd16 	bl	8015784 <LL_ADC_GetMultimode>
 8015d58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7ff fdb6 	bl	80158d0 <LL_ADC_REG_IsConversionOngoing>
 8015d64:	4603      	mov	r3, r0
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	f040 80a2 	bne.w	8015eb0 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8015d72:	2b01      	cmp	r3, #1
 8015d74:	d101      	bne.n	8015d7a <HAL_ADC_Start_DMA+0x4e>
 8015d76:	2302      	movs	r3, #2
 8015d78:	e09d      	b.n	8015eb6 <HAL_ADC_Start_DMA+0x18a>
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	2201      	movs	r2, #1
 8015d7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015d82:	693b      	ldr	r3, [r7, #16]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d006      	beq.n	8015d96 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015d88:	693b      	ldr	r3, [r7, #16]
 8015d8a:	2b05      	cmp	r3, #5
 8015d8c:	d003      	beq.n	8015d96 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8015d8e:	693b      	ldr	r3, [r7, #16]
 8015d90:	2b09      	cmp	r3, #9
 8015d92:	f040 8086 	bne.w	8015ea2 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8015d96:	68f8      	ldr	r0, [r7, #12]
 8015d98:	f001 f828 	bl	8016dec <ADC_Enable>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8015da0:	7dfb      	ldrb	r3, [r7, #23]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d178      	bne.n	8015e98 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015daa:	4b49      	ldr	r3, [pc, #292]	; (8015ed0 <HAL_ADC_Start_DMA+0x1a4>)
 8015dac:	4013      	ands	r3, r2
 8015dae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	4a42      	ldr	r2, [pc, #264]	; (8015ec4 <HAL_ADC_Start_DMA+0x198>)
 8015dbc:	4293      	cmp	r3, r2
 8015dbe:	d002      	beq.n	8015dc6 <HAL_ADC_Start_DMA+0x9a>
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	e000      	b.n	8015dc8 <HAL_ADC_Start_DMA+0x9c>
 8015dc6:	4b3e      	ldr	r3, [pc, #248]	; (8015ec0 <HAL_ADC_Start_DMA+0x194>)
 8015dc8:	68fa      	ldr	r2, [r7, #12]
 8015dca:	6812      	ldr	r2, [r2, #0]
 8015dcc:	4293      	cmp	r3, r2
 8015dce:	d002      	beq.n	8015dd6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015dd0:	693b      	ldr	r3, [r7, #16]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d105      	bne.n	8015de2 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015dda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d006      	beq.n	8015dfc <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015df2:	f023 0206 	bic.w	r2, r3, #6
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	665a      	str	r2, [r3, #100]	; 0x64
 8015dfa:	e002      	b.n	8015e02 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	2200      	movs	r2, #0
 8015e00:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e06:	4a33      	ldr	r2, [pc, #204]	; (8015ed4 <HAL_ADC_Start_DMA+0x1a8>)
 8015e08:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e0e:	4a32      	ldr	r2, [pc, #200]	; (8015ed8 <HAL_ADC_Start_DMA+0x1ac>)
 8015e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e16:	4a31      	ldr	r2, [pc, #196]	; (8015edc <HAL_ADC_Start_DMA+0x1b0>)
 8015e18:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	221c      	movs	r2, #28
 8015e20:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	2200      	movs	r2, #0
 8015e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	685a      	ldr	r2, [r3, #4]
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	f042 0210 	orr.w	r2, r2, #16
 8015e38:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	4a28      	ldr	r2, [pc, #160]	; (8015ee0 <HAL_ADC_Start_DMA+0x1b4>)
 8015e40:	4293      	cmp	r3, r2
 8015e42:	d10f      	bne.n	8015e64 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	681a      	ldr	r2, [r3, #0]
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015e4e:	005b      	lsls	r3, r3, #1
 8015e50:	4619      	mov	r1, r3
 8015e52:	4610      	mov	r0, r2
 8015e54:	f7ff fbfe 	bl	8015654 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7ff fbe9 	bl	8015634 <LL_ADC_EnableDMAReq>
 8015e62:	e007      	b.n	8015e74 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	681a      	ldr	r2, [r3, #0]
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	4610      	mov	r0, r2
 8015e70:	f7ff fbcd 	bl	801560e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	3340      	adds	r3, #64	; 0x40
 8015e7e:	4619      	mov	r1, r3
 8015e80:	68ba      	ldr	r2, [r7, #8]
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f001 ff62 	bl	8017d4c <HAL_DMA_Start_IT>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8015e8c:	68fb      	ldr	r3, [r7, #12]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7ff fd09 	bl	80158a8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8015e96:	e00d      	b.n	8015eb4 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8015ea0:	e008      	b.n	8015eb4 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8015ea2:	2301      	movs	r3, #1
 8015ea4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8015eae:	e001      	b.n	8015eb4 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8015eb0:	2302      	movs	r3, #2
 8015eb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8015eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3718      	adds	r7, #24
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}
 8015ebe:	bf00      	nop
 8015ec0:	40022000 	.word	0x40022000
 8015ec4:	40022100 	.word	0x40022100
 8015ec8:	40022300 	.word	0x40022300
 8015ecc:	58026300 	.word	0x58026300
 8015ed0:	fffff0fe 	.word	0xfffff0fe
 8015ed4:	08016f01 	.word	0x08016f01
 8015ed8:	08016fd9 	.word	0x08016fd9
 8015edc:	08016ff5 	.word	0x08016ff5
 8015ee0:	58026000 	.word	0x58026000

08015ee4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b08a      	sub	sp, #40	; 0x28
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8015eec:	2300      	movs	r3, #0
 8015eee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	685b      	ldr	r3, [r3, #4]
 8015efe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	4a87      	ldr	r2, [pc, #540]	; (8016124 <HAL_ADC_IRQHandler+0x240>)
 8015f06:	4293      	cmp	r3, r2
 8015f08:	d004      	beq.n	8015f14 <HAL_ADC_IRQHandler+0x30>
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	4a86      	ldr	r2, [pc, #536]	; (8016128 <HAL_ADC_IRQHandler+0x244>)
 8015f10:	4293      	cmp	r3, r2
 8015f12:	d101      	bne.n	8015f18 <HAL_ADC_IRQHandler+0x34>
 8015f14:	4b85      	ldr	r3, [pc, #532]	; (801612c <HAL_ADC_IRQHandler+0x248>)
 8015f16:	e000      	b.n	8015f1a <HAL_ADC_IRQHandler+0x36>
 8015f18:	4b85      	ldr	r3, [pc, #532]	; (8016130 <HAL_ADC_IRQHandler+0x24c>)
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7ff fc32 	bl	8015784 <LL_ADC_GetMultimode>
 8015f20:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8015f22:	69fb      	ldr	r3, [r7, #28]
 8015f24:	f003 0302 	and.w	r3, r3, #2
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d017      	beq.n	8015f5c <HAL_ADC_IRQHandler+0x78>
 8015f2c:	69bb      	ldr	r3, [r7, #24]
 8015f2e:	f003 0302 	and.w	r3, r3, #2
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d012      	beq.n	8015f5c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f3a:	f003 0310 	and.w	r3, r3, #16
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d105      	bne.n	8015f4e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f46:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f001 f9a6 	bl	80172a0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	2202      	movs	r2, #2
 8015f5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015f5c:	69fb      	ldr	r3, [r7, #28]
 8015f5e:	f003 0304 	and.w	r3, r3, #4
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d004      	beq.n	8015f70 <HAL_ADC_IRQHandler+0x8c>
 8015f66:	69bb      	ldr	r3, [r7, #24]
 8015f68:	f003 0304 	and.w	r3, r3, #4
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d10a      	bne.n	8015f86 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8015f70:	69fb      	ldr	r3, [r7, #28]
 8015f72:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	f000 8083 	beq.w	8016082 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8015f7c:	69bb      	ldr	r3, [r7, #24]
 8015f7e:	f003 0308 	and.w	r3, r3, #8
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d07d      	beq.n	8016082 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f8a:	f003 0310 	and.w	r3, r3, #16
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d105      	bne.n	8015f9e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7ff faf4 	bl	8015590 <LL_ADC_REG_IsTriggerSourceSWStart>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d062      	beq.n	8016074 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	4a5d      	ldr	r2, [pc, #372]	; (8016128 <HAL_ADC_IRQHandler+0x244>)
 8015fb4:	4293      	cmp	r3, r2
 8015fb6:	d002      	beq.n	8015fbe <HAL_ADC_IRQHandler+0xda>
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	e000      	b.n	8015fc0 <HAL_ADC_IRQHandler+0xdc>
 8015fbe:	4b59      	ldr	r3, [pc, #356]	; (8016124 <HAL_ADC_IRQHandler+0x240>)
 8015fc0:	687a      	ldr	r2, [r7, #4]
 8015fc2:	6812      	ldr	r2, [r2, #0]
 8015fc4:	4293      	cmp	r3, r2
 8015fc6:	d008      	beq.n	8015fda <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015fc8:	697b      	ldr	r3, [r7, #20]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d005      	beq.n	8015fda <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015fce:	697b      	ldr	r3, [r7, #20]
 8015fd0:	2b05      	cmp	r3, #5
 8015fd2:	d002      	beq.n	8015fda <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8015fd4:	697b      	ldr	r3, [r7, #20]
 8015fd6:	2b09      	cmp	r3, #9
 8015fd8:	d104      	bne.n	8015fe4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	68db      	ldr	r3, [r3, #12]
 8015fe0:	623b      	str	r3, [r7, #32]
 8015fe2:	e00c      	b.n	8015ffe <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	4a4f      	ldr	r2, [pc, #316]	; (8016128 <HAL_ADC_IRQHandler+0x244>)
 8015fea:	4293      	cmp	r3, r2
 8015fec:	d002      	beq.n	8015ff4 <HAL_ADC_IRQHandler+0x110>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	e000      	b.n	8015ff6 <HAL_ADC_IRQHandler+0x112>
 8015ff4:	4b4b      	ldr	r3, [pc, #300]	; (8016124 <HAL_ADC_IRQHandler+0x240>)
 8015ff6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	68db      	ldr	r3, [r3, #12]
 8015ffc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8015ffe:	6a3b      	ldr	r3, [r7, #32]
 8016000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016004:	2b00      	cmp	r3, #0
 8016006:	d135      	bne.n	8016074 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	f003 0308 	and.w	r3, r3, #8
 8016012:	2b08      	cmp	r3, #8
 8016014:	d12e      	bne.n	8016074 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	4618      	mov	r0, r3
 801601c:	f7ff fc58 	bl	80158d0 <LL_ADC_REG_IsConversionOngoing>
 8016020:	4603      	mov	r3, r0
 8016022:	2b00      	cmp	r3, #0
 8016024:	d11a      	bne.n	801605c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	685a      	ldr	r2, [r3, #4]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	f022 020c 	bic.w	r2, r2, #12
 8016034:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801603a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801604a:	2b00      	cmp	r3, #0
 801604c:	d112      	bne.n	8016074 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016052:	f043 0201 	orr.w	r2, r3, #1
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	661a      	str	r2, [r3, #96]	; 0x60
 801605a:	e00b      	b.n	8016074 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016060:	f043 0210 	orr.w	r2, r3, #16
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801606c:	f043 0201 	orr.w	r2, r3, #1
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f7f7 fa82 	bl	800d57e <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	220c      	movs	r2, #12
 8016080:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8016082:	69fb      	ldr	r3, [r7, #28]
 8016084:	f003 0320 	and.w	r3, r3, #32
 8016088:	2b00      	cmp	r3, #0
 801608a:	d004      	beq.n	8016096 <HAL_ADC_IRQHandler+0x1b2>
 801608c:	69bb      	ldr	r3, [r7, #24]
 801608e:	f003 0320 	and.w	r3, r3, #32
 8016092:	2b00      	cmp	r3, #0
 8016094:	d10b      	bne.n	80160ae <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8016096:	69fb      	ldr	r3, [r7, #28]
 8016098:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801609c:	2b00      	cmp	r3, #0
 801609e:	f000 80a0 	beq.w	80161e2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80160a2:	69bb      	ldr	r3, [r7, #24]
 80160a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	f000 809a 	beq.w	80161e2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160b2:	f003 0310 	and.w	r3, r3, #16
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d105      	bne.n	80160c6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	4618      	mov	r0, r3
 80160cc:	f7ff fadc 	bl	8015688 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80160d0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7ff fa5a 	bl	8015590 <LL_ADC_REG_IsTriggerSourceSWStart>
 80160dc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	4a11      	ldr	r2, [pc, #68]	; (8016128 <HAL_ADC_IRQHandler+0x244>)
 80160e4:	4293      	cmp	r3, r2
 80160e6:	d002      	beq.n	80160ee <HAL_ADC_IRQHandler+0x20a>
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	e000      	b.n	80160f0 <HAL_ADC_IRQHandler+0x20c>
 80160ee:	4b0d      	ldr	r3, [pc, #52]	; (8016124 <HAL_ADC_IRQHandler+0x240>)
 80160f0:	687a      	ldr	r2, [r7, #4]
 80160f2:	6812      	ldr	r2, [r2, #0]
 80160f4:	4293      	cmp	r3, r2
 80160f6:	d008      	beq.n	801610a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80160f8:	697b      	ldr	r3, [r7, #20]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d005      	beq.n	801610a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80160fe:	697b      	ldr	r3, [r7, #20]
 8016100:	2b06      	cmp	r3, #6
 8016102:	d002      	beq.n	801610a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8016104:	697b      	ldr	r3, [r7, #20]
 8016106:	2b07      	cmp	r3, #7
 8016108:	d104      	bne.n	8016114 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	68db      	ldr	r3, [r3, #12]
 8016110:	623b      	str	r3, [r7, #32]
 8016112:	e014      	b.n	801613e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	4a03      	ldr	r2, [pc, #12]	; (8016128 <HAL_ADC_IRQHandler+0x244>)
 801611a:	4293      	cmp	r3, r2
 801611c:	d00a      	beq.n	8016134 <HAL_ADC_IRQHandler+0x250>
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	e008      	b.n	8016136 <HAL_ADC_IRQHandler+0x252>
 8016124:	40022000 	.word	0x40022000
 8016128:	40022100 	.word	0x40022100
 801612c:	40022300 	.word	0x40022300
 8016130:	58026300 	.word	0x58026300
 8016134:	4b84      	ldr	r3, [pc, #528]	; (8016348 <HAL_ADC_IRQHandler+0x464>)
 8016136:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8016138:	693b      	ldr	r3, [r7, #16]
 801613a:	68db      	ldr	r3, [r3, #12]
 801613c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d047      	beq.n	80161d4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8016144:	6a3b      	ldr	r3, [r7, #32]
 8016146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801614a:	2b00      	cmp	r3, #0
 801614c:	d007      	beq.n	801615e <HAL_ADC_IRQHandler+0x27a>
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d03f      	beq.n	80161d4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8016154:	6a3b      	ldr	r3, [r7, #32]
 8016156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 801615a:	2b00      	cmp	r3, #0
 801615c:	d13a      	bne.n	80161d4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016168:	2b40      	cmp	r3, #64	; 0x40
 801616a:	d133      	bne.n	80161d4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 801616c:	6a3b      	ldr	r3, [r7, #32]
 801616e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016172:	2b00      	cmp	r3, #0
 8016174:	d12e      	bne.n	80161d4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	4618      	mov	r0, r3
 801617c:	f7ff fbbb 	bl	80158f6 <LL_ADC_INJ_IsConversionOngoing>
 8016180:	4603      	mov	r3, r0
 8016182:	2b00      	cmp	r3, #0
 8016184:	d11a      	bne.n	80161bc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	685a      	ldr	r2, [r3, #4]
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016194:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801619a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d112      	bne.n	80161d4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161b2:	f043 0201 	orr.w	r2, r3, #1
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	661a      	str	r2, [r3, #96]	; 0x60
 80161ba:	e00b      	b.n	80161d4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161c0:	f043 0210 	orr.w	r2, r3, #16
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80161cc:	f043 0201 	orr.w	r2, r3, #1
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f001 f83b 	bl	8017250 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	2260      	movs	r2, #96	; 0x60
 80161e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80161e2:	69fb      	ldr	r3, [r7, #28]
 80161e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d011      	beq.n	8016210 <HAL_ADC_IRQHandler+0x32c>
 80161ec:	69bb      	ldr	r3, [r7, #24]
 80161ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d00c      	beq.n	8016210 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f000 f8b2 	bl	801636c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	2280      	movs	r2, #128	; 0x80
 801620e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8016210:	69fb      	ldr	r3, [r7, #28]
 8016212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016216:	2b00      	cmp	r3, #0
 8016218:	d012      	beq.n	8016240 <HAL_ADC_IRQHandler+0x35c>
 801621a:	69bb      	ldr	r3, [r7, #24]
 801621c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016220:	2b00      	cmp	r3, #0
 8016222:	d00d      	beq.n	8016240 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016228:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f001 f821 	bl	8017278 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801623e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8016240:	69fb      	ldr	r3, [r7, #28]
 8016242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016246:	2b00      	cmp	r3, #0
 8016248:	d012      	beq.n	8016270 <HAL_ADC_IRQHandler+0x38c>
 801624a:	69bb      	ldr	r3, [r7, #24]
 801624c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016250:	2b00      	cmp	r3, #0
 8016252:	d00d      	beq.n	8016270 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016258:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f001 f813 	bl	801728c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801626e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8016270:	69fb      	ldr	r3, [r7, #28]
 8016272:	f003 0310 	and.w	r3, r3, #16
 8016276:	2b00      	cmp	r3, #0
 8016278:	d043      	beq.n	8016302 <HAL_ADC_IRQHandler+0x41e>
 801627a:	69bb      	ldr	r3, [r7, #24]
 801627c:	f003 0310 	and.w	r3, r3, #16
 8016280:	2b00      	cmp	r3, #0
 8016282:	d03e      	beq.n	8016302 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016288:	2b00      	cmp	r3, #0
 801628a:	d102      	bne.n	8016292 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 801628c:	2301      	movs	r3, #1
 801628e:	627b      	str	r3, [r7, #36]	; 0x24
 8016290:	e021      	b.n	80162d6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d015      	beq.n	80162c4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	4a2a      	ldr	r2, [pc, #168]	; (8016348 <HAL_ADC_IRQHandler+0x464>)
 801629e:	4293      	cmp	r3, r2
 80162a0:	d004      	beq.n	80162ac <HAL_ADC_IRQHandler+0x3c8>
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	4a29      	ldr	r2, [pc, #164]	; (801634c <HAL_ADC_IRQHandler+0x468>)
 80162a8:	4293      	cmp	r3, r2
 80162aa:	d101      	bne.n	80162b0 <HAL_ADC_IRQHandler+0x3cc>
 80162ac:	4b28      	ldr	r3, [pc, #160]	; (8016350 <HAL_ADC_IRQHandler+0x46c>)
 80162ae:	e000      	b.n	80162b2 <HAL_ADC_IRQHandler+0x3ce>
 80162b0:	4b28      	ldr	r3, [pc, #160]	; (8016354 <HAL_ADC_IRQHandler+0x470>)
 80162b2:	4618      	mov	r0, r3
 80162b4:	f7ff fa74 	bl	80157a0 <LL_ADC_GetMultiDMATransfer>
 80162b8:	4603      	mov	r3, r0
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d00b      	beq.n	80162d6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80162be:	2301      	movs	r3, #1
 80162c0:	627b      	str	r3, [r7, #36]	; 0x24
 80162c2:	e008      	b.n	80162d6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	68db      	ldr	r3, [r3, #12]
 80162ca:	f003 0303 	and.w	r3, r3, #3
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d001      	beq.n	80162d6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80162d2:	2301      	movs	r3, #1
 80162d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80162d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d8:	2b01      	cmp	r3, #1
 80162da:	d10e      	bne.n	80162fa <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80162ec:	f043 0202 	orr.w	r2, r3, #2
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f000 f843 	bl	8016380 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	2210      	movs	r2, #16
 8016300:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8016302:	69fb      	ldr	r3, [r7, #28]
 8016304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016308:	2b00      	cmp	r3, #0
 801630a:	d018      	beq.n	801633e <HAL_ADC_IRQHandler+0x45a>
 801630c:	69bb      	ldr	r3, [r7, #24]
 801630e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016312:	2b00      	cmp	r3, #0
 8016314:	d013      	beq.n	801633e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801631a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016326:	f043 0208 	orr.w	r2, r3, #8
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016336:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f000 ff93 	bl	8017264 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801633e:	bf00      	nop
 8016340:	3728      	adds	r7, #40	; 0x28
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	40022000 	.word	0x40022000
 801634c:	40022100 	.word	0x40022100
 8016350:	40022300 	.word	0x40022300
 8016354:	58026300 	.word	0x58026300

08016358 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8016358:	b480      	push	{r7}
 801635a:	b083      	sub	sp, #12
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8016360:	bf00      	nop
 8016362:	370c      	adds	r7, #12
 8016364:	46bd      	mov	sp, r7
 8016366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636a:	4770      	bx	lr

0801636c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 801636c:	b480      	push	{r7}
 801636e:	b083      	sub	sp, #12
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8016374:	bf00      	nop
 8016376:	370c      	adds	r7, #12
 8016378:	46bd      	mov	sp, r7
 801637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637e:	4770      	bx	lr

08016380 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8016380:	b480      	push	{r7}
 8016382:	b083      	sub	sp, #12
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8016388:	bf00      	nop
 801638a:	370c      	adds	r7, #12
 801638c:	46bd      	mov	sp, r7
 801638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016392:	4770      	bx	lr

08016394 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8016394:	b590      	push	{r4, r7, lr}
 8016396:	b0b9      	sub	sp, #228	; 0xe4
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
 801639c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801639e:	2300      	movs	r3, #0
 80163a0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80163a4:	2300      	movs	r3, #0
 80163a6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80163ae:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	68db      	ldr	r3, [r3, #12]
 80163b4:	4aa9      	ldr	r2, [pc, #676]	; (801665c <HAL_ADC_ConfigChannel+0x2c8>)
 80163b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80163be:	2b01      	cmp	r3, #1
 80163c0:	d102      	bne.n	80163c8 <HAL_ADC_ConfigChannel+0x34>
 80163c2:	2302      	movs	r3, #2
 80163c4:	f000 bcfa 	b.w	8016dbc <HAL_ADC_ConfigChannel+0xa28>
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	2201      	movs	r2, #1
 80163cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7ff fa7b 	bl	80158d0 <LL_ADC_REG_IsConversionOngoing>
 80163da:	4603      	mov	r3, r0
 80163dc:	2b00      	cmp	r3, #0
 80163de:	f040 84de 	bne.w	8016d9e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	4a9e      	ldr	r2, [pc, #632]	; (8016660 <HAL_ADC_ConfigChannel+0x2cc>)
 80163e8:	4293      	cmp	r3, r2
 80163ea:	d033      	beq.n	8016454 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80163ec:	683b      	ldr	r3, [r7, #0]
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d108      	bne.n	801640a <HAL_ADC_ConfigChannel+0x76>
 80163f8:	683b      	ldr	r3, [r7, #0]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	0e9b      	lsrs	r3, r3, #26
 80163fe:	f003 031f 	and.w	r3, r3, #31
 8016402:	2201      	movs	r2, #1
 8016404:	fa02 f303 	lsl.w	r3, r2, r3
 8016408:	e01d      	b.n	8016446 <HAL_ADC_ConfigChannel+0xb2>
 801640a:	683b      	ldr	r3, [r7, #0]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016416:	fa93 f3a3 	rbit	r3, r3
 801641a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801641e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016422:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8016426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801642a:	2b00      	cmp	r3, #0
 801642c:	d101      	bne.n	8016432 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 801642e:	2320      	movs	r3, #32
 8016430:	e004      	b.n	801643c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8016432:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016436:	fab3 f383 	clz	r3, r3
 801643a:	b2db      	uxtb	r3, r3
 801643c:	f003 031f 	and.w	r3, r3, #31
 8016440:	2201      	movs	r2, #1
 8016442:	fa02 f303 	lsl.w	r3, r2, r3
 8016446:	687a      	ldr	r2, [r7, #4]
 8016448:	6812      	ldr	r2, [r2, #0]
 801644a:	69d1      	ldr	r1, [r2, #28]
 801644c:	687a      	ldr	r2, [r7, #4]
 801644e:	6812      	ldr	r2, [r2, #0]
 8016450:	430b      	orrs	r3, r1
 8016452:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6818      	ldr	r0, [r3, #0]
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	6859      	ldr	r1, [r3, #4]
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	461a      	mov	r2, r3
 8016462:	f7ff f8a8 	bl	80155b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	4618      	mov	r0, r3
 801646c:	f7ff fa30 	bl	80158d0 <LL_ADC_REG_IsConversionOngoing>
 8016470:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	4618      	mov	r0, r3
 801647a:	f7ff fa3c 	bl	80158f6 <LL_ADC_INJ_IsConversionOngoing>
 801647e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8016482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016486:	2b00      	cmp	r3, #0
 8016488:	f040 8270 	bne.w	801696c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801648c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016490:	2b00      	cmp	r3, #0
 8016492:	f040 826b 	bne.w	801696c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	6818      	ldr	r0, [r3, #0]
 801649a:	683b      	ldr	r3, [r7, #0]
 801649c:	6819      	ldr	r1, [r3, #0]
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	689b      	ldr	r3, [r3, #8]
 80164a2:	461a      	mov	r2, r3
 80164a4:	f7ff f903 	bl	80156ae <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	4a6c      	ldr	r2, [pc, #432]	; (8016660 <HAL_ADC_ConfigChannel+0x2cc>)
 80164ae:	4293      	cmp	r3, r2
 80164b0:	d10d      	bne.n	80164ce <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80164b2:	683b      	ldr	r3, [r7, #0]
 80164b4:	695a      	ldr	r2, [r3, #20]
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	68db      	ldr	r3, [r3, #12]
 80164bc:	08db      	lsrs	r3, r3, #3
 80164be:	f003 0303 	and.w	r3, r3, #3
 80164c2:	005b      	lsls	r3, r3, #1
 80164c4:	fa02 f303 	lsl.w	r3, r2, r3
 80164c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80164cc:	e032      	b.n	8016534 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80164ce:	4b65      	ldr	r3, [pc, #404]	; (8016664 <HAL_ADC_ConfigChannel+0x2d0>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80164d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80164da:	d10b      	bne.n	80164f4 <HAL_ADC_ConfigChannel+0x160>
 80164dc:	683b      	ldr	r3, [r7, #0]
 80164de:	695a      	ldr	r2, [r3, #20]
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	68db      	ldr	r3, [r3, #12]
 80164e6:	089b      	lsrs	r3, r3, #2
 80164e8:	f003 0307 	and.w	r3, r3, #7
 80164ec:	005b      	lsls	r3, r3, #1
 80164ee:	fa02 f303 	lsl.w	r3, r2, r3
 80164f2:	e01d      	b.n	8016530 <HAL_ADC_ConfigChannel+0x19c>
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	68db      	ldr	r3, [r3, #12]
 80164fa:	f003 0310 	and.w	r3, r3, #16
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d10b      	bne.n	801651a <HAL_ADC_ConfigChannel+0x186>
 8016502:	683b      	ldr	r3, [r7, #0]
 8016504:	695a      	ldr	r2, [r3, #20]
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	68db      	ldr	r3, [r3, #12]
 801650c:	089b      	lsrs	r3, r3, #2
 801650e:	f003 0307 	and.w	r3, r3, #7
 8016512:	005b      	lsls	r3, r3, #1
 8016514:	fa02 f303 	lsl.w	r3, r2, r3
 8016518:	e00a      	b.n	8016530 <HAL_ADC_ConfigChannel+0x19c>
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	695a      	ldr	r2, [r3, #20]
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	68db      	ldr	r3, [r3, #12]
 8016524:	089b      	lsrs	r3, r3, #2
 8016526:	f003 0304 	and.w	r3, r3, #4
 801652a:	005b      	lsls	r3, r3, #1
 801652c:	fa02 f303 	lsl.w	r3, r2, r3
 8016530:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	691b      	ldr	r3, [r3, #16]
 8016538:	2b04      	cmp	r3, #4
 801653a:	d048      	beq.n	80165ce <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	6818      	ldr	r0, [r3, #0]
 8016540:	683b      	ldr	r3, [r7, #0]
 8016542:	6919      	ldr	r1, [r3, #16]
 8016544:	683b      	ldr	r3, [r7, #0]
 8016546:	681a      	ldr	r2, [r3, #0]
 8016548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801654c:	f7fe ff2e 	bl	80153ac <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	4a42      	ldr	r2, [pc, #264]	; (8016660 <HAL_ADC_ConfigChannel+0x2cc>)
 8016556:	4293      	cmp	r3, r2
 8016558:	d119      	bne.n	801658e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	6818      	ldr	r0, [r3, #0]
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	6919      	ldr	r1, [r3, #16]
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	69db      	ldr	r3, [r3, #28]
 8016566:	461a      	mov	r2, r3
 8016568:	f7fe ffc6 	bl	80154f8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	6818      	ldr	r0, [r3, #0]
 8016570:	683b      	ldr	r3, [r7, #0]
 8016572:	6919      	ldr	r1, [r3, #16]
 8016574:	683b      	ldr	r3, [r7, #0]
 8016576:	f893 3020 	ldrb.w	r3, [r3, #32]
 801657a:	2b01      	cmp	r3, #1
 801657c:	d102      	bne.n	8016584 <HAL_ADC_ConfigChannel+0x1f0>
 801657e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016582:	e000      	b.n	8016586 <HAL_ADC_ConfigChannel+0x1f2>
 8016584:	2300      	movs	r3, #0
 8016586:	461a      	mov	r2, r3
 8016588:	f7fe ff94 	bl	80154b4 <LL_ADC_SetOffsetSaturation>
 801658c:	e1ee      	b.n	801696c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	6818      	ldr	r0, [r3, #0]
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	6919      	ldr	r1, [r3, #16]
 8016596:	683b      	ldr	r3, [r7, #0]
 8016598:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801659c:	2b01      	cmp	r3, #1
 801659e:	d102      	bne.n	80165a6 <HAL_ADC_ConfigChannel+0x212>
 80165a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80165a4:	e000      	b.n	80165a8 <HAL_ADC_ConfigChannel+0x214>
 80165a6:	2300      	movs	r3, #0
 80165a8:	461a      	mov	r2, r3
 80165aa:	f7fe ff61 	bl	8015470 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	6818      	ldr	r0, [r3, #0]
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	6919      	ldr	r1, [r3, #16]
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	7e1b      	ldrb	r3, [r3, #24]
 80165ba:	2b01      	cmp	r3, #1
 80165bc:	d102      	bne.n	80165c4 <HAL_ADC_ConfigChannel+0x230>
 80165be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80165c2:	e000      	b.n	80165c6 <HAL_ADC_ConfigChannel+0x232>
 80165c4:	2300      	movs	r3, #0
 80165c6:	461a      	mov	r2, r3
 80165c8:	f7fe ff38 	bl	801543c <LL_ADC_SetDataRightShift>
 80165cc:	e1ce      	b.n	801696c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	4a23      	ldr	r2, [pc, #140]	; (8016660 <HAL_ADC_ConfigChannel+0x2cc>)
 80165d4:	4293      	cmp	r3, r2
 80165d6:	f040 8181 	bne.w	80168dc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	2100      	movs	r1, #0
 80165e0:	4618      	mov	r0, r3
 80165e2:	f7fe ff15 	bl	8015410 <LL_ADC_GetOffsetChannel>
 80165e6:	4603      	mov	r3, r0
 80165e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d10a      	bne.n	8016606 <HAL_ADC_ConfigChannel+0x272>
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	2100      	movs	r1, #0
 80165f6:	4618      	mov	r0, r3
 80165f8:	f7fe ff0a 	bl	8015410 <LL_ADC_GetOffsetChannel>
 80165fc:	4603      	mov	r3, r0
 80165fe:	0e9b      	lsrs	r3, r3, #26
 8016600:	f003 021f 	and.w	r2, r3, #31
 8016604:	e01e      	b.n	8016644 <HAL_ADC_ConfigChannel+0x2b0>
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	2100      	movs	r1, #0
 801660c:	4618      	mov	r0, r3
 801660e:	f7fe feff 	bl	8015410 <LL_ADC_GetOffsetChannel>
 8016612:	4603      	mov	r3, r0
 8016614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801661c:	fa93 f3a3 	rbit	r3, r3
 8016620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8016624:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 801662c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016630:	2b00      	cmp	r3, #0
 8016632:	d101      	bne.n	8016638 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8016634:	2320      	movs	r3, #32
 8016636:	e004      	b.n	8016642 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8016638:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801663c:	fab3 f383 	clz	r3, r3
 8016640:	b2db      	uxtb	r3, r3
 8016642:	461a      	mov	r2, r3
 8016644:	683b      	ldr	r3, [r7, #0]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801664c:	2b00      	cmp	r3, #0
 801664e:	d10b      	bne.n	8016668 <HAL_ADC_ConfigChannel+0x2d4>
 8016650:	683b      	ldr	r3, [r7, #0]
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	0e9b      	lsrs	r3, r3, #26
 8016656:	f003 031f 	and.w	r3, r3, #31
 801665a:	e01e      	b.n	801669a <HAL_ADC_ConfigChannel+0x306>
 801665c:	47ff0000 	.word	0x47ff0000
 8016660:	58026000 	.word	0x58026000
 8016664:	5c001000 	.word	0x5c001000
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016674:	fa93 f3a3 	rbit	r3, r3
 8016678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 801667c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8016684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016688:	2b00      	cmp	r3, #0
 801668a:	d101      	bne.n	8016690 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 801668c:	2320      	movs	r3, #32
 801668e:	e004      	b.n	801669a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8016690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016694:	fab3 f383 	clz	r3, r3
 8016698:	b2db      	uxtb	r3, r3
 801669a:	429a      	cmp	r2, r3
 801669c:	d106      	bne.n	80166ac <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	2200      	movs	r2, #0
 80166a4:	2100      	movs	r1, #0
 80166a6:	4618      	mov	r0, r3
 80166a8:	f7fe ff48 	bl	801553c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	2101      	movs	r1, #1
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7fe feac 	bl	8015410 <LL_ADC_GetOffsetChannel>
 80166b8:	4603      	mov	r3, r0
 80166ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d10a      	bne.n	80166d8 <HAL_ADC_ConfigChannel+0x344>
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	2101      	movs	r1, #1
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7fe fea1 	bl	8015410 <LL_ADC_GetOffsetChannel>
 80166ce:	4603      	mov	r3, r0
 80166d0:	0e9b      	lsrs	r3, r3, #26
 80166d2:	f003 021f 	and.w	r2, r3, #31
 80166d6:	e01e      	b.n	8016716 <HAL_ADC_ConfigChannel+0x382>
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	2101      	movs	r1, #1
 80166de:	4618      	mov	r0, r3
 80166e0:	f7fe fe96 	bl	8015410 <LL_ADC_GetOffsetChannel>
 80166e4:	4603      	mov	r3, r0
 80166e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80166ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166ee:	fa93 f3a3 	rbit	r3, r3
 80166f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80166f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80166fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80166fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016702:	2b00      	cmp	r3, #0
 8016704:	d101      	bne.n	801670a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8016706:	2320      	movs	r3, #32
 8016708:	e004      	b.n	8016714 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 801670a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801670e:	fab3 f383 	clz	r3, r3
 8016712:	b2db      	uxtb	r3, r3
 8016714:	461a      	mov	r2, r3
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801671e:	2b00      	cmp	r3, #0
 8016720:	d105      	bne.n	801672e <HAL_ADC_ConfigChannel+0x39a>
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	0e9b      	lsrs	r3, r3, #26
 8016728:	f003 031f 	and.w	r3, r3, #31
 801672c:	e018      	b.n	8016760 <HAL_ADC_ConfigChannel+0x3cc>
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801673a:	fa93 f3a3 	rbit	r3, r3
 801673e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8016742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016746:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 801674a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801674e:	2b00      	cmp	r3, #0
 8016750:	d101      	bne.n	8016756 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8016752:	2320      	movs	r3, #32
 8016754:	e004      	b.n	8016760 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8016756:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801675a:	fab3 f383 	clz	r3, r3
 801675e:	b2db      	uxtb	r3, r3
 8016760:	429a      	cmp	r2, r3
 8016762:	d106      	bne.n	8016772 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	2200      	movs	r2, #0
 801676a:	2101      	movs	r1, #1
 801676c:	4618      	mov	r0, r3
 801676e:	f7fe fee5 	bl	801553c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	2102      	movs	r1, #2
 8016778:	4618      	mov	r0, r3
 801677a:	f7fe fe49 	bl	8015410 <LL_ADC_GetOffsetChannel>
 801677e:	4603      	mov	r3, r0
 8016780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016784:	2b00      	cmp	r3, #0
 8016786:	d10a      	bne.n	801679e <HAL_ADC_ConfigChannel+0x40a>
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	2102      	movs	r1, #2
 801678e:	4618      	mov	r0, r3
 8016790:	f7fe fe3e 	bl	8015410 <LL_ADC_GetOffsetChannel>
 8016794:	4603      	mov	r3, r0
 8016796:	0e9b      	lsrs	r3, r3, #26
 8016798:	f003 021f 	and.w	r2, r3, #31
 801679c:	e01e      	b.n	80167dc <HAL_ADC_ConfigChannel+0x448>
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	2102      	movs	r1, #2
 80167a4:	4618      	mov	r0, r3
 80167a6:	f7fe fe33 	bl	8015410 <LL_ADC_GetOffsetChannel>
 80167aa:	4603      	mov	r3, r0
 80167ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80167b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80167b4:	fa93 f3a3 	rbit	r3, r3
 80167b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80167bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80167c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80167c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d101      	bne.n	80167d0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80167cc:	2320      	movs	r3, #32
 80167ce:	e004      	b.n	80167da <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80167d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80167d4:	fab3 f383 	clz	r3, r3
 80167d8:	b2db      	uxtb	r3, r3
 80167da:	461a      	mov	r2, r3
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d105      	bne.n	80167f4 <HAL_ADC_ConfigChannel+0x460>
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	0e9b      	lsrs	r3, r3, #26
 80167ee:	f003 031f 	and.w	r3, r3, #31
 80167f2:	e014      	b.n	801681e <HAL_ADC_ConfigChannel+0x48a>
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80167fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80167fc:	fa93 f3a3 	rbit	r3, r3
 8016800:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8016802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8016808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801680c:	2b00      	cmp	r3, #0
 801680e:	d101      	bne.n	8016814 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8016810:	2320      	movs	r3, #32
 8016812:	e004      	b.n	801681e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8016814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016818:	fab3 f383 	clz	r3, r3
 801681c:	b2db      	uxtb	r3, r3
 801681e:	429a      	cmp	r2, r3
 8016820:	d106      	bne.n	8016830 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	2200      	movs	r2, #0
 8016828:	2102      	movs	r1, #2
 801682a:	4618      	mov	r0, r3
 801682c:	f7fe fe86 	bl	801553c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	2103      	movs	r1, #3
 8016836:	4618      	mov	r0, r3
 8016838:	f7fe fdea 	bl	8015410 <LL_ADC_GetOffsetChannel>
 801683c:	4603      	mov	r3, r0
 801683e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016842:	2b00      	cmp	r3, #0
 8016844:	d10a      	bne.n	801685c <HAL_ADC_ConfigChannel+0x4c8>
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	2103      	movs	r1, #3
 801684c:	4618      	mov	r0, r3
 801684e:	f7fe fddf 	bl	8015410 <LL_ADC_GetOffsetChannel>
 8016852:	4603      	mov	r3, r0
 8016854:	0e9b      	lsrs	r3, r3, #26
 8016856:	f003 021f 	and.w	r2, r3, #31
 801685a:	e017      	b.n	801688c <HAL_ADC_ConfigChannel+0x4f8>
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	2103      	movs	r1, #3
 8016862:	4618      	mov	r0, r3
 8016864:	f7fe fdd4 	bl	8015410 <LL_ADC_GetOffsetChannel>
 8016868:	4603      	mov	r3, r0
 801686a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801686c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801686e:	fa93 f3a3 	rbit	r3, r3
 8016872:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8016874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016876:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8016878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801687a:	2b00      	cmp	r3, #0
 801687c:	d101      	bne.n	8016882 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 801687e:	2320      	movs	r3, #32
 8016880:	e003      	b.n	801688a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8016882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016884:	fab3 f383 	clz	r3, r3
 8016888:	b2db      	uxtb	r3, r3
 801688a:	461a      	mov	r2, r3
 801688c:	683b      	ldr	r3, [r7, #0]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016894:	2b00      	cmp	r3, #0
 8016896:	d105      	bne.n	80168a4 <HAL_ADC_ConfigChannel+0x510>
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	0e9b      	lsrs	r3, r3, #26
 801689e:	f003 031f 	and.w	r3, r3, #31
 80168a2:	e011      	b.n	80168c8 <HAL_ADC_ConfigChannel+0x534>
 80168a4:	683b      	ldr	r3, [r7, #0]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80168aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80168ac:	fa93 f3a3 	rbit	r3, r3
 80168b0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80168b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80168b4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80168b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d101      	bne.n	80168c0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80168bc:	2320      	movs	r3, #32
 80168be:	e003      	b.n	80168c8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80168c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80168c2:	fab3 f383 	clz	r3, r3
 80168c6:	b2db      	uxtb	r3, r3
 80168c8:	429a      	cmp	r2, r3
 80168ca:	d14f      	bne.n	801696c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	2200      	movs	r2, #0
 80168d2:	2103      	movs	r1, #3
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7fe fe31 	bl	801553c <LL_ADC_SetOffsetState>
 80168da:	e047      	b.n	801696c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80168e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	069b      	lsls	r3, r3, #26
 80168ec:	429a      	cmp	r2, r3
 80168ee:	d107      	bne.n	8016900 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80168fe:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	069b      	lsls	r3, r3, #26
 8016910:	429a      	cmp	r2, r3
 8016912:	d107      	bne.n	8016924 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016922:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801692a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	069b      	lsls	r3, r3, #26
 8016934:	429a      	cmp	r2, r3
 8016936:	d107      	bne.n	8016948 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016946:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801694e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016952:	683b      	ldr	r3, [r7, #0]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	069b      	lsls	r3, r3, #26
 8016958:	429a      	cmp	r2, r3
 801695a:	d107      	bne.n	801696c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801696a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	4618      	mov	r0, r3
 8016972:	f7fe ff85 	bl	8015880 <LL_ADC_IsEnabled>
 8016976:	4603      	mov	r3, r0
 8016978:	2b00      	cmp	r3, #0
 801697a:	f040 8219 	bne.w	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	6818      	ldr	r0, [r3, #0]
 8016982:	683b      	ldr	r3, [r7, #0]
 8016984:	6819      	ldr	r1, [r3, #0]
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	68db      	ldr	r3, [r3, #12]
 801698a:	461a      	mov	r2, r3
 801698c:	f7fe feba 	bl	8015704 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8016990:	683b      	ldr	r3, [r7, #0]
 8016992:	68db      	ldr	r3, [r3, #12]
 8016994:	4aa1      	ldr	r2, [pc, #644]	; (8016c1c <HAL_ADC_ConfigChannel+0x888>)
 8016996:	4293      	cmp	r3, r2
 8016998:	f040 812e 	bne.w	8016bf8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80169a0:	683b      	ldr	r3, [r7, #0]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d10b      	bne.n	80169c4 <HAL_ADC_ConfigChannel+0x630>
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	0e9b      	lsrs	r3, r3, #26
 80169b2:	3301      	adds	r3, #1
 80169b4:	f003 031f 	and.w	r3, r3, #31
 80169b8:	2b09      	cmp	r3, #9
 80169ba:	bf94      	ite	ls
 80169bc:	2301      	movls	r3, #1
 80169be:	2300      	movhi	r3, #0
 80169c0:	b2db      	uxtb	r3, r3
 80169c2:	e019      	b.n	80169f8 <HAL_ADC_ConfigChannel+0x664>
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80169ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80169cc:	fa93 f3a3 	rbit	r3, r3
 80169d0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80169d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80169d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d101      	bne.n	80169e0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80169dc:	2320      	movs	r3, #32
 80169de:	e003      	b.n	80169e8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80169e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169e2:	fab3 f383 	clz	r3, r3
 80169e6:	b2db      	uxtb	r3, r3
 80169e8:	3301      	adds	r3, #1
 80169ea:	f003 031f 	and.w	r3, r3, #31
 80169ee:	2b09      	cmp	r3, #9
 80169f0:	bf94      	ite	ls
 80169f2:	2301      	movls	r3, #1
 80169f4:	2300      	movhi	r3, #0
 80169f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d079      	beq.n	8016af0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80169fc:	683b      	ldr	r3, [r7, #0]
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d107      	bne.n	8016a18 <HAL_ADC_ConfigChannel+0x684>
 8016a08:	683b      	ldr	r3, [r7, #0]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	0e9b      	lsrs	r3, r3, #26
 8016a0e:	3301      	adds	r3, #1
 8016a10:	069b      	lsls	r3, r3, #26
 8016a12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016a16:	e015      	b.n	8016a44 <HAL_ADC_ConfigChannel+0x6b0>
 8016a18:	683b      	ldr	r3, [r7, #0]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016a20:	fa93 f3a3 	rbit	r3, r3
 8016a24:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8016a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a28:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8016a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d101      	bne.n	8016a34 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8016a30:	2320      	movs	r3, #32
 8016a32:	e003      	b.n	8016a3c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8016a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a36:	fab3 f383 	clz	r3, r3
 8016a3a:	b2db      	uxtb	r3, r3
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	069b      	lsls	r3, r3, #26
 8016a40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016a44:	683b      	ldr	r3, [r7, #0]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d109      	bne.n	8016a64 <HAL_ADC_ConfigChannel+0x6d0>
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	0e9b      	lsrs	r3, r3, #26
 8016a56:	3301      	adds	r3, #1
 8016a58:	f003 031f 	and.w	r3, r3, #31
 8016a5c:	2101      	movs	r1, #1
 8016a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8016a62:	e017      	b.n	8016a94 <HAL_ADC_ConfigChannel+0x700>
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a6c:	fa93 f3a3 	rbit	r3, r3
 8016a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8016a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a74:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8016a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d101      	bne.n	8016a80 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8016a7c:	2320      	movs	r3, #32
 8016a7e:	e003      	b.n	8016a88 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8016a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a82:	fab3 f383 	clz	r3, r3
 8016a86:	b2db      	uxtb	r3, r3
 8016a88:	3301      	adds	r3, #1
 8016a8a:	f003 031f 	and.w	r3, r3, #31
 8016a8e:	2101      	movs	r1, #1
 8016a90:	fa01 f303 	lsl.w	r3, r1, r3
 8016a94:	ea42 0103 	orr.w	r1, r2, r3
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d10a      	bne.n	8016aba <HAL_ADC_ConfigChannel+0x726>
 8016aa4:	683b      	ldr	r3, [r7, #0]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	0e9b      	lsrs	r3, r3, #26
 8016aaa:	3301      	adds	r3, #1
 8016aac:	f003 021f 	and.w	r2, r3, #31
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	005b      	lsls	r3, r3, #1
 8016ab4:	4413      	add	r3, r2
 8016ab6:	051b      	lsls	r3, r3, #20
 8016ab8:	e018      	b.n	8016aec <HAL_ADC_ConfigChannel+0x758>
 8016aba:	683b      	ldr	r3, [r7, #0]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ac2:	fa93 f3a3 	rbit	r3, r3
 8016ac6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8016ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8016acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d101      	bne.n	8016ad6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8016ad2:	2320      	movs	r3, #32
 8016ad4:	e003      	b.n	8016ade <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8016ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ad8:	fab3 f383 	clz	r3, r3
 8016adc:	b2db      	uxtb	r3, r3
 8016ade:	3301      	adds	r3, #1
 8016ae0:	f003 021f 	and.w	r2, r3, #31
 8016ae4:	4613      	mov	r3, r2
 8016ae6:	005b      	lsls	r3, r3, #1
 8016ae8:	4413      	add	r3, r2
 8016aea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016aec:	430b      	orrs	r3, r1
 8016aee:	e07e      	b.n	8016bee <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d107      	bne.n	8016b0c <HAL_ADC_ConfigChannel+0x778>
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	0e9b      	lsrs	r3, r3, #26
 8016b02:	3301      	adds	r3, #1
 8016b04:	069b      	lsls	r3, r3, #26
 8016b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016b0a:	e015      	b.n	8016b38 <HAL_ADC_ConfigChannel+0x7a4>
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b14:	fa93 f3a3 	rbit	r3, r3
 8016b18:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8016b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8016b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d101      	bne.n	8016b28 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8016b24:	2320      	movs	r3, #32
 8016b26:	e003      	b.n	8016b30 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8016b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b2a:	fab3 f383 	clz	r3, r3
 8016b2e:	b2db      	uxtb	r3, r3
 8016b30:	3301      	adds	r3, #1
 8016b32:	069b      	lsls	r3, r3, #26
 8016b34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d109      	bne.n	8016b58 <HAL_ADC_ConfigChannel+0x7c4>
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	0e9b      	lsrs	r3, r3, #26
 8016b4a:	3301      	adds	r3, #1
 8016b4c:	f003 031f 	and.w	r3, r3, #31
 8016b50:	2101      	movs	r1, #1
 8016b52:	fa01 f303 	lsl.w	r3, r1, r3
 8016b56:	e017      	b.n	8016b88 <HAL_ADC_ConfigChannel+0x7f4>
 8016b58:	683b      	ldr	r3, [r7, #0]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016b5e:	69fb      	ldr	r3, [r7, #28]
 8016b60:	fa93 f3a3 	rbit	r3, r3
 8016b64:	61bb      	str	r3, [r7, #24]
  return result;
 8016b66:	69bb      	ldr	r3, [r7, #24]
 8016b68:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8016b6a:	6a3b      	ldr	r3, [r7, #32]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d101      	bne.n	8016b74 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8016b70:	2320      	movs	r3, #32
 8016b72:	e003      	b.n	8016b7c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8016b74:	6a3b      	ldr	r3, [r7, #32]
 8016b76:	fab3 f383 	clz	r3, r3
 8016b7a:	b2db      	uxtb	r3, r3
 8016b7c:	3301      	adds	r3, #1
 8016b7e:	f003 031f 	and.w	r3, r3, #31
 8016b82:	2101      	movs	r1, #1
 8016b84:	fa01 f303 	lsl.w	r3, r1, r3
 8016b88:	ea42 0103 	orr.w	r1, r2, r3
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d10d      	bne.n	8016bb4 <HAL_ADC_ConfigChannel+0x820>
 8016b98:	683b      	ldr	r3, [r7, #0]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	0e9b      	lsrs	r3, r3, #26
 8016b9e:	3301      	adds	r3, #1
 8016ba0:	f003 021f 	and.w	r2, r3, #31
 8016ba4:	4613      	mov	r3, r2
 8016ba6:	005b      	lsls	r3, r3, #1
 8016ba8:	4413      	add	r3, r2
 8016baa:	3b1e      	subs	r3, #30
 8016bac:	051b      	lsls	r3, r3, #20
 8016bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016bb2:	e01b      	b.n	8016bec <HAL_ADC_ConfigChannel+0x858>
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016bba:	693b      	ldr	r3, [r7, #16]
 8016bbc:	fa93 f3a3 	rbit	r3, r3
 8016bc0:	60fb      	str	r3, [r7, #12]
  return result;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8016bc6:	697b      	ldr	r3, [r7, #20]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d101      	bne.n	8016bd0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8016bcc:	2320      	movs	r3, #32
 8016bce:	e003      	b.n	8016bd8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8016bd0:	697b      	ldr	r3, [r7, #20]
 8016bd2:	fab3 f383 	clz	r3, r3
 8016bd6:	b2db      	uxtb	r3, r3
 8016bd8:	3301      	adds	r3, #1
 8016bda:	f003 021f 	and.w	r2, r3, #31
 8016bde:	4613      	mov	r3, r2
 8016be0:	005b      	lsls	r3, r3, #1
 8016be2:	4413      	add	r3, r2
 8016be4:	3b1e      	subs	r3, #30
 8016be6:	051b      	lsls	r3, r3, #20
 8016be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016bec:	430b      	orrs	r3, r1
 8016bee:	683a      	ldr	r2, [r7, #0]
 8016bf0:	6892      	ldr	r2, [r2, #8]
 8016bf2:	4619      	mov	r1, r3
 8016bf4:	f7fe fd5b 	bl	80156ae <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8016bf8:	683b      	ldr	r3, [r7, #0]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	f280 80d7 	bge.w	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	4a06      	ldr	r2, [pc, #24]	; (8016c20 <HAL_ADC_ConfigChannel+0x88c>)
 8016c08:	4293      	cmp	r3, r2
 8016c0a:	d004      	beq.n	8016c16 <HAL_ADC_ConfigChannel+0x882>
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	4a04      	ldr	r2, [pc, #16]	; (8016c24 <HAL_ADC_ConfigChannel+0x890>)
 8016c12:	4293      	cmp	r3, r2
 8016c14:	d10a      	bne.n	8016c2c <HAL_ADC_ConfigChannel+0x898>
 8016c16:	4b04      	ldr	r3, [pc, #16]	; (8016c28 <HAL_ADC_ConfigChannel+0x894>)
 8016c18:	e009      	b.n	8016c2e <HAL_ADC_ConfigChannel+0x89a>
 8016c1a:	bf00      	nop
 8016c1c:	47ff0000 	.word	0x47ff0000
 8016c20:	40022000 	.word	0x40022000
 8016c24:	40022100 	.word	0x40022100
 8016c28:	40022300 	.word	0x40022300
 8016c2c:	4b65      	ldr	r3, [pc, #404]	; (8016dc4 <HAL_ADC_ConfigChannel+0xa30>)
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7fe fbae 	bl	8015390 <LL_ADC_GetCommonPathInternalCh>
 8016c34:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	4a62      	ldr	r2, [pc, #392]	; (8016dc8 <HAL_ADC_ConfigChannel+0xa34>)
 8016c3e:	4293      	cmp	r3, r2
 8016c40:	d004      	beq.n	8016c4c <HAL_ADC_ConfigChannel+0x8b8>
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	4a61      	ldr	r2, [pc, #388]	; (8016dcc <HAL_ADC_ConfigChannel+0xa38>)
 8016c48:	4293      	cmp	r3, r2
 8016c4a:	d10e      	bne.n	8016c6a <HAL_ADC_ConfigChannel+0x8d6>
 8016c4c:	485e      	ldr	r0, [pc, #376]	; (8016dc8 <HAL_ADC_ConfigChannel+0xa34>)
 8016c4e:	f7fe fe17 	bl	8015880 <LL_ADC_IsEnabled>
 8016c52:	4604      	mov	r4, r0
 8016c54:	485d      	ldr	r0, [pc, #372]	; (8016dcc <HAL_ADC_ConfigChannel+0xa38>)
 8016c56:	f7fe fe13 	bl	8015880 <LL_ADC_IsEnabled>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	4323      	orrs	r3, r4
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	bf0c      	ite	eq
 8016c62:	2301      	moveq	r3, #1
 8016c64:	2300      	movne	r3, #0
 8016c66:	b2db      	uxtb	r3, r3
 8016c68:	e008      	b.n	8016c7c <HAL_ADC_ConfigChannel+0x8e8>
 8016c6a:	4859      	ldr	r0, [pc, #356]	; (8016dd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8016c6c:	f7fe fe08 	bl	8015880 <LL_ADC_IsEnabled>
 8016c70:	4603      	mov	r3, r0
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	bf0c      	ite	eq
 8016c76:	2301      	moveq	r3, #1
 8016c78:	2300      	movne	r3, #0
 8016c7a:	b2db      	uxtb	r3, r3
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	f000 8084 	beq.w	8016d8a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8016c82:	683b      	ldr	r3, [r7, #0]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	4a53      	ldr	r2, [pc, #332]	; (8016dd4 <HAL_ADC_ConfigChannel+0xa40>)
 8016c88:	4293      	cmp	r3, r2
 8016c8a:	d132      	bne.n	8016cf2 <HAL_ADC_ConfigChannel+0x95e>
 8016c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d12c      	bne.n	8016cf2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	4a4c      	ldr	r2, [pc, #304]	; (8016dd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8016c9e:	4293      	cmp	r3, r2
 8016ca0:	f040 8086 	bne.w	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	4a47      	ldr	r2, [pc, #284]	; (8016dc8 <HAL_ADC_ConfigChannel+0xa34>)
 8016caa:	4293      	cmp	r3, r2
 8016cac:	d004      	beq.n	8016cb8 <HAL_ADC_ConfigChannel+0x924>
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	4a46      	ldr	r2, [pc, #280]	; (8016dcc <HAL_ADC_ConfigChannel+0xa38>)
 8016cb4:	4293      	cmp	r3, r2
 8016cb6:	d101      	bne.n	8016cbc <HAL_ADC_ConfigChannel+0x928>
 8016cb8:	4a47      	ldr	r2, [pc, #284]	; (8016dd8 <HAL_ADC_ConfigChannel+0xa44>)
 8016cba:	e000      	b.n	8016cbe <HAL_ADC_ConfigChannel+0x92a>
 8016cbc:	4a41      	ldr	r2, [pc, #260]	; (8016dc4 <HAL_ADC_ConfigChannel+0xa30>)
 8016cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016cc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016cc6:	4619      	mov	r1, r3
 8016cc8:	4610      	mov	r0, r2
 8016cca:	f7fe fb4e 	bl	801536a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8016cce:	4b43      	ldr	r3, [pc, #268]	; (8016ddc <HAL_ADC_ConfigChannel+0xa48>)
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	099b      	lsrs	r3, r3, #6
 8016cd4:	4a42      	ldr	r2, [pc, #264]	; (8016de0 <HAL_ADC_ConfigChannel+0xa4c>)
 8016cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8016cda:	099b      	lsrs	r3, r3, #6
 8016cdc:	3301      	adds	r3, #1
 8016cde:	005b      	lsls	r3, r3, #1
 8016ce0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8016ce2:	e002      	b.n	8016cea <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	3b01      	subs	r3, #1
 8016ce8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d1f9      	bne.n	8016ce4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016cf0:	e05e      	b.n	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	4a3b      	ldr	r2, [pc, #236]	; (8016de4 <HAL_ADC_ConfigChannel+0xa50>)
 8016cf8:	4293      	cmp	r3, r2
 8016cfa:	d120      	bne.n	8016d3e <HAL_ADC_ConfigChannel+0x9aa>
 8016cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d11a      	bne.n	8016d3e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	4a30      	ldr	r2, [pc, #192]	; (8016dd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8016d0e:	4293      	cmp	r3, r2
 8016d10:	d14e      	bne.n	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	4a2c      	ldr	r2, [pc, #176]	; (8016dc8 <HAL_ADC_ConfigChannel+0xa34>)
 8016d18:	4293      	cmp	r3, r2
 8016d1a:	d004      	beq.n	8016d26 <HAL_ADC_ConfigChannel+0x992>
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	4a2a      	ldr	r2, [pc, #168]	; (8016dcc <HAL_ADC_ConfigChannel+0xa38>)
 8016d22:	4293      	cmp	r3, r2
 8016d24:	d101      	bne.n	8016d2a <HAL_ADC_ConfigChannel+0x996>
 8016d26:	4a2c      	ldr	r2, [pc, #176]	; (8016dd8 <HAL_ADC_ConfigChannel+0xa44>)
 8016d28:	e000      	b.n	8016d2c <HAL_ADC_ConfigChannel+0x998>
 8016d2a:	4a26      	ldr	r2, [pc, #152]	; (8016dc4 <HAL_ADC_ConfigChannel+0xa30>)
 8016d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016d34:	4619      	mov	r1, r3
 8016d36:	4610      	mov	r0, r2
 8016d38:	f7fe fb17 	bl	801536a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016d3c:	e038      	b.n	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8016d3e:	683b      	ldr	r3, [r7, #0]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	4a29      	ldr	r2, [pc, #164]	; (8016de8 <HAL_ADC_ConfigChannel+0xa54>)
 8016d44:	4293      	cmp	r3, r2
 8016d46:	d133      	bne.n	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
 8016d48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d12d      	bne.n	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	4a1d      	ldr	r2, [pc, #116]	; (8016dd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8016d5a:	4293      	cmp	r3, r2
 8016d5c:	d128      	bne.n	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	4a19      	ldr	r2, [pc, #100]	; (8016dc8 <HAL_ADC_ConfigChannel+0xa34>)
 8016d64:	4293      	cmp	r3, r2
 8016d66:	d004      	beq.n	8016d72 <HAL_ADC_ConfigChannel+0x9de>
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	4a17      	ldr	r2, [pc, #92]	; (8016dcc <HAL_ADC_ConfigChannel+0xa38>)
 8016d6e:	4293      	cmp	r3, r2
 8016d70:	d101      	bne.n	8016d76 <HAL_ADC_ConfigChannel+0x9e2>
 8016d72:	4a19      	ldr	r2, [pc, #100]	; (8016dd8 <HAL_ADC_ConfigChannel+0xa44>)
 8016d74:	e000      	b.n	8016d78 <HAL_ADC_ConfigChannel+0x9e4>
 8016d76:	4a13      	ldr	r2, [pc, #76]	; (8016dc4 <HAL_ADC_ConfigChannel+0xa30>)
 8016d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8016d80:	4619      	mov	r1, r3
 8016d82:	4610      	mov	r0, r2
 8016d84:	f7fe faf1 	bl	801536a <LL_ADC_SetCommonPathInternalCh>
 8016d88:	e012      	b.n	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d8e:	f043 0220 	orr.w	r2, r3, #32
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8016d96:	2301      	movs	r3, #1
 8016d98:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8016d9c:	e008      	b.n	8016db0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016da2:	f043 0220 	orr.w	r2, r3, #32
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8016daa:	2301      	movs	r3, #1
 8016dac:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	2200      	movs	r2, #0
 8016db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8016db8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	37e4      	adds	r7, #228	; 0xe4
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd90      	pop	{r4, r7, pc}
 8016dc4:	58026300 	.word	0x58026300
 8016dc8:	40022000 	.word	0x40022000
 8016dcc:	40022100 	.word	0x40022100
 8016dd0:	58026000 	.word	0x58026000
 8016dd4:	c7520000 	.word	0xc7520000
 8016dd8:	40022300 	.word	0x40022300
 8016ddc:	24000004 	.word	0x24000004
 8016de0:	053e2d63 	.word	0x053e2d63
 8016de4:	c3210000 	.word	0xc3210000
 8016de8:	cb840000 	.word	0xcb840000

08016dec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b084      	sub	sp, #16
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f7fe fd41 	bl	8015880 <LL_ADC_IsEnabled>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d16e      	bne.n	8016ee2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	689a      	ldr	r2, [r3, #8]
 8016e0a:	4b38      	ldr	r3, [pc, #224]	; (8016eec <ADC_Enable+0x100>)
 8016e0c:	4013      	ands	r3, r2
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d00d      	beq.n	8016e2e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e16:	f043 0210 	orr.w	r2, r3, #16
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016e22:	f043 0201 	orr.w	r2, r3, #1
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8016e2a:	2301      	movs	r3, #1
 8016e2c:	e05a      	b.n	8016ee4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	4618      	mov	r0, r3
 8016e34:	f7fe fd10 	bl	8015858 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8016e38:	f7fe fa78 	bl	801532c <HAL_GetTick>
 8016e3c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	681b      	ldr	r3, [r3, #0]
 8016e42:	4a2b      	ldr	r2, [pc, #172]	; (8016ef0 <ADC_Enable+0x104>)
 8016e44:	4293      	cmp	r3, r2
 8016e46:	d004      	beq.n	8016e52 <ADC_Enable+0x66>
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	4a29      	ldr	r2, [pc, #164]	; (8016ef4 <ADC_Enable+0x108>)
 8016e4e:	4293      	cmp	r3, r2
 8016e50:	d101      	bne.n	8016e56 <ADC_Enable+0x6a>
 8016e52:	4b29      	ldr	r3, [pc, #164]	; (8016ef8 <ADC_Enable+0x10c>)
 8016e54:	e000      	b.n	8016e58 <ADC_Enable+0x6c>
 8016e56:	4b29      	ldr	r3, [pc, #164]	; (8016efc <ADC_Enable+0x110>)
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7fe fc93 	bl	8015784 <LL_ADC_GetMultimode>
 8016e5e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	4a23      	ldr	r2, [pc, #140]	; (8016ef4 <ADC_Enable+0x108>)
 8016e66:	4293      	cmp	r3, r2
 8016e68:	d002      	beq.n	8016e70 <ADC_Enable+0x84>
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	e000      	b.n	8016e72 <ADC_Enable+0x86>
 8016e70:	4b1f      	ldr	r3, [pc, #124]	; (8016ef0 <ADC_Enable+0x104>)
 8016e72:	687a      	ldr	r2, [r7, #4]
 8016e74:	6812      	ldr	r2, [r2, #0]
 8016e76:	4293      	cmp	r3, r2
 8016e78:	d02c      	beq.n	8016ed4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8016e7a:	68bb      	ldr	r3, [r7, #8]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d130      	bne.n	8016ee2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016e80:	e028      	b.n	8016ed4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	4618      	mov	r0, r3
 8016e88:	f7fe fcfa 	bl	8015880 <LL_ADC_IsEnabled>
 8016e8c:	4603      	mov	r3, r0
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d104      	bne.n	8016e9c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	4618      	mov	r0, r3
 8016e98:	f7fe fcde 	bl	8015858 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8016e9c:	f7fe fa46 	bl	801532c <HAL_GetTick>
 8016ea0:	4602      	mov	r2, r0
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	1ad3      	subs	r3, r2, r3
 8016ea6:	2b02      	cmp	r3, #2
 8016ea8:	d914      	bls.n	8016ed4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	f003 0301 	and.w	r3, r3, #1
 8016eb4:	2b01      	cmp	r3, #1
 8016eb6:	d00d      	beq.n	8016ed4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ebc:	f043 0210 	orr.w	r2, r3, #16
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016ec8:	f043 0201 	orr.w	r2, r3, #1
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	e007      	b.n	8016ee4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	f003 0301 	and.w	r3, r3, #1
 8016ede:	2b01      	cmp	r3, #1
 8016ee0:	d1cf      	bne.n	8016e82 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8016ee2:	2300      	movs	r3, #0
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	3710      	adds	r7, #16
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bd80      	pop	{r7, pc}
 8016eec:	8000003f 	.word	0x8000003f
 8016ef0:	40022000 	.word	0x40022000
 8016ef4:	40022100 	.word	0x40022100
 8016ef8:	40022300 	.word	0x40022300
 8016efc:	58026300 	.word	0x58026300

08016f00 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b084      	sub	sp, #16
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f0c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d14b      	bne.n	8016fb2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	f003 0308 	and.w	r3, r3, #8
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d021      	beq.n	8016f78 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	4618      	mov	r0, r3
 8016f3a:	f7fe fb29 	bl	8015590 <LL_ADC_REG_IsTriggerSourceSWStart>
 8016f3e:	4603      	mov	r3, r0
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d032      	beq.n	8016faa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	68db      	ldr	r3, [r3, #12]
 8016f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d12b      	bne.n	8016faa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d11f      	bne.n	8016faa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f6e:	f043 0201 	orr.w	r2, r3, #1
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	661a      	str	r2, [r3, #96]	; 0x60
 8016f76:	e018      	b.n	8016faa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	68db      	ldr	r3, [r3, #12]
 8016f7e:	f003 0303 	and.w	r3, r3, #3
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d111      	bne.n	8016faa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d105      	bne.n	8016faa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016fa2:	f043 0201 	orr.w	r2, r3, #1
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8016faa:	68f8      	ldr	r0, [r7, #12]
 8016fac:	f7f6 fae7 	bl	800d57e <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8016fb0:	e00e      	b.n	8016fd0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016fb6:	f003 0310 	and.w	r3, r3, #16
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d003      	beq.n	8016fc6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8016fbe:	68f8      	ldr	r0, [r7, #12]
 8016fc0:	f7ff f9de 	bl	8016380 <HAL_ADC_ErrorCallback>
}
 8016fc4:	e004      	b.n	8016fd0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	4798      	blx	r3
}
 8016fd0:	bf00      	nop
 8016fd2:	3710      	adds	r7, #16
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bd80      	pop	{r7, pc}

08016fd8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b084      	sub	sp, #16
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fe4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8016fe6:	68f8      	ldr	r0, [r7, #12]
 8016fe8:	f7ff f9b6 	bl	8016358 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8016fec:	bf00      	nop
 8016fee:	3710      	adds	r7, #16
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b084      	sub	sp, #16
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017000:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017012:	f043 0204 	orr.w	r2, r3, #4
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801701a:	68f8      	ldr	r0, [r7, #12]
 801701c:	f7ff f9b0 	bl	8016380 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8017020:	bf00      	nop
 8017022:	3710      	adds	r7, #16
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}

08017028 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b084      	sub	sp, #16
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	4a6c      	ldr	r2, [pc, #432]	; (80171e8 <ADC_ConfigureBoostMode+0x1c0>)
 8017036:	4293      	cmp	r3, r2
 8017038:	d004      	beq.n	8017044 <ADC_ConfigureBoostMode+0x1c>
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	4a6b      	ldr	r2, [pc, #428]	; (80171ec <ADC_ConfigureBoostMode+0x1c4>)
 8017040:	4293      	cmp	r3, r2
 8017042:	d109      	bne.n	8017058 <ADC_ConfigureBoostMode+0x30>
 8017044:	4b6a      	ldr	r3, [pc, #424]	; (80171f0 <ADC_ConfigureBoostMode+0x1c8>)
 8017046:	689b      	ldr	r3, [r3, #8]
 8017048:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801704c:	2b00      	cmp	r3, #0
 801704e:	bf14      	ite	ne
 8017050:	2301      	movne	r3, #1
 8017052:	2300      	moveq	r3, #0
 8017054:	b2db      	uxtb	r3, r3
 8017056:	e008      	b.n	801706a <ADC_ConfigureBoostMode+0x42>
 8017058:	4b66      	ldr	r3, [pc, #408]	; (80171f4 <ADC_ConfigureBoostMode+0x1cc>)
 801705a:	689b      	ldr	r3, [r3, #8]
 801705c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017060:	2b00      	cmp	r3, #0
 8017062:	bf14      	ite	ne
 8017064:	2301      	movne	r3, #1
 8017066:	2300      	moveq	r3, #0
 8017068:	b2db      	uxtb	r3, r3
 801706a:	2b00      	cmp	r3, #0
 801706c:	d01c      	beq.n	80170a8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 801706e:	f004 fe61 	bl	801bd34 <HAL_RCC_GetHCLKFreq>
 8017072:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	685b      	ldr	r3, [r3, #4]
 8017078:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801707c:	d010      	beq.n	80170a0 <ADC_ConfigureBoostMode+0x78>
 801707e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017082:	d873      	bhi.n	801716c <ADC_ConfigureBoostMode+0x144>
 8017084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017088:	d002      	beq.n	8017090 <ADC_ConfigureBoostMode+0x68>
 801708a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801708e:	d16d      	bne.n	801716c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	685b      	ldr	r3, [r3, #4]
 8017094:	0c1b      	lsrs	r3, r3, #16
 8017096:	68fa      	ldr	r2, [r7, #12]
 8017098:	fbb2 f3f3 	udiv	r3, r2, r3
 801709c:	60fb      	str	r3, [r7, #12]
        break;
 801709e:	e068      	b.n	8017172 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	089b      	lsrs	r3, r3, #2
 80170a4:	60fb      	str	r3, [r7, #12]
        break;
 80170a6:	e064      	b.n	8017172 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80170a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80170ac:	f04f 0100 	mov.w	r1, #0
 80170b0:	f006 f826 	bl	801d100 <HAL_RCCEx_GetPeriphCLKFreq>
 80170b4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	685b      	ldr	r3, [r3, #4]
 80170ba:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80170be:	d051      	beq.n	8017164 <ADC_ConfigureBoostMode+0x13c>
 80170c0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80170c4:	d854      	bhi.n	8017170 <ADC_ConfigureBoostMode+0x148>
 80170c6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80170ca:	d047      	beq.n	801715c <ADC_ConfigureBoostMode+0x134>
 80170cc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80170d0:	d84e      	bhi.n	8017170 <ADC_ConfigureBoostMode+0x148>
 80170d2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80170d6:	d03d      	beq.n	8017154 <ADC_ConfigureBoostMode+0x12c>
 80170d8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80170dc:	d848      	bhi.n	8017170 <ADC_ConfigureBoostMode+0x148>
 80170de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80170e2:	d033      	beq.n	801714c <ADC_ConfigureBoostMode+0x124>
 80170e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80170e8:	d842      	bhi.n	8017170 <ADC_ConfigureBoostMode+0x148>
 80170ea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80170ee:	d029      	beq.n	8017144 <ADC_ConfigureBoostMode+0x11c>
 80170f0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80170f4:	d83c      	bhi.n	8017170 <ADC_ConfigureBoostMode+0x148>
 80170f6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80170fa:	d01a      	beq.n	8017132 <ADC_ConfigureBoostMode+0x10a>
 80170fc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8017100:	d836      	bhi.n	8017170 <ADC_ConfigureBoostMode+0x148>
 8017102:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8017106:	d014      	beq.n	8017132 <ADC_ConfigureBoostMode+0x10a>
 8017108:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 801710c:	d830      	bhi.n	8017170 <ADC_ConfigureBoostMode+0x148>
 801710e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017112:	d00e      	beq.n	8017132 <ADC_ConfigureBoostMode+0x10a>
 8017114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017118:	d82a      	bhi.n	8017170 <ADC_ConfigureBoostMode+0x148>
 801711a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 801711e:	d008      	beq.n	8017132 <ADC_ConfigureBoostMode+0x10a>
 8017120:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8017124:	d824      	bhi.n	8017170 <ADC_ConfigureBoostMode+0x148>
 8017126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801712a:	d002      	beq.n	8017132 <ADC_ConfigureBoostMode+0x10a>
 801712c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8017130:	d11e      	bne.n	8017170 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	685b      	ldr	r3, [r3, #4]
 8017136:	0c9b      	lsrs	r3, r3, #18
 8017138:	005b      	lsls	r3, r3, #1
 801713a:	68fa      	ldr	r2, [r7, #12]
 801713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017140:	60fb      	str	r3, [r7, #12]
        break;
 8017142:	e016      	b.n	8017172 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	091b      	lsrs	r3, r3, #4
 8017148:	60fb      	str	r3, [r7, #12]
        break;
 801714a:	e012      	b.n	8017172 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	095b      	lsrs	r3, r3, #5
 8017150:	60fb      	str	r3, [r7, #12]
        break;
 8017152:	e00e      	b.n	8017172 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	099b      	lsrs	r3, r3, #6
 8017158:	60fb      	str	r3, [r7, #12]
        break;
 801715a:	e00a      	b.n	8017172 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	09db      	lsrs	r3, r3, #7
 8017160:	60fb      	str	r3, [r7, #12]
        break;
 8017162:	e006      	b.n	8017172 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	0a1b      	lsrs	r3, r3, #8
 8017168:	60fb      	str	r3, [r7, #12]
        break;
 801716a:	e002      	b.n	8017172 <ADC_ConfigureBoostMode+0x14a>
        break;
 801716c:	bf00      	nop
 801716e:	e000      	b.n	8017172 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8017170:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	085b      	lsrs	r3, r3, #1
 8017176:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	4a1f      	ldr	r2, [pc, #124]	; (80171f8 <ADC_ConfigureBoostMode+0x1d0>)
 801717c:	4293      	cmp	r3, r2
 801717e:	d808      	bhi.n	8017192 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	689a      	ldr	r2, [r3, #8]
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801718e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8017190:	e025      	b.n	80171de <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	4a19      	ldr	r2, [pc, #100]	; (80171fc <ADC_ConfigureBoostMode+0x1d4>)
 8017196:	4293      	cmp	r3, r2
 8017198:	d80a      	bhi.n	80171b0 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	689b      	ldr	r3, [r3, #8]
 80171a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80171ac:	609a      	str	r2, [r3, #8]
}
 80171ae:	e016      	b.n	80171de <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	4a13      	ldr	r2, [pc, #76]	; (8017200 <ADC_ConfigureBoostMode+0x1d8>)
 80171b4:	4293      	cmp	r3, r2
 80171b6:	d80a      	bhi.n	80171ce <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	689b      	ldr	r3, [r3, #8]
 80171be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80171ca:	609a      	str	r2, [r3, #8]
}
 80171cc:	e007      	b.n	80171de <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	689a      	ldr	r2, [r3, #8]
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80171dc:	609a      	str	r2, [r3, #8]
}
 80171de:	bf00      	nop
 80171e0:	3710      	adds	r7, #16
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}
 80171e6:	bf00      	nop
 80171e8:	40022000 	.word	0x40022000
 80171ec:	40022100 	.word	0x40022100
 80171f0:	40022300 	.word	0x40022300
 80171f4:	58026300 	.word	0x58026300
 80171f8:	005f5e10 	.word	0x005f5e10
 80171fc:	00bebc20 	.word	0x00bebc20
 8017200:	017d7840 	.word	0x017d7840

08017204 <LL_ADC_IsEnabled>:
{
 8017204:	b480      	push	{r7}
 8017206:	b083      	sub	sp, #12
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	689b      	ldr	r3, [r3, #8]
 8017210:	f003 0301 	and.w	r3, r3, #1
 8017214:	2b01      	cmp	r3, #1
 8017216:	d101      	bne.n	801721c <LL_ADC_IsEnabled+0x18>
 8017218:	2301      	movs	r3, #1
 801721a:	e000      	b.n	801721e <LL_ADC_IsEnabled+0x1a>
 801721c:	2300      	movs	r3, #0
}
 801721e:	4618      	mov	r0, r3
 8017220:	370c      	adds	r7, #12
 8017222:	46bd      	mov	sp, r7
 8017224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017228:	4770      	bx	lr

0801722a <LL_ADC_REG_IsConversionOngoing>:
{
 801722a:	b480      	push	{r7}
 801722c:	b083      	sub	sp, #12
 801722e:	af00      	add	r7, sp, #0
 8017230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	689b      	ldr	r3, [r3, #8]
 8017236:	f003 0304 	and.w	r3, r3, #4
 801723a:	2b04      	cmp	r3, #4
 801723c:	d101      	bne.n	8017242 <LL_ADC_REG_IsConversionOngoing+0x18>
 801723e:	2301      	movs	r3, #1
 8017240:	e000      	b.n	8017244 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8017242:	2300      	movs	r3, #0
}
 8017244:	4618      	mov	r0, r3
 8017246:	370c      	adds	r7, #12
 8017248:	46bd      	mov	sp, r7
 801724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724e:	4770      	bx	lr

08017250 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8017250:	b480      	push	{r7}
 8017252:	b083      	sub	sp, #12
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8017258:	bf00      	nop
 801725a:	370c      	adds	r7, #12
 801725c:	46bd      	mov	sp, r7
 801725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017262:	4770      	bx	lr

08017264 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8017264:	b480      	push	{r7}
 8017266:	b083      	sub	sp, #12
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801726c:	bf00      	nop
 801726e:	370c      	adds	r7, #12
 8017270:	46bd      	mov	sp, r7
 8017272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017276:	4770      	bx	lr

08017278 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8017278:	b480      	push	{r7}
 801727a:	b083      	sub	sp, #12
 801727c:	af00      	add	r7, sp, #0
 801727e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8017280:	bf00      	nop
 8017282:	370c      	adds	r7, #12
 8017284:	46bd      	mov	sp, r7
 8017286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728a:	4770      	bx	lr

0801728c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801728c:	b480      	push	{r7}
 801728e:	b083      	sub	sp, #12
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8017294:	bf00      	nop
 8017296:	370c      	adds	r7, #12
 8017298:	46bd      	mov	sp, r7
 801729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729e:	4770      	bx	lr

080172a0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80172a0:	b480      	push	{r7}
 80172a2:	b083      	sub	sp, #12
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80172a8:	bf00      	nop
 80172aa:	370c      	adds	r7, #12
 80172ac:	46bd      	mov	sp, r7
 80172ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b2:	4770      	bx	lr

080172b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80172b4:	b590      	push	{r4, r7, lr}
 80172b6:	b0a3      	sub	sp, #140	; 0x8c
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
 80172bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80172be:	2300      	movs	r3, #0
 80172c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80172ca:	2b01      	cmp	r3, #1
 80172cc:	d101      	bne.n	80172d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80172ce:	2302      	movs	r3, #2
 80172d0:	e0c1      	b.n	8017456 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	2201      	movs	r2, #1
 80172d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80172da:	2300      	movs	r3, #0
 80172dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80172de:	2300      	movs	r3, #0
 80172e0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	4a5e      	ldr	r2, [pc, #376]	; (8017460 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d102      	bne.n	80172f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80172ec:	4b5d      	ldr	r3, [pc, #372]	; (8017464 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80172ee:	60fb      	str	r3, [r7, #12]
 80172f0:	e001      	b.n	80172f6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80172f2:	2300      	movs	r3, #0
 80172f4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d10b      	bne.n	8017314 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017300:	f043 0220 	orr.w	r2, r3, #32
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2200      	movs	r2, #0
 801730c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8017310:	2301      	movs	r3, #1
 8017312:	e0a0      	b.n	8017456 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	4618      	mov	r0, r3
 8017318:	f7ff ff87 	bl	801722a <LL_ADC_REG_IsConversionOngoing>
 801731c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	4618      	mov	r0, r3
 8017326:	f7ff ff80 	bl	801722a <LL_ADC_REG_IsConversionOngoing>
 801732a:	4603      	mov	r3, r0
 801732c:	2b00      	cmp	r3, #0
 801732e:	f040 8081 	bne.w	8017434 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8017332:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017336:	2b00      	cmp	r3, #0
 8017338:	d17c      	bne.n	8017434 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	4a48      	ldr	r2, [pc, #288]	; (8017460 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017340:	4293      	cmp	r3, r2
 8017342:	d004      	beq.n	801734e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	4a46      	ldr	r2, [pc, #280]	; (8017464 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801734a:	4293      	cmp	r3, r2
 801734c:	d101      	bne.n	8017352 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801734e:	4b46      	ldr	r3, [pc, #280]	; (8017468 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8017350:	e000      	b.n	8017354 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8017352:	4b46      	ldr	r3, [pc, #280]	; (801746c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8017354:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	2b00      	cmp	r3, #0
 801735c:	d039      	beq.n	80173d2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 801735e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017360:	689b      	ldr	r3, [r3, #8]
 8017362:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017366:	683b      	ldr	r3, [r7, #0]
 8017368:	685b      	ldr	r3, [r3, #4]
 801736a:	431a      	orrs	r2, r3
 801736c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801736e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	4a3a      	ldr	r2, [pc, #232]	; (8017460 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017376:	4293      	cmp	r3, r2
 8017378:	d004      	beq.n	8017384 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	4a39      	ldr	r2, [pc, #228]	; (8017464 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017380:	4293      	cmp	r3, r2
 8017382:	d10e      	bne.n	80173a2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8017384:	4836      	ldr	r0, [pc, #216]	; (8017460 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017386:	f7ff ff3d 	bl	8017204 <LL_ADC_IsEnabled>
 801738a:	4604      	mov	r4, r0
 801738c:	4835      	ldr	r0, [pc, #212]	; (8017464 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801738e:	f7ff ff39 	bl	8017204 <LL_ADC_IsEnabled>
 8017392:	4603      	mov	r3, r0
 8017394:	4323      	orrs	r3, r4
 8017396:	2b00      	cmp	r3, #0
 8017398:	bf0c      	ite	eq
 801739a:	2301      	moveq	r3, #1
 801739c:	2300      	movne	r3, #0
 801739e:	b2db      	uxtb	r3, r3
 80173a0:	e008      	b.n	80173b4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80173a2:	4833      	ldr	r0, [pc, #204]	; (8017470 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80173a4:	f7ff ff2e 	bl	8017204 <LL_ADC_IsEnabled>
 80173a8:	4603      	mov	r3, r0
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	bf0c      	ite	eq
 80173ae:	2301      	moveq	r3, #1
 80173b0:	2300      	movne	r3, #0
 80173b2:	b2db      	uxtb	r3, r3
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d047      	beq.n	8017448 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80173b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80173ba:	689a      	ldr	r2, [r3, #8]
 80173bc:	4b2d      	ldr	r3, [pc, #180]	; (8017474 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80173be:	4013      	ands	r3, r2
 80173c0:	683a      	ldr	r2, [r7, #0]
 80173c2:	6811      	ldr	r1, [r2, #0]
 80173c4:	683a      	ldr	r2, [r7, #0]
 80173c6:	6892      	ldr	r2, [r2, #8]
 80173c8:	430a      	orrs	r2, r1
 80173ca:	431a      	orrs	r2, r3
 80173cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80173ce:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80173d0:	e03a      	b.n	8017448 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80173d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80173d4:	689b      	ldr	r3, [r3, #8]
 80173d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80173da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80173dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	4a1f      	ldr	r2, [pc, #124]	; (8017460 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80173e4:	4293      	cmp	r3, r2
 80173e6:	d004      	beq.n	80173f2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	4a1d      	ldr	r2, [pc, #116]	; (8017464 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80173ee:	4293      	cmp	r3, r2
 80173f0:	d10e      	bne.n	8017410 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80173f2:	481b      	ldr	r0, [pc, #108]	; (8017460 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80173f4:	f7ff ff06 	bl	8017204 <LL_ADC_IsEnabled>
 80173f8:	4604      	mov	r4, r0
 80173fa:	481a      	ldr	r0, [pc, #104]	; (8017464 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80173fc:	f7ff ff02 	bl	8017204 <LL_ADC_IsEnabled>
 8017400:	4603      	mov	r3, r0
 8017402:	4323      	orrs	r3, r4
 8017404:	2b00      	cmp	r3, #0
 8017406:	bf0c      	ite	eq
 8017408:	2301      	moveq	r3, #1
 801740a:	2300      	movne	r3, #0
 801740c:	b2db      	uxtb	r3, r3
 801740e:	e008      	b.n	8017422 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8017410:	4817      	ldr	r0, [pc, #92]	; (8017470 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8017412:	f7ff fef7 	bl	8017204 <LL_ADC_IsEnabled>
 8017416:	4603      	mov	r3, r0
 8017418:	2b00      	cmp	r3, #0
 801741a:	bf0c      	ite	eq
 801741c:	2301      	moveq	r3, #1
 801741e:	2300      	movne	r3, #0
 8017420:	b2db      	uxtb	r3, r3
 8017422:	2b00      	cmp	r3, #0
 8017424:	d010      	beq.n	8017448 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8017426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017428:	689a      	ldr	r2, [r3, #8]
 801742a:	4b12      	ldr	r3, [pc, #72]	; (8017474 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801742c:	4013      	ands	r3, r2
 801742e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017430:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017432:	e009      	b.n	8017448 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017438:	f043 0220 	orr.w	r2, r3, #32
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8017440:	2301      	movs	r3, #1
 8017442:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8017446:	e000      	b.n	801744a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017448:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	2200      	movs	r2, #0
 801744e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8017452:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8017456:	4618      	mov	r0, r3
 8017458:	378c      	adds	r7, #140	; 0x8c
 801745a:	46bd      	mov	sp, r7
 801745c:	bd90      	pop	{r4, r7, pc}
 801745e:	bf00      	nop
 8017460:	40022000 	.word	0x40022000
 8017464:	40022100 	.word	0x40022100
 8017468:	40022300 	.word	0x40022300
 801746c:	58026300 	.word	0x58026300
 8017470:	58026000 	.word	0x58026000
 8017474:	fffff0e0 	.word	0xfffff0e0

08017478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017478:	b480      	push	{r7}
 801747a:	b085      	sub	sp, #20
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	f003 0307 	and.w	r3, r3, #7
 8017486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017488:	4b0b      	ldr	r3, [pc, #44]	; (80174b8 <__NVIC_SetPriorityGrouping+0x40>)
 801748a:	68db      	ldr	r3, [r3, #12]
 801748c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801748e:	68ba      	ldr	r2, [r7, #8]
 8017490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8017494:	4013      	ands	r3, r2
 8017496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801749c:	68bb      	ldr	r3, [r7, #8]
 801749e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80174a0:	4b06      	ldr	r3, [pc, #24]	; (80174bc <__NVIC_SetPriorityGrouping+0x44>)
 80174a2:	4313      	orrs	r3, r2
 80174a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80174a6:	4a04      	ldr	r2, [pc, #16]	; (80174b8 <__NVIC_SetPriorityGrouping+0x40>)
 80174a8:	68bb      	ldr	r3, [r7, #8]
 80174aa:	60d3      	str	r3, [r2, #12]
}
 80174ac:	bf00      	nop
 80174ae:	3714      	adds	r7, #20
 80174b0:	46bd      	mov	sp, r7
 80174b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b6:	4770      	bx	lr
 80174b8:	e000ed00 	.word	0xe000ed00
 80174bc:	05fa0000 	.word	0x05fa0000

080174c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80174c0:	b480      	push	{r7}
 80174c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80174c4:	4b04      	ldr	r3, [pc, #16]	; (80174d8 <__NVIC_GetPriorityGrouping+0x18>)
 80174c6:	68db      	ldr	r3, [r3, #12]
 80174c8:	0a1b      	lsrs	r3, r3, #8
 80174ca:	f003 0307 	and.w	r3, r3, #7
}
 80174ce:	4618      	mov	r0, r3
 80174d0:	46bd      	mov	sp, r7
 80174d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d6:	4770      	bx	lr
 80174d8:	e000ed00 	.word	0xe000ed00

080174dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80174dc:	b480      	push	{r7}
 80174de:	b083      	sub	sp, #12
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	4603      	mov	r3, r0
 80174e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80174e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	db0b      	blt.n	8017506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80174ee:	88fb      	ldrh	r3, [r7, #6]
 80174f0:	f003 021f 	and.w	r2, r3, #31
 80174f4:	4907      	ldr	r1, [pc, #28]	; (8017514 <__NVIC_EnableIRQ+0x38>)
 80174f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80174fa:	095b      	lsrs	r3, r3, #5
 80174fc:	2001      	movs	r0, #1
 80174fe:	fa00 f202 	lsl.w	r2, r0, r2
 8017502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8017506:	bf00      	nop
 8017508:	370c      	adds	r7, #12
 801750a:	46bd      	mov	sp, r7
 801750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017510:	4770      	bx	lr
 8017512:	bf00      	nop
 8017514:	e000e100 	.word	0xe000e100

08017518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8017518:	b480      	push	{r7}
 801751a:	b083      	sub	sp, #12
 801751c:	af00      	add	r7, sp, #0
 801751e:	4603      	mov	r3, r0
 8017520:	6039      	str	r1, [r7, #0]
 8017522:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8017524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017528:	2b00      	cmp	r3, #0
 801752a:	db0a      	blt.n	8017542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801752c:	683b      	ldr	r3, [r7, #0]
 801752e:	b2da      	uxtb	r2, r3
 8017530:	490c      	ldr	r1, [pc, #48]	; (8017564 <__NVIC_SetPriority+0x4c>)
 8017532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017536:	0112      	lsls	r2, r2, #4
 8017538:	b2d2      	uxtb	r2, r2
 801753a:	440b      	add	r3, r1
 801753c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8017540:	e00a      	b.n	8017558 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017542:	683b      	ldr	r3, [r7, #0]
 8017544:	b2da      	uxtb	r2, r3
 8017546:	4908      	ldr	r1, [pc, #32]	; (8017568 <__NVIC_SetPriority+0x50>)
 8017548:	88fb      	ldrh	r3, [r7, #6]
 801754a:	f003 030f 	and.w	r3, r3, #15
 801754e:	3b04      	subs	r3, #4
 8017550:	0112      	lsls	r2, r2, #4
 8017552:	b2d2      	uxtb	r2, r2
 8017554:	440b      	add	r3, r1
 8017556:	761a      	strb	r2, [r3, #24]
}
 8017558:	bf00      	nop
 801755a:	370c      	adds	r7, #12
 801755c:	46bd      	mov	sp, r7
 801755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017562:	4770      	bx	lr
 8017564:	e000e100 	.word	0xe000e100
 8017568:	e000ed00 	.word	0xe000ed00

0801756c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801756c:	b480      	push	{r7}
 801756e:	b089      	sub	sp, #36	; 0x24
 8017570:	af00      	add	r7, sp, #0
 8017572:	60f8      	str	r0, [r7, #12]
 8017574:	60b9      	str	r1, [r7, #8]
 8017576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	f003 0307 	and.w	r3, r3, #7
 801757e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017580:	69fb      	ldr	r3, [r7, #28]
 8017582:	f1c3 0307 	rsb	r3, r3, #7
 8017586:	2b04      	cmp	r3, #4
 8017588:	bf28      	it	cs
 801758a:	2304      	movcs	r3, #4
 801758c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801758e:	69fb      	ldr	r3, [r7, #28]
 8017590:	3304      	adds	r3, #4
 8017592:	2b06      	cmp	r3, #6
 8017594:	d902      	bls.n	801759c <NVIC_EncodePriority+0x30>
 8017596:	69fb      	ldr	r3, [r7, #28]
 8017598:	3b03      	subs	r3, #3
 801759a:	e000      	b.n	801759e <NVIC_EncodePriority+0x32>
 801759c:	2300      	movs	r3, #0
 801759e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80175a0:	f04f 32ff 	mov.w	r2, #4294967295
 80175a4:	69bb      	ldr	r3, [r7, #24]
 80175a6:	fa02 f303 	lsl.w	r3, r2, r3
 80175aa:	43da      	mvns	r2, r3
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	401a      	ands	r2, r3
 80175b0:	697b      	ldr	r3, [r7, #20]
 80175b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80175b4:	f04f 31ff 	mov.w	r1, #4294967295
 80175b8:	697b      	ldr	r3, [r7, #20]
 80175ba:	fa01 f303 	lsl.w	r3, r1, r3
 80175be:	43d9      	mvns	r1, r3
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80175c4:	4313      	orrs	r3, r2
         );
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3724      	adds	r7, #36	; 0x24
 80175ca:	46bd      	mov	sp, r7
 80175cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d0:	4770      	bx	lr
	...

080175d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b082      	sub	sp, #8
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	3b01      	subs	r3, #1
 80175e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80175e4:	d301      	bcc.n	80175ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80175e6:	2301      	movs	r3, #1
 80175e8:	e00f      	b.n	801760a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80175ea:	4a0a      	ldr	r2, [pc, #40]	; (8017614 <SysTick_Config+0x40>)
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	3b01      	subs	r3, #1
 80175f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80175f2:	210f      	movs	r1, #15
 80175f4:	f04f 30ff 	mov.w	r0, #4294967295
 80175f8:	f7ff ff8e 	bl	8017518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80175fc:	4b05      	ldr	r3, [pc, #20]	; (8017614 <SysTick_Config+0x40>)
 80175fe:	2200      	movs	r2, #0
 8017600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8017602:	4b04      	ldr	r3, [pc, #16]	; (8017614 <SysTick_Config+0x40>)
 8017604:	2207      	movs	r2, #7
 8017606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8017608:	2300      	movs	r3, #0
}
 801760a:	4618      	mov	r0, r3
 801760c:	3708      	adds	r7, #8
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
 8017612:	bf00      	nop
 8017614:	e000e010 	.word	0xe000e010

08017618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b082      	sub	sp, #8
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8017620:	6878      	ldr	r0, [r7, #4]
 8017622:	f7ff ff29 	bl	8017478 <__NVIC_SetPriorityGrouping>
}
 8017626:	bf00      	nop
 8017628:	3708      	adds	r7, #8
 801762a:	46bd      	mov	sp, r7
 801762c:	bd80      	pop	{r7, pc}

0801762e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801762e:	b580      	push	{r7, lr}
 8017630:	b086      	sub	sp, #24
 8017632:	af00      	add	r7, sp, #0
 8017634:	4603      	mov	r3, r0
 8017636:	60b9      	str	r1, [r7, #8]
 8017638:	607a      	str	r2, [r7, #4]
 801763a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801763c:	f7ff ff40 	bl	80174c0 <__NVIC_GetPriorityGrouping>
 8017640:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8017642:	687a      	ldr	r2, [r7, #4]
 8017644:	68b9      	ldr	r1, [r7, #8]
 8017646:	6978      	ldr	r0, [r7, #20]
 8017648:	f7ff ff90 	bl	801756c <NVIC_EncodePriority>
 801764c:	4602      	mov	r2, r0
 801764e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017652:	4611      	mov	r1, r2
 8017654:	4618      	mov	r0, r3
 8017656:	f7ff ff5f 	bl	8017518 <__NVIC_SetPriority>
}
 801765a:	bf00      	nop
 801765c:	3718      	adds	r7, #24
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}

08017662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017662:	b580      	push	{r7, lr}
 8017664:	b082      	sub	sp, #8
 8017666:	af00      	add	r7, sp, #0
 8017668:	4603      	mov	r3, r0
 801766a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801766c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017670:	4618      	mov	r0, r3
 8017672:	f7ff ff33 	bl	80174dc <__NVIC_EnableIRQ>
}
 8017676:	bf00      	nop
 8017678:	3708      	adds	r7, #8
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}

0801767e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801767e:	b580      	push	{r7, lr}
 8017680:	b082      	sub	sp, #8
 8017682:	af00      	add	r7, sp, #0
 8017684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f7ff ffa4 	bl	80175d4 <SysTick_Config>
 801768c:	4603      	mov	r3, r0
}
 801768e:	4618      	mov	r0, r3
 8017690:	3708      	adds	r7, #8
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
	...

08017698 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b086      	sub	sp, #24
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80176a0:	f7fd fe44 	bl	801532c <HAL_GetTick>
 80176a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d101      	bne.n	80176b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80176ac:	2301      	movs	r3, #1
 80176ae:	e314      	b.n	8017cda <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	4a66      	ldr	r2, [pc, #408]	; (8017850 <HAL_DMA_Init+0x1b8>)
 80176b6:	4293      	cmp	r3, r2
 80176b8:	d04a      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	4a65      	ldr	r2, [pc, #404]	; (8017854 <HAL_DMA_Init+0x1bc>)
 80176c0:	4293      	cmp	r3, r2
 80176c2:	d045      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	4a63      	ldr	r2, [pc, #396]	; (8017858 <HAL_DMA_Init+0x1c0>)
 80176ca:	4293      	cmp	r3, r2
 80176cc:	d040      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	4a62      	ldr	r2, [pc, #392]	; (801785c <HAL_DMA_Init+0x1c4>)
 80176d4:	4293      	cmp	r3, r2
 80176d6:	d03b      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	4a60      	ldr	r2, [pc, #384]	; (8017860 <HAL_DMA_Init+0x1c8>)
 80176de:	4293      	cmp	r3, r2
 80176e0:	d036      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	4a5f      	ldr	r2, [pc, #380]	; (8017864 <HAL_DMA_Init+0x1cc>)
 80176e8:	4293      	cmp	r3, r2
 80176ea:	d031      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	4a5d      	ldr	r2, [pc, #372]	; (8017868 <HAL_DMA_Init+0x1d0>)
 80176f2:	4293      	cmp	r3, r2
 80176f4:	d02c      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	4a5c      	ldr	r2, [pc, #368]	; (801786c <HAL_DMA_Init+0x1d4>)
 80176fc:	4293      	cmp	r3, r2
 80176fe:	d027      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	4a5a      	ldr	r2, [pc, #360]	; (8017870 <HAL_DMA_Init+0x1d8>)
 8017706:	4293      	cmp	r3, r2
 8017708:	d022      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	4a59      	ldr	r2, [pc, #356]	; (8017874 <HAL_DMA_Init+0x1dc>)
 8017710:	4293      	cmp	r3, r2
 8017712:	d01d      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	4a57      	ldr	r2, [pc, #348]	; (8017878 <HAL_DMA_Init+0x1e0>)
 801771a:	4293      	cmp	r3, r2
 801771c:	d018      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	4a56      	ldr	r2, [pc, #344]	; (801787c <HAL_DMA_Init+0x1e4>)
 8017724:	4293      	cmp	r3, r2
 8017726:	d013      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	4a54      	ldr	r2, [pc, #336]	; (8017880 <HAL_DMA_Init+0x1e8>)
 801772e:	4293      	cmp	r3, r2
 8017730:	d00e      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	4a53      	ldr	r2, [pc, #332]	; (8017884 <HAL_DMA_Init+0x1ec>)
 8017738:	4293      	cmp	r3, r2
 801773a:	d009      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	4a51      	ldr	r2, [pc, #324]	; (8017888 <HAL_DMA_Init+0x1f0>)
 8017742:	4293      	cmp	r3, r2
 8017744:	d004      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	4a50      	ldr	r2, [pc, #320]	; (801788c <HAL_DMA_Init+0x1f4>)
 801774c:	4293      	cmp	r3, r2
 801774e:	d101      	bne.n	8017754 <HAL_DMA_Init+0xbc>
 8017750:	2301      	movs	r3, #1
 8017752:	e000      	b.n	8017756 <HAL_DMA_Init+0xbe>
 8017754:	2300      	movs	r3, #0
 8017756:	2b00      	cmp	r3, #0
 8017758:	f000 813c 	beq.w	80179d4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	2202      	movs	r2, #2
 8017760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2200      	movs	r2, #0
 8017768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	4a37      	ldr	r2, [pc, #220]	; (8017850 <HAL_DMA_Init+0x1b8>)
 8017772:	4293      	cmp	r3, r2
 8017774:	d04a      	beq.n	801780c <HAL_DMA_Init+0x174>
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	4a36      	ldr	r2, [pc, #216]	; (8017854 <HAL_DMA_Init+0x1bc>)
 801777c:	4293      	cmp	r3, r2
 801777e:	d045      	beq.n	801780c <HAL_DMA_Init+0x174>
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	4a34      	ldr	r2, [pc, #208]	; (8017858 <HAL_DMA_Init+0x1c0>)
 8017786:	4293      	cmp	r3, r2
 8017788:	d040      	beq.n	801780c <HAL_DMA_Init+0x174>
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	4a33      	ldr	r2, [pc, #204]	; (801785c <HAL_DMA_Init+0x1c4>)
 8017790:	4293      	cmp	r3, r2
 8017792:	d03b      	beq.n	801780c <HAL_DMA_Init+0x174>
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	4a31      	ldr	r2, [pc, #196]	; (8017860 <HAL_DMA_Init+0x1c8>)
 801779a:	4293      	cmp	r3, r2
 801779c:	d036      	beq.n	801780c <HAL_DMA_Init+0x174>
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	4a30      	ldr	r2, [pc, #192]	; (8017864 <HAL_DMA_Init+0x1cc>)
 80177a4:	4293      	cmp	r3, r2
 80177a6:	d031      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	4a2e      	ldr	r2, [pc, #184]	; (8017868 <HAL_DMA_Init+0x1d0>)
 80177ae:	4293      	cmp	r3, r2
 80177b0:	d02c      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	4a2d      	ldr	r2, [pc, #180]	; (801786c <HAL_DMA_Init+0x1d4>)
 80177b8:	4293      	cmp	r3, r2
 80177ba:	d027      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	4a2b      	ldr	r2, [pc, #172]	; (8017870 <HAL_DMA_Init+0x1d8>)
 80177c2:	4293      	cmp	r3, r2
 80177c4:	d022      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	4a2a      	ldr	r2, [pc, #168]	; (8017874 <HAL_DMA_Init+0x1dc>)
 80177cc:	4293      	cmp	r3, r2
 80177ce:	d01d      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	4a28      	ldr	r2, [pc, #160]	; (8017878 <HAL_DMA_Init+0x1e0>)
 80177d6:	4293      	cmp	r3, r2
 80177d8:	d018      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	4a27      	ldr	r2, [pc, #156]	; (801787c <HAL_DMA_Init+0x1e4>)
 80177e0:	4293      	cmp	r3, r2
 80177e2:	d013      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	4a25      	ldr	r2, [pc, #148]	; (8017880 <HAL_DMA_Init+0x1e8>)
 80177ea:	4293      	cmp	r3, r2
 80177ec:	d00e      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	4a24      	ldr	r2, [pc, #144]	; (8017884 <HAL_DMA_Init+0x1ec>)
 80177f4:	4293      	cmp	r3, r2
 80177f6:	d009      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	4a22      	ldr	r2, [pc, #136]	; (8017888 <HAL_DMA_Init+0x1f0>)
 80177fe:	4293      	cmp	r3, r2
 8017800:	d004      	beq.n	801780c <HAL_DMA_Init+0x174>
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	4a21      	ldr	r2, [pc, #132]	; (801788c <HAL_DMA_Init+0x1f4>)
 8017808:	4293      	cmp	r3, r2
 801780a:	d108      	bne.n	801781e <HAL_DMA_Init+0x186>
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	681a      	ldr	r2, [r3, #0]
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	f022 0201 	bic.w	r2, r2, #1
 801781a:	601a      	str	r2, [r3, #0]
 801781c:	e007      	b.n	801782e <HAL_DMA_Init+0x196>
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	681a      	ldr	r2, [r3, #0]
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	f022 0201 	bic.w	r2, r2, #1
 801782c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801782e:	e02f      	b.n	8017890 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8017830:	f7fd fd7c 	bl	801532c <HAL_GetTick>
 8017834:	4602      	mov	r2, r0
 8017836:	693b      	ldr	r3, [r7, #16]
 8017838:	1ad3      	subs	r3, r2, r3
 801783a:	2b05      	cmp	r3, #5
 801783c:	d928      	bls.n	8017890 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	2220      	movs	r2, #32
 8017842:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	2203      	movs	r2, #3
 8017848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 801784c:	2301      	movs	r3, #1
 801784e:	e244      	b.n	8017cda <HAL_DMA_Init+0x642>
 8017850:	40020010 	.word	0x40020010
 8017854:	40020028 	.word	0x40020028
 8017858:	40020040 	.word	0x40020040
 801785c:	40020058 	.word	0x40020058
 8017860:	40020070 	.word	0x40020070
 8017864:	40020088 	.word	0x40020088
 8017868:	400200a0 	.word	0x400200a0
 801786c:	400200b8 	.word	0x400200b8
 8017870:	40020410 	.word	0x40020410
 8017874:	40020428 	.word	0x40020428
 8017878:	40020440 	.word	0x40020440
 801787c:	40020458 	.word	0x40020458
 8017880:	40020470 	.word	0x40020470
 8017884:	40020488 	.word	0x40020488
 8017888:	400204a0 	.word	0x400204a0
 801788c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	f003 0301 	and.w	r3, r3, #1
 801789a:	2b00      	cmp	r3, #0
 801789c:	d1c8      	bne.n	8017830 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80178a6:	697a      	ldr	r2, [r7, #20]
 80178a8:	4b84      	ldr	r3, [pc, #528]	; (8017abc <HAL_DMA_Init+0x424>)
 80178aa:	4013      	ands	r3, r2
 80178ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80178b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	691b      	ldr	r3, [r3, #16]
 80178bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80178c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	699b      	ldr	r3, [r3, #24]
 80178c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80178ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	6a1b      	ldr	r3, [r3, #32]
 80178d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80178d6:	697a      	ldr	r2, [r7, #20]
 80178d8:	4313      	orrs	r3, r2
 80178da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178e0:	2b04      	cmp	r3, #4
 80178e2:	d107      	bne.n	80178f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178ec:	4313      	orrs	r3, r2
 80178ee:	697a      	ldr	r2, [r7, #20]
 80178f0:	4313      	orrs	r3, r2
 80178f2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	685b      	ldr	r3, [r3, #4]
 80178f8:	2b28      	cmp	r3, #40	; 0x28
 80178fa:	d903      	bls.n	8017904 <HAL_DMA_Init+0x26c>
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	685b      	ldr	r3, [r3, #4]
 8017900:	2b2e      	cmp	r3, #46	; 0x2e
 8017902:	d91f      	bls.n	8017944 <HAL_DMA_Init+0x2ac>
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	685b      	ldr	r3, [r3, #4]
 8017908:	2b3e      	cmp	r3, #62	; 0x3e
 801790a:	d903      	bls.n	8017914 <HAL_DMA_Init+0x27c>
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	685b      	ldr	r3, [r3, #4]
 8017910:	2b42      	cmp	r3, #66	; 0x42
 8017912:	d917      	bls.n	8017944 <HAL_DMA_Init+0x2ac>
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	685b      	ldr	r3, [r3, #4]
 8017918:	2b46      	cmp	r3, #70	; 0x46
 801791a:	d903      	bls.n	8017924 <HAL_DMA_Init+0x28c>
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	685b      	ldr	r3, [r3, #4]
 8017920:	2b48      	cmp	r3, #72	; 0x48
 8017922:	d90f      	bls.n	8017944 <HAL_DMA_Init+0x2ac>
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	685b      	ldr	r3, [r3, #4]
 8017928:	2b4e      	cmp	r3, #78	; 0x4e
 801792a:	d903      	bls.n	8017934 <HAL_DMA_Init+0x29c>
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	685b      	ldr	r3, [r3, #4]
 8017930:	2b52      	cmp	r3, #82	; 0x52
 8017932:	d907      	bls.n	8017944 <HAL_DMA_Init+0x2ac>
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	685b      	ldr	r3, [r3, #4]
 8017938:	2b73      	cmp	r3, #115	; 0x73
 801793a:	d905      	bls.n	8017948 <HAL_DMA_Init+0x2b0>
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	685b      	ldr	r3, [r3, #4]
 8017940:	2b77      	cmp	r3, #119	; 0x77
 8017942:	d801      	bhi.n	8017948 <HAL_DMA_Init+0x2b0>
 8017944:	2301      	movs	r3, #1
 8017946:	e000      	b.n	801794a <HAL_DMA_Init+0x2b2>
 8017948:	2300      	movs	r3, #0
 801794a:	2b00      	cmp	r3, #0
 801794c:	d003      	beq.n	8017956 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801794e:	697b      	ldr	r3, [r7, #20]
 8017950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017954:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	697a      	ldr	r2, [r7, #20]
 801795c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	695b      	ldr	r3, [r3, #20]
 8017964:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	f023 0307 	bic.w	r3, r3, #7
 801796c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017972:	697a      	ldr	r2, [r7, #20]
 8017974:	4313      	orrs	r3, r2
 8017976:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801797c:	2b04      	cmp	r3, #4
 801797e:	d117      	bne.n	80179b0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017984:	697a      	ldr	r2, [r7, #20]
 8017986:	4313      	orrs	r3, r2
 8017988:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801798e:	2b00      	cmp	r3, #0
 8017990:	d00e      	beq.n	80179b0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	f001 fdcc 	bl	8019530 <DMA_CheckFifoParam>
 8017998:	4603      	mov	r3, r0
 801799a:	2b00      	cmp	r3, #0
 801799c:	d008      	beq.n	80179b0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	2240      	movs	r2, #64	; 0x40
 80179a2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2201      	movs	r2, #1
 80179a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80179ac:	2301      	movs	r3, #1
 80179ae:	e194      	b.n	8017cda <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	697a      	ldr	r2, [r7, #20]
 80179b6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80179b8:	6878      	ldr	r0, [r7, #4]
 80179ba:	f001 fd07 	bl	80193cc <DMA_CalcBaseAndBitshift>
 80179be:	4603      	mov	r3, r0
 80179c0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179c6:	f003 031f 	and.w	r3, r3, #31
 80179ca:	223f      	movs	r2, #63	; 0x3f
 80179cc:	409a      	lsls	r2, r3
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	609a      	str	r2, [r3, #8]
 80179d2:	e0ca      	b.n	8017b6a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	4a39      	ldr	r2, [pc, #228]	; (8017ac0 <HAL_DMA_Init+0x428>)
 80179da:	4293      	cmp	r3, r2
 80179dc:	d022      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	4a38      	ldr	r2, [pc, #224]	; (8017ac4 <HAL_DMA_Init+0x42c>)
 80179e4:	4293      	cmp	r3, r2
 80179e6:	d01d      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	4a36      	ldr	r2, [pc, #216]	; (8017ac8 <HAL_DMA_Init+0x430>)
 80179ee:	4293      	cmp	r3, r2
 80179f0:	d018      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	4a35      	ldr	r2, [pc, #212]	; (8017acc <HAL_DMA_Init+0x434>)
 80179f8:	4293      	cmp	r3, r2
 80179fa:	d013      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	4a33      	ldr	r2, [pc, #204]	; (8017ad0 <HAL_DMA_Init+0x438>)
 8017a02:	4293      	cmp	r3, r2
 8017a04:	d00e      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	4a32      	ldr	r2, [pc, #200]	; (8017ad4 <HAL_DMA_Init+0x43c>)
 8017a0c:	4293      	cmp	r3, r2
 8017a0e:	d009      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	4a30      	ldr	r2, [pc, #192]	; (8017ad8 <HAL_DMA_Init+0x440>)
 8017a16:	4293      	cmp	r3, r2
 8017a18:	d004      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	4a2f      	ldr	r2, [pc, #188]	; (8017adc <HAL_DMA_Init+0x444>)
 8017a20:	4293      	cmp	r3, r2
 8017a22:	d101      	bne.n	8017a28 <HAL_DMA_Init+0x390>
 8017a24:	2301      	movs	r3, #1
 8017a26:	e000      	b.n	8017a2a <HAL_DMA_Init+0x392>
 8017a28:	2300      	movs	r3, #0
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	f000 8094 	beq.w	8017b58 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	4a22      	ldr	r2, [pc, #136]	; (8017ac0 <HAL_DMA_Init+0x428>)
 8017a36:	4293      	cmp	r3, r2
 8017a38:	d021      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	4a21      	ldr	r2, [pc, #132]	; (8017ac4 <HAL_DMA_Init+0x42c>)
 8017a40:	4293      	cmp	r3, r2
 8017a42:	d01c      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	4a1f      	ldr	r2, [pc, #124]	; (8017ac8 <HAL_DMA_Init+0x430>)
 8017a4a:	4293      	cmp	r3, r2
 8017a4c:	d017      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	4a1e      	ldr	r2, [pc, #120]	; (8017acc <HAL_DMA_Init+0x434>)
 8017a54:	4293      	cmp	r3, r2
 8017a56:	d012      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	4a1c      	ldr	r2, [pc, #112]	; (8017ad0 <HAL_DMA_Init+0x438>)
 8017a5e:	4293      	cmp	r3, r2
 8017a60:	d00d      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	4a1b      	ldr	r2, [pc, #108]	; (8017ad4 <HAL_DMA_Init+0x43c>)
 8017a68:	4293      	cmp	r3, r2
 8017a6a:	d008      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	4a19      	ldr	r2, [pc, #100]	; (8017ad8 <HAL_DMA_Init+0x440>)
 8017a72:	4293      	cmp	r3, r2
 8017a74:	d003      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	4a18      	ldr	r2, [pc, #96]	; (8017adc <HAL_DMA_Init+0x444>)
 8017a7c:	4293      	cmp	r3, r2
 8017a7e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2202      	movs	r2, #2
 8017a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2200      	movs	r2, #0
 8017a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8017a98:	697a      	ldr	r2, [r7, #20]
 8017a9a:	4b11      	ldr	r3, [pc, #68]	; (8017ae0 <HAL_DMA_Init+0x448>)
 8017a9c:	4013      	ands	r3, r2
 8017a9e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	689b      	ldr	r3, [r3, #8]
 8017aa4:	2b40      	cmp	r3, #64	; 0x40
 8017aa6:	d01d      	beq.n	8017ae4 <HAL_DMA_Init+0x44c>
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	689b      	ldr	r3, [r3, #8]
 8017aac:	2b80      	cmp	r3, #128	; 0x80
 8017aae:	d102      	bne.n	8017ab6 <HAL_DMA_Init+0x41e>
 8017ab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017ab4:	e017      	b.n	8017ae6 <HAL_DMA_Init+0x44e>
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	e015      	b.n	8017ae6 <HAL_DMA_Init+0x44e>
 8017aba:	bf00      	nop
 8017abc:	fe10803f 	.word	0xfe10803f
 8017ac0:	58025408 	.word	0x58025408
 8017ac4:	5802541c 	.word	0x5802541c
 8017ac8:	58025430 	.word	0x58025430
 8017acc:	58025444 	.word	0x58025444
 8017ad0:	58025458 	.word	0x58025458
 8017ad4:	5802546c 	.word	0x5802546c
 8017ad8:	58025480 	.word	0x58025480
 8017adc:	58025494 	.word	0x58025494
 8017ae0:	fffe000f 	.word	0xfffe000f
 8017ae4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017ae6:	687a      	ldr	r2, [r7, #4]
 8017ae8:	68d2      	ldr	r2, [r2, #12]
 8017aea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017aec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	691b      	ldr	r3, [r3, #16]
 8017af2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017af4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	695b      	ldr	r3, [r3, #20]
 8017afa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8017afc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	699b      	ldr	r3, [r3, #24]
 8017b02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8017b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	69db      	ldr	r3, [r3, #28]
 8017b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8017b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	6a1b      	ldr	r3, [r3, #32]
 8017b12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8017b14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017b16:	697a      	ldr	r2, [r7, #20]
 8017b18:	4313      	orrs	r3, r2
 8017b1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	697a      	ldr	r2, [r7, #20]
 8017b22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	461a      	mov	r2, r3
 8017b2a:	4b6e      	ldr	r3, [pc, #440]	; (8017ce4 <HAL_DMA_Init+0x64c>)
 8017b2c:	4413      	add	r3, r2
 8017b2e:	4a6e      	ldr	r2, [pc, #440]	; (8017ce8 <HAL_DMA_Init+0x650>)
 8017b30:	fba2 2303 	umull	r2, r3, r2, r3
 8017b34:	091b      	lsrs	r3, r3, #4
 8017b36:	009a      	lsls	r2, r3, #2
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017b3c:	6878      	ldr	r0, [r7, #4]
 8017b3e:	f001 fc45 	bl	80193cc <DMA_CalcBaseAndBitshift>
 8017b42:	4603      	mov	r3, r0
 8017b44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017b4a:	f003 031f 	and.w	r3, r3, #31
 8017b4e:	2201      	movs	r2, #1
 8017b50:	409a      	lsls	r2, r3
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	605a      	str	r2, [r3, #4]
 8017b56:	e008      	b.n	8017b6a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	2240      	movs	r2, #64	; 0x40
 8017b5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	2203      	movs	r2, #3
 8017b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8017b66:	2301      	movs	r3, #1
 8017b68:	e0b7      	b.n	8017cda <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	4a5f      	ldr	r2, [pc, #380]	; (8017cec <HAL_DMA_Init+0x654>)
 8017b70:	4293      	cmp	r3, r2
 8017b72:	d072      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	4a5d      	ldr	r2, [pc, #372]	; (8017cf0 <HAL_DMA_Init+0x658>)
 8017b7a:	4293      	cmp	r3, r2
 8017b7c:	d06d      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	4a5c      	ldr	r2, [pc, #368]	; (8017cf4 <HAL_DMA_Init+0x65c>)
 8017b84:	4293      	cmp	r3, r2
 8017b86:	d068      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	4a5a      	ldr	r2, [pc, #360]	; (8017cf8 <HAL_DMA_Init+0x660>)
 8017b8e:	4293      	cmp	r3, r2
 8017b90:	d063      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	4a59      	ldr	r2, [pc, #356]	; (8017cfc <HAL_DMA_Init+0x664>)
 8017b98:	4293      	cmp	r3, r2
 8017b9a:	d05e      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	4a57      	ldr	r2, [pc, #348]	; (8017d00 <HAL_DMA_Init+0x668>)
 8017ba2:	4293      	cmp	r3, r2
 8017ba4:	d059      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	4a56      	ldr	r2, [pc, #344]	; (8017d04 <HAL_DMA_Init+0x66c>)
 8017bac:	4293      	cmp	r3, r2
 8017bae:	d054      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	4a54      	ldr	r2, [pc, #336]	; (8017d08 <HAL_DMA_Init+0x670>)
 8017bb6:	4293      	cmp	r3, r2
 8017bb8:	d04f      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	4a53      	ldr	r2, [pc, #332]	; (8017d0c <HAL_DMA_Init+0x674>)
 8017bc0:	4293      	cmp	r3, r2
 8017bc2:	d04a      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	4a51      	ldr	r2, [pc, #324]	; (8017d10 <HAL_DMA_Init+0x678>)
 8017bca:	4293      	cmp	r3, r2
 8017bcc:	d045      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	4a50      	ldr	r2, [pc, #320]	; (8017d14 <HAL_DMA_Init+0x67c>)
 8017bd4:	4293      	cmp	r3, r2
 8017bd6:	d040      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	4a4e      	ldr	r2, [pc, #312]	; (8017d18 <HAL_DMA_Init+0x680>)
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d03b      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	4a4d      	ldr	r2, [pc, #308]	; (8017d1c <HAL_DMA_Init+0x684>)
 8017be8:	4293      	cmp	r3, r2
 8017bea:	d036      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	4a4b      	ldr	r2, [pc, #300]	; (8017d20 <HAL_DMA_Init+0x688>)
 8017bf2:	4293      	cmp	r3, r2
 8017bf4:	d031      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	4a4a      	ldr	r2, [pc, #296]	; (8017d24 <HAL_DMA_Init+0x68c>)
 8017bfc:	4293      	cmp	r3, r2
 8017bfe:	d02c      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	4a48      	ldr	r2, [pc, #288]	; (8017d28 <HAL_DMA_Init+0x690>)
 8017c06:	4293      	cmp	r3, r2
 8017c08:	d027      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	4a47      	ldr	r2, [pc, #284]	; (8017d2c <HAL_DMA_Init+0x694>)
 8017c10:	4293      	cmp	r3, r2
 8017c12:	d022      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	4a45      	ldr	r2, [pc, #276]	; (8017d30 <HAL_DMA_Init+0x698>)
 8017c1a:	4293      	cmp	r3, r2
 8017c1c:	d01d      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	4a44      	ldr	r2, [pc, #272]	; (8017d34 <HAL_DMA_Init+0x69c>)
 8017c24:	4293      	cmp	r3, r2
 8017c26:	d018      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	4a42      	ldr	r2, [pc, #264]	; (8017d38 <HAL_DMA_Init+0x6a0>)
 8017c2e:	4293      	cmp	r3, r2
 8017c30:	d013      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	4a41      	ldr	r2, [pc, #260]	; (8017d3c <HAL_DMA_Init+0x6a4>)
 8017c38:	4293      	cmp	r3, r2
 8017c3a:	d00e      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	4a3f      	ldr	r2, [pc, #252]	; (8017d40 <HAL_DMA_Init+0x6a8>)
 8017c42:	4293      	cmp	r3, r2
 8017c44:	d009      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	4a3e      	ldr	r2, [pc, #248]	; (8017d44 <HAL_DMA_Init+0x6ac>)
 8017c4c:	4293      	cmp	r3, r2
 8017c4e:	d004      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4a3c      	ldr	r2, [pc, #240]	; (8017d48 <HAL_DMA_Init+0x6b0>)
 8017c56:	4293      	cmp	r3, r2
 8017c58:	d101      	bne.n	8017c5e <HAL_DMA_Init+0x5c6>
 8017c5a:	2301      	movs	r3, #1
 8017c5c:	e000      	b.n	8017c60 <HAL_DMA_Init+0x5c8>
 8017c5e:	2300      	movs	r3, #0
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d032      	beq.n	8017cca <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8017c64:	6878      	ldr	r0, [r7, #4]
 8017c66:	f001 fcdf 	bl	8019628 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	689b      	ldr	r3, [r3, #8]
 8017c6e:	2b80      	cmp	r3, #128	; 0x80
 8017c70:	d102      	bne.n	8017c78 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	2200      	movs	r2, #0
 8017c76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	685a      	ldr	r2, [r3, #4]
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017c80:	b2d2      	uxtb	r2, r2
 8017c82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017c88:	687a      	ldr	r2, [r7, #4]
 8017c8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017c8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	685b      	ldr	r3, [r3, #4]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d010      	beq.n	8017cb8 <HAL_DMA_Init+0x620>
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	685b      	ldr	r3, [r3, #4]
 8017c9a:	2b08      	cmp	r3, #8
 8017c9c:	d80c      	bhi.n	8017cb8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8017c9e:	6878      	ldr	r0, [r7, #4]
 8017ca0:	f001 fd5c 	bl	801975c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ca8:	2200      	movs	r2, #0
 8017caa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cb0:	687a      	ldr	r2, [r7, #4]
 8017cb2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8017cb4:	605a      	str	r2, [r3, #4]
 8017cb6:	e008      	b.n	8017cca <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	2200      	movs	r2, #0
 8017cbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	2200      	movs	r2, #0
 8017cce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	2201      	movs	r2, #1
 8017cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8017cd8:	2300      	movs	r3, #0
}
 8017cda:	4618      	mov	r0, r3
 8017cdc:	3718      	adds	r7, #24
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}
 8017ce2:	bf00      	nop
 8017ce4:	a7fdabf8 	.word	0xa7fdabf8
 8017ce8:	cccccccd 	.word	0xcccccccd
 8017cec:	40020010 	.word	0x40020010
 8017cf0:	40020028 	.word	0x40020028
 8017cf4:	40020040 	.word	0x40020040
 8017cf8:	40020058 	.word	0x40020058
 8017cfc:	40020070 	.word	0x40020070
 8017d00:	40020088 	.word	0x40020088
 8017d04:	400200a0 	.word	0x400200a0
 8017d08:	400200b8 	.word	0x400200b8
 8017d0c:	40020410 	.word	0x40020410
 8017d10:	40020428 	.word	0x40020428
 8017d14:	40020440 	.word	0x40020440
 8017d18:	40020458 	.word	0x40020458
 8017d1c:	40020470 	.word	0x40020470
 8017d20:	40020488 	.word	0x40020488
 8017d24:	400204a0 	.word	0x400204a0
 8017d28:	400204b8 	.word	0x400204b8
 8017d2c:	58025408 	.word	0x58025408
 8017d30:	5802541c 	.word	0x5802541c
 8017d34:	58025430 	.word	0x58025430
 8017d38:	58025444 	.word	0x58025444
 8017d3c:	58025458 	.word	0x58025458
 8017d40:	5802546c 	.word	0x5802546c
 8017d44:	58025480 	.word	0x58025480
 8017d48:	58025494 	.word	0x58025494

08017d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b086      	sub	sp, #24
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	60f8      	str	r0, [r7, #12]
 8017d54:	60b9      	str	r1, [r7, #8]
 8017d56:	607a      	str	r2, [r7, #4]
 8017d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d101      	bne.n	8017d68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8017d64:	2301      	movs	r3, #1
 8017d66:	e226      	b.n	80181b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017d6e:	2b01      	cmp	r3, #1
 8017d70:	d101      	bne.n	8017d76 <HAL_DMA_Start_IT+0x2a>
 8017d72:	2302      	movs	r3, #2
 8017d74:	e21f      	b.n	80181b6 <HAL_DMA_Start_IT+0x46a>
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	2201      	movs	r2, #1
 8017d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017d84:	b2db      	uxtb	r3, r3
 8017d86:	2b01      	cmp	r3, #1
 8017d88:	f040 820a 	bne.w	80181a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	2202      	movs	r2, #2
 8017d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	2200      	movs	r2, #0
 8017d98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	4a68      	ldr	r2, [pc, #416]	; (8017f40 <HAL_DMA_Start_IT+0x1f4>)
 8017da0:	4293      	cmp	r3, r2
 8017da2:	d04a      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	4a66      	ldr	r2, [pc, #408]	; (8017f44 <HAL_DMA_Start_IT+0x1f8>)
 8017daa:	4293      	cmp	r3, r2
 8017dac:	d045      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	4a65      	ldr	r2, [pc, #404]	; (8017f48 <HAL_DMA_Start_IT+0x1fc>)
 8017db4:	4293      	cmp	r3, r2
 8017db6:	d040      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	4a63      	ldr	r2, [pc, #396]	; (8017f4c <HAL_DMA_Start_IT+0x200>)
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	d03b      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	4a62      	ldr	r2, [pc, #392]	; (8017f50 <HAL_DMA_Start_IT+0x204>)
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	d036      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	4a60      	ldr	r2, [pc, #384]	; (8017f54 <HAL_DMA_Start_IT+0x208>)
 8017dd2:	4293      	cmp	r3, r2
 8017dd4:	d031      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	4a5f      	ldr	r2, [pc, #380]	; (8017f58 <HAL_DMA_Start_IT+0x20c>)
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	d02c      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	4a5d      	ldr	r2, [pc, #372]	; (8017f5c <HAL_DMA_Start_IT+0x210>)
 8017de6:	4293      	cmp	r3, r2
 8017de8:	d027      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	4a5c      	ldr	r2, [pc, #368]	; (8017f60 <HAL_DMA_Start_IT+0x214>)
 8017df0:	4293      	cmp	r3, r2
 8017df2:	d022      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4a5a      	ldr	r2, [pc, #360]	; (8017f64 <HAL_DMA_Start_IT+0x218>)
 8017dfa:	4293      	cmp	r3, r2
 8017dfc:	d01d      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	4a59      	ldr	r2, [pc, #356]	; (8017f68 <HAL_DMA_Start_IT+0x21c>)
 8017e04:	4293      	cmp	r3, r2
 8017e06:	d018      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	4a57      	ldr	r2, [pc, #348]	; (8017f6c <HAL_DMA_Start_IT+0x220>)
 8017e0e:	4293      	cmp	r3, r2
 8017e10:	d013      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	4a56      	ldr	r2, [pc, #344]	; (8017f70 <HAL_DMA_Start_IT+0x224>)
 8017e18:	4293      	cmp	r3, r2
 8017e1a:	d00e      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	4a54      	ldr	r2, [pc, #336]	; (8017f74 <HAL_DMA_Start_IT+0x228>)
 8017e22:	4293      	cmp	r3, r2
 8017e24:	d009      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	4a53      	ldr	r2, [pc, #332]	; (8017f78 <HAL_DMA_Start_IT+0x22c>)
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	d004      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	4a51      	ldr	r2, [pc, #324]	; (8017f7c <HAL_DMA_Start_IT+0x230>)
 8017e36:	4293      	cmp	r3, r2
 8017e38:	d108      	bne.n	8017e4c <HAL_DMA_Start_IT+0x100>
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	681a      	ldr	r2, [r3, #0]
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	f022 0201 	bic.w	r2, r2, #1
 8017e48:	601a      	str	r2, [r3, #0]
 8017e4a:	e007      	b.n	8017e5c <HAL_DMA_Start_IT+0x110>
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	681a      	ldr	r2, [r3, #0]
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	f022 0201 	bic.w	r2, r2, #1
 8017e5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017e5c:	683b      	ldr	r3, [r7, #0]
 8017e5e:	687a      	ldr	r2, [r7, #4]
 8017e60:	68b9      	ldr	r1, [r7, #8]
 8017e62:	68f8      	ldr	r0, [r7, #12]
 8017e64:	f001 f906 	bl	8019074 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	4a34      	ldr	r2, [pc, #208]	; (8017f40 <HAL_DMA_Start_IT+0x1f4>)
 8017e6e:	4293      	cmp	r3, r2
 8017e70:	d04a      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	4a33      	ldr	r2, [pc, #204]	; (8017f44 <HAL_DMA_Start_IT+0x1f8>)
 8017e78:	4293      	cmp	r3, r2
 8017e7a:	d045      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	4a31      	ldr	r2, [pc, #196]	; (8017f48 <HAL_DMA_Start_IT+0x1fc>)
 8017e82:	4293      	cmp	r3, r2
 8017e84:	d040      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	4a30      	ldr	r2, [pc, #192]	; (8017f4c <HAL_DMA_Start_IT+0x200>)
 8017e8c:	4293      	cmp	r3, r2
 8017e8e:	d03b      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	4a2e      	ldr	r2, [pc, #184]	; (8017f50 <HAL_DMA_Start_IT+0x204>)
 8017e96:	4293      	cmp	r3, r2
 8017e98:	d036      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	4a2d      	ldr	r2, [pc, #180]	; (8017f54 <HAL_DMA_Start_IT+0x208>)
 8017ea0:	4293      	cmp	r3, r2
 8017ea2:	d031      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	4a2b      	ldr	r2, [pc, #172]	; (8017f58 <HAL_DMA_Start_IT+0x20c>)
 8017eaa:	4293      	cmp	r3, r2
 8017eac:	d02c      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	4a2a      	ldr	r2, [pc, #168]	; (8017f5c <HAL_DMA_Start_IT+0x210>)
 8017eb4:	4293      	cmp	r3, r2
 8017eb6:	d027      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	4a28      	ldr	r2, [pc, #160]	; (8017f60 <HAL_DMA_Start_IT+0x214>)
 8017ebe:	4293      	cmp	r3, r2
 8017ec0:	d022      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	4a27      	ldr	r2, [pc, #156]	; (8017f64 <HAL_DMA_Start_IT+0x218>)
 8017ec8:	4293      	cmp	r3, r2
 8017eca:	d01d      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	4a25      	ldr	r2, [pc, #148]	; (8017f68 <HAL_DMA_Start_IT+0x21c>)
 8017ed2:	4293      	cmp	r3, r2
 8017ed4:	d018      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	4a24      	ldr	r2, [pc, #144]	; (8017f6c <HAL_DMA_Start_IT+0x220>)
 8017edc:	4293      	cmp	r3, r2
 8017ede:	d013      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	4a22      	ldr	r2, [pc, #136]	; (8017f70 <HAL_DMA_Start_IT+0x224>)
 8017ee6:	4293      	cmp	r3, r2
 8017ee8:	d00e      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	4a21      	ldr	r2, [pc, #132]	; (8017f74 <HAL_DMA_Start_IT+0x228>)
 8017ef0:	4293      	cmp	r3, r2
 8017ef2:	d009      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	4a1f      	ldr	r2, [pc, #124]	; (8017f78 <HAL_DMA_Start_IT+0x22c>)
 8017efa:	4293      	cmp	r3, r2
 8017efc:	d004      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	4a1e      	ldr	r2, [pc, #120]	; (8017f7c <HAL_DMA_Start_IT+0x230>)
 8017f04:	4293      	cmp	r3, r2
 8017f06:	d101      	bne.n	8017f0c <HAL_DMA_Start_IT+0x1c0>
 8017f08:	2301      	movs	r3, #1
 8017f0a:	e000      	b.n	8017f0e <HAL_DMA_Start_IT+0x1c2>
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d036      	beq.n	8017f80 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	f023 021e 	bic.w	r2, r3, #30
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	f042 0216 	orr.w	r2, r2, #22
 8017f24:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d03e      	beq.n	8017fac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	681a      	ldr	r2, [r3, #0]
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	f042 0208 	orr.w	r2, r2, #8
 8017f3c:	601a      	str	r2, [r3, #0]
 8017f3e:	e035      	b.n	8017fac <HAL_DMA_Start_IT+0x260>
 8017f40:	40020010 	.word	0x40020010
 8017f44:	40020028 	.word	0x40020028
 8017f48:	40020040 	.word	0x40020040
 8017f4c:	40020058 	.word	0x40020058
 8017f50:	40020070 	.word	0x40020070
 8017f54:	40020088 	.word	0x40020088
 8017f58:	400200a0 	.word	0x400200a0
 8017f5c:	400200b8 	.word	0x400200b8
 8017f60:	40020410 	.word	0x40020410
 8017f64:	40020428 	.word	0x40020428
 8017f68:	40020440 	.word	0x40020440
 8017f6c:	40020458 	.word	0x40020458
 8017f70:	40020470 	.word	0x40020470
 8017f74:	40020488 	.word	0x40020488
 8017f78:	400204a0 	.word	0x400204a0
 8017f7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	f023 020e 	bic.w	r2, r3, #14
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	f042 020a 	orr.w	r2, r2, #10
 8017f92:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d007      	beq.n	8017fac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	f042 0204 	orr.w	r2, r2, #4
 8017faa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	4a83      	ldr	r2, [pc, #524]	; (80181c0 <HAL_DMA_Start_IT+0x474>)
 8017fb2:	4293      	cmp	r3, r2
 8017fb4:	d072      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	4a82      	ldr	r2, [pc, #520]	; (80181c4 <HAL_DMA_Start_IT+0x478>)
 8017fbc:	4293      	cmp	r3, r2
 8017fbe:	d06d      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	4a80      	ldr	r2, [pc, #512]	; (80181c8 <HAL_DMA_Start_IT+0x47c>)
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	d068      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	4a7f      	ldr	r2, [pc, #508]	; (80181cc <HAL_DMA_Start_IT+0x480>)
 8017fd0:	4293      	cmp	r3, r2
 8017fd2:	d063      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	4a7d      	ldr	r2, [pc, #500]	; (80181d0 <HAL_DMA_Start_IT+0x484>)
 8017fda:	4293      	cmp	r3, r2
 8017fdc:	d05e      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	4a7c      	ldr	r2, [pc, #496]	; (80181d4 <HAL_DMA_Start_IT+0x488>)
 8017fe4:	4293      	cmp	r3, r2
 8017fe6:	d059      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	4a7a      	ldr	r2, [pc, #488]	; (80181d8 <HAL_DMA_Start_IT+0x48c>)
 8017fee:	4293      	cmp	r3, r2
 8017ff0:	d054      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	4a79      	ldr	r2, [pc, #484]	; (80181dc <HAL_DMA_Start_IT+0x490>)
 8017ff8:	4293      	cmp	r3, r2
 8017ffa:	d04f      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	4a77      	ldr	r2, [pc, #476]	; (80181e0 <HAL_DMA_Start_IT+0x494>)
 8018002:	4293      	cmp	r3, r2
 8018004:	d04a      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	4a76      	ldr	r2, [pc, #472]	; (80181e4 <HAL_DMA_Start_IT+0x498>)
 801800c:	4293      	cmp	r3, r2
 801800e:	d045      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	4a74      	ldr	r2, [pc, #464]	; (80181e8 <HAL_DMA_Start_IT+0x49c>)
 8018016:	4293      	cmp	r3, r2
 8018018:	d040      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	4a73      	ldr	r2, [pc, #460]	; (80181ec <HAL_DMA_Start_IT+0x4a0>)
 8018020:	4293      	cmp	r3, r2
 8018022:	d03b      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	4a71      	ldr	r2, [pc, #452]	; (80181f0 <HAL_DMA_Start_IT+0x4a4>)
 801802a:	4293      	cmp	r3, r2
 801802c:	d036      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	4a70      	ldr	r2, [pc, #448]	; (80181f4 <HAL_DMA_Start_IT+0x4a8>)
 8018034:	4293      	cmp	r3, r2
 8018036:	d031      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	4a6e      	ldr	r2, [pc, #440]	; (80181f8 <HAL_DMA_Start_IT+0x4ac>)
 801803e:	4293      	cmp	r3, r2
 8018040:	d02c      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4a6d      	ldr	r2, [pc, #436]	; (80181fc <HAL_DMA_Start_IT+0x4b0>)
 8018048:	4293      	cmp	r3, r2
 801804a:	d027      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	4a6b      	ldr	r2, [pc, #428]	; (8018200 <HAL_DMA_Start_IT+0x4b4>)
 8018052:	4293      	cmp	r3, r2
 8018054:	d022      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	4a6a      	ldr	r2, [pc, #424]	; (8018204 <HAL_DMA_Start_IT+0x4b8>)
 801805c:	4293      	cmp	r3, r2
 801805e:	d01d      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	4a68      	ldr	r2, [pc, #416]	; (8018208 <HAL_DMA_Start_IT+0x4bc>)
 8018066:	4293      	cmp	r3, r2
 8018068:	d018      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	4a67      	ldr	r2, [pc, #412]	; (801820c <HAL_DMA_Start_IT+0x4c0>)
 8018070:	4293      	cmp	r3, r2
 8018072:	d013      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	4a65      	ldr	r2, [pc, #404]	; (8018210 <HAL_DMA_Start_IT+0x4c4>)
 801807a:	4293      	cmp	r3, r2
 801807c:	d00e      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	4a64      	ldr	r2, [pc, #400]	; (8018214 <HAL_DMA_Start_IT+0x4c8>)
 8018084:	4293      	cmp	r3, r2
 8018086:	d009      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	4a62      	ldr	r2, [pc, #392]	; (8018218 <HAL_DMA_Start_IT+0x4cc>)
 801808e:	4293      	cmp	r3, r2
 8018090:	d004      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	4a61      	ldr	r2, [pc, #388]	; (801821c <HAL_DMA_Start_IT+0x4d0>)
 8018098:	4293      	cmp	r3, r2
 801809a:	d101      	bne.n	80180a0 <HAL_DMA_Start_IT+0x354>
 801809c:	2301      	movs	r3, #1
 801809e:	e000      	b.n	80180a2 <HAL_DMA_Start_IT+0x356>
 80180a0:	2300      	movs	r3, #0
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d01a      	beq.n	80180dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d007      	beq.n	80180c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180b8:	681a      	ldr	r2, [r3, #0]
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80180c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d007      	beq.n	80180dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180d0:	681a      	ldr	r2, [r3, #0]
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80180da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	4a37      	ldr	r2, [pc, #220]	; (80181c0 <HAL_DMA_Start_IT+0x474>)
 80180e2:	4293      	cmp	r3, r2
 80180e4:	d04a      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	4a36      	ldr	r2, [pc, #216]	; (80181c4 <HAL_DMA_Start_IT+0x478>)
 80180ec:	4293      	cmp	r3, r2
 80180ee:	d045      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	4a34      	ldr	r2, [pc, #208]	; (80181c8 <HAL_DMA_Start_IT+0x47c>)
 80180f6:	4293      	cmp	r3, r2
 80180f8:	d040      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	4a33      	ldr	r2, [pc, #204]	; (80181cc <HAL_DMA_Start_IT+0x480>)
 8018100:	4293      	cmp	r3, r2
 8018102:	d03b      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	4a31      	ldr	r2, [pc, #196]	; (80181d0 <HAL_DMA_Start_IT+0x484>)
 801810a:	4293      	cmp	r3, r2
 801810c:	d036      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	4a30      	ldr	r2, [pc, #192]	; (80181d4 <HAL_DMA_Start_IT+0x488>)
 8018114:	4293      	cmp	r3, r2
 8018116:	d031      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	4a2e      	ldr	r2, [pc, #184]	; (80181d8 <HAL_DMA_Start_IT+0x48c>)
 801811e:	4293      	cmp	r3, r2
 8018120:	d02c      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	4a2d      	ldr	r2, [pc, #180]	; (80181dc <HAL_DMA_Start_IT+0x490>)
 8018128:	4293      	cmp	r3, r2
 801812a:	d027      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	4a2b      	ldr	r2, [pc, #172]	; (80181e0 <HAL_DMA_Start_IT+0x494>)
 8018132:	4293      	cmp	r3, r2
 8018134:	d022      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	4a2a      	ldr	r2, [pc, #168]	; (80181e4 <HAL_DMA_Start_IT+0x498>)
 801813c:	4293      	cmp	r3, r2
 801813e:	d01d      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	4a28      	ldr	r2, [pc, #160]	; (80181e8 <HAL_DMA_Start_IT+0x49c>)
 8018146:	4293      	cmp	r3, r2
 8018148:	d018      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	4a27      	ldr	r2, [pc, #156]	; (80181ec <HAL_DMA_Start_IT+0x4a0>)
 8018150:	4293      	cmp	r3, r2
 8018152:	d013      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	4a25      	ldr	r2, [pc, #148]	; (80181f0 <HAL_DMA_Start_IT+0x4a4>)
 801815a:	4293      	cmp	r3, r2
 801815c:	d00e      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	4a24      	ldr	r2, [pc, #144]	; (80181f4 <HAL_DMA_Start_IT+0x4a8>)
 8018164:	4293      	cmp	r3, r2
 8018166:	d009      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	4a22      	ldr	r2, [pc, #136]	; (80181f8 <HAL_DMA_Start_IT+0x4ac>)
 801816e:	4293      	cmp	r3, r2
 8018170:	d004      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	4a21      	ldr	r2, [pc, #132]	; (80181fc <HAL_DMA_Start_IT+0x4b0>)
 8018178:	4293      	cmp	r3, r2
 801817a:	d108      	bne.n	801818e <HAL_DMA_Start_IT+0x442>
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	681a      	ldr	r2, [r3, #0]
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	f042 0201 	orr.w	r2, r2, #1
 801818a:	601a      	str	r2, [r3, #0]
 801818c:	e012      	b.n	80181b4 <HAL_DMA_Start_IT+0x468>
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	f042 0201 	orr.w	r2, r2, #1
 801819c:	601a      	str	r2, [r3, #0]
 801819e:	e009      	b.n	80181b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80181a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	2200      	movs	r2, #0
 80181ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80181b0:	2301      	movs	r3, #1
 80181b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80181b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80181b6:	4618      	mov	r0, r3
 80181b8:	3718      	adds	r7, #24
 80181ba:	46bd      	mov	sp, r7
 80181bc:	bd80      	pop	{r7, pc}
 80181be:	bf00      	nop
 80181c0:	40020010 	.word	0x40020010
 80181c4:	40020028 	.word	0x40020028
 80181c8:	40020040 	.word	0x40020040
 80181cc:	40020058 	.word	0x40020058
 80181d0:	40020070 	.word	0x40020070
 80181d4:	40020088 	.word	0x40020088
 80181d8:	400200a0 	.word	0x400200a0
 80181dc:	400200b8 	.word	0x400200b8
 80181e0:	40020410 	.word	0x40020410
 80181e4:	40020428 	.word	0x40020428
 80181e8:	40020440 	.word	0x40020440
 80181ec:	40020458 	.word	0x40020458
 80181f0:	40020470 	.word	0x40020470
 80181f4:	40020488 	.word	0x40020488
 80181f8:	400204a0 	.word	0x400204a0
 80181fc:	400204b8 	.word	0x400204b8
 8018200:	58025408 	.word	0x58025408
 8018204:	5802541c 	.word	0x5802541c
 8018208:	58025430 	.word	0x58025430
 801820c:	58025444 	.word	0x58025444
 8018210:	58025458 	.word	0x58025458
 8018214:	5802546c 	.word	0x5802546c
 8018218:	58025480 	.word	0x58025480
 801821c:	58025494 	.word	0x58025494

08018220 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b08a      	sub	sp, #40	; 0x28
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8018228:	2300      	movs	r3, #0
 801822a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801822c:	4b67      	ldr	r3, [pc, #412]	; (80183cc <HAL_DMA_IRQHandler+0x1ac>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	4a67      	ldr	r2, [pc, #412]	; (80183d0 <HAL_DMA_IRQHandler+0x1b0>)
 8018232:	fba2 2303 	umull	r2, r3, r2, r3
 8018236:	0a9b      	lsrs	r3, r3, #10
 8018238:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801823e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018244:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8018246:	6a3b      	ldr	r3, [r7, #32]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801824c:	69fb      	ldr	r3, [r7, #28]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	4a5f      	ldr	r2, [pc, #380]	; (80183d4 <HAL_DMA_IRQHandler+0x1b4>)
 8018258:	4293      	cmp	r3, r2
 801825a:	d04a      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	4a5d      	ldr	r2, [pc, #372]	; (80183d8 <HAL_DMA_IRQHandler+0x1b8>)
 8018262:	4293      	cmp	r3, r2
 8018264:	d045      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	4a5c      	ldr	r2, [pc, #368]	; (80183dc <HAL_DMA_IRQHandler+0x1bc>)
 801826c:	4293      	cmp	r3, r2
 801826e:	d040      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	4a5a      	ldr	r2, [pc, #360]	; (80183e0 <HAL_DMA_IRQHandler+0x1c0>)
 8018276:	4293      	cmp	r3, r2
 8018278:	d03b      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	4a59      	ldr	r2, [pc, #356]	; (80183e4 <HAL_DMA_IRQHandler+0x1c4>)
 8018280:	4293      	cmp	r3, r2
 8018282:	d036      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	4a57      	ldr	r2, [pc, #348]	; (80183e8 <HAL_DMA_IRQHandler+0x1c8>)
 801828a:	4293      	cmp	r3, r2
 801828c:	d031      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	4a56      	ldr	r2, [pc, #344]	; (80183ec <HAL_DMA_IRQHandler+0x1cc>)
 8018294:	4293      	cmp	r3, r2
 8018296:	d02c      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	4a54      	ldr	r2, [pc, #336]	; (80183f0 <HAL_DMA_IRQHandler+0x1d0>)
 801829e:	4293      	cmp	r3, r2
 80182a0:	d027      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	4a53      	ldr	r2, [pc, #332]	; (80183f4 <HAL_DMA_IRQHandler+0x1d4>)
 80182a8:	4293      	cmp	r3, r2
 80182aa:	d022      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	4a51      	ldr	r2, [pc, #324]	; (80183f8 <HAL_DMA_IRQHandler+0x1d8>)
 80182b2:	4293      	cmp	r3, r2
 80182b4:	d01d      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	4a50      	ldr	r2, [pc, #320]	; (80183fc <HAL_DMA_IRQHandler+0x1dc>)
 80182bc:	4293      	cmp	r3, r2
 80182be:	d018      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	4a4e      	ldr	r2, [pc, #312]	; (8018400 <HAL_DMA_IRQHandler+0x1e0>)
 80182c6:	4293      	cmp	r3, r2
 80182c8:	d013      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	4a4d      	ldr	r2, [pc, #308]	; (8018404 <HAL_DMA_IRQHandler+0x1e4>)
 80182d0:	4293      	cmp	r3, r2
 80182d2:	d00e      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	4a4b      	ldr	r2, [pc, #300]	; (8018408 <HAL_DMA_IRQHandler+0x1e8>)
 80182da:	4293      	cmp	r3, r2
 80182dc:	d009      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	4a4a      	ldr	r2, [pc, #296]	; (801840c <HAL_DMA_IRQHandler+0x1ec>)
 80182e4:	4293      	cmp	r3, r2
 80182e6:	d004      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	4a48      	ldr	r2, [pc, #288]	; (8018410 <HAL_DMA_IRQHandler+0x1f0>)
 80182ee:	4293      	cmp	r3, r2
 80182f0:	d101      	bne.n	80182f6 <HAL_DMA_IRQHandler+0xd6>
 80182f2:	2301      	movs	r3, #1
 80182f4:	e000      	b.n	80182f8 <HAL_DMA_IRQHandler+0xd8>
 80182f6:	2300      	movs	r3, #0
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	f000 842b 	beq.w	8018b54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018302:	f003 031f 	and.w	r3, r3, #31
 8018306:	2208      	movs	r2, #8
 8018308:	409a      	lsls	r2, r3
 801830a:	69bb      	ldr	r3, [r7, #24]
 801830c:	4013      	ands	r3, r2
 801830e:	2b00      	cmp	r3, #0
 8018310:	f000 80a2 	beq.w	8018458 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	4a2e      	ldr	r2, [pc, #184]	; (80183d4 <HAL_DMA_IRQHandler+0x1b4>)
 801831a:	4293      	cmp	r3, r2
 801831c:	d04a      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	4a2d      	ldr	r2, [pc, #180]	; (80183d8 <HAL_DMA_IRQHandler+0x1b8>)
 8018324:	4293      	cmp	r3, r2
 8018326:	d045      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	4a2b      	ldr	r2, [pc, #172]	; (80183dc <HAL_DMA_IRQHandler+0x1bc>)
 801832e:	4293      	cmp	r3, r2
 8018330:	d040      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	4a2a      	ldr	r2, [pc, #168]	; (80183e0 <HAL_DMA_IRQHandler+0x1c0>)
 8018338:	4293      	cmp	r3, r2
 801833a:	d03b      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	4a28      	ldr	r2, [pc, #160]	; (80183e4 <HAL_DMA_IRQHandler+0x1c4>)
 8018342:	4293      	cmp	r3, r2
 8018344:	d036      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	4a27      	ldr	r2, [pc, #156]	; (80183e8 <HAL_DMA_IRQHandler+0x1c8>)
 801834c:	4293      	cmp	r3, r2
 801834e:	d031      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4a25      	ldr	r2, [pc, #148]	; (80183ec <HAL_DMA_IRQHandler+0x1cc>)
 8018356:	4293      	cmp	r3, r2
 8018358:	d02c      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	4a24      	ldr	r2, [pc, #144]	; (80183f0 <HAL_DMA_IRQHandler+0x1d0>)
 8018360:	4293      	cmp	r3, r2
 8018362:	d027      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	4a22      	ldr	r2, [pc, #136]	; (80183f4 <HAL_DMA_IRQHandler+0x1d4>)
 801836a:	4293      	cmp	r3, r2
 801836c:	d022      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	4a21      	ldr	r2, [pc, #132]	; (80183f8 <HAL_DMA_IRQHandler+0x1d8>)
 8018374:	4293      	cmp	r3, r2
 8018376:	d01d      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	4a1f      	ldr	r2, [pc, #124]	; (80183fc <HAL_DMA_IRQHandler+0x1dc>)
 801837e:	4293      	cmp	r3, r2
 8018380:	d018      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	4a1e      	ldr	r2, [pc, #120]	; (8018400 <HAL_DMA_IRQHandler+0x1e0>)
 8018388:	4293      	cmp	r3, r2
 801838a:	d013      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	4a1c      	ldr	r2, [pc, #112]	; (8018404 <HAL_DMA_IRQHandler+0x1e4>)
 8018392:	4293      	cmp	r3, r2
 8018394:	d00e      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	4a1b      	ldr	r2, [pc, #108]	; (8018408 <HAL_DMA_IRQHandler+0x1e8>)
 801839c:	4293      	cmp	r3, r2
 801839e:	d009      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	4a19      	ldr	r2, [pc, #100]	; (801840c <HAL_DMA_IRQHandler+0x1ec>)
 80183a6:	4293      	cmp	r3, r2
 80183a8:	d004      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	4a18      	ldr	r2, [pc, #96]	; (8018410 <HAL_DMA_IRQHandler+0x1f0>)
 80183b0:	4293      	cmp	r3, r2
 80183b2:	d12f      	bne.n	8018414 <HAL_DMA_IRQHandler+0x1f4>
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	f003 0304 	and.w	r3, r3, #4
 80183be:	2b00      	cmp	r3, #0
 80183c0:	bf14      	ite	ne
 80183c2:	2301      	movne	r3, #1
 80183c4:	2300      	moveq	r3, #0
 80183c6:	b2db      	uxtb	r3, r3
 80183c8:	e02e      	b.n	8018428 <HAL_DMA_IRQHandler+0x208>
 80183ca:	bf00      	nop
 80183cc:	24000004 	.word	0x24000004
 80183d0:	1b4e81b5 	.word	0x1b4e81b5
 80183d4:	40020010 	.word	0x40020010
 80183d8:	40020028 	.word	0x40020028
 80183dc:	40020040 	.word	0x40020040
 80183e0:	40020058 	.word	0x40020058
 80183e4:	40020070 	.word	0x40020070
 80183e8:	40020088 	.word	0x40020088
 80183ec:	400200a0 	.word	0x400200a0
 80183f0:	400200b8 	.word	0x400200b8
 80183f4:	40020410 	.word	0x40020410
 80183f8:	40020428 	.word	0x40020428
 80183fc:	40020440 	.word	0x40020440
 8018400:	40020458 	.word	0x40020458
 8018404:	40020470 	.word	0x40020470
 8018408:	40020488 	.word	0x40020488
 801840c:	400204a0 	.word	0x400204a0
 8018410:	400204b8 	.word	0x400204b8
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	f003 0308 	and.w	r3, r3, #8
 801841e:	2b00      	cmp	r3, #0
 8018420:	bf14      	ite	ne
 8018422:	2301      	movne	r3, #1
 8018424:	2300      	moveq	r3, #0
 8018426:	b2db      	uxtb	r3, r3
 8018428:	2b00      	cmp	r3, #0
 801842a:	d015      	beq.n	8018458 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	681a      	ldr	r2, [r3, #0]
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	f022 0204 	bic.w	r2, r2, #4
 801843a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018440:	f003 031f 	and.w	r3, r3, #31
 8018444:	2208      	movs	r2, #8
 8018446:	409a      	lsls	r2, r3
 8018448:	6a3b      	ldr	r3, [r7, #32]
 801844a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018450:	f043 0201 	orr.w	r2, r3, #1
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801845c:	f003 031f 	and.w	r3, r3, #31
 8018460:	69ba      	ldr	r2, [r7, #24]
 8018462:	fa22 f303 	lsr.w	r3, r2, r3
 8018466:	f003 0301 	and.w	r3, r3, #1
 801846a:	2b00      	cmp	r3, #0
 801846c:	d06e      	beq.n	801854c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	4a69      	ldr	r2, [pc, #420]	; (8018618 <HAL_DMA_IRQHandler+0x3f8>)
 8018474:	4293      	cmp	r3, r2
 8018476:	d04a      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	4a67      	ldr	r2, [pc, #412]	; (801861c <HAL_DMA_IRQHandler+0x3fc>)
 801847e:	4293      	cmp	r3, r2
 8018480:	d045      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	4a66      	ldr	r2, [pc, #408]	; (8018620 <HAL_DMA_IRQHandler+0x400>)
 8018488:	4293      	cmp	r3, r2
 801848a:	d040      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	4a64      	ldr	r2, [pc, #400]	; (8018624 <HAL_DMA_IRQHandler+0x404>)
 8018492:	4293      	cmp	r3, r2
 8018494:	d03b      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	4a63      	ldr	r2, [pc, #396]	; (8018628 <HAL_DMA_IRQHandler+0x408>)
 801849c:	4293      	cmp	r3, r2
 801849e:	d036      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	4a61      	ldr	r2, [pc, #388]	; (801862c <HAL_DMA_IRQHandler+0x40c>)
 80184a6:	4293      	cmp	r3, r2
 80184a8:	d031      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	4a60      	ldr	r2, [pc, #384]	; (8018630 <HAL_DMA_IRQHandler+0x410>)
 80184b0:	4293      	cmp	r3, r2
 80184b2:	d02c      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	4a5e      	ldr	r2, [pc, #376]	; (8018634 <HAL_DMA_IRQHandler+0x414>)
 80184ba:	4293      	cmp	r3, r2
 80184bc:	d027      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	4a5d      	ldr	r2, [pc, #372]	; (8018638 <HAL_DMA_IRQHandler+0x418>)
 80184c4:	4293      	cmp	r3, r2
 80184c6:	d022      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	4a5b      	ldr	r2, [pc, #364]	; (801863c <HAL_DMA_IRQHandler+0x41c>)
 80184ce:	4293      	cmp	r3, r2
 80184d0:	d01d      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	4a5a      	ldr	r2, [pc, #360]	; (8018640 <HAL_DMA_IRQHandler+0x420>)
 80184d8:	4293      	cmp	r3, r2
 80184da:	d018      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	4a58      	ldr	r2, [pc, #352]	; (8018644 <HAL_DMA_IRQHandler+0x424>)
 80184e2:	4293      	cmp	r3, r2
 80184e4:	d013      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	4a57      	ldr	r2, [pc, #348]	; (8018648 <HAL_DMA_IRQHandler+0x428>)
 80184ec:	4293      	cmp	r3, r2
 80184ee:	d00e      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	4a55      	ldr	r2, [pc, #340]	; (801864c <HAL_DMA_IRQHandler+0x42c>)
 80184f6:	4293      	cmp	r3, r2
 80184f8:	d009      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	4a54      	ldr	r2, [pc, #336]	; (8018650 <HAL_DMA_IRQHandler+0x430>)
 8018500:	4293      	cmp	r3, r2
 8018502:	d004      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	4a52      	ldr	r2, [pc, #328]	; (8018654 <HAL_DMA_IRQHandler+0x434>)
 801850a:	4293      	cmp	r3, r2
 801850c:	d10a      	bne.n	8018524 <HAL_DMA_IRQHandler+0x304>
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	695b      	ldr	r3, [r3, #20]
 8018514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018518:	2b00      	cmp	r3, #0
 801851a:	bf14      	ite	ne
 801851c:	2301      	movne	r3, #1
 801851e:	2300      	moveq	r3, #0
 8018520:	b2db      	uxtb	r3, r3
 8018522:	e003      	b.n	801852c <HAL_DMA_IRQHandler+0x30c>
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	2300      	movs	r3, #0
 801852c:	2b00      	cmp	r3, #0
 801852e:	d00d      	beq.n	801854c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018534:	f003 031f 	and.w	r3, r3, #31
 8018538:	2201      	movs	r2, #1
 801853a:	409a      	lsls	r2, r3
 801853c:	6a3b      	ldr	r3, [r7, #32]
 801853e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018544:	f043 0202 	orr.w	r2, r3, #2
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018550:	f003 031f 	and.w	r3, r3, #31
 8018554:	2204      	movs	r2, #4
 8018556:	409a      	lsls	r2, r3
 8018558:	69bb      	ldr	r3, [r7, #24]
 801855a:	4013      	ands	r3, r2
 801855c:	2b00      	cmp	r3, #0
 801855e:	f000 808f 	beq.w	8018680 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	4a2c      	ldr	r2, [pc, #176]	; (8018618 <HAL_DMA_IRQHandler+0x3f8>)
 8018568:	4293      	cmp	r3, r2
 801856a:	d04a      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	4a2a      	ldr	r2, [pc, #168]	; (801861c <HAL_DMA_IRQHandler+0x3fc>)
 8018572:	4293      	cmp	r3, r2
 8018574:	d045      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	4a29      	ldr	r2, [pc, #164]	; (8018620 <HAL_DMA_IRQHandler+0x400>)
 801857c:	4293      	cmp	r3, r2
 801857e:	d040      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	4a27      	ldr	r2, [pc, #156]	; (8018624 <HAL_DMA_IRQHandler+0x404>)
 8018586:	4293      	cmp	r3, r2
 8018588:	d03b      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	4a26      	ldr	r2, [pc, #152]	; (8018628 <HAL_DMA_IRQHandler+0x408>)
 8018590:	4293      	cmp	r3, r2
 8018592:	d036      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	4a24      	ldr	r2, [pc, #144]	; (801862c <HAL_DMA_IRQHandler+0x40c>)
 801859a:	4293      	cmp	r3, r2
 801859c:	d031      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	4a23      	ldr	r2, [pc, #140]	; (8018630 <HAL_DMA_IRQHandler+0x410>)
 80185a4:	4293      	cmp	r3, r2
 80185a6:	d02c      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	4a21      	ldr	r2, [pc, #132]	; (8018634 <HAL_DMA_IRQHandler+0x414>)
 80185ae:	4293      	cmp	r3, r2
 80185b0:	d027      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4a20      	ldr	r2, [pc, #128]	; (8018638 <HAL_DMA_IRQHandler+0x418>)
 80185b8:	4293      	cmp	r3, r2
 80185ba:	d022      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	4a1e      	ldr	r2, [pc, #120]	; (801863c <HAL_DMA_IRQHandler+0x41c>)
 80185c2:	4293      	cmp	r3, r2
 80185c4:	d01d      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	4a1d      	ldr	r2, [pc, #116]	; (8018640 <HAL_DMA_IRQHandler+0x420>)
 80185cc:	4293      	cmp	r3, r2
 80185ce:	d018      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	4a1b      	ldr	r2, [pc, #108]	; (8018644 <HAL_DMA_IRQHandler+0x424>)
 80185d6:	4293      	cmp	r3, r2
 80185d8:	d013      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	4a1a      	ldr	r2, [pc, #104]	; (8018648 <HAL_DMA_IRQHandler+0x428>)
 80185e0:	4293      	cmp	r3, r2
 80185e2:	d00e      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	4a18      	ldr	r2, [pc, #96]	; (801864c <HAL_DMA_IRQHandler+0x42c>)
 80185ea:	4293      	cmp	r3, r2
 80185ec:	d009      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	4a17      	ldr	r2, [pc, #92]	; (8018650 <HAL_DMA_IRQHandler+0x430>)
 80185f4:	4293      	cmp	r3, r2
 80185f6:	d004      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	4a15      	ldr	r2, [pc, #84]	; (8018654 <HAL_DMA_IRQHandler+0x434>)
 80185fe:	4293      	cmp	r3, r2
 8018600:	d12a      	bne.n	8018658 <HAL_DMA_IRQHandler+0x438>
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	f003 0302 	and.w	r3, r3, #2
 801860c:	2b00      	cmp	r3, #0
 801860e:	bf14      	ite	ne
 8018610:	2301      	movne	r3, #1
 8018612:	2300      	moveq	r3, #0
 8018614:	b2db      	uxtb	r3, r3
 8018616:	e023      	b.n	8018660 <HAL_DMA_IRQHandler+0x440>
 8018618:	40020010 	.word	0x40020010
 801861c:	40020028 	.word	0x40020028
 8018620:	40020040 	.word	0x40020040
 8018624:	40020058 	.word	0x40020058
 8018628:	40020070 	.word	0x40020070
 801862c:	40020088 	.word	0x40020088
 8018630:	400200a0 	.word	0x400200a0
 8018634:	400200b8 	.word	0x400200b8
 8018638:	40020410 	.word	0x40020410
 801863c:	40020428 	.word	0x40020428
 8018640:	40020440 	.word	0x40020440
 8018644:	40020458 	.word	0x40020458
 8018648:	40020470 	.word	0x40020470
 801864c:	40020488 	.word	0x40020488
 8018650:	400204a0 	.word	0x400204a0
 8018654:	400204b8 	.word	0x400204b8
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	2300      	movs	r3, #0
 8018660:	2b00      	cmp	r3, #0
 8018662:	d00d      	beq.n	8018680 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018668:	f003 031f 	and.w	r3, r3, #31
 801866c:	2204      	movs	r2, #4
 801866e:	409a      	lsls	r2, r3
 8018670:	6a3b      	ldr	r3, [r7, #32]
 8018672:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018678:	f043 0204 	orr.w	r2, r3, #4
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018684:	f003 031f 	and.w	r3, r3, #31
 8018688:	2210      	movs	r2, #16
 801868a:	409a      	lsls	r2, r3
 801868c:	69bb      	ldr	r3, [r7, #24]
 801868e:	4013      	ands	r3, r2
 8018690:	2b00      	cmp	r3, #0
 8018692:	f000 80a6 	beq.w	80187e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	4a85      	ldr	r2, [pc, #532]	; (80188b0 <HAL_DMA_IRQHandler+0x690>)
 801869c:	4293      	cmp	r3, r2
 801869e:	d04a      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	4a83      	ldr	r2, [pc, #524]	; (80188b4 <HAL_DMA_IRQHandler+0x694>)
 80186a6:	4293      	cmp	r3, r2
 80186a8:	d045      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	4a82      	ldr	r2, [pc, #520]	; (80188b8 <HAL_DMA_IRQHandler+0x698>)
 80186b0:	4293      	cmp	r3, r2
 80186b2:	d040      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	4a80      	ldr	r2, [pc, #512]	; (80188bc <HAL_DMA_IRQHandler+0x69c>)
 80186ba:	4293      	cmp	r3, r2
 80186bc:	d03b      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	4a7f      	ldr	r2, [pc, #508]	; (80188c0 <HAL_DMA_IRQHandler+0x6a0>)
 80186c4:	4293      	cmp	r3, r2
 80186c6:	d036      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	4a7d      	ldr	r2, [pc, #500]	; (80188c4 <HAL_DMA_IRQHandler+0x6a4>)
 80186ce:	4293      	cmp	r3, r2
 80186d0:	d031      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	4a7c      	ldr	r2, [pc, #496]	; (80188c8 <HAL_DMA_IRQHandler+0x6a8>)
 80186d8:	4293      	cmp	r3, r2
 80186da:	d02c      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	4a7a      	ldr	r2, [pc, #488]	; (80188cc <HAL_DMA_IRQHandler+0x6ac>)
 80186e2:	4293      	cmp	r3, r2
 80186e4:	d027      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	4a79      	ldr	r2, [pc, #484]	; (80188d0 <HAL_DMA_IRQHandler+0x6b0>)
 80186ec:	4293      	cmp	r3, r2
 80186ee:	d022      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	4a77      	ldr	r2, [pc, #476]	; (80188d4 <HAL_DMA_IRQHandler+0x6b4>)
 80186f6:	4293      	cmp	r3, r2
 80186f8:	d01d      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	4a76      	ldr	r2, [pc, #472]	; (80188d8 <HAL_DMA_IRQHandler+0x6b8>)
 8018700:	4293      	cmp	r3, r2
 8018702:	d018      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	4a74      	ldr	r2, [pc, #464]	; (80188dc <HAL_DMA_IRQHandler+0x6bc>)
 801870a:	4293      	cmp	r3, r2
 801870c:	d013      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	4a73      	ldr	r2, [pc, #460]	; (80188e0 <HAL_DMA_IRQHandler+0x6c0>)
 8018714:	4293      	cmp	r3, r2
 8018716:	d00e      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	4a71      	ldr	r2, [pc, #452]	; (80188e4 <HAL_DMA_IRQHandler+0x6c4>)
 801871e:	4293      	cmp	r3, r2
 8018720:	d009      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	4a70      	ldr	r2, [pc, #448]	; (80188e8 <HAL_DMA_IRQHandler+0x6c8>)
 8018728:	4293      	cmp	r3, r2
 801872a:	d004      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	4a6e      	ldr	r2, [pc, #440]	; (80188ec <HAL_DMA_IRQHandler+0x6cc>)
 8018732:	4293      	cmp	r3, r2
 8018734:	d10a      	bne.n	801874c <HAL_DMA_IRQHandler+0x52c>
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	f003 0308 	and.w	r3, r3, #8
 8018740:	2b00      	cmp	r3, #0
 8018742:	bf14      	ite	ne
 8018744:	2301      	movne	r3, #1
 8018746:	2300      	moveq	r3, #0
 8018748:	b2db      	uxtb	r3, r3
 801874a:	e009      	b.n	8018760 <HAL_DMA_IRQHandler+0x540>
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	f003 0304 	and.w	r3, r3, #4
 8018756:	2b00      	cmp	r3, #0
 8018758:	bf14      	ite	ne
 801875a:	2301      	movne	r3, #1
 801875c:	2300      	moveq	r3, #0
 801875e:	b2db      	uxtb	r3, r3
 8018760:	2b00      	cmp	r3, #0
 8018762:	d03e      	beq.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018768:	f003 031f 	and.w	r3, r3, #31
 801876c:	2210      	movs	r2, #16
 801876e:	409a      	lsls	r2, r3
 8018770:	6a3b      	ldr	r3, [r7, #32]
 8018772:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801877e:	2b00      	cmp	r3, #0
 8018780:	d018      	beq.n	80187b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801878c:	2b00      	cmp	r3, #0
 801878e:	d108      	bne.n	80187a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018794:	2b00      	cmp	r3, #0
 8018796:	d024      	beq.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	4798      	blx	r3
 80187a0:	e01f      	b.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d01b      	beq.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80187ae:	6878      	ldr	r0, [r7, #4]
 80187b0:	4798      	blx	r3
 80187b2:	e016      	b.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d107      	bne.n	80187d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	681a      	ldr	r2, [r3, #0]
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	f022 0208 	bic.w	r2, r2, #8
 80187d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d003      	beq.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187de:	6878      	ldr	r0, [r7, #4]
 80187e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187e6:	f003 031f 	and.w	r3, r3, #31
 80187ea:	2220      	movs	r2, #32
 80187ec:	409a      	lsls	r2, r3
 80187ee:	69bb      	ldr	r3, [r7, #24]
 80187f0:	4013      	ands	r3, r2
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	f000 8110 	beq.w	8018a18 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	4a2c      	ldr	r2, [pc, #176]	; (80188b0 <HAL_DMA_IRQHandler+0x690>)
 80187fe:	4293      	cmp	r3, r2
 8018800:	d04a      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	4a2b      	ldr	r2, [pc, #172]	; (80188b4 <HAL_DMA_IRQHandler+0x694>)
 8018808:	4293      	cmp	r3, r2
 801880a:	d045      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	4a29      	ldr	r2, [pc, #164]	; (80188b8 <HAL_DMA_IRQHandler+0x698>)
 8018812:	4293      	cmp	r3, r2
 8018814:	d040      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	4a28      	ldr	r2, [pc, #160]	; (80188bc <HAL_DMA_IRQHandler+0x69c>)
 801881c:	4293      	cmp	r3, r2
 801881e:	d03b      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	4a26      	ldr	r2, [pc, #152]	; (80188c0 <HAL_DMA_IRQHandler+0x6a0>)
 8018826:	4293      	cmp	r3, r2
 8018828:	d036      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	4a25      	ldr	r2, [pc, #148]	; (80188c4 <HAL_DMA_IRQHandler+0x6a4>)
 8018830:	4293      	cmp	r3, r2
 8018832:	d031      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	4a23      	ldr	r2, [pc, #140]	; (80188c8 <HAL_DMA_IRQHandler+0x6a8>)
 801883a:	4293      	cmp	r3, r2
 801883c:	d02c      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	4a22      	ldr	r2, [pc, #136]	; (80188cc <HAL_DMA_IRQHandler+0x6ac>)
 8018844:	4293      	cmp	r3, r2
 8018846:	d027      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	4a20      	ldr	r2, [pc, #128]	; (80188d0 <HAL_DMA_IRQHandler+0x6b0>)
 801884e:	4293      	cmp	r3, r2
 8018850:	d022      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	4a1f      	ldr	r2, [pc, #124]	; (80188d4 <HAL_DMA_IRQHandler+0x6b4>)
 8018858:	4293      	cmp	r3, r2
 801885a:	d01d      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	4a1d      	ldr	r2, [pc, #116]	; (80188d8 <HAL_DMA_IRQHandler+0x6b8>)
 8018862:	4293      	cmp	r3, r2
 8018864:	d018      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	4a1c      	ldr	r2, [pc, #112]	; (80188dc <HAL_DMA_IRQHandler+0x6bc>)
 801886c:	4293      	cmp	r3, r2
 801886e:	d013      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	4a1a      	ldr	r2, [pc, #104]	; (80188e0 <HAL_DMA_IRQHandler+0x6c0>)
 8018876:	4293      	cmp	r3, r2
 8018878:	d00e      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	4a19      	ldr	r2, [pc, #100]	; (80188e4 <HAL_DMA_IRQHandler+0x6c4>)
 8018880:	4293      	cmp	r3, r2
 8018882:	d009      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	4a17      	ldr	r2, [pc, #92]	; (80188e8 <HAL_DMA_IRQHandler+0x6c8>)
 801888a:	4293      	cmp	r3, r2
 801888c:	d004      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	4a16      	ldr	r2, [pc, #88]	; (80188ec <HAL_DMA_IRQHandler+0x6cc>)
 8018894:	4293      	cmp	r3, r2
 8018896:	d12b      	bne.n	80188f0 <HAL_DMA_IRQHandler+0x6d0>
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	f003 0310 	and.w	r3, r3, #16
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	bf14      	ite	ne
 80188a6:	2301      	movne	r3, #1
 80188a8:	2300      	moveq	r3, #0
 80188aa:	b2db      	uxtb	r3, r3
 80188ac:	e02a      	b.n	8018904 <HAL_DMA_IRQHandler+0x6e4>
 80188ae:	bf00      	nop
 80188b0:	40020010 	.word	0x40020010
 80188b4:	40020028 	.word	0x40020028
 80188b8:	40020040 	.word	0x40020040
 80188bc:	40020058 	.word	0x40020058
 80188c0:	40020070 	.word	0x40020070
 80188c4:	40020088 	.word	0x40020088
 80188c8:	400200a0 	.word	0x400200a0
 80188cc:	400200b8 	.word	0x400200b8
 80188d0:	40020410 	.word	0x40020410
 80188d4:	40020428 	.word	0x40020428
 80188d8:	40020440 	.word	0x40020440
 80188dc:	40020458 	.word	0x40020458
 80188e0:	40020470 	.word	0x40020470
 80188e4:	40020488 	.word	0x40020488
 80188e8:	400204a0 	.word	0x400204a0
 80188ec:	400204b8 	.word	0x400204b8
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	f003 0302 	and.w	r3, r3, #2
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	bf14      	ite	ne
 80188fe:	2301      	movne	r3, #1
 8018900:	2300      	moveq	r3, #0
 8018902:	b2db      	uxtb	r3, r3
 8018904:	2b00      	cmp	r3, #0
 8018906:	f000 8087 	beq.w	8018a18 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801890e:	f003 031f 	and.w	r3, r3, #31
 8018912:	2220      	movs	r2, #32
 8018914:	409a      	lsls	r2, r3
 8018916:	6a3b      	ldr	r3, [r7, #32]
 8018918:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018920:	b2db      	uxtb	r3, r3
 8018922:	2b04      	cmp	r3, #4
 8018924:	d139      	bne.n	801899a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	681a      	ldr	r2, [r3, #0]
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	f022 0216 	bic.w	r2, r2, #22
 8018934:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	695a      	ldr	r2, [r3, #20]
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018944:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801894a:	2b00      	cmp	r3, #0
 801894c:	d103      	bne.n	8018956 <HAL_DMA_IRQHandler+0x736>
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018952:	2b00      	cmp	r3, #0
 8018954:	d007      	beq.n	8018966 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	681a      	ldr	r2, [r3, #0]
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	f022 0208 	bic.w	r2, r2, #8
 8018964:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801896a:	f003 031f 	and.w	r3, r3, #31
 801896e:	223f      	movs	r2, #63	; 0x3f
 8018970:	409a      	lsls	r2, r3
 8018972:	6a3b      	ldr	r3, [r7, #32]
 8018974:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	2201      	movs	r2, #1
 801897a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	2200      	movs	r2, #0
 8018982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801898a:	2b00      	cmp	r3, #0
 801898c:	f000 834a 	beq.w	8019024 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018994:	6878      	ldr	r0, [r7, #4]
 8018996:	4798      	blx	r3
          }
          return;
 8018998:	e344      	b.n	8019024 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d018      	beq.n	80189da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d108      	bne.n	80189c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d02c      	beq.n	8018a18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189c2:	6878      	ldr	r0, [r7, #4]
 80189c4:	4798      	blx	r3
 80189c6:	e027      	b.n	8018a18 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d023      	beq.n	8018a18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	4798      	blx	r3
 80189d8:	e01e      	b.n	8018a18 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d10f      	bne.n	8018a08 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	681a      	ldr	r2, [r3, #0]
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	f022 0210 	bic.w	r2, r2, #16
 80189f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	2201      	movs	r2, #1
 80189fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2200      	movs	r2, #0
 8018a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d003      	beq.n	8018a18 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a14:	6878      	ldr	r0, [r7, #4]
 8018a16:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	f000 8306 	beq.w	801902e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018a26:	f003 0301 	and.w	r3, r3, #1
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	f000 8088 	beq.w	8018b40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	2204      	movs	r2, #4
 8018a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	4a7a      	ldr	r2, [pc, #488]	; (8018c28 <HAL_DMA_IRQHandler+0xa08>)
 8018a3e:	4293      	cmp	r3, r2
 8018a40:	d04a      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	4a79      	ldr	r2, [pc, #484]	; (8018c2c <HAL_DMA_IRQHandler+0xa0c>)
 8018a48:	4293      	cmp	r3, r2
 8018a4a:	d045      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	4a77      	ldr	r2, [pc, #476]	; (8018c30 <HAL_DMA_IRQHandler+0xa10>)
 8018a52:	4293      	cmp	r3, r2
 8018a54:	d040      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	4a76      	ldr	r2, [pc, #472]	; (8018c34 <HAL_DMA_IRQHandler+0xa14>)
 8018a5c:	4293      	cmp	r3, r2
 8018a5e:	d03b      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	4a74      	ldr	r2, [pc, #464]	; (8018c38 <HAL_DMA_IRQHandler+0xa18>)
 8018a66:	4293      	cmp	r3, r2
 8018a68:	d036      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	4a73      	ldr	r2, [pc, #460]	; (8018c3c <HAL_DMA_IRQHandler+0xa1c>)
 8018a70:	4293      	cmp	r3, r2
 8018a72:	d031      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	4a71      	ldr	r2, [pc, #452]	; (8018c40 <HAL_DMA_IRQHandler+0xa20>)
 8018a7a:	4293      	cmp	r3, r2
 8018a7c:	d02c      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	4a70      	ldr	r2, [pc, #448]	; (8018c44 <HAL_DMA_IRQHandler+0xa24>)
 8018a84:	4293      	cmp	r3, r2
 8018a86:	d027      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	4a6e      	ldr	r2, [pc, #440]	; (8018c48 <HAL_DMA_IRQHandler+0xa28>)
 8018a8e:	4293      	cmp	r3, r2
 8018a90:	d022      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	4a6d      	ldr	r2, [pc, #436]	; (8018c4c <HAL_DMA_IRQHandler+0xa2c>)
 8018a98:	4293      	cmp	r3, r2
 8018a9a:	d01d      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	4a6b      	ldr	r2, [pc, #428]	; (8018c50 <HAL_DMA_IRQHandler+0xa30>)
 8018aa2:	4293      	cmp	r3, r2
 8018aa4:	d018      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	4a6a      	ldr	r2, [pc, #424]	; (8018c54 <HAL_DMA_IRQHandler+0xa34>)
 8018aac:	4293      	cmp	r3, r2
 8018aae:	d013      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	4a68      	ldr	r2, [pc, #416]	; (8018c58 <HAL_DMA_IRQHandler+0xa38>)
 8018ab6:	4293      	cmp	r3, r2
 8018ab8:	d00e      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	4a67      	ldr	r2, [pc, #412]	; (8018c5c <HAL_DMA_IRQHandler+0xa3c>)
 8018ac0:	4293      	cmp	r3, r2
 8018ac2:	d009      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	4a65      	ldr	r2, [pc, #404]	; (8018c60 <HAL_DMA_IRQHandler+0xa40>)
 8018aca:	4293      	cmp	r3, r2
 8018acc:	d004      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	4a64      	ldr	r2, [pc, #400]	; (8018c64 <HAL_DMA_IRQHandler+0xa44>)
 8018ad4:	4293      	cmp	r3, r2
 8018ad6:	d108      	bne.n	8018aea <HAL_DMA_IRQHandler+0x8ca>
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	681a      	ldr	r2, [r3, #0]
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	f022 0201 	bic.w	r2, r2, #1
 8018ae6:	601a      	str	r2, [r3, #0]
 8018ae8:	e007      	b.n	8018afa <HAL_DMA_IRQHandler+0x8da>
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	681a      	ldr	r2, [r3, #0]
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	f022 0201 	bic.w	r2, r2, #1
 8018af8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	3301      	adds	r3, #1
 8018afe:	60fb      	str	r3, [r7, #12]
 8018b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b02:	429a      	cmp	r2, r3
 8018b04:	d307      	bcc.n	8018b16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	f003 0301 	and.w	r3, r3, #1
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d1f2      	bne.n	8018afa <HAL_DMA_IRQHandler+0x8da>
 8018b14:	e000      	b.n	8018b18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8018b16:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	f003 0301 	and.w	r3, r3, #1
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d004      	beq.n	8018b30 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	2203      	movs	r2, #3
 8018b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8018b2e:	e003      	b.n	8018b38 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	2201      	movs	r2, #1
 8018b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	f000 8272 	beq.w	801902e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b4e:	6878      	ldr	r0, [r7, #4]
 8018b50:	4798      	blx	r3
 8018b52:	e26c      	b.n	801902e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	4a43      	ldr	r2, [pc, #268]	; (8018c68 <HAL_DMA_IRQHandler+0xa48>)
 8018b5a:	4293      	cmp	r3, r2
 8018b5c:	d022      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	4a42      	ldr	r2, [pc, #264]	; (8018c6c <HAL_DMA_IRQHandler+0xa4c>)
 8018b64:	4293      	cmp	r3, r2
 8018b66:	d01d      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	4a40      	ldr	r2, [pc, #256]	; (8018c70 <HAL_DMA_IRQHandler+0xa50>)
 8018b6e:	4293      	cmp	r3, r2
 8018b70:	d018      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	4a3f      	ldr	r2, [pc, #252]	; (8018c74 <HAL_DMA_IRQHandler+0xa54>)
 8018b78:	4293      	cmp	r3, r2
 8018b7a:	d013      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	4a3d      	ldr	r2, [pc, #244]	; (8018c78 <HAL_DMA_IRQHandler+0xa58>)
 8018b82:	4293      	cmp	r3, r2
 8018b84:	d00e      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	4a3c      	ldr	r2, [pc, #240]	; (8018c7c <HAL_DMA_IRQHandler+0xa5c>)
 8018b8c:	4293      	cmp	r3, r2
 8018b8e:	d009      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	4a3a      	ldr	r2, [pc, #232]	; (8018c80 <HAL_DMA_IRQHandler+0xa60>)
 8018b96:	4293      	cmp	r3, r2
 8018b98:	d004      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	4a39      	ldr	r2, [pc, #228]	; (8018c84 <HAL_DMA_IRQHandler+0xa64>)
 8018ba0:	4293      	cmp	r3, r2
 8018ba2:	d101      	bne.n	8018ba8 <HAL_DMA_IRQHandler+0x988>
 8018ba4:	2301      	movs	r3, #1
 8018ba6:	e000      	b.n	8018baa <HAL_DMA_IRQHandler+0x98a>
 8018ba8:	2300      	movs	r3, #0
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	f000 823f 	beq.w	801902e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bbc:	f003 031f 	and.w	r3, r3, #31
 8018bc0:	2204      	movs	r2, #4
 8018bc2:	409a      	lsls	r2, r3
 8018bc4:	697b      	ldr	r3, [r7, #20]
 8018bc6:	4013      	ands	r3, r2
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	f000 80cd 	beq.w	8018d68 <HAL_DMA_IRQHandler+0xb48>
 8018bce:	693b      	ldr	r3, [r7, #16]
 8018bd0:	f003 0304 	and.w	r3, r3, #4
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	f000 80c7 	beq.w	8018d68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bde:	f003 031f 	and.w	r3, r3, #31
 8018be2:	2204      	movs	r2, #4
 8018be4:	409a      	lsls	r2, r3
 8018be6:	69fb      	ldr	r3, [r7, #28]
 8018be8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018bea:	693b      	ldr	r3, [r7, #16]
 8018bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d049      	beq.n	8018c88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018bf4:	693b      	ldr	r3, [r7, #16]
 8018bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d109      	bne.n	8018c12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	f000 8210 	beq.w	8019028 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c0c:	6878      	ldr	r0, [r7, #4]
 8018c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018c10:	e20a      	b.n	8019028 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	f000 8206 	beq.w	8019028 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c20:	6878      	ldr	r0, [r7, #4]
 8018c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018c24:	e200      	b.n	8019028 <HAL_DMA_IRQHandler+0xe08>
 8018c26:	bf00      	nop
 8018c28:	40020010 	.word	0x40020010
 8018c2c:	40020028 	.word	0x40020028
 8018c30:	40020040 	.word	0x40020040
 8018c34:	40020058 	.word	0x40020058
 8018c38:	40020070 	.word	0x40020070
 8018c3c:	40020088 	.word	0x40020088
 8018c40:	400200a0 	.word	0x400200a0
 8018c44:	400200b8 	.word	0x400200b8
 8018c48:	40020410 	.word	0x40020410
 8018c4c:	40020428 	.word	0x40020428
 8018c50:	40020440 	.word	0x40020440
 8018c54:	40020458 	.word	0x40020458
 8018c58:	40020470 	.word	0x40020470
 8018c5c:	40020488 	.word	0x40020488
 8018c60:	400204a0 	.word	0x400204a0
 8018c64:	400204b8 	.word	0x400204b8
 8018c68:	58025408 	.word	0x58025408
 8018c6c:	5802541c 	.word	0x5802541c
 8018c70:	58025430 	.word	0x58025430
 8018c74:	58025444 	.word	0x58025444
 8018c78:	58025458 	.word	0x58025458
 8018c7c:	5802546c 	.word	0x5802546c
 8018c80:	58025480 	.word	0x58025480
 8018c84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018c88:	693b      	ldr	r3, [r7, #16]
 8018c8a:	f003 0320 	and.w	r3, r3, #32
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d160      	bne.n	8018d54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	4a7f      	ldr	r2, [pc, #508]	; (8018e94 <HAL_DMA_IRQHandler+0xc74>)
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	d04a      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	4a7d      	ldr	r2, [pc, #500]	; (8018e98 <HAL_DMA_IRQHandler+0xc78>)
 8018ca2:	4293      	cmp	r3, r2
 8018ca4:	d045      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	4a7c      	ldr	r2, [pc, #496]	; (8018e9c <HAL_DMA_IRQHandler+0xc7c>)
 8018cac:	4293      	cmp	r3, r2
 8018cae:	d040      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	4a7a      	ldr	r2, [pc, #488]	; (8018ea0 <HAL_DMA_IRQHandler+0xc80>)
 8018cb6:	4293      	cmp	r3, r2
 8018cb8:	d03b      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	4a79      	ldr	r2, [pc, #484]	; (8018ea4 <HAL_DMA_IRQHandler+0xc84>)
 8018cc0:	4293      	cmp	r3, r2
 8018cc2:	d036      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	4a77      	ldr	r2, [pc, #476]	; (8018ea8 <HAL_DMA_IRQHandler+0xc88>)
 8018cca:	4293      	cmp	r3, r2
 8018ccc:	d031      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	4a76      	ldr	r2, [pc, #472]	; (8018eac <HAL_DMA_IRQHandler+0xc8c>)
 8018cd4:	4293      	cmp	r3, r2
 8018cd6:	d02c      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	4a74      	ldr	r2, [pc, #464]	; (8018eb0 <HAL_DMA_IRQHandler+0xc90>)
 8018cde:	4293      	cmp	r3, r2
 8018ce0:	d027      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	4a73      	ldr	r2, [pc, #460]	; (8018eb4 <HAL_DMA_IRQHandler+0xc94>)
 8018ce8:	4293      	cmp	r3, r2
 8018cea:	d022      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	4a71      	ldr	r2, [pc, #452]	; (8018eb8 <HAL_DMA_IRQHandler+0xc98>)
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	d01d      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	4a70      	ldr	r2, [pc, #448]	; (8018ebc <HAL_DMA_IRQHandler+0xc9c>)
 8018cfc:	4293      	cmp	r3, r2
 8018cfe:	d018      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	4a6e      	ldr	r2, [pc, #440]	; (8018ec0 <HAL_DMA_IRQHandler+0xca0>)
 8018d06:	4293      	cmp	r3, r2
 8018d08:	d013      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	4a6d      	ldr	r2, [pc, #436]	; (8018ec4 <HAL_DMA_IRQHandler+0xca4>)
 8018d10:	4293      	cmp	r3, r2
 8018d12:	d00e      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	4a6b      	ldr	r2, [pc, #428]	; (8018ec8 <HAL_DMA_IRQHandler+0xca8>)
 8018d1a:	4293      	cmp	r3, r2
 8018d1c:	d009      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	4a6a      	ldr	r2, [pc, #424]	; (8018ecc <HAL_DMA_IRQHandler+0xcac>)
 8018d24:	4293      	cmp	r3, r2
 8018d26:	d004      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	4a68      	ldr	r2, [pc, #416]	; (8018ed0 <HAL_DMA_IRQHandler+0xcb0>)
 8018d2e:	4293      	cmp	r3, r2
 8018d30:	d108      	bne.n	8018d44 <HAL_DMA_IRQHandler+0xb24>
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	681a      	ldr	r2, [r3, #0]
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	f022 0208 	bic.w	r2, r2, #8
 8018d40:	601a      	str	r2, [r3, #0]
 8018d42:	e007      	b.n	8018d54 <HAL_DMA_IRQHandler+0xb34>
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	681a      	ldr	r2, [r3, #0]
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	f022 0204 	bic.w	r2, r2, #4
 8018d52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	f000 8165 	beq.w	8019028 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d62:	6878      	ldr	r0, [r7, #4]
 8018d64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018d66:	e15f      	b.n	8019028 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d6c:	f003 031f 	and.w	r3, r3, #31
 8018d70:	2202      	movs	r2, #2
 8018d72:	409a      	lsls	r2, r3
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	4013      	ands	r3, r2
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	f000 80c5 	beq.w	8018f08 <HAL_DMA_IRQHandler+0xce8>
 8018d7e:	693b      	ldr	r3, [r7, #16]
 8018d80:	f003 0302 	and.w	r3, r3, #2
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	f000 80bf 	beq.w	8018f08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d8e:	f003 031f 	and.w	r3, r3, #31
 8018d92:	2202      	movs	r2, #2
 8018d94:	409a      	lsls	r2, r3
 8018d96:	69fb      	ldr	r3, [r7, #28]
 8018d98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018d9a:	693b      	ldr	r3, [r7, #16]
 8018d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d018      	beq.n	8018dd6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d109      	bne.n	8018dc2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	f000 813a 	beq.w	801902c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018dbc:	6878      	ldr	r0, [r7, #4]
 8018dbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018dc0:	e134      	b.n	801902c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	f000 8130 	beq.w	801902c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018dd4:	e12a      	b.n	801902c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018dd6:	693b      	ldr	r3, [r7, #16]
 8018dd8:	f003 0320 	and.w	r3, r3, #32
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	f040 8089 	bne.w	8018ef4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	4a2b      	ldr	r2, [pc, #172]	; (8018e94 <HAL_DMA_IRQHandler+0xc74>)
 8018de8:	4293      	cmp	r3, r2
 8018dea:	d04a      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	4a29      	ldr	r2, [pc, #164]	; (8018e98 <HAL_DMA_IRQHandler+0xc78>)
 8018df2:	4293      	cmp	r3, r2
 8018df4:	d045      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	4a28      	ldr	r2, [pc, #160]	; (8018e9c <HAL_DMA_IRQHandler+0xc7c>)
 8018dfc:	4293      	cmp	r3, r2
 8018dfe:	d040      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	4a26      	ldr	r2, [pc, #152]	; (8018ea0 <HAL_DMA_IRQHandler+0xc80>)
 8018e06:	4293      	cmp	r3, r2
 8018e08:	d03b      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	4a25      	ldr	r2, [pc, #148]	; (8018ea4 <HAL_DMA_IRQHandler+0xc84>)
 8018e10:	4293      	cmp	r3, r2
 8018e12:	d036      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	4a23      	ldr	r2, [pc, #140]	; (8018ea8 <HAL_DMA_IRQHandler+0xc88>)
 8018e1a:	4293      	cmp	r3, r2
 8018e1c:	d031      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	4a22      	ldr	r2, [pc, #136]	; (8018eac <HAL_DMA_IRQHandler+0xc8c>)
 8018e24:	4293      	cmp	r3, r2
 8018e26:	d02c      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	4a20      	ldr	r2, [pc, #128]	; (8018eb0 <HAL_DMA_IRQHandler+0xc90>)
 8018e2e:	4293      	cmp	r3, r2
 8018e30:	d027      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	4a1f      	ldr	r2, [pc, #124]	; (8018eb4 <HAL_DMA_IRQHandler+0xc94>)
 8018e38:	4293      	cmp	r3, r2
 8018e3a:	d022      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	4a1d      	ldr	r2, [pc, #116]	; (8018eb8 <HAL_DMA_IRQHandler+0xc98>)
 8018e42:	4293      	cmp	r3, r2
 8018e44:	d01d      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	4a1c      	ldr	r2, [pc, #112]	; (8018ebc <HAL_DMA_IRQHandler+0xc9c>)
 8018e4c:	4293      	cmp	r3, r2
 8018e4e:	d018      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	4a1a      	ldr	r2, [pc, #104]	; (8018ec0 <HAL_DMA_IRQHandler+0xca0>)
 8018e56:	4293      	cmp	r3, r2
 8018e58:	d013      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	4a19      	ldr	r2, [pc, #100]	; (8018ec4 <HAL_DMA_IRQHandler+0xca4>)
 8018e60:	4293      	cmp	r3, r2
 8018e62:	d00e      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	4a17      	ldr	r2, [pc, #92]	; (8018ec8 <HAL_DMA_IRQHandler+0xca8>)
 8018e6a:	4293      	cmp	r3, r2
 8018e6c:	d009      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	4a16      	ldr	r2, [pc, #88]	; (8018ecc <HAL_DMA_IRQHandler+0xcac>)
 8018e74:	4293      	cmp	r3, r2
 8018e76:	d004      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	4a14      	ldr	r2, [pc, #80]	; (8018ed0 <HAL_DMA_IRQHandler+0xcb0>)
 8018e7e:	4293      	cmp	r3, r2
 8018e80:	d128      	bne.n	8018ed4 <HAL_DMA_IRQHandler+0xcb4>
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	681a      	ldr	r2, [r3, #0]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	f022 0214 	bic.w	r2, r2, #20
 8018e90:	601a      	str	r2, [r3, #0]
 8018e92:	e027      	b.n	8018ee4 <HAL_DMA_IRQHandler+0xcc4>
 8018e94:	40020010 	.word	0x40020010
 8018e98:	40020028 	.word	0x40020028
 8018e9c:	40020040 	.word	0x40020040
 8018ea0:	40020058 	.word	0x40020058
 8018ea4:	40020070 	.word	0x40020070
 8018ea8:	40020088 	.word	0x40020088
 8018eac:	400200a0 	.word	0x400200a0
 8018eb0:	400200b8 	.word	0x400200b8
 8018eb4:	40020410 	.word	0x40020410
 8018eb8:	40020428 	.word	0x40020428
 8018ebc:	40020440 	.word	0x40020440
 8018ec0:	40020458 	.word	0x40020458
 8018ec4:	40020470 	.word	0x40020470
 8018ec8:	40020488 	.word	0x40020488
 8018ecc:	400204a0 	.word	0x400204a0
 8018ed0:	400204b8 	.word	0x400204b8
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	681a      	ldr	r2, [r3, #0]
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f022 020a 	bic.w	r2, r2, #10
 8018ee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	2201      	movs	r2, #1
 8018ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	f000 8097 	beq.w	801902c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018f06:	e091      	b.n	801902c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f0c:	f003 031f 	and.w	r3, r3, #31
 8018f10:	2208      	movs	r2, #8
 8018f12:	409a      	lsls	r2, r3
 8018f14:	697b      	ldr	r3, [r7, #20]
 8018f16:	4013      	ands	r3, r2
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	f000 8088 	beq.w	801902e <HAL_DMA_IRQHandler+0xe0e>
 8018f1e:	693b      	ldr	r3, [r7, #16]
 8018f20:	f003 0308 	and.w	r3, r3, #8
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	f000 8082 	beq.w	801902e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	4a41      	ldr	r2, [pc, #260]	; (8019034 <HAL_DMA_IRQHandler+0xe14>)
 8018f30:	4293      	cmp	r3, r2
 8018f32:	d04a      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	4a3f      	ldr	r2, [pc, #252]	; (8019038 <HAL_DMA_IRQHandler+0xe18>)
 8018f3a:	4293      	cmp	r3, r2
 8018f3c:	d045      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	4a3e      	ldr	r2, [pc, #248]	; (801903c <HAL_DMA_IRQHandler+0xe1c>)
 8018f44:	4293      	cmp	r3, r2
 8018f46:	d040      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	4a3c      	ldr	r2, [pc, #240]	; (8019040 <HAL_DMA_IRQHandler+0xe20>)
 8018f4e:	4293      	cmp	r3, r2
 8018f50:	d03b      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	4a3b      	ldr	r2, [pc, #236]	; (8019044 <HAL_DMA_IRQHandler+0xe24>)
 8018f58:	4293      	cmp	r3, r2
 8018f5a:	d036      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	4a39      	ldr	r2, [pc, #228]	; (8019048 <HAL_DMA_IRQHandler+0xe28>)
 8018f62:	4293      	cmp	r3, r2
 8018f64:	d031      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	4a38      	ldr	r2, [pc, #224]	; (801904c <HAL_DMA_IRQHandler+0xe2c>)
 8018f6c:	4293      	cmp	r3, r2
 8018f6e:	d02c      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	4a36      	ldr	r2, [pc, #216]	; (8019050 <HAL_DMA_IRQHandler+0xe30>)
 8018f76:	4293      	cmp	r3, r2
 8018f78:	d027      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	4a35      	ldr	r2, [pc, #212]	; (8019054 <HAL_DMA_IRQHandler+0xe34>)
 8018f80:	4293      	cmp	r3, r2
 8018f82:	d022      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	4a33      	ldr	r2, [pc, #204]	; (8019058 <HAL_DMA_IRQHandler+0xe38>)
 8018f8a:	4293      	cmp	r3, r2
 8018f8c:	d01d      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	4a32      	ldr	r2, [pc, #200]	; (801905c <HAL_DMA_IRQHandler+0xe3c>)
 8018f94:	4293      	cmp	r3, r2
 8018f96:	d018      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	4a30      	ldr	r2, [pc, #192]	; (8019060 <HAL_DMA_IRQHandler+0xe40>)
 8018f9e:	4293      	cmp	r3, r2
 8018fa0:	d013      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	4a2f      	ldr	r2, [pc, #188]	; (8019064 <HAL_DMA_IRQHandler+0xe44>)
 8018fa8:	4293      	cmp	r3, r2
 8018faa:	d00e      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	4a2d      	ldr	r2, [pc, #180]	; (8019068 <HAL_DMA_IRQHandler+0xe48>)
 8018fb2:	4293      	cmp	r3, r2
 8018fb4:	d009      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	4a2c      	ldr	r2, [pc, #176]	; (801906c <HAL_DMA_IRQHandler+0xe4c>)
 8018fbc:	4293      	cmp	r3, r2
 8018fbe:	d004      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	4a2a      	ldr	r2, [pc, #168]	; (8019070 <HAL_DMA_IRQHandler+0xe50>)
 8018fc6:	4293      	cmp	r3, r2
 8018fc8:	d108      	bne.n	8018fdc <HAL_DMA_IRQHandler+0xdbc>
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	681a      	ldr	r2, [r3, #0]
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	f022 021c 	bic.w	r2, r2, #28
 8018fd8:	601a      	str	r2, [r3, #0]
 8018fda:	e007      	b.n	8018fec <HAL_DMA_IRQHandler+0xdcc>
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	681a      	ldr	r2, [r3, #0]
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	f022 020e 	bic.w	r2, r2, #14
 8018fea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ff0:	f003 031f 	and.w	r3, r3, #31
 8018ff4:	2201      	movs	r2, #1
 8018ff6:	409a      	lsls	r2, r3
 8018ff8:	69fb      	ldr	r3, [r7, #28]
 8018ffa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	2201      	movs	r2, #1
 8019000:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	2201      	movs	r2, #1
 8019006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	2200      	movs	r2, #0
 801900e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019016:	2b00      	cmp	r3, #0
 8019018:	d009      	beq.n	801902e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	4798      	blx	r3
 8019022:	e004      	b.n	801902e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8019024:	bf00      	nop
 8019026:	e002      	b.n	801902e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019028:	bf00      	nop
 801902a:	e000      	b.n	801902e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801902c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801902e:	3728      	adds	r7, #40	; 0x28
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}
 8019034:	40020010 	.word	0x40020010
 8019038:	40020028 	.word	0x40020028
 801903c:	40020040 	.word	0x40020040
 8019040:	40020058 	.word	0x40020058
 8019044:	40020070 	.word	0x40020070
 8019048:	40020088 	.word	0x40020088
 801904c:	400200a0 	.word	0x400200a0
 8019050:	400200b8 	.word	0x400200b8
 8019054:	40020410 	.word	0x40020410
 8019058:	40020428 	.word	0x40020428
 801905c:	40020440 	.word	0x40020440
 8019060:	40020458 	.word	0x40020458
 8019064:	40020470 	.word	0x40020470
 8019068:	40020488 	.word	0x40020488
 801906c:	400204a0 	.word	0x400204a0
 8019070:	400204b8 	.word	0x400204b8

08019074 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8019074:	b480      	push	{r7}
 8019076:	b087      	sub	sp, #28
 8019078:	af00      	add	r7, sp, #0
 801907a:	60f8      	str	r0, [r7, #12]
 801907c:	60b9      	str	r1, [r7, #8]
 801907e:	607a      	str	r2, [r7, #4]
 8019080:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019086:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801908c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	4a7f      	ldr	r2, [pc, #508]	; (8019290 <DMA_SetConfig+0x21c>)
 8019094:	4293      	cmp	r3, r2
 8019096:	d072      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	4a7d      	ldr	r2, [pc, #500]	; (8019294 <DMA_SetConfig+0x220>)
 801909e:	4293      	cmp	r3, r2
 80190a0:	d06d      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	4a7c      	ldr	r2, [pc, #496]	; (8019298 <DMA_SetConfig+0x224>)
 80190a8:	4293      	cmp	r3, r2
 80190aa:	d068      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	4a7a      	ldr	r2, [pc, #488]	; (801929c <DMA_SetConfig+0x228>)
 80190b2:	4293      	cmp	r3, r2
 80190b4:	d063      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	4a79      	ldr	r2, [pc, #484]	; (80192a0 <DMA_SetConfig+0x22c>)
 80190bc:	4293      	cmp	r3, r2
 80190be:	d05e      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	4a77      	ldr	r2, [pc, #476]	; (80192a4 <DMA_SetConfig+0x230>)
 80190c6:	4293      	cmp	r3, r2
 80190c8:	d059      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	4a76      	ldr	r2, [pc, #472]	; (80192a8 <DMA_SetConfig+0x234>)
 80190d0:	4293      	cmp	r3, r2
 80190d2:	d054      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	4a74      	ldr	r2, [pc, #464]	; (80192ac <DMA_SetConfig+0x238>)
 80190da:	4293      	cmp	r3, r2
 80190dc:	d04f      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	4a73      	ldr	r2, [pc, #460]	; (80192b0 <DMA_SetConfig+0x23c>)
 80190e4:	4293      	cmp	r3, r2
 80190e6:	d04a      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	4a71      	ldr	r2, [pc, #452]	; (80192b4 <DMA_SetConfig+0x240>)
 80190ee:	4293      	cmp	r3, r2
 80190f0:	d045      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	4a70      	ldr	r2, [pc, #448]	; (80192b8 <DMA_SetConfig+0x244>)
 80190f8:	4293      	cmp	r3, r2
 80190fa:	d040      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	4a6e      	ldr	r2, [pc, #440]	; (80192bc <DMA_SetConfig+0x248>)
 8019102:	4293      	cmp	r3, r2
 8019104:	d03b      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	4a6d      	ldr	r2, [pc, #436]	; (80192c0 <DMA_SetConfig+0x24c>)
 801910c:	4293      	cmp	r3, r2
 801910e:	d036      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	4a6b      	ldr	r2, [pc, #428]	; (80192c4 <DMA_SetConfig+0x250>)
 8019116:	4293      	cmp	r3, r2
 8019118:	d031      	beq.n	801917e <DMA_SetConfig+0x10a>
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	4a6a      	ldr	r2, [pc, #424]	; (80192c8 <DMA_SetConfig+0x254>)
 8019120:	4293      	cmp	r3, r2
 8019122:	d02c      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	4a68      	ldr	r2, [pc, #416]	; (80192cc <DMA_SetConfig+0x258>)
 801912a:	4293      	cmp	r3, r2
 801912c:	d027      	beq.n	801917e <DMA_SetConfig+0x10a>
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	4a67      	ldr	r2, [pc, #412]	; (80192d0 <DMA_SetConfig+0x25c>)
 8019134:	4293      	cmp	r3, r2
 8019136:	d022      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	4a65      	ldr	r2, [pc, #404]	; (80192d4 <DMA_SetConfig+0x260>)
 801913e:	4293      	cmp	r3, r2
 8019140:	d01d      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	4a64      	ldr	r2, [pc, #400]	; (80192d8 <DMA_SetConfig+0x264>)
 8019148:	4293      	cmp	r3, r2
 801914a:	d018      	beq.n	801917e <DMA_SetConfig+0x10a>
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	4a62      	ldr	r2, [pc, #392]	; (80192dc <DMA_SetConfig+0x268>)
 8019152:	4293      	cmp	r3, r2
 8019154:	d013      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	4a61      	ldr	r2, [pc, #388]	; (80192e0 <DMA_SetConfig+0x26c>)
 801915c:	4293      	cmp	r3, r2
 801915e:	d00e      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	4a5f      	ldr	r2, [pc, #380]	; (80192e4 <DMA_SetConfig+0x270>)
 8019166:	4293      	cmp	r3, r2
 8019168:	d009      	beq.n	801917e <DMA_SetConfig+0x10a>
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	4a5e      	ldr	r2, [pc, #376]	; (80192e8 <DMA_SetConfig+0x274>)
 8019170:	4293      	cmp	r3, r2
 8019172:	d004      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	4a5c      	ldr	r2, [pc, #368]	; (80192ec <DMA_SetConfig+0x278>)
 801917a:	4293      	cmp	r3, r2
 801917c:	d101      	bne.n	8019182 <DMA_SetConfig+0x10e>
 801917e:	2301      	movs	r3, #1
 8019180:	e000      	b.n	8019184 <DMA_SetConfig+0x110>
 8019182:	2300      	movs	r3, #0
 8019184:	2b00      	cmp	r3, #0
 8019186:	d00d      	beq.n	80191a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801918c:	68fa      	ldr	r2, [r7, #12]
 801918e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019190:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019196:	2b00      	cmp	r3, #0
 8019198:	d004      	beq.n	80191a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801919e:	68fa      	ldr	r2, [r7, #12]
 80191a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80191a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	4a39      	ldr	r2, [pc, #228]	; (8019290 <DMA_SetConfig+0x21c>)
 80191aa:	4293      	cmp	r3, r2
 80191ac:	d04a      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	4a38      	ldr	r2, [pc, #224]	; (8019294 <DMA_SetConfig+0x220>)
 80191b4:	4293      	cmp	r3, r2
 80191b6:	d045      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	4a36      	ldr	r2, [pc, #216]	; (8019298 <DMA_SetConfig+0x224>)
 80191be:	4293      	cmp	r3, r2
 80191c0:	d040      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	4a35      	ldr	r2, [pc, #212]	; (801929c <DMA_SetConfig+0x228>)
 80191c8:	4293      	cmp	r3, r2
 80191ca:	d03b      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	4a33      	ldr	r2, [pc, #204]	; (80192a0 <DMA_SetConfig+0x22c>)
 80191d2:	4293      	cmp	r3, r2
 80191d4:	d036      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	4a32      	ldr	r2, [pc, #200]	; (80192a4 <DMA_SetConfig+0x230>)
 80191dc:	4293      	cmp	r3, r2
 80191de:	d031      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	4a30      	ldr	r2, [pc, #192]	; (80192a8 <DMA_SetConfig+0x234>)
 80191e6:	4293      	cmp	r3, r2
 80191e8:	d02c      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	4a2f      	ldr	r2, [pc, #188]	; (80192ac <DMA_SetConfig+0x238>)
 80191f0:	4293      	cmp	r3, r2
 80191f2:	d027      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	4a2d      	ldr	r2, [pc, #180]	; (80192b0 <DMA_SetConfig+0x23c>)
 80191fa:	4293      	cmp	r3, r2
 80191fc:	d022      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	4a2c      	ldr	r2, [pc, #176]	; (80192b4 <DMA_SetConfig+0x240>)
 8019204:	4293      	cmp	r3, r2
 8019206:	d01d      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	4a2a      	ldr	r2, [pc, #168]	; (80192b8 <DMA_SetConfig+0x244>)
 801920e:	4293      	cmp	r3, r2
 8019210:	d018      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	4a29      	ldr	r2, [pc, #164]	; (80192bc <DMA_SetConfig+0x248>)
 8019218:	4293      	cmp	r3, r2
 801921a:	d013      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	4a27      	ldr	r2, [pc, #156]	; (80192c0 <DMA_SetConfig+0x24c>)
 8019222:	4293      	cmp	r3, r2
 8019224:	d00e      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	4a26      	ldr	r2, [pc, #152]	; (80192c4 <DMA_SetConfig+0x250>)
 801922c:	4293      	cmp	r3, r2
 801922e:	d009      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	4a24      	ldr	r2, [pc, #144]	; (80192c8 <DMA_SetConfig+0x254>)
 8019236:	4293      	cmp	r3, r2
 8019238:	d004      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	4a23      	ldr	r2, [pc, #140]	; (80192cc <DMA_SetConfig+0x258>)
 8019240:	4293      	cmp	r3, r2
 8019242:	d101      	bne.n	8019248 <DMA_SetConfig+0x1d4>
 8019244:	2301      	movs	r3, #1
 8019246:	e000      	b.n	801924a <DMA_SetConfig+0x1d6>
 8019248:	2300      	movs	r3, #0
 801924a:	2b00      	cmp	r3, #0
 801924c:	d059      	beq.n	8019302 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019252:	f003 031f 	and.w	r3, r3, #31
 8019256:	223f      	movs	r2, #63	; 0x3f
 8019258:	409a      	lsls	r2, r3
 801925a:	697b      	ldr	r3, [r7, #20]
 801925c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	681a      	ldr	r2, [r3, #0]
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801926c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	683a      	ldr	r2, [r7, #0]
 8019274:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	689b      	ldr	r3, [r3, #8]
 801927a:	2b40      	cmp	r3, #64	; 0x40
 801927c:	d138      	bne.n	80192f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	687a      	ldr	r2, [r7, #4]
 8019284:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	68ba      	ldr	r2, [r7, #8]
 801928c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801928e:	e086      	b.n	801939e <DMA_SetConfig+0x32a>
 8019290:	40020010 	.word	0x40020010
 8019294:	40020028 	.word	0x40020028
 8019298:	40020040 	.word	0x40020040
 801929c:	40020058 	.word	0x40020058
 80192a0:	40020070 	.word	0x40020070
 80192a4:	40020088 	.word	0x40020088
 80192a8:	400200a0 	.word	0x400200a0
 80192ac:	400200b8 	.word	0x400200b8
 80192b0:	40020410 	.word	0x40020410
 80192b4:	40020428 	.word	0x40020428
 80192b8:	40020440 	.word	0x40020440
 80192bc:	40020458 	.word	0x40020458
 80192c0:	40020470 	.word	0x40020470
 80192c4:	40020488 	.word	0x40020488
 80192c8:	400204a0 	.word	0x400204a0
 80192cc:	400204b8 	.word	0x400204b8
 80192d0:	58025408 	.word	0x58025408
 80192d4:	5802541c 	.word	0x5802541c
 80192d8:	58025430 	.word	0x58025430
 80192dc:	58025444 	.word	0x58025444
 80192e0:	58025458 	.word	0x58025458
 80192e4:	5802546c 	.word	0x5802546c
 80192e8:	58025480 	.word	0x58025480
 80192ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	68ba      	ldr	r2, [r7, #8]
 80192f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	687a      	ldr	r2, [r7, #4]
 80192fe:	60da      	str	r2, [r3, #12]
}
 8019300:	e04d      	b.n	801939e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	4a29      	ldr	r2, [pc, #164]	; (80193ac <DMA_SetConfig+0x338>)
 8019308:	4293      	cmp	r3, r2
 801930a:	d022      	beq.n	8019352 <DMA_SetConfig+0x2de>
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	4a27      	ldr	r2, [pc, #156]	; (80193b0 <DMA_SetConfig+0x33c>)
 8019312:	4293      	cmp	r3, r2
 8019314:	d01d      	beq.n	8019352 <DMA_SetConfig+0x2de>
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	4a26      	ldr	r2, [pc, #152]	; (80193b4 <DMA_SetConfig+0x340>)
 801931c:	4293      	cmp	r3, r2
 801931e:	d018      	beq.n	8019352 <DMA_SetConfig+0x2de>
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	4a24      	ldr	r2, [pc, #144]	; (80193b8 <DMA_SetConfig+0x344>)
 8019326:	4293      	cmp	r3, r2
 8019328:	d013      	beq.n	8019352 <DMA_SetConfig+0x2de>
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	4a23      	ldr	r2, [pc, #140]	; (80193bc <DMA_SetConfig+0x348>)
 8019330:	4293      	cmp	r3, r2
 8019332:	d00e      	beq.n	8019352 <DMA_SetConfig+0x2de>
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	4a21      	ldr	r2, [pc, #132]	; (80193c0 <DMA_SetConfig+0x34c>)
 801933a:	4293      	cmp	r3, r2
 801933c:	d009      	beq.n	8019352 <DMA_SetConfig+0x2de>
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	4a20      	ldr	r2, [pc, #128]	; (80193c4 <DMA_SetConfig+0x350>)
 8019344:	4293      	cmp	r3, r2
 8019346:	d004      	beq.n	8019352 <DMA_SetConfig+0x2de>
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	4a1e      	ldr	r2, [pc, #120]	; (80193c8 <DMA_SetConfig+0x354>)
 801934e:	4293      	cmp	r3, r2
 8019350:	d101      	bne.n	8019356 <DMA_SetConfig+0x2e2>
 8019352:	2301      	movs	r3, #1
 8019354:	e000      	b.n	8019358 <DMA_SetConfig+0x2e4>
 8019356:	2300      	movs	r3, #0
 8019358:	2b00      	cmp	r3, #0
 801935a:	d020      	beq.n	801939e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019360:	f003 031f 	and.w	r3, r3, #31
 8019364:	2201      	movs	r2, #1
 8019366:	409a      	lsls	r2, r3
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	683a      	ldr	r2, [r7, #0]
 8019372:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	689b      	ldr	r3, [r3, #8]
 8019378:	2b40      	cmp	r3, #64	; 0x40
 801937a:	d108      	bne.n	801938e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	687a      	ldr	r2, [r7, #4]
 8019382:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	68ba      	ldr	r2, [r7, #8]
 801938a:	60da      	str	r2, [r3, #12]
}
 801938c:	e007      	b.n	801939e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	68ba      	ldr	r2, [r7, #8]
 8019394:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	687a      	ldr	r2, [r7, #4]
 801939c:	60da      	str	r2, [r3, #12]
}
 801939e:	bf00      	nop
 80193a0:	371c      	adds	r7, #28
 80193a2:	46bd      	mov	sp, r7
 80193a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a8:	4770      	bx	lr
 80193aa:	bf00      	nop
 80193ac:	58025408 	.word	0x58025408
 80193b0:	5802541c 	.word	0x5802541c
 80193b4:	58025430 	.word	0x58025430
 80193b8:	58025444 	.word	0x58025444
 80193bc:	58025458 	.word	0x58025458
 80193c0:	5802546c 	.word	0x5802546c
 80193c4:	58025480 	.word	0x58025480
 80193c8:	58025494 	.word	0x58025494

080193cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80193cc:	b480      	push	{r7}
 80193ce:	b085      	sub	sp, #20
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	4a42      	ldr	r2, [pc, #264]	; (80194e4 <DMA_CalcBaseAndBitshift+0x118>)
 80193da:	4293      	cmp	r3, r2
 80193dc:	d04a      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	4a41      	ldr	r2, [pc, #260]	; (80194e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80193e4:	4293      	cmp	r3, r2
 80193e6:	d045      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	4a3f      	ldr	r2, [pc, #252]	; (80194ec <DMA_CalcBaseAndBitshift+0x120>)
 80193ee:	4293      	cmp	r3, r2
 80193f0:	d040      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	4a3e      	ldr	r2, [pc, #248]	; (80194f0 <DMA_CalcBaseAndBitshift+0x124>)
 80193f8:	4293      	cmp	r3, r2
 80193fa:	d03b      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	4a3c      	ldr	r2, [pc, #240]	; (80194f4 <DMA_CalcBaseAndBitshift+0x128>)
 8019402:	4293      	cmp	r3, r2
 8019404:	d036      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	4a3b      	ldr	r2, [pc, #236]	; (80194f8 <DMA_CalcBaseAndBitshift+0x12c>)
 801940c:	4293      	cmp	r3, r2
 801940e:	d031      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	4a39      	ldr	r2, [pc, #228]	; (80194fc <DMA_CalcBaseAndBitshift+0x130>)
 8019416:	4293      	cmp	r3, r2
 8019418:	d02c      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	4a38      	ldr	r2, [pc, #224]	; (8019500 <DMA_CalcBaseAndBitshift+0x134>)
 8019420:	4293      	cmp	r3, r2
 8019422:	d027      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	4a36      	ldr	r2, [pc, #216]	; (8019504 <DMA_CalcBaseAndBitshift+0x138>)
 801942a:	4293      	cmp	r3, r2
 801942c:	d022      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	4a35      	ldr	r2, [pc, #212]	; (8019508 <DMA_CalcBaseAndBitshift+0x13c>)
 8019434:	4293      	cmp	r3, r2
 8019436:	d01d      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	4a33      	ldr	r2, [pc, #204]	; (801950c <DMA_CalcBaseAndBitshift+0x140>)
 801943e:	4293      	cmp	r3, r2
 8019440:	d018      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	4a32      	ldr	r2, [pc, #200]	; (8019510 <DMA_CalcBaseAndBitshift+0x144>)
 8019448:	4293      	cmp	r3, r2
 801944a:	d013      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	4a30      	ldr	r2, [pc, #192]	; (8019514 <DMA_CalcBaseAndBitshift+0x148>)
 8019452:	4293      	cmp	r3, r2
 8019454:	d00e      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	4a2f      	ldr	r2, [pc, #188]	; (8019518 <DMA_CalcBaseAndBitshift+0x14c>)
 801945c:	4293      	cmp	r3, r2
 801945e:	d009      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	4a2d      	ldr	r2, [pc, #180]	; (801951c <DMA_CalcBaseAndBitshift+0x150>)
 8019466:	4293      	cmp	r3, r2
 8019468:	d004      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	4a2c      	ldr	r2, [pc, #176]	; (8019520 <DMA_CalcBaseAndBitshift+0x154>)
 8019470:	4293      	cmp	r3, r2
 8019472:	d101      	bne.n	8019478 <DMA_CalcBaseAndBitshift+0xac>
 8019474:	2301      	movs	r3, #1
 8019476:	e000      	b.n	801947a <DMA_CalcBaseAndBitshift+0xae>
 8019478:	2300      	movs	r3, #0
 801947a:	2b00      	cmp	r3, #0
 801947c:	d024      	beq.n	80194c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	b2db      	uxtb	r3, r3
 8019484:	3b10      	subs	r3, #16
 8019486:	4a27      	ldr	r2, [pc, #156]	; (8019524 <DMA_CalcBaseAndBitshift+0x158>)
 8019488:	fba2 2303 	umull	r2, r3, r2, r3
 801948c:	091b      	lsrs	r3, r3, #4
 801948e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	f003 0307 	and.w	r3, r3, #7
 8019496:	4a24      	ldr	r2, [pc, #144]	; (8019528 <DMA_CalcBaseAndBitshift+0x15c>)
 8019498:	5cd3      	ldrb	r3, [r2, r3]
 801949a:	461a      	mov	r2, r3
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	2b03      	cmp	r3, #3
 80194a4:	d908      	bls.n	80194b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	461a      	mov	r2, r3
 80194ac:	4b1f      	ldr	r3, [pc, #124]	; (801952c <DMA_CalcBaseAndBitshift+0x160>)
 80194ae:	4013      	ands	r3, r2
 80194b0:	1d1a      	adds	r2, r3, #4
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	659a      	str	r2, [r3, #88]	; 0x58
 80194b6:	e00d      	b.n	80194d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	461a      	mov	r2, r3
 80194be:	4b1b      	ldr	r3, [pc, #108]	; (801952c <DMA_CalcBaseAndBitshift+0x160>)
 80194c0:	4013      	ands	r3, r2
 80194c2:	687a      	ldr	r2, [r7, #4]
 80194c4:	6593      	str	r3, [r2, #88]	; 0x58
 80194c6:	e005      	b.n	80194d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80194d8:	4618      	mov	r0, r3
 80194da:	3714      	adds	r7, #20
 80194dc:	46bd      	mov	sp, r7
 80194de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e2:	4770      	bx	lr
 80194e4:	40020010 	.word	0x40020010
 80194e8:	40020028 	.word	0x40020028
 80194ec:	40020040 	.word	0x40020040
 80194f0:	40020058 	.word	0x40020058
 80194f4:	40020070 	.word	0x40020070
 80194f8:	40020088 	.word	0x40020088
 80194fc:	400200a0 	.word	0x400200a0
 8019500:	400200b8 	.word	0x400200b8
 8019504:	40020410 	.word	0x40020410
 8019508:	40020428 	.word	0x40020428
 801950c:	40020440 	.word	0x40020440
 8019510:	40020458 	.word	0x40020458
 8019514:	40020470 	.word	0x40020470
 8019518:	40020488 	.word	0x40020488
 801951c:	400204a0 	.word	0x400204a0
 8019520:	400204b8 	.word	0x400204b8
 8019524:	aaaaaaab 	.word	0xaaaaaaab
 8019528:	08020ce8 	.word	0x08020ce8
 801952c:	fffffc00 	.word	0xfffffc00

08019530 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8019530:	b480      	push	{r7}
 8019532:	b085      	sub	sp, #20
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019538:	2300      	movs	r3, #0
 801953a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	699b      	ldr	r3, [r3, #24]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d120      	bne.n	8019586 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019548:	2b03      	cmp	r3, #3
 801954a:	d858      	bhi.n	80195fe <DMA_CheckFifoParam+0xce>
 801954c:	a201      	add	r2, pc, #4	; (adr r2, 8019554 <DMA_CheckFifoParam+0x24>)
 801954e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019552:	bf00      	nop
 8019554:	08019565 	.word	0x08019565
 8019558:	08019577 	.word	0x08019577
 801955c:	08019565 	.word	0x08019565
 8019560:	080195ff 	.word	0x080195ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801956c:	2b00      	cmp	r3, #0
 801956e:	d048      	beq.n	8019602 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8019570:	2301      	movs	r3, #1
 8019572:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019574:	e045      	b.n	8019602 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801957a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801957e:	d142      	bne.n	8019606 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8019580:	2301      	movs	r3, #1
 8019582:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019584:	e03f      	b.n	8019606 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	699b      	ldr	r3, [r3, #24]
 801958a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801958e:	d123      	bne.n	80195d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019594:	2b03      	cmp	r3, #3
 8019596:	d838      	bhi.n	801960a <DMA_CheckFifoParam+0xda>
 8019598:	a201      	add	r2, pc, #4	; (adr r2, 80195a0 <DMA_CheckFifoParam+0x70>)
 801959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801959e:	bf00      	nop
 80195a0:	080195b1 	.word	0x080195b1
 80195a4:	080195b7 	.word	0x080195b7
 80195a8:	080195b1 	.word	0x080195b1
 80195ac:	080195c9 	.word	0x080195c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80195b0:	2301      	movs	r3, #1
 80195b2:	73fb      	strb	r3, [r7, #15]
        break;
 80195b4:	e030      	b.n	8019618 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d025      	beq.n	801960e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80195c2:	2301      	movs	r3, #1
 80195c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80195c6:	e022      	b.n	801960e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80195d0:	d11f      	bne.n	8019612 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80195d2:	2301      	movs	r3, #1
 80195d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80195d6:	e01c      	b.n	8019612 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195dc:	2b02      	cmp	r3, #2
 80195de:	d902      	bls.n	80195e6 <DMA_CheckFifoParam+0xb6>
 80195e0:	2b03      	cmp	r3, #3
 80195e2:	d003      	beq.n	80195ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80195e4:	e018      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80195e6:	2301      	movs	r3, #1
 80195e8:	73fb      	strb	r3, [r7, #15]
        break;
 80195ea:	e015      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d00e      	beq.n	8019616 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80195f8:	2301      	movs	r3, #1
 80195fa:	73fb      	strb	r3, [r7, #15]
    break;
 80195fc:	e00b      	b.n	8019616 <DMA_CheckFifoParam+0xe6>
        break;
 80195fe:	bf00      	nop
 8019600:	e00a      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        break;
 8019602:	bf00      	nop
 8019604:	e008      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        break;
 8019606:	bf00      	nop
 8019608:	e006      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        break;
 801960a:	bf00      	nop
 801960c:	e004      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        break;
 801960e:	bf00      	nop
 8019610:	e002      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        break;
 8019612:	bf00      	nop
 8019614:	e000      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
    break;
 8019616:	bf00      	nop
    }
  }

  return status;
 8019618:	7bfb      	ldrb	r3, [r7, #15]
}
 801961a:	4618      	mov	r0, r3
 801961c:	3714      	adds	r7, #20
 801961e:	46bd      	mov	sp, r7
 8019620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019624:	4770      	bx	lr
 8019626:	bf00      	nop

08019628 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8019628:	b480      	push	{r7}
 801962a:	b085      	sub	sp, #20
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	4a38      	ldr	r2, [pc, #224]	; (801971c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801963c:	4293      	cmp	r3, r2
 801963e:	d022      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	4a36      	ldr	r2, [pc, #216]	; (8019720 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8019646:	4293      	cmp	r3, r2
 8019648:	d01d      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	4a35      	ldr	r2, [pc, #212]	; (8019724 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8019650:	4293      	cmp	r3, r2
 8019652:	d018      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	4a33      	ldr	r2, [pc, #204]	; (8019728 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801965a:	4293      	cmp	r3, r2
 801965c:	d013      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	4a32      	ldr	r2, [pc, #200]	; (801972c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8019664:	4293      	cmp	r3, r2
 8019666:	d00e      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	4a30      	ldr	r2, [pc, #192]	; (8019730 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801966e:	4293      	cmp	r3, r2
 8019670:	d009      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	4a2f      	ldr	r2, [pc, #188]	; (8019734 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8019678:	4293      	cmp	r3, r2
 801967a:	d004      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	4a2d      	ldr	r2, [pc, #180]	; (8019738 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8019682:	4293      	cmp	r3, r2
 8019684:	d101      	bne.n	801968a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8019686:	2301      	movs	r3, #1
 8019688:	e000      	b.n	801968c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801968a:	2300      	movs	r3, #0
 801968c:	2b00      	cmp	r3, #0
 801968e:	d01a      	beq.n	80196c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	b2db      	uxtb	r3, r3
 8019696:	3b08      	subs	r3, #8
 8019698:	4a28      	ldr	r2, [pc, #160]	; (801973c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801969a:	fba2 2303 	umull	r2, r3, r2, r3
 801969e:	091b      	lsrs	r3, r3, #4
 80196a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80196a2:	68fa      	ldr	r2, [r7, #12]
 80196a4:	4b26      	ldr	r3, [pc, #152]	; (8019740 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80196a6:	4413      	add	r3, r2
 80196a8:	009b      	lsls	r3, r3, #2
 80196aa:	461a      	mov	r2, r3
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	4a24      	ldr	r2, [pc, #144]	; (8019744 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80196b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	f003 031f 	and.w	r3, r3, #31
 80196bc:	2201      	movs	r2, #1
 80196be:	409a      	lsls	r2, r3
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80196c4:	e024      	b.n	8019710 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	b2db      	uxtb	r3, r3
 80196cc:	3b10      	subs	r3, #16
 80196ce:	4a1e      	ldr	r2, [pc, #120]	; (8019748 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80196d0:	fba2 2303 	umull	r2, r3, r2, r3
 80196d4:	091b      	lsrs	r3, r3, #4
 80196d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80196d8:	68bb      	ldr	r3, [r7, #8]
 80196da:	4a1c      	ldr	r2, [pc, #112]	; (801974c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80196dc:	4293      	cmp	r3, r2
 80196de:	d806      	bhi.n	80196ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80196e0:	68bb      	ldr	r3, [r7, #8]
 80196e2:	4a1b      	ldr	r2, [pc, #108]	; (8019750 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80196e4:	4293      	cmp	r3, r2
 80196e6:	d902      	bls.n	80196ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	3308      	adds	r3, #8
 80196ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80196ee:	68fa      	ldr	r2, [r7, #12]
 80196f0:	4b18      	ldr	r3, [pc, #96]	; (8019754 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80196f2:	4413      	add	r3, r2
 80196f4:	009b      	lsls	r3, r3, #2
 80196f6:	461a      	mov	r2, r3
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	4a16      	ldr	r2, [pc, #88]	; (8019758 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8019700:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	f003 031f 	and.w	r3, r3, #31
 8019708:	2201      	movs	r2, #1
 801970a:	409a      	lsls	r2, r3
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8019710:	bf00      	nop
 8019712:	3714      	adds	r7, #20
 8019714:	46bd      	mov	sp, r7
 8019716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971a:	4770      	bx	lr
 801971c:	58025408 	.word	0x58025408
 8019720:	5802541c 	.word	0x5802541c
 8019724:	58025430 	.word	0x58025430
 8019728:	58025444 	.word	0x58025444
 801972c:	58025458 	.word	0x58025458
 8019730:	5802546c 	.word	0x5802546c
 8019734:	58025480 	.word	0x58025480
 8019738:	58025494 	.word	0x58025494
 801973c:	cccccccd 	.word	0xcccccccd
 8019740:	16009600 	.word	0x16009600
 8019744:	58025880 	.word	0x58025880
 8019748:	aaaaaaab 	.word	0xaaaaaaab
 801974c:	400204b8 	.word	0x400204b8
 8019750:	4002040f 	.word	0x4002040f
 8019754:	10008200 	.word	0x10008200
 8019758:	40020880 	.word	0x40020880

0801975c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801975c:	b480      	push	{r7}
 801975e:	b085      	sub	sp, #20
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	685b      	ldr	r3, [r3, #4]
 8019768:	b2db      	uxtb	r3, r3
 801976a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d04a      	beq.n	8019808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	2b08      	cmp	r3, #8
 8019776:	d847      	bhi.n	8019808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	4a25      	ldr	r2, [pc, #148]	; (8019814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801977e:	4293      	cmp	r3, r2
 8019780:	d022      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	4a24      	ldr	r2, [pc, #144]	; (8019818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8019788:	4293      	cmp	r3, r2
 801978a:	d01d      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	4a22      	ldr	r2, [pc, #136]	; (801981c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8019792:	4293      	cmp	r3, r2
 8019794:	d018      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	4a21      	ldr	r2, [pc, #132]	; (8019820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801979c:	4293      	cmp	r3, r2
 801979e:	d013      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	4a1f      	ldr	r2, [pc, #124]	; (8019824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80197a6:	4293      	cmp	r3, r2
 80197a8:	d00e      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	4a1e      	ldr	r2, [pc, #120]	; (8019828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80197b0:	4293      	cmp	r3, r2
 80197b2:	d009      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	4a1c      	ldr	r2, [pc, #112]	; (801982c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80197ba:	4293      	cmp	r3, r2
 80197bc:	d004      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	4a1b      	ldr	r2, [pc, #108]	; (8019830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80197c4:	4293      	cmp	r3, r2
 80197c6:	d101      	bne.n	80197cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80197c8:	2301      	movs	r3, #1
 80197ca:	e000      	b.n	80197ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80197cc:	2300      	movs	r3, #0
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d00a      	beq.n	80197e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80197d2:	68fa      	ldr	r2, [r7, #12]
 80197d4:	4b17      	ldr	r3, [pc, #92]	; (8019834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80197d6:	4413      	add	r3, r2
 80197d8:	009b      	lsls	r3, r3, #2
 80197da:	461a      	mov	r2, r3
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	4a15      	ldr	r2, [pc, #84]	; (8019838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80197e4:	671a      	str	r2, [r3, #112]	; 0x70
 80197e6:	e009      	b.n	80197fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80197e8:	68fa      	ldr	r2, [r7, #12]
 80197ea:	4b14      	ldr	r3, [pc, #80]	; (801983c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80197ec:	4413      	add	r3, r2
 80197ee:	009b      	lsls	r3, r3, #2
 80197f0:	461a      	mov	r2, r3
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	4a11      	ldr	r2, [pc, #68]	; (8019840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80197fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	3b01      	subs	r3, #1
 8019800:	2201      	movs	r2, #1
 8019802:	409a      	lsls	r2, r3
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8019808:	bf00      	nop
 801980a:	3714      	adds	r7, #20
 801980c:	46bd      	mov	sp, r7
 801980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019812:	4770      	bx	lr
 8019814:	58025408 	.word	0x58025408
 8019818:	5802541c 	.word	0x5802541c
 801981c:	58025430 	.word	0x58025430
 8019820:	58025444 	.word	0x58025444
 8019824:	58025458 	.word	0x58025458
 8019828:	5802546c 	.word	0x5802546c
 801982c:	58025480 	.word	0x58025480
 8019830:	58025494 	.word	0x58025494
 8019834:	1600963f 	.word	0x1600963f
 8019838:	58025940 	.word	0x58025940
 801983c:	1000823f 	.word	0x1000823f
 8019840:	40020940 	.word	0x40020940

08019844 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b098      	sub	sp, #96	; 0x60
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 801984c:	4a84      	ldr	r2, [pc, #528]	; (8019a60 <HAL_FDCAN_Init+0x21c>)
 801984e:	f107 030c 	add.w	r3, r7, #12
 8019852:	4611      	mov	r1, r2
 8019854:	224c      	movs	r2, #76	; 0x4c
 8019856:	4618      	mov	r0, r3
 8019858:	f006 ff8a 	bl	8020770 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d101      	bne.n	8019866 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8019862:	2301      	movs	r3, #1
 8019864:	e1c6      	b.n	8019bf4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	4a7e      	ldr	r2, [pc, #504]	; (8019a64 <HAL_FDCAN_Init+0x220>)
 801986c:	4293      	cmp	r3, r2
 801986e:	d106      	bne.n	801987e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019878:	461a      	mov	r2, r3
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019884:	b2db      	uxtb	r3, r3
 8019886:	2b00      	cmp	r3, #0
 8019888:	d106      	bne.n	8019898 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	2200      	movs	r2, #0
 801988e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8019892:	6878      	ldr	r0, [r7, #4]
 8019894:	f7fa ff04 	bl	80146a0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	699a      	ldr	r2, [r3, #24]
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	f022 0210 	bic.w	r2, r2, #16
 80198a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80198a8:	f7fb fd40 	bl	801532c <HAL_GetTick>
 80198ac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80198ae:	e014      	b.n	80198da <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80198b0:	f7fb fd3c 	bl	801532c <HAL_GetTick>
 80198b4:	4602      	mov	r2, r0
 80198b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80198b8:	1ad3      	subs	r3, r2, r3
 80198ba:	2b0a      	cmp	r3, #10
 80198bc:	d90d      	bls.n	80198da <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80198c4:	f043 0201 	orr.w	r2, r3, #1
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	2203      	movs	r2, #3
 80198d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80198d6:	2301      	movs	r3, #1
 80198d8:	e18c      	b.n	8019bf4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	699b      	ldr	r3, [r3, #24]
 80198e0:	f003 0308 	and.w	r3, r3, #8
 80198e4:	2b08      	cmp	r3, #8
 80198e6:	d0e3      	beq.n	80198b0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	699a      	ldr	r2, [r3, #24]
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	f042 0201 	orr.w	r2, r2, #1
 80198f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80198f8:	f7fb fd18 	bl	801532c <HAL_GetTick>
 80198fc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80198fe:	e014      	b.n	801992a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8019900:	f7fb fd14 	bl	801532c <HAL_GetTick>
 8019904:	4602      	mov	r2, r0
 8019906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019908:	1ad3      	subs	r3, r2, r3
 801990a:	2b0a      	cmp	r3, #10
 801990c:	d90d      	bls.n	801992a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019914:	f043 0201 	orr.w	r2, r3, #1
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	2203      	movs	r2, #3
 8019922:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8019926:	2301      	movs	r3, #1
 8019928:	e164      	b.n	8019bf4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	699b      	ldr	r3, [r3, #24]
 8019930:	f003 0301 	and.w	r3, r3, #1
 8019934:	2b00      	cmp	r3, #0
 8019936:	d0e3      	beq.n	8019900 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	699a      	ldr	r2, [r3, #24]
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	f042 0202 	orr.w	r2, r2, #2
 8019946:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	7c1b      	ldrb	r3, [r3, #16]
 801994c:	2b01      	cmp	r3, #1
 801994e:	d108      	bne.n	8019962 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	699a      	ldr	r2, [r3, #24]
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801995e:	619a      	str	r2, [r3, #24]
 8019960:	e007      	b.n	8019972 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	699a      	ldr	r2, [r3, #24]
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019970:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	7c5b      	ldrb	r3, [r3, #17]
 8019976:	2b01      	cmp	r3, #1
 8019978:	d108      	bne.n	801998c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	699a      	ldr	r2, [r3, #24]
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019988:	619a      	str	r2, [r3, #24]
 801998a:	e007      	b.n	801999c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	699a      	ldr	r2, [r3, #24]
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801999a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	7c9b      	ldrb	r3, [r3, #18]
 80199a0:	2b01      	cmp	r3, #1
 80199a2:	d108      	bne.n	80199b6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	699a      	ldr	r2, [r3, #24]
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80199b2:	619a      	str	r2, [r3, #24]
 80199b4:	e007      	b.n	80199c6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	699a      	ldr	r2, [r3, #24]
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80199c4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	699b      	ldr	r3, [r3, #24]
 80199cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	689a      	ldr	r2, [r3, #8]
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	430a      	orrs	r2, r1
 80199da:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	699a      	ldr	r2, [r3, #24]
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80199ea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	691a      	ldr	r2, [r3, #16]
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	f022 0210 	bic.w	r2, r2, #16
 80199fa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	68db      	ldr	r3, [r3, #12]
 8019a00:	2b01      	cmp	r3, #1
 8019a02:	d108      	bne.n	8019a16 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	699a      	ldr	r2, [r3, #24]
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	f042 0204 	orr.w	r2, r2, #4
 8019a12:	619a      	str	r2, [r3, #24]
 8019a14:	e030      	b.n	8019a78 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	68db      	ldr	r3, [r3, #12]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d02c      	beq.n	8019a78 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	68db      	ldr	r3, [r3, #12]
 8019a22:	2b02      	cmp	r3, #2
 8019a24:	d020      	beq.n	8019a68 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	699a      	ldr	r2, [r3, #24]
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019a34:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	691a      	ldr	r2, [r3, #16]
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	f042 0210 	orr.w	r2, r2, #16
 8019a44:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	68db      	ldr	r3, [r3, #12]
 8019a4a:	2b03      	cmp	r3, #3
 8019a4c:	d114      	bne.n	8019a78 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	699a      	ldr	r2, [r3, #24]
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	f042 0220 	orr.w	r2, r2, #32
 8019a5c:	619a      	str	r2, [r3, #24]
 8019a5e:	e00b      	b.n	8019a78 <HAL_FDCAN_Init+0x234>
 8019a60:	08020c38 	.word	0x08020c38
 8019a64:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	699a      	ldr	r2, [r3, #24]
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	f042 0220 	orr.w	r2, r2, #32
 8019a76:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	699b      	ldr	r3, [r3, #24]
 8019a7c:	3b01      	subs	r3, #1
 8019a7e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	69db      	ldr	r3, [r3, #28]
 8019a84:	3b01      	subs	r3, #1
 8019a86:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019a88:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	6a1b      	ldr	r3, [r3, #32]
 8019a8e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8019a90:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	695b      	ldr	r3, [r3, #20]
 8019a98:	3b01      	subs	r3, #1
 8019a9a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8019aa0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019aa2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	689b      	ldr	r3, [r3, #8]
 8019aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019aac:	d115      	bne.n	8019ada <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ab2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ab8:	3b01      	subs	r3, #1
 8019aba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019abc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ac2:	3b01      	subs	r3, #1
 8019ac4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8019ac6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ace:	3b01      	subs	r3, #1
 8019ad0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8019ad6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019ad8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d00a      	beq.n	8019af8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	430a      	orrs	r2, r1
 8019af4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b00:	4413      	add	r3, r2
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d011      	beq.n	8019b2a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8019b0e:	f023 0107 	bic.w	r1, r3, #7
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019b16:	009b      	lsls	r3, r3, #2
 8019b18:	3360      	adds	r3, #96	; 0x60
 8019b1a:	443b      	add	r3, r7
 8019b1c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	430a      	orrs	r2, r1
 8019b26:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d011      	beq.n	8019b56 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019b3a:	f023 0107 	bic.w	r1, r3, #7
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b42:	009b      	lsls	r3, r3, #2
 8019b44:	3360      	adds	r3, #96	; 0x60
 8019b46:	443b      	add	r3, r7
 8019b48:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	430a      	orrs	r2, r1
 8019b52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d012      	beq.n	8019b84 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019b66:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b6e:	009b      	lsls	r3, r3, #2
 8019b70:	3360      	adds	r3, #96	; 0x60
 8019b72:	443b      	add	r3, r7
 8019b74:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019b78:	011a      	lsls	r2, r3, #4
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	430a      	orrs	r2, r1
 8019b80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d012      	beq.n	8019bb2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019b94:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b9c:	009b      	lsls	r3, r3, #2
 8019b9e:	3360      	adds	r3, #96	; 0x60
 8019ba0:	443b      	add	r3, r7
 8019ba2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019ba6:	021a      	lsls	r2, r3, #8
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	430a      	orrs	r2, r1
 8019bae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	4a11      	ldr	r2, [pc, #68]	; (8019bfc <HAL_FDCAN_Init+0x3b8>)
 8019bb8:	4293      	cmp	r3, r2
 8019bba:	d107      	bne.n	8019bcc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	685b      	ldr	r3, [r3, #4]
 8019bc0:	689a      	ldr	r2, [r3, #8]
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	685b      	ldr	r3, [r3, #4]
 8019bc6:	f022 0203 	bic.w	r2, r2, #3
 8019bca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	2200      	movs	r2, #0
 8019bd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	2200      	movs	r2, #0
 8019bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2201      	movs	r2, #1
 8019be0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8019be4:	6878      	ldr	r0, [r7, #4]
 8019be6:	f000 fd83 	bl	801a6f0 <FDCAN_CalcultateRamBlockAddresses>
 8019bea:	4603      	mov	r3, r0
 8019bec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8019bf0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	3760      	adds	r7, #96	; 0x60
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	bd80      	pop	{r7, pc}
 8019bfc:	4000a000 	.word	0x4000a000

08019c00 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8019c00:	b480      	push	{r7}
 8019c02:	b083      	sub	sp, #12
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019c0e:	b2db      	uxtb	r3, r3
 8019c10:	2b01      	cmp	r3, #1
 8019c12:	d111      	bne.n	8019c38 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	2202      	movs	r2, #2
 8019c18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	699a      	ldr	r2, [r3, #24]
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	f022 0201 	bic.w	r2, r2, #1
 8019c2a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	2200      	movs	r2, #0
 8019c30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8019c34:	2300      	movs	r3, #0
 8019c36:	e008      	b.n	8019c4a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c3e:	f043 0204 	orr.w	r2, r3, #4
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019c48:	2301      	movs	r3, #1
  }
}
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	370c      	adds	r7, #12
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c54:	4770      	bx	lr

08019c56 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8019c56:	b580      	push	{r7, lr}
 8019c58:	b086      	sub	sp, #24
 8019c5a:	af00      	add	r7, sp, #0
 8019c5c:	60f8      	str	r0, [r7, #12]
 8019c5e:	60b9      	str	r1, [r7, #8]
 8019c60:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019c68:	b2db      	uxtb	r3, r3
 8019c6a:	2b02      	cmp	r3, #2
 8019c6c:	d141      	bne.n	8019cf2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019c76:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d109      	bne.n	8019c92 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c84:	f043 0220 	orr.w	r2, r3, #32
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8019c8e:	2301      	movs	r3, #1
 8019c90:	e038      	b.n	8019d04 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d009      	beq.n	8019cb6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019ca8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8019cb2:	2301      	movs	r3, #1
 8019cb4:	e026      	b.n	8019d04 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019cbe:	0c1b      	lsrs	r3, r3, #16
 8019cc0:	f003 031f 	and.w	r3, r3, #31
 8019cc4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8019cc6:	697b      	ldr	r3, [r7, #20]
 8019cc8:	687a      	ldr	r2, [r7, #4]
 8019cca:	68b9      	ldr	r1, [r7, #8]
 8019ccc:	68f8      	ldr	r0, [r7, #12]
 8019cce:	f000 fe95 	bl	801a9fc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	2101      	movs	r1, #1
 8019cd8:	697a      	ldr	r2, [r7, #20]
 8019cda:	fa01 f202 	lsl.w	r2, r1, r2
 8019cde:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8019ce2:	2201      	movs	r2, #1
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	409a      	lsls	r2, r3
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8019cee:	2300      	movs	r3, #0
 8019cf0:	e008      	b.n	8019d04 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019cf8:	f043 0208 	orr.w	r2, r3, #8
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019d02:	2301      	movs	r3, #1
  }
}
 8019d04:	4618      	mov	r0, r3
 8019d06:	3718      	adds	r7, #24
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	bd80      	pop	{r7, pc}

08019d0c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8019d0c:	b480      	push	{r7}
 8019d0e:	b08b      	sub	sp, #44	; 0x2c
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	60f8      	str	r0, [r7, #12]
 8019d14:	60b9      	str	r1, [r7, #8]
 8019d16:	607a      	str	r2, [r7, #4]
 8019d18:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8019d1a:	2300      	movs	r3, #0
 8019d1c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019d24:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8019d26:	7efb      	ldrb	r3, [r7, #27]
 8019d28:	2b02      	cmp	r3, #2
 8019d2a:	f040 814b 	bne.w	8019fc4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8019d2e:	68bb      	ldr	r3, [r7, #8]
 8019d30:	2b40      	cmp	r3, #64	; 0x40
 8019d32:	d14d      	bne.n	8019dd0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019d3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d109      	bne.n	8019d58 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019d4a:	f043 0220 	orr.w	r2, r3, #32
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019d54:	2301      	movs	r3, #1
 8019d56:	e13e      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d109      	bne.n	8019d7c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019d6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019d78:	2301      	movs	r3, #1
 8019d7a:	e12c      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019d84:	0e1b      	lsrs	r3, r3, #24
 8019d86:	f003 0301 	and.w	r3, r3, #1
 8019d8a:	2b01      	cmp	r3, #1
 8019d8c:	d10b      	bne.n	8019da6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019d96:	0fdb      	lsrs	r3, r3, #31
 8019d98:	f003 0301 	and.w	r3, r3, #1
 8019d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019da0:	d101      	bne.n	8019da6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8019da2:	2301      	movs	r3, #1
 8019da4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019dae:	0a1b      	lsrs	r3, r3, #8
 8019db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019db4:	69fa      	ldr	r2, [r7, #28]
 8019db6:	4413      	add	r3, r2
 8019db8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019dc2:	69f9      	ldr	r1, [r7, #28]
 8019dc4:	fb01 f303 	mul.w	r3, r1, r3
 8019dc8:	009b      	lsls	r3, r3, #2
 8019dca:	4413      	add	r3, r2
 8019dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8019dce:	e069      	b.n	8019ea4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8019dd0:	68bb      	ldr	r3, [r7, #8]
 8019dd2:	2b41      	cmp	r3, #65	; 0x41
 8019dd4:	d14d      	bne.n	8019e72 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019dde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d109      	bne.n	8019dfa <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019dec:	f043 0220 	orr.w	r2, r3, #32
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019df6:	2301      	movs	r3, #1
 8019df8:	e0ed      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d109      	bne.n	8019e1e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019e1a:	2301      	movs	r3, #1
 8019e1c:	e0db      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019e26:	0e1b      	lsrs	r3, r3, #24
 8019e28:	f003 0301 	and.w	r3, r3, #1
 8019e2c:	2b01      	cmp	r3, #1
 8019e2e:	d10b      	bne.n	8019e48 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019e38:	0fdb      	lsrs	r3, r3, #31
 8019e3a:	f003 0301 	and.w	r3, r3, #1
 8019e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019e42:	d101      	bne.n	8019e48 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8019e44:	2301      	movs	r3, #1
 8019e46:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019e50:	0a1b      	lsrs	r3, r3, #8
 8019e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e56:	69fa      	ldr	r2, [r7, #28]
 8019e58:	4413      	add	r3, r2
 8019e5a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019e64:	69f9      	ldr	r1, [r7, #28]
 8019e66:	fb01 f303 	mul.w	r3, r1, r3
 8019e6a:	009b      	lsls	r3, r3, #2
 8019e6c:	4413      	add	r3, r2
 8019e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8019e70:	e018      	b.n	8019ea4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019e76:	68ba      	ldr	r2, [r7, #8]
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	d309      	bcc.n	8019e90 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e82:	f043 0220 	orr.w	r2, r3, #32
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	e0a2      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019e98:	68b9      	ldr	r1, [r7, #8]
 8019e9a:	fb01 f303 	mul.w	r3, r1, r3
 8019e9e:	009b      	lsls	r3, r3, #2
 8019ea0:	4413      	add	r3, r2
 8019ea2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8019ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	685b      	ldr	r3, [r3, #4]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d107      	bne.n	8019ec8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8019eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	0c9b      	lsrs	r3, r3, #18
 8019ebe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	601a      	str	r2, [r3, #0]
 8019ec6:	e005      	b.n	8019ed4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8019ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8019ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8019ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8019eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eee:	3304      	adds	r3, #4
 8019ef0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8019ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	b29a      	uxth	r2, r3
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8019efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8019f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8019f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8019f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	0e1b      	lsrs	r3, r3, #24
 8019f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8019f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	0fda      	lsrs	r2, r3, #31
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8019f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f3a:	3304      	adds	r3, #4
 8019f3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8019f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f40:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8019f42:	2300      	movs	r3, #0
 8019f44:	623b      	str	r3, [r7, #32]
 8019f46:	e00a      	b.n	8019f5e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8019f48:	697a      	ldr	r2, [r7, #20]
 8019f4a:	6a3b      	ldr	r3, [r7, #32]
 8019f4c:	441a      	add	r2, r3
 8019f4e:	6839      	ldr	r1, [r7, #0]
 8019f50:	6a3b      	ldr	r3, [r7, #32]
 8019f52:	440b      	add	r3, r1
 8019f54:	7812      	ldrb	r2, [r2, #0]
 8019f56:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8019f58:	6a3b      	ldr	r3, [r7, #32]
 8019f5a:	3301      	adds	r3, #1
 8019f5c:	623b      	str	r3, [r7, #32]
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	68db      	ldr	r3, [r3, #12]
 8019f62:	0c1b      	lsrs	r3, r3, #16
 8019f64:	4a1f      	ldr	r2, [pc, #124]	; (8019fe4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8019f66:	5cd3      	ldrb	r3, [r2, r3]
 8019f68:	461a      	mov	r2, r3
 8019f6a:	6a3b      	ldr	r3, [r7, #32]
 8019f6c:	4293      	cmp	r3, r2
 8019f6e:	d3eb      	bcc.n	8019f48 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8019f70:	68bb      	ldr	r3, [r7, #8]
 8019f72:	2b40      	cmp	r3, #64	; 0x40
 8019f74:	d105      	bne.n	8019f82 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	69fa      	ldr	r2, [r7, #28]
 8019f7c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8019f80:	e01e      	b.n	8019fc0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8019f82:	68bb      	ldr	r3, [r7, #8]
 8019f84:	2b41      	cmp	r3, #65	; 0x41
 8019f86:	d105      	bne.n	8019f94 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	69fa      	ldr	r2, [r7, #28]
 8019f8e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8019f92:	e015      	b.n	8019fc0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8019f94:	68bb      	ldr	r3, [r7, #8]
 8019f96:	2b1f      	cmp	r3, #31
 8019f98:	d808      	bhi.n	8019fac <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	2101      	movs	r1, #1
 8019fa0:	68ba      	ldr	r2, [r7, #8]
 8019fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8019fa6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8019faa:	e009      	b.n	8019fc0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8019fac:	68bb      	ldr	r3, [r7, #8]
 8019fae:	f003 021f 	and.w	r2, r3, #31
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	2101      	movs	r1, #1
 8019fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8019fbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8019fc0:	2300      	movs	r3, #0
 8019fc2:	e008      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019fca:	f043 0208 	orr.w	r2, r3, #8
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019fd4:	2301      	movs	r3, #1
  }
}
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	372c      	adds	r7, #44	; 0x2c
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe0:	4770      	bx	lr
 8019fe2:	bf00      	nop
 8019fe4:	08020cf0 	.word	0x08020cf0

08019fe8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8019fe8:	b480      	push	{r7}
 8019fea:	b087      	sub	sp, #28
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	60f8      	str	r0, [r7, #12]
 8019ff0:	60b9      	str	r1, [r7, #8]
 8019ff2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019ffa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8019ffc:	7dfb      	ldrb	r3, [r7, #23]
 8019ffe:	2b01      	cmp	r3, #1
 801a000:	d002      	beq.n	801a008 <HAL_FDCAN_ActivateNotification+0x20>
 801a002:	7dfb      	ldrb	r3, [r7, #23]
 801a004:	2b02      	cmp	r3, #2
 801a006:	d155      	bne.n	801a0b4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	4013      	ands	r3, r2
 801a012:	2b00      	cmp	r3, #0
 801a014:	d108      	bne.n	801a028 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	f042 0201 	orr.w	r2, r2, #1
 801a024:	65da      	str	r2, [r3, #92]	; 0x5c
 801a026:	e014      	b.n	801a052 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	4013      	ands	r3, r2
 801a032:	68ba      	ldr	r2, [r7, #8]
 801a034:	429a      	cmp	r2, r3
 801a036:	d108      	bne.n	801a04a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	f042 0202 	orr.w	r2, r2, #2
 801a046:	65da      	str	r2, [r3, #92]	; 0x5c
 801a048:	e003      	b.n	801a052 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	2203      	movs	r2, #3
 801a050:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d009      	beq.n	801a070 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 801a064:	68fb      	ldr	r3, [r7, #12]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	687a      	ldr	r2, [r7, #4]
 801a06a:	430a      	orrs	r2, r1
 801a06c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 801a070:	68bb      	ldr	r3, [r7, #8]
 801a072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a076:	2b00      	cmp	r3, #0
 801a078:	d009      	beq.n	801a08e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	687a      	ldr	r2, [r7, #4]
 801a088:	430a      	orrs	r2, r1
 801a08a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 801a08e:	68fb      	ldr	r3, [r7, #12]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a094:	68ba      	ldr	r2, [r7, #8]
 801a096:	4b0f      	ldr	r3, [pc, #60]	; (801a0d4 <HAL_FDCAN_ActivateNotification+0xec>)
 801a098:	4013      	ands	r3, r2
 801a09a:	68fa      	ldr	r2, [r7, #12]
 801a09c:	6812      	ldr	r2, [r2, #0]
 801a09e:	430b      	orrs	r3, r1
 801a0a0:	6553      	str	r3, [r2, #84]	; 0x54
 801a0a2:	4b0d      	ldr	r3, [pc, #52]	; (801a0d8 <HAL_FDCAN_ActivateNotification+0xf0>)
 801a0a4:	695a      	ldr	r2, [r3, #20]
 801a0a6:	68bb      	ldr	r3, [r7, #8]
 801a0a8:	0f9b      	lsrs	r3, r3, #30
 801a0aa:	490b      	ldr	r1, [pc, #44]	; (801a0d8 <HAL_FDCAN_ActivateNotification+0xf0>)
 801a0ac:	4313      	orrs	r3, r2
 801a0ae:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	e008      	b.n	801a0c6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a0ba:	f043 0202 	orr.w	r2, r3, #2
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a0c4:	2301      	movs	r3, #1
  }
}
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	371c      	adds	r7, #28
 801a0ca:	46bd      	mov	sp, r7
 801a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d0:	4770      	bx	lr
 801a0d2:	bf00      	nop
 801a0d4:	3fcfffff 	.word	0x3fcfffff
 801a0d8:	4000a800 	.word	0x4000a800

0801a0dc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b096      	sub	sp, #88	; 0x58
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 801a0e4:	4b9a      	ldr	r3, [pc, #616]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a0e6:	691b      	ldr	r3, [r3, #16]
 801a0e8:	079b      	lsls	r3, r3, #30
 801a0ea:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 801a0ec:	4b98      	ldr	r3, [pc, #608]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a0ee:	695b      	ldr	r3, [r3, #20]
 801a0f0:	079b      	lsls	r3, r3, #30
 801a0f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a0f4:	4013      	ands	r3, r2
 801a0f6:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a0fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801a102:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a10a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a10c:	4013      	ands	r3, r2
 801a10e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a116:	f003 030f 	and.w	r3, r3, #15
 801a11a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a124:	4013      	ands	r3, r2
 801a126:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a12e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a132:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a13a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a13c:	4013      	ands	r3, r2
 801a13e:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a146:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 801a14a:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a154:	4013      	ands	r3, r2
 801a156:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a15e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 801a162:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a16a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a16c:	4013      	ands	r3, r2
 801a16e:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a176:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a17e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 801a180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a182:	0a1b      	lsrs	r3, r3, #8
 801a184:	f003 0301 	and.w	r3, r3, #1
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d010      	beq.n	801a1ae <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 801a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a18e:	0a1b      	lsrs	r3, r3, #8
 801a190:	f003 0301 	and.w	r3, r3, #1
 801a194:	2b00      	cmp	r3, #0
 801a196:	d00a      	beq.n	801a1ae <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a1a0:	651a      	str	r2, [r3, #80]	; 0x50
 801a1a2:	4b6b      	ldr	r3, [pc, #428]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 801a1a8:	6878      	ldr	r0, [r7, #4]
 801a1aa:	f000 fa54 	bl	801a656 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 801a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1b0:	0a9b      	lsrs	r3, r3, #10
 801a1b2:	f003 0301 	and.w	r3, r3, #1
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d01d      	beq.n	801a1f6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 801a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1bc:	0a9b      	lsrs	r3, r3, #10
 801a1be:	f003 0301 	and.w	r3, r3, #1
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d017      	beq.n	801a1f6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801a1ce:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a1d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a1da:	4013      	ands	r3, r2
 801a1dc:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a1e6:	651a      	str	r2, [r3, #80]	; 0x50
 801a1e8:	4b59      	ldr	r3, [pc, #356]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 801a1ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a1f0:	6878      	ldr	r0, [r7, #4]
 801a1f2:	f000 fa07 	bl	801a604 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 801a1f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d00d      	beq.n	801a218 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	681a      	ldr	r2, [r3, #0]
 801a200:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a202:	4b54      	ldr	r3, [pc, #336]	; (801a354 <HAL_FDCAN_IRQHandler+0x278>)
 801a204:	400b      	ands	r3, r1
 801a206:	6513      	str	r3, [r2, #80]	; 0x50
 801a208:	4a51      	ldr	r2, [pc, #324]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a20a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a20c:	0f9b      	lsrs	r3, r3, #30
 801a20e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 801a210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a212:	6878      	ldr	r0, [r7, #4]
 801a214:	f000 f9c0 	bl	801a598 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 801a218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d00d      	beq.n	801a23a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681a      	ldr	r2, [r3, #0]
 801a222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a224:	4b4b      	ldr	r3, [pc, #300]	; (801a354 <HAL_FDCAN_IRQHandler+0x278>)
 801a226:	400b      	ands	r3, r1
 801a228:	6513      	str	r3, [r2, #80]	; 0x50
 801a22a:	4a49      	ldr	r2, [pc, #292]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a22c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a22e:	0f9b      	lsrs	r3, r3, #30
 801a230:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 801a232:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a234:	6878      	ldr	r0, [r7, #4]
 801a236:	f000 f9ba 	bl	801a5ae <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 801a23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d00d      	beq.n	801a25c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	681a      	ldr	r2, [r3, #0]
 801a244:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a246:	4b43      	ldr	r3, [pc, #268]	; (801a354 <HAL_FDCAN_IRQHandler+0x278>)
 801a248:	400b      	ands	r3, r1
 801a24a:	6513      	str	r3, [r2, #80]	; 0x50
 801a24c:	4a40      	ldr	r2, [pc, #256]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a250:	0f9b      	lsrs	r3, r3, #30
 801a252:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 801a254:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a256:	6878      	ldr	r0, [r7, #4]
 801a258:	f7f3 f9a6 	bl	800d5a8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 801a25c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d00d      	beq.n	801a27e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	681a      	ldr	r2, [r3, #0]
 801a266:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a268:	4b3a      	ldr	r3, [pc, #232]	; (801a354 <HAL_FDCAN_IRQHandler+0x278>)
 801a26a:	400b      	ands	r3, r1
 801a26c:	6513      	str	r3, [r2, #80]	; 0x50
 801a26e:	4a38      	ldr	r2, [pc, #224]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a272:	0f9b      	lsrs	r3, r3, #30
 801a274:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 801a276:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a278:	6878      	ldr	r0, [r7, #4]
 801a27a:	f000 f9a3 	bl	801a5c4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 801a27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a280:	0adb      	lsrs	r3, r3, #11
 801a282:	f003 0301 	and.w	r3, r3, #1
 801a286:	2b00      	cmp	r3, #0
 801a288:	d010      	beq.n	801a2ac <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 801a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a28c:	0adb      	lsrs	r3, r3, #11
 801a28e:	f003 0301 	and.w	r3, r3, #1
 801a292:	2b00      	cmp	r3, #0
 801a294:	d00a      	beq.n	801a2ac <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a29e:	651a      	str	r2, [r3, #80]	; 0x50
 801a2a0:	4b2b      	ldr	r3, [pc, #172]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 801a2a6:	6878      	ldr	r0, [r7, #4]
 801a2a8:	f000 f997 	bl	801a5da <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 801a2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2ae:	0a5b      	lsrs	r3, r3, #9
 801a2b0:	f003 0301 	and.w	r3, r3, #1
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d01d      	beq.n	801a2f4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 801a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2ba:	0a5b      	lsrs	r3, r3, #9
 801a2bc:	f003 0301 	and.w	r3, r3, #1
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d017      	beq.n	801a2f4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a2cc:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a2d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a2d8:	4013      	ands	r3, r2
 801a2da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a2e4:	651a      	str	r2, [r3, #80]	; 0x50
 801a2e6:	4b1a      	ldr	r3, [pc, #104]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 801a2ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a2ee:	6878      	ldr	r0, [r7, #4]
 801a2f0:	f000 f97d 	bl	801a5ee <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2f6:	0cdb      	lsrs	r3, r3, #19
 801a2f8:	f003 0301 	and.w	r3, r3, #1
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d010      	beq.n	801a322 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a302:	0cdb      	lsrs	r3, r3, #19
 801a304:	f003 0301 	and.w	r3, r3, #1
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d00a      	beq.n	801a322 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a314:	651a      	str	r2, [r3, #80]	; 0x50
 801a316:	4b0e      	ldr	r3, [pc, #56]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a318:	2200      	movs	r2, #0
 801a31a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 801a31c:	6878      	ldr	r0, [r7, #4]
 801a31e:	f000 f97c 	bl	801a61a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 801a322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a324:	0c1b      	lsrs	r3, r3, #16
 801a326:	f003 0301 	and.w	r3, r3, #1
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d016      	beq.n	801a35c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 801a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a330:	0c1b      	lsrs	r3, r3, #16
 801a332:	f003 0301 	and.w	r3, r3, #1
 801a336:	2b00      	cmp	r3, #0
 801a338:	d010      	beq.n	801a35c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801a342:	651a      	str	r2, [r3, #80]	; 0x50
 801a344:	4b02      	ldr	r3, [pc, #8]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a346:	2200      	movs	r2, #0
 801a348:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 801a34a:	6878      	ldr	r0, [r7, #4]
 801a34c:	e004      	b.n	801a358 <HAL_FDCAN_IRQHandler+0x27c>
 801a34e:	bf00      	nop
 801a350:	4000a800 	.word	0x4000a800
 801a354:	3fcfffff 	.word	0x3fcfffff
 801a358:	f000 f969 	bl	801a62e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 801a35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a35e:	0c9b      	lsrs	r3, r3, #18
 801a360:	f003 0301 	and.w	r3, r3, #1
 801a364:	2b00      	cmp	r3, #0
 801a366:	d010      	beq.n	801a38a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 801a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a36a:	0c9b      	lsrs	r3, r3, #18
 801a36c:	f003 0301 	and.w	r3, r3, #1
 801a370:	2b00      	cmp	r3, #0
 801a372:	d00a      	beq.n	801a38a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a37c:	651a      	str	r2, [r3, #80]	; 0x50
 801a37e:	4b83      	ldr	r3, [pc, #524]	; (801a58c <HAL_FDCAN_IRQHandler+0x4b0>)
 801a380:	2200      	movs	r2, #0
 801a382:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 801a384:	6878      	ldr	r0, [r7, #4]
 801a386:	f000 f95c 	bl	801a642 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 801a38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a38c:	0c5b      	lsrs	r3, r3, #17
 801a38e:	f003 0301 	and.w	r3, r3, #1
 801a392:	2b00      	cmp	r3, #0
 801a394:	d015      	beq.n	801a3c2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 801a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a398:	0c5b      	lsrs	r3, r3, #17
 801a39a:	f003 0301 	and.w	r3, r3, #1
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d00f      	beq.n	801a3c2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801a3aa:	651a      	str	r2, [r3, #80]	; 0x50
 801a3ac:	4b77      	ldr	r3, [pc, #476]	; (801a58c <HAL_FDCAN_IRQHandler+0x4b0>)
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a3b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 801a3c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d00d      	beq.n	801a3e4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681a      	ldr	r2, [r3, #0]
 801a3cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a3ce:	4b70      	ldr	r3, [pc, #448]	; (801a590 <HAL_FDCAN_IRQHandler+0x4b4>)
 801a3d0:	400b      	ands	r3, r1
 801a3d2:	6513      	str	r3, [r2, #80]	; 0x50
 801a3d4:	4a6d      	ldr	r2, [pc, #436]	; (801a58c <HAL_FDCAN_IRQHandler+0x4b0>)
 801a3d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3d8:	0f9b      	lsrs	r3, r3, #30
 801a3da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 801a3dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a3de:	6878      	ldr	r0, [r7, #4]
 801a3e0:	f000 f94d 	bl	801a67e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 801a3e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d011      	beq.n	801a40e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	681a      	ldr	r2, [r3, #0]
 801a3ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a3f0:	4b67      	ldr	r3, [pc, #412]	; (801a590 <HAL_FDCAN_IRQHandler+0x4b4>)
 801a3f2:	400b      	ands	r3, r1
 801a3f4:	6513      	str	r3, [r2, #80]	; 0x50
 801a3f6:	4a65      	ldr	r2, [pc, #404]	; (801a58c <HAL_FDCAN_IRQHandler+0x4b0>)
 801a3f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a3fa:	0f9b      	lsrs	r3, r3, #30
 801a3fc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a406:	431a      	orrs	r2, r3
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	4a60      	ldr	r2, [pc, #384]	; (801a594 <HAL_FDCAN_IRQHandler+0x4b8>)
 801a414:	4293      	cmp	r3, r2
 801a416:	f040 80ac 	bne.w	801a572 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	685b      	ldr	r3, [r3, #4]
 801a41e:	689b      	ldr	r3, [r3, #8]
 801a420:	f003 0303 	and.w	r3, r3, #3
 801a424:	2b00      	cmp	r3, #0
 801a426:	f000 80a4 	beq.w	801a572 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	685b      	ldr	r3, [r3, #4]
 801a42e:	6a1b      	ldr	r3, [r3, #32]
 801a430:	f003 030f 	and.w	r3, r3, #15
 801a434:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	685b      	ldr	r3, [r3, #4]
 801a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a43c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a43e:	4013      	ands	r3, r2
 801a440:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	685b      	ldr	r3, [r3, #4]
 801a446:	6a1b      	ldr	r3, [r3, #32]
 801a448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a44c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	685b      	ldr	r3, [r3, #4]
 801a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a456:	4013      	ands	r3, r2
 801a458:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	685b      	ldr	r3, [r3, #4]
 801a45e:	6a1b      	ldr	r3, [r3, #32]
 801a460:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801a464:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	685b      	ldr	r3, [r3, #4]
 801a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a46e:	4013      	ands	r3, r2
 801a470:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	685b      	ldr	r3, [r3, #4]
 801a476:	6a1b      	ldr	r3, [r3, #32]
 801a478:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 801a47c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	685b      	ldr	r3, [r3, #4]
 801a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a484:	6a3a      	ldr	r2, [r7, #32]
 801a486:	4013      	ands	r3, r2
 801a488:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	685b      	ldr	r3, [r3, #4]
 801a48e:	6a1b      	ldr	r3, [r3, #32]
 801a490:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 801a494:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	685b      	ldr	r3, [r3, #4]
 801a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a49c:	69fa      	ldr	r2, [r7, #28]
 801a49e:	4013      	ands	r3, r2
 801a4a0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	685b      	ldr	r3, [r3, #4]
 801a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4a8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	685b      	ldr	r3, [r3, #4]
 801a4ae:	6a1b      	ldr	r3, [r3, #32]
 801a4b0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 801a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d007      	beq.n	801a4c8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	685b      	ldr	r3, [r3, #4]
 801a4bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a4be:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 801a4c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a4c2:	6878      	ldr	r0, [r7, #4]
 801a4c4:	f000 f8e6 	bl	801a694 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 801a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d007      	beq.n	801a4de <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	685b      	ldr	r3, [r3, #4]
 801a4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a4d4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 801a4d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a4d8:	6878      	ldr	r0, [r7, #4]
 801a4da:	f000 f8e6 	bl	801a6aa <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 801a4de:	69bb      	ldr	r3, [r7, #24]
 801a4e0:	099b      	lsrs	r3, r3, #6
 801a4e2:	f003 0301 	and.w	r3, r3, #1
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d01a      	beq.n	801a520 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 801a4ea:	697b      	ldr	r3, [r7, #20]
 801a4ec:	099b      	lsrs	r3, r3, #6
 801a4ee:	f003 0301 	and.w	r3, r3, #1
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d014      	beq.n	801a520 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	685b      	ldr	r3, [r3, #4]
 801a4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4fc:	0c1b      	lsrs	r3, r3, #16
 801a4fe:	b29b      	uxth	r3, r3
 801a500:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	685b      	ldr	r3, [r3, #4]
 801a506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a50c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	685b      	ldr	r3, [r3, #4]
 801a512:	2240      	movs	r2, #64	; 0x40
 801a514:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 801a516:	68fa      	ldr	r2, [r7, #12]
 801a518:	6939      	ldr	r1, [r7, #16]
 801a51a:	6878      	ldr	r0, [r7, #4]
 801a51c:	f000 f8d0 	bl	801a6c0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 801a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a522:	2b00      	cmp	r3, #0
 801a524:	d007      	beq.n	801a536 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	685b      	ldr	r3, [r3, #4]
 801a52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a52c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 801a52e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a530:	6878      	ldr	r0, [r7, #4]
 801a532:	f000 f8d1 	bl	801a6d8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 801a536:	6a3b      	ldr	r3, [r7, #32]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d00b      	beq.n	801a554 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	685b      	ldr	r3, [r3, #4]
 801a540:	6a3a      	ldr	r2, [r7, #32]
 801a542:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a54a:	6a3b      	ldr	r3, [r7, #32]
 801a54c:	431a      	orrs	r2, r3
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 801a554:	69fb      	ldr	r3, [r7, #28]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d00b      	beq.n	801a572 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	685b      	ldr	r3, [r3, #4]
 801a55e:	69fa      	ldr	r2, [r7, #28]
 801a560:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a568:	69fb      	ldr	r3, [r7, #28]
 801a56a:	431a      	orrs	r2, r3
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d002      	beq.n	801a582 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 801a57c:	6878      	ldr	r0, [r7, #4]
 801a57e:	f000 f874 	bl	801a66a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 801a582:	bf00      	nop
 801a584:	3758      	adds	r7, #88	; 0x58
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	4000a800 	.word	0x4000a800
 801a590:	3fcfffff 	.word	0x3fcfffff
 801a594:	4000a000 	.word	0x4000a000

0801a598 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 801a598:	b480      	push	{r7}
 801a59a:	b083      	sub	sp, #12
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]
 801a5a0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 801a5a2:	bf00      	nop
 801a5a4:	370c      	adds	r7, #12
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ac:	4770      	bx	lr

0801a5ae <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 801a5ae:	b480      	push	{r7}
 801a5b0:	b083      	sub	sp, #12
 801a5b2:	af00      	add	r7, sp, #0
 801a5b4:	6078      	str	r0, [r7, #4]
 801a5b6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 801a5b8:	bf00      	nop
 801a5ba:	370c      	adds	r7, #12
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c2:	4770      	bx	lr

0801a5c4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 801a5c4:	b480      	push	{r7}
 801a5c6:	b083      	sub	sp, #12
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	6078      	str	r0, [r7, #4]
 801a5cc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 801a5ce:	bf00      	nop
 801a5d0:	370c      	adds	r7, #12
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d8:	4770      	bx	lr

0801a5da <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a5da:	b480      	push	{r7}
 801a5dc:	b083      	sub	sp, #12
 801a5de:	af00      	add	r7, sp, #0
 801a5e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 801a5e2:	bf00      	nop
 801a5e4:	370c      	adds	r7, #12
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ec:	4770      	bx	lr

0801a5ee <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801a5ee:	b480      	push	{r7}
 801a5f0:	b083      	sub	sp, #12
 801a5f2:	af00      	add	r7, sp, #0
 801a5f4:	6078      	str	r0, [r7, #4]
 801a5f6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 801a5f8:	bf00      	nop
 801a5fa:	370c      	adds	r7, #12
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a602:	4770      	bx	lr

0801a604 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801a604:	b480      	push	{r7}
 801a606:	b083      	sub	sp, #12
 801a608:	af00      	add	r7, sp, #0
 801a60a:	6078      	str	r0, [r7, #4]
 801a60c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 801a60e:	bf00      	nop
 801a610:	370c      	adds	r7, #12
 801a612:	46bd      	mov	sp, r7
 801a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a618:	4770      	bx	lr

0801a61a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a61a:	b480      	push	{r7}
 801a61c:	b083      	sub	sp, #12
 801a61e:	af00      	add	r7, sp, #0
 801a620:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 801a622:	bf00      	nop
 801a624:	370c      	adds	r7, #12
 801a626:	46bd      	mov	sp, r7
 801a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a62c:	4770      	bx	lr

0801a62e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a62e:	b480      	push	{r7}
 801a630:	b083      	sub	sp, #12
 801a632:	af00      	add	r7, sp, #0
 801a634:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 801a636:	bf00      	nop
 801a638:	370c      	adds	r7, #12
 801a63a:	46bd      	mov	sp, r7
 801a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a640:	4770      	bx	lr

0801a642 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a642:	b480      	push	{r7}
 801a644:	b083      	sub	sp, #12
 801a646:	af00      	add	r7, sp, #0
 801a648:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 801a64a:	bf00      	nop
 801a64c:	370c      	adds	r7, #12
 801a64e:	46bd      	mov	sp, r7
 801a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a654:	4770      	bx	lr

0801a656 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a656:	b480      	push	{r7}
 801a658:	b083      	sub	sp, #12
 801a65a:	af00      	add	r7, sp, #0
 801a65c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 801a65e:	bf00      	nop
 801a660:	370c      	adds	r7, #12
 801a662:	46bd      	mov	sp, r7
 801a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a668:	4770      	bx	lr

0801a66a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a66a:	b480      	push	{r7}
 801a66c:	b083      	sub	sp, #12
 801a66e:	af00      	add	r7, sp, #0
 801a670:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 801a672:	bf00      	nop
 801a674:	370c      	adds	r7, #12
 801a676:	46bd      	mov	sp, r7
 801a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67c:	4770      	bx	lr

0801a67e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 801a67e:	b480      	push	{r7}
 801a680:	b083      	sub	sp, #12
 801a682:	af00      	add	r7, sp, #0
 801a684:	6078      	str	r0, [r7, #4]
 801a686:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 801a688:	bf00      	nop
 801a68a:	370c      	adds	r7, #12
 801a68c:	46bd      	mov	sp, r7
 801a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a692:	4770      	bx	lr

0801a694 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 801a694:	b480      	push	{r7}
 801a696:	b083      	sub	sp, #12
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
 801a69c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 801a69e:	bf00      	nop
 801a6a0:	370c      	adds	r7, #12
 801a6a2:	46bd      	mov	sp, r7
 801a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a8:	4770      	bx	lr

0801a6aa <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 801a6aa:	b480      	push	{r7}
 801a6ac:	b083      	sub	sp, #12
 801a6ae:	af00      	add	r7, sp, #0
 801a6b0:	6078      	str	r0, [r7, #4]
 801a6b2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 801a6b4:	bf00      	nop
 801a6b6:	370c      	adds	r7, #12
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6be:	4770      	bx	lr

0801a6c0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 801a6c0:	b480      	push	{r7}
 801a6c2:	b085      	sub	sp, #20
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	60f8      	str	r0, [r7, #12]
 801a6c8:	60b9      	str	r1, [r7, #8]
 801a6ca:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 801a6cc:	bf00      	nop
 801a6ce:	3714      	adds	r7, #20
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d6:	4770      	bx	lr

0801a6d8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 801a6d8:	b480      	push	{r7}
 801a6da:	b083      	sub	sp, #12
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	6078      	str	r0, [r7, #4]
 801a6e0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 801a6e2:	bf00      	nop
 801a6e4:	370c      	adds	r7, #12
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ec:	4770      	bx	lr
	...

0801a6f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 801a6f0:	b480      	push	{r7}
 801a6f2:	b085      	sub	sp, #20
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6fc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a706:	4ba7      	ldr	r3, [pc, #668]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a708:	4013      	ands	r3, r2
 801a70a:	68ba      	ldr	r2, [r7, #8]
 801a70c:	0091      	lsls	r1, r2, #2
 801a70e:	687a      	ldr	r2, [r7, #4]
 801a710:	6812      	ldr	r2, [r2, #0]
 801a712:	430b      	orrs	r3, r1
 801a714:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a720:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a728:	041a      	lsls	r2, r3, #16
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	430a      	orrs	r2, r1
 801a730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a738:	68ba      	ldr	r2, [r7, #8]
 801a73a:	4413      	add	r3, r2
 801a73c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a746:	4b97      	ldr	r3, [pc, #604]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a748:	4013      	ands	r3, r2
 801a74a:	68ba      	ldr	r2, [r7, #8]
 801a74c:	0091      	lsls	r1, r2, #2
 801a74e:	687a      	ldr	r2, [r7, #4]
 801a750:	6812      	ldr	r2, [r2, #0]
 801a752:	430b      	orrs	r3, r1
 801a754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a760:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a768:	041a      	lsls	r2, r3, #16
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	430a      	orrs	r2, r1
 801a770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a778:	005b      	lsls	r3, r3, #1
 801a77a:	68ba      	ldr	r2, [r7, #8]
 801a77c:	4413      	add	r3, r2
 801a77e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801a788:	4b86      	ldr	r3, [pc, #536]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a78a:	4013      	ands	r3, r2
 801a78c:	68ba      	ldr	r2, [r7, #8]
 801a78e:	0091      	lsls	r1, r2, #2
 801a790:	687a      	ldr	r2, [r7, #4]
 801a792:	6812      	ldr	r2, [r2, #0]
 801a794:	430b      	orrs	r3, r1
 801a796:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a7a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7aa:	041a      	lsls	r2, r3, #16
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	430a      	orrs	r2, r1
 801a7b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7ba:	687a      	ldr	r2, [r7, #4]
 801a7bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801a7be:	fb02 f303 	mul.w	r3, r2, r3
 801a7c2:	68ba      	ldr	r2, [r7, #8]
 801a7c4:	4413      	add	r3, r2
 801a7c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801a7d0:	4b74      	ldr	r3, [pc, #464]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a7d2:	4013      	ands	r3, r2
 801a7d4:	68ba      	ldr	r2, [r7, #8]
 801a7d6:	0091      	lsls	r1, r2, #2
 801a7d8:	687a      	ldr	r2, [r7, #4]
 801a7da:	6812      	ldr	r2, [r2, #0]
 801a7dc:	430b      	orrs	r3, r1
 801a7de:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a7ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a7f2:	041a      	lsls	r2, r3, #16
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	430a      	orrs	r2, r1
 801a7fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a802:	687a      	ldr	r2, [r7, #4]
 801a804:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801a806:	fb02 f303 	mul.w	r3, r2, r3
 801a80a:	68ba      	ldr	r2, [r7, #8]
 801a80c:	4413      	add	r3, r2
 801a80e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a818:	4b62      	ldr	r3, [pc, #392]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a81a:	4013      	ands	r3, r2
 801a81c:	68ba      	ldr	r2, [r7, #8]
 801a81e:	0091      	lsls	r1, r2, #2
 801a820:	687a      	ldr	r2, [r7, #4]
 801a822:	6812      	ldr	r2, [r2, #0]
 801a824:	430b      	orrs	r3, r1
 801a826:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a82e:	687a      	ldr	r2, [r7, #4]
 801a830:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801a832:	fb02 f303 	mul.w	r3, r2, r3
 801a836:	68ba      	ldr	r2, [r7, #8]
 801a838:	4413      	add	r3, r2
 801a83a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801a844:	4b57      	ldr	r3, [pc, #348]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a846:	4013      	ands	r3, r2
 801a848:	68ba      	ldr	r2, [r7, #8]
 801a84a:	0091      	lsls	r1, r2, #2
 801a84c:	687a      	ldr	r2, [r7, #4]
 801a84e:	6812      	ldr	r2, [r2, #0]
 801a850:	430b      	orrs	r3, r1
 801a852:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801a85e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a866:	041a      	lsls	r2, r3, #16
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	430a      	orrs	r2, r1
 801a86e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a876:	005b      	lsls	r3, r3, #1
 801a878:	68ba      	ldr	r2, [r7, #8]
 801a87a:	4413      	add	r3, r2
 801a87c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801a886:	4b47      	ldr	r3, [pc, #284]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a888:	4013      	ands	r3, r2
 801a88a:	68ba      	ldr	r2, [r7, #8]
 801a88c:	0091      	lsls	r1, r2, #2
 801a88e:	687a      	ldr	r2, [r7, #4]
 801a890:	6812      	ldr	r2, [r2, #0]
 801a892:	430b      	orrs	r3, r1
 801a894:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a8a0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8a8:	041a      	lsls	r2, r3, #16
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	430a      	orrs	r2, r1
 801a8b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a8bc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a8c4:	061a      	lsls	r2, r3, #24
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	430a      	orrs	r2, r1
 801a8cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a8d4:	4b34      	ldr	r3, [pc, #208]	; (801a9a8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 801a8d6:	4413      	add	r3, r2
 801a8d8:	009a      	lsls	r2, r3, #2
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8e6:	009b      	lsls	r3, r3, #2
 801a8e8:	441a      	add	r2, r3
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a8f6:	00db      	lsls	r3, r3, #3
 801a8f8:	441a      	add	r2, r3
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a906:	6879      	ldr	r1, [r7, #4]
 801a908:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801a90a:	fb01 f303 	mul.w	r3, r1, r3
 801a90e:	009b      	lsls	r3, r3, #2
 801a910:	441a      	add	r2, r3
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a91e:	6879      	ldr	r1, [r7, #4]
 801a920:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 801a922:	fb01 f303 	mul.w	r3, r1, r3
 801a926:	009b      	lsls	r3, r3, #2
 801a928:	441a      	add	r2, r3
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a936:	6879      	ldr	r1, [r7, #4]
 801a938:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801a93a:	fb01 f303 	mul.w	r3, r1, r3
 801a93e:	009b      	lsls	r3, r3, #2
 801a940:	441a      	add	r2, r3
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a952:	00db      	lsls	r3, r3, #3
 801a954:	441a      	add	r2, r3
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a966:	6879      	ldr	r1, [r7, #4]
 801a968:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801a96a:	fb01 f303 	mul.w	r3, r1, r3
 801a96e:	009b      	lsls	r3, r3, #2
 801a970:	441a      	add	r2, r3
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a982:	6879      	ldr	r1, [r7, #4]
 801a984:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801a986:	fb01 f303 	mul.w	r3, r1, r3
 801a98a:	009b      	lsls	r3, r3, #2
 801a98c:	441a      	add	r2, r3
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a99a:	4a04      	ldr	r2, [pc, #16]	; (801a9ac <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 801a99c:	4293      	cmp	r3, r2
 801a99e:	d915      	bls.n	801a9cc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 801a9a0:	e006      	b.n	801a9b0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 801a9a2:	bf00      	nop
 801a9a4:	ffff0003 	.word	0xffff0003
 801a9a8:	10002b00 	.word	0x10002b00
 801a9ac:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a9b6:	f043 0220 	orr.w	r2, r3, #32
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	2203      	movs	r2, #3
 801a9c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 801a9c8:	2301      	movs	r3, #1
 801a9ca:	e010      	b.n	801a9ee <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9d0:	60fb      	str	r3, [r7, #12]
 801a9d2:	e005      	b.n	801a9e0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	3304      	adds	r3, #4
 801a9de:	60fb      	str	r3, [r7, #12]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a9e6:	68fa      	ldr	r2, [r7, #12]
 801a9e8:	429a      	cmp	r2, r3
 801a9ea:	d3f3      	bcc.n	801a9d4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 801a9ec:	2300      	movs	r3, #0
}
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	3714      	adds	r7, #20
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f8:	4770      	bx	lr
 801a9fa:	bf00      	nop

0801a9fc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 801a9fc:	b480      	push	{r7}
 801a9fe:	b089      	sub	sp, #36	; 0x24
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	60f8      	str	r0, [r7, #12]
 801aa04:	60b9      	str	r1, [r7, #8]
 801aa06:	607a      	str	r2, [r7, #4]
 801aa08:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 801aa0a:	68bb      	ldr	r3, [r7, #8]
 801aa0c:	685b      	ldr	r3, [r3, #4]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d10a      	bne.n	801aa28 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aa12:	68bb      	ldr	r3, [r7, #8]
 801aa14:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 801aa16:	68bb      	ldr	r3, [r7, #8]
 801aa18:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 801aa1a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aa22:	4313      	orrs	r3, r2
 801aa24:	61fb      	str	r3, [r7, #28]
 801aa26:	e00a      	b.n	801aa3e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aa28:	68bb      	ldr	r3, [r7, #8]
 801aa2a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 801aa2c:	68bb      	ldr	r3, [r7, #8]
 801aa2e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 801aa30:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 801aa32:	68bb      	ldr	r3, [r7, #8]
 801aa34:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 801aa36:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aa38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801aa3c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801aa3e:	68bb      	ldr	r3, [r7, #8]
 801aa40:	6a1b      	ldr	r3, [r3, #32]
 801aa42:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 801aa44:	68bb      	ldr	r3, [r7, #8]
 801aa46:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801aa48:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 801aa4a:	68bb      	ldr	r3, [r7, #8]
 801aa4c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 801aa4e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 801aa50:	68bb      	ldr	r3, [r7, #8]
 801aa52:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 801aa54:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 801aa56:	68bb      	ldr	r3, [r7, #8]
 801aa58:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801aa5a:	4313      	orrs	r3, r2
 801aa5c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801aa68:	6839      	ldr	r1, [r7, #0]
 801aa6a:	fb01 f303 	mul.w	r3, r1, r3
 801aa6e:	009b      	lsls	r3, r3, #2
 801aa70:	4413      	add	r3, r2
 801aa72:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 801aa74:	69bb      	ldr	r3, [r7, #24]
 801aa76:	69fa      	ldr	r2, [r7, #28]
 801aa78:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801aa7a:	69bb      	ldr	r3, [r7, #24]
 801aa7c:	3304      	adds	r3, #4
 801aa7e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 801aa80:	69bb      	ldr	r3, [r7, #24]
 801aa82:	693a      	ldr	r2, [r7, #16]
 801aa84:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801aa86:	69bb      	ldr	r3, [r7, #24]
 801aa88:	3304      	adds	r3, #4
 801aa8a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801aa8c:	2300      	movs	r3, #0
 801aa8e:	617b      	str	r3, [r7, #20]
 801aa90:	e020      	b.n	801aad4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801aa92:	697b      	ldr	r3, [r7, #20]
 801aa94:	3303      	adds	r3, #3
 801aa96:	687a      	ldr	r2, [r7, #4]
 801aa98:	4413      	add	r3, r2
 801aa9a:	781b      	ldrb	r3, [r3, #0]
 801aa9c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801aa9e:	697b      	ldr	r3, [r7, #20]
 801aaa0:	3302      	adds	r3, #2
 801aaa2:	6879      	ldr	r1, [r7, #4]
 801aaa4:	440b      	add	r3, r1
 801aaa6:	781b      	ldrb	r3, [r3, #0]
 801aaa8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801aaaa:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801aaac:	697b      	ldr	r3, [r7, #20]
 801aaae:	3301      	adds	r3, #1
 801aab0:	6879      	ldr	r1, [r7, #4]
 801aab2:	440b      	add	r3, r1
 801aab4:	781b      	ldrb	r3, [r3, #0]
 801aab6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801aab8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 801aaba:	6879      	ldr	r1, [r7, #4]
 801aabc:	697a      	ldr	r2, [r7, #20]
 801aabe:	440a      	add	r2, r1
 801aac0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801aac2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801aac4:	69bb      	ldr	r3, [r7, #24]
 801aac6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 801aac8:	69bb      	ldr	r3, [r7, #24]
 801aaca:	3304      	adds	r3, #4
 801aacc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801aace:	697b      	ldr	r3, [r7, #20]
 801aad0:	3304      	adds	r3, #4
 801aad2:	617b      	str	r3, [r7, #20]
 801aad4:	68bb      	ldr	r3, [r7, #8]
 801aad6:	68db      	ldr	r3, [r3, #12]
 801aad8:	0c1b      	lsrs	r3, r3, #16
 801aada:	4a06      	ldr	r2, [pc, #24]	; (801aaf4 <FDCAN_CopyMessageToRAM+0xf8>)
 801aadc:	5cd3      	ldrb	r3, [r2, r3]
 801aade:	461a      	mov	r2, r3
 801aae0:	697b      	ldr	r3, [r7, #20]
 801aae2:	4293      	cmp	r3, r2
 801aae4:	d3d5      	bcc.n	801aa92 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 801aae6:	bf00      	nop
 801aae8:	bf00      	nop
 801aaea:	3724      	adds	r7, #36	; 0x24
 801aaec:	46bd      	mov	sp, r7
 801aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf2:	4770      	bx	lr
 801aaf4:	08020cf0 	.word	0x08020cf0

0801aaf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801aaf8:	b480      	push	{r7}
 801aafa:	b089      	sub	sp, #36	; 0x24
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
 801ab00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801ab02:	2300      	movs	r3, #0
 801ab04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801ab06:	4b86      	ldr	r3, [pc, #536]	; (801ad20 <HAL_GPIO_Init+0x228>)
 801ab08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801ab0a:	e18c      	b.n	801ae26 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801ab0c:	683b      	ldr	r3, [r7, #0]
 801ab0e:	681a      	ldr	r2, [r3, #0]
 801ab10:	2101      	movs	r1, #1
 801ab12:	69fb      	ldr	r3, [r7, #28]
 801ab14:	fa01 f303 	lsl.w	r3, r1, r3
 801ab18:	4013      	ands	r3, r2
 801ab1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801ab1c:	693b      	ldr	r3, [r7, #16]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	f000 817e 	beq.w	801ae20 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801ab24:	683b      	ldr	r3, [r7, #0]
 801ab26:	685b      	ldr	r3, [r3, #4]
 801ab28:	f003 0303 	and.w	r3, r3, #3
 801ab2c:	2b01      	cmp	r3, #1
 801ab2e:	d005      	beq.n	801ab3c <HAL_GPIO_Init+0x44>
 801ab30:	683b      	ldr	r3, [r7, #0]
 801ab32:	685b      	ldr	r3, [r3, #4]
 801ab34:	f003 0303 	and.w	r3, r3, #3
 801ab38:	2b02      	cmp	r3, #2
 801ab3a:	d130      	bne.n	801ab9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	689b      	ldr	r3, [r3, #8]
 801ab40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801ab42:	69fb      	ldr	r3, [r7, #28]
 801ab44:	005b      	lsls	r3, r3, #1
 801ab46:	2203      	movs	r2, #3
 801ab48:	fa02 f303 	lsl.w	r3, r2, r3
 801ab4c:	43db      	mvns	r3, r3
 801ab4e:	69ba      	ldr	r2, [r7, #24]
 801ab50:	4013      	ands	r3, r2
 801ab52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801ab54:	683b      	ldr	r3, [r7, #0]
 801ab56:	68da      	ldr	r2, [r3, #12]
 801ab58:	69fb      	ldr	r3, [r7, #28]
 801ab5a:	005b      	lsls	r3, r3, #1
 801ab5c:	fa02 f303 	lsl.w	r3, r2, r3
 801ab60:	69ba      	ldr	r2, [r7, #24]
 801ab62:	4313      	orrs	r3, r2
 801ab64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	69ba      	ldr	r2, [r7, #24]
 801ab6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	685b      	ldr	r3, [r3, #4]
 801ab70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801ab72:	2201      	movs	r2, #1
 801ab74:	69fb      	ldr	r3, [r7, #28]
 801ab76:	fa02 f303 	lsl.w	r3, r2, r3
 801ab7a:	43db      	mvns	r3, r3
 801ab7c:	69ba      	ldr	r2, [r7, #24]
 801ab7e:	4013      	ands	r3, r2
 801ab80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801ab82:	683b      	ldr	r3, [r7, #0]
 801ab84:	685b      	ldr	r3, [r3, #4]
 801ab86:	091b      	lsrs	r3, r3, #4
 801ab88:	f003 0201 	and.w	r2, r3, #1
 801ab8c:	69fb      	ldr	r3, [r7, #28]
 801ab8e:	fa02 f303 	lsl.w	r3, r2, r3
 801ab92:	69ba      	ldr	r2, [r7, #24]
 801ab94:	4313      	orrs	r3, r2
 801ab96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	69ba      	ldr	r2, [r7, #24]
 801ab9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	685b      	ldr	r3, [r3, #4]
 801aba2:	f003 0303 	and.w	r3, r3, #3
 801aba6:	2b03      	cmp	r3, #3
 801aba8:	d017      	beq.n	801abda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	68db      	ldr	r3, [r3, #12]
 801abae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801abb0:	69fb      	ldr	r3, [r7, #28]
 801abb2:	005b      	lsls	r3, r3, #1
 801abb4:	2203      	movs	r2, #3
 801abb6:	fa02 f303 	lsl.w	r3, r2, r3
 801abba:	43db      	mvns	r3, r3
 801abbc:	69ba      	ldr	r2, [r7, #24]
 801abbe:	4013      	ands	r3, r2
 801abc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801abc2:	683b      	ldr	r3, [r7, #0]
 801abc4:	689a      	ldr	r2, [r3, #8]
 801abc6:	69fb      	ldr	r3, [r7, #28]
 801abc8:	005b      	lsls	r3, r3, #1
 801abca:	fa02 f303 	lsl.w	r3, r2, r3
 801abce:	69ba      	ldr	r2, [r7, #24]
 801abd0:	4313      	orrs	r3, r2
 801abd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	69ba      	ldr	r2, [r7, #24]
 801abd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801abda:	683b      	ldr	r3, [r7, #0]
 801abdc:	685b      	ldr	r3, [r3, #4]
 801abde:	f003 0303 	and.w	r3, r3, #3
 801abe2:	2b02      	cmp	r3, #2
 801abe4:	d123      	bne.n	801ac2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801abe6:	69fb      	ldr	r3, [r7, #28]
 801abe8:	08da      	lsrs	r2, r3, #3
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	3208      	adds	r2, #8
 801abee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801abf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801abf4:	69fb      	ldr	r3, [r7, #28]
 801abf6:	f003 0307 	and.w	r3, r3, #7
 801abfa:	009b      	lsls	r3, r3, #2
 801abfc:	220f      	movs	r2, #15
 801abfe:	fa02 f303 	lsl.w	r3, r2, r3
 801ac02:	43db      	mvns	r3, r3
 801ac04:	69ba      	ldr	r2, [r7, #24]
 801ac06:	4013      	ands	r3, r2
 801ac08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	691a      	ldr	r2, [r3, #16]
 801ac0e:	69fb      	ldr	r3, [r7, #28]
 801ac10:	f003 0307 	and.w	r3, r3, #7
 801ac14:	009b      	lsls	r3, r3, #2
 801ac16:	fa02 f303 	lsl.w	r3, r2, r3
 801ac1a:	69ba      	ldr	r2, [r7, #24]
 801ac1c:	4313      	orrs	r3, r2
 801ac1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801ac20:	69fb      	ldr	r3, [r7, #28]
 801ac22:	08da      	lsrs	r2, r3, #3
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	3208      	adds	r2, #8
 801ac28:	69b9      	ldr	r1, [r7, #24]
 801ac2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801ac34:	69fb      	ldr	r3, [r7, #28]
 801ac36:	005b      	lsls	r3, r3, #1
 801ac38:	2203      	movs	r2, #3
 801ac3a:	fa02 f303 	lsl.w	r3, r2, r3
 801ac3e:	43db      	mvns	r3, r3
 801ac40:	69ba      	ldr	r2, [r7, #24]
 801ac42:	4013      	ands	r3, r2
 801ac44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801ac46:	683b      	ldr	r3, [r7, #0]
 801ac48:	685b      	ldr	r3, [r3, #4]
 801ac4a:	f003 0203 	and.w	r2, r3, #3
 801ac4e:	69fb      	ldr	r3, [r7, #28]
 801ac50:	005b      	lsls	r3, r3, #1
 801ac52:	fa02 f303 	lsl.w	r3, r2, r3
 801ac56:	69ba      	ldr	r2, [r7, #24]
 801ac58:	4313      	orrs	r3, r2
 801ac5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	69ba      	ldr	r2, [r7, #24]
 801ac60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801ac62:	683b      	ldr	r3, [r7, #0]
 801ac64:	685b      	ldr	r3, [r3, #4]
 801ac66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	f000 80d8 	beq.w	801ae20 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ac70:	4b2c      	ldr	r3, [pc, #176]	; (801ad24 <HAL_GPIO_Init+0x22c>)
 801ac72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801ac76:	4a2b      	ldr	r2, [pc, #172]	; (801ad24 <HAL_GPIO_Init+0x22c>)
 801ac78:	f043 0302 	orr.w	r3, r3, #2
 801ac7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801ac80:	4b28      	ldr	r3, [pc, #160]	; (801ad24 <HAL_GPIO_Init+0x22c>)
 801ac82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801ac86:	f003 0302 	and.w	r3, r3, #2
 801ac8a:	60fb      	str	r3, [r7, #12]
 801ac8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801ac8e:	4a26      	ldr	r2, [pc, #152]	; (801ad28 <HAL_GPIO_Init+0x230>)
 801ac90:	69fb      	ldr	r3, [r7, #28]
 801ac92:	089b      	lsrs	r3, r3, #2
 801ac94:	3302      	adds	r3, #2
 801ac96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801ac9c:	69fb      	ldr	r3, [r7, #28]
 801ac9e:	f003 0303 	and.w	r3, r3, #3
 801aca2:	009b      	lsls	r3, r3, #2
 801aca4:	220f      	movs	r2, #15
 801aca6:	fa02 f303 	lsl.w	r3, r2, r3
 801acaa:	43db      	mvns	r3, r3
 801acac:	69ba      	ldr	r2, [r7, #24]
 801acae:	4013      	ands	r3, r2
 801acb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	4a1d      	ldr	r2, [pc, #116]	; (801ad2c <HAL_GPIO_Init+0x234>)
 801acb6:	4293      	cmp	r3, r2
 801acb8:	d04a      	beq.n	801ad50 <HAL_GPIO_Init+0x258>
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	4a1c      	ldr	r2, [pc, #112]	; (801ad30 <HAL_GPIO_Init+0x238>)
 801acbe:	4293      	cmp	r3, r2
 801acc0:	d02b      	beq.n	801ad1a <HAL_GPIO_Init+0x222>
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	4a1b      	ldr	r2, [pc, #108]	; (801ad34 <HAL_GPIO_Init+0x23c>)
 801acc6:	4293      	cmp	r3, r2
 801acc8:	d025      	beq.n	801ad16 <HAL_GPIO_Init+0x21e>
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	4a1a      	ldr	r2, [pc, #104]	; (801ad38 <HAL_GPIO_Init+0x240>)
 801acce:	4293      	cmp	r3, r2
 801acd0:	d01f      	beq.n	801ad12 <HAL_GPIO_Init+0x21a>
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	4a19      	ldr	r2, [pc, #100]	; (801ad3c <HAL_GPIO_Init+0x244>)
 801acd6:	4293      	cmp	r3, r2
 801acd8:	d019      	beq.n	801ad0e <HAL_GPIO_Init+0x216>
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	4a18      	ldr	r2, [pc, #96]	; (801ad40 <HAL_GPIO_Init+0x248>)
 801acde:	4293      	cmp	r3, r2
 801ace0:	d013      	beq.n	801ad0a <HAL_GPIO_Init+0x212>
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	4a17      	ldr	r2, [pc, #92]	; (801ad44 <HAL_GPIO_Init+0x24c>)
 801ace6:	4293      	cmp	r3, r2
 801ace8:	d00d      	beq.n	801ad06 <HAL_GPIO_Init+0x20e>
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	4a16      	ldr	r2, [pc, #88]	; (801ad48 <HAL_GPIO_Init+0x250>)
 801acee:	4293      	cmp	r3, r2
 801acf0:	d007      	beq.n	801ad02 <HAL_GPIO_Init+0x20a>
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	4a15      	ldr	r2, [pc, #84]	; (801ad4c <HAL_GPIO_Init+0x254>)
 801acf6:	4293      	cmp	r3, r2
 801acf8:	d101      	bne.n	801acfe <HAL_GPIO_Init+0x206>
 801acfa:	2309      	movs	r3, #9
 801acfc:	e029      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801acfe:	230a      	movs	r3, #10
 801ad00:	e027      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad02:	2307      	movs	r3, #7
 801ad04:	e025      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad06:	2306      	movs	r3, #6
 801ad08:	e023      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad0a:	2305      	movs	r3, #5
 801ad0c:	e021      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad0e:	2304      	movs	r3, #4
 801ad10:	e01f      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad12:	2303      	movs	r3, #3
 801ad14:	e01d      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad16:	2302      	movs	r3, #2
 801ad18:	e01b      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad1a:	2301      	movs	r3, #1
 801ad1c:	e019      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad1e:	bf00      	nop
 801ad20:	58000080 	.word	0x58000080
 801ad24:	58024400 	.word	0x58024400
 801ad28:	58000400 	.word	0x58000400
 801ad2c:	58020000 	.word	0x58020000
 801ad30:	58020400 	.word	0x58020400
 801ad34:	58020800 	.word	0x58020800
 801ad38:	58020c00 	.word	0x58020c00
 801ad3c:	58021000 	.word	0x58021000
 801ad40:	58021400 	.word	0x58021400
 801ad44:	58021800 	.word	0x58021800
 801ad48:	58021c00 	.word	0x58021c00
 801ad4c:	58022400 	.word	0x58022400
 801ad50:	2300      	movs	r3, #0
 801ad52:	69fa      	ldr	r2, [r7, #28]
 801ad54:	f002 0203 	and.w	r2, r2, #3
 801ad58:	0092      	lsls	r2, r2, #2
 801ad5a:	4093      	lsls	r3, r2
 801ad5c:	69ba      	ldr	r2, [r7, #24]
 801ad5e:	4313      	orrs	r3, r2
 801ad60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801ad62:	4938      	ldr	r1, [pc, #224]	; (801ae44 <HAL_GPIO_Init+0x34c>)
 801ad64:	69fb      	ldr	r3, [r7, #28]
 801ad66:	089b      	lsrs	r3, r3, #2
 801ad68:	3302      	adds	r3, #2
 801ad6a:	69ba      	ldr	r2, [r7, #24]
 801ad6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801ad70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ad78:	693b      	ldr	r3, [r7, #16]
 801ad7a:	43db      	mvns	r3, r3
 801ad7c:	69ba      	ldr	r2, [r7, #24]
 801ad7e:	4013      	ands	r3, r2
 801ad80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	685b      	ldr	r3, [r3, #4]
 801ad86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d003      	beq.n	801ad96 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 801ad8e:	69ba      	ldr	r2, [r7, #24]
 801ad90:	693b      	ldr	r3, [r7, #16]
 801ad92:	4313      	orrs	r3, r2
 801ad94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801ad96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad9a:	69bb      	ldr	r3, [r7, #24]
 801ad9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801ad9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ada2:	685b      	ldr	r3, [r3, #4]
 801ada4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ada6:	693b      	ldr	r3, [r7, #16]
 801ada8:	43db      	mvns	r3, r3
 801adaa:	69ba      	ldr	r2, [r7, #24]
 801adac:	4013      	ands	r3, r2
 801adae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801adb0:	683b      	ldr	r3, [r7, #0]
 801adb2:	685b      	ldr	r3, [r3, #4]
 801adb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d003      	beq.n	801adc4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 801adbc:	69ba      	ldr	r2, [r7, #24]
 801adbe:	693b      	ldr	r3, [r7, #16]
 801adc0:	4313      	orrs	r3, r2
 801adc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801adc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801adc8:	69bb      	ldr	r3, [r7, #24]
 801adca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801adcc:	697b      	ldr	r3, [r7, #20]
 801adce:	685b      	ldr	r3, [r3, #4]
 801add0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801add2:	693b      	ldr	r3, [r7, #16]
 801add4:	43db      	mvns	r3, r3
 801add6:	69ba      	ldr	r2, [r7, #24]
 801add8:	4013      	ands	r3, r2
 801adda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801addc:	683b      	ldr	r3, [r7, #0]
 801adde:	685b      	ldr	r3, [r3, #4]
 801ade0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d003      	beq.n	801adf0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 801ade8:	69ba      	ldr	r2, [r7, #24]
 801adea:	693b      	ldr	r3, [r7, #16]
 801adec:	4313      	orrs	r3, r2
 801adee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801adf0:	697b      	ldr	r3, [r7, #20]
 801adf2:	69ba      	ldr	r2, [r7, #24]
 801adf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801adf6:	697b      	ldr	r3, [r7, #20]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801adfc:	693b      	ldr	r3, [r7, #16]
 801adfe:	43db      	mvns	r3, r3
 801ae00:	69ba      	ldr	r2, [r7, #24]
 801ae02:	4013      	ands	r3, r2
 801ae04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	685b      	ldr	r3, [r3, #4]
 801ae0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d003      	beq.n	801ae1a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 801ae12:	69ba      	ldr	r2, [r7, #24]
 801ae14:	693b      	ldr	r3, [r7, #16]
 801ae16:	4313      	orrs	r3, r2
 801ae18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801ae1a:	697b      	ldr	r3, [r7, #20]
 801ae1c:	69ba      	ldr	r2, [r7, #24]
 801ae1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801ae20:	69fb      	ldr	r3, [r7, #28]
 801ae22:	3301      	adds	r3, #1
 801ae24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801ae26:	683b      	ldr	r3, [r7, #0]
 801ae28:	681a      	ldr	r2, [r3, #0]
 801ae2a:	69fb      	ldr	r3, [r7, #28]
 801ae2c:	fa22 f303 	lsr.w	r3, r2, r3
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	f47f ae6b 	bne.w	801ab0c <HAL_GPIO_Init+0x14>
  }
}
 801ae36:	bf00      	nop
 801ae38:	bf00      	nop
 801ae3a:	3724      	adds	r7, #36	; 0x24
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae42:	4770      	bx	lr
 801ae44:	58000400 	.word	0x58000400

0801ae48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801ae48:	b480      	push	{r7}
 801ae4a:	b085      	sub	sp, #20
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
 801ae50:	460b      	mov	r3, r1
 801ae52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	691a      	ldr	r2, [r3, #16]
 801ae58:	887b      	ldrh	r3, [r7, #2]
 801ae5a:	4013      	ands	r3, r2
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d002      	beq.n	801ae66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801ae60:	2301      	movs	r3, #1
 801ae62:	73fb      	strb	r3, [r7, #15]
 801ae64:	e001      	b.n	801ae6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801ae66:	2300      	movs	r3, #0
 801ae68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801ae6a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	3714      	adds	r7, #20
 801ae70:	46bd      	mov	sp, r7
 801ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae76:	4770      	bx	lr

0801ae78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ae78:	b480      	push	{r7}
 801ae7a:	b083      	sub	sp, #12
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
 801ae80:	460b      	mov	r3, r1
 801ae82:	807b      	strh	r3, [r7, #2]
 801ae84:	4613      	mov	r3, r2
 801ae86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ae88:	787b      	ldrb	r3, [r7, #1]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d003      	beq.n	801ae96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ae8e:	887a      	ldrh	r2, [r7, #2]
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801ae94:	e003      	b.n	801ae9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801ae96:	887b      	ldrh	r3, [r7, #2]
 801ae98:	041a      	lsls	r2, r3, #16
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	619a      	str	r2, [r3, #24]
}
 801ae9e:	bf00      	nop
 801aea0:	370c      	adds	r7, #12
 801aea2:	46bd      	mov	sp, r7
 801aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea8:	4770      	bx	lr
	...

0801aeac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801aeac:	b580      	push	{r7, lr}
 801aeae:	b084      	sub	sp, #16
 801aeb0:	af00      	add	r7, sp, #0
 801aeb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801aeb4:	4b19      	ldr	r3, [pc, #100]	; (801af1c <HAL_PWREx_ConfigSupply+0x70>)
 801aeb6:	68db      	ldr	r3, [r3, #12]
 801aeb8:	f003 0304 	and.w	r3, r3, #4
 801aebc:	2b04      	cmp	r3, #4
 801aebe:	d00a      	beq.n	801aed6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801aec0:	4b16      	ldr	r3, [pc, #88]	; (801af1c <HAL_PWREx_ConfigSupply+0x70>)
 801aec2:	68db      	ldr	r3, [r3, #12]
 801aec4:	f003 0307 	and.w	r3, r3, #7
 801aec8:	687a      	ldr	r2, [r7, #4]
 801aeca:	429a      	cmp	r2, r3
 801aecc:	d001      	beq.n	801aed2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801aece:	2301      	movs	r3, #1
 801aed0:	e01f      	b.n	801af12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801aed2:	2300      	movs	r3, #0
 801aed4:	e01d      	b.n	801af12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801aed6:	4b11      	ldr	r3, [pc, #68]	; (801af1c <HAL_PWREx_ConfigSupply+0x70>)
 801aed8:	68db      	ldr	r3, [r3, #12]
 801aeda:	f023 0207 	bic.w	r2, r3, #7
 801aede:	490f      	ldr	r1, [pc, #60]	; (801af1c <HAL_PWREx_ConfigSupply+0x70>)
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	4313      	orrs	r3, r2
 801aee4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801aee6:	f7fa fa21 	bl	801532c <HAL_GetTick>
 801aeea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801aeec:	e009      	b.n	801af02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801aeee:	f7fa fa1d 	bl	801532c <HAL_GetTick>
 801aef2:	4602      	mov	r2, r0
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	1ad3      	subs	r3, r2, r3
 801aef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801aefc:	d901      	bls.n	801af02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801aefe:	2301      	movs	r3, #1
 801af00:	e007      	b.n	801af12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801af02:	4b06      	ldr	r3, [pc, #24]	; (801af1c <HAL_PWREx_ConfigSupply+0x70>)
 801af04:	685b      	ldr	r3, [r3, #4]
 801af06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801af0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801af0e:	d1ee      	bne.n	801aeee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801af10:	2300      	movs	r3, #0
}
 801af12:	4618      	mov	r0, r3
 801af14:	3710      	adds	r7, #16
 801af16:	46bd      	mov	sp, r7
 801af18:	bd80      	pop	{r7, pc}
 801af1a:	bf00      	nop
 801af1c:	58024800 	.word	0x58024800

0801af20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801af20:	b580      	push	{r7, lr}
 801af22:	b08c      	sub	sp, #48	; 0x30
 801af24:	af00      	add	r7, sp, #0
 801af26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d101      	bne.n	801af32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801af2e:	2301      	movs	r3, #1
 801af30:	e3c8      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	f003 0301 	and.w	r3, r3, #1
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	f000 8087 	beq.w	801b04e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801af40:	4b88      	ldr	r3, [pc, #544]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801af42:	691b      	ldr	r3, [r3, #16]
 801af44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801af48:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801af4a:	4b86      	ldr	r3, [pc, #536]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801af4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af4e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801af50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af52:	2b10      	cmp	r3, #16
 801af54:	d007      	beq.n	801af66 <HAL_RCC_OscConfig+0x46>
 801af56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af58:	2b18      	cmp	r3, #24
 801af5a:	d110      	bne.n	801af7e <HAL_RCC_OscConfig+0x5e>
 801af5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af5e:	f003 0303 	and.w	r3, r3, #3
 801af62:	2b02      	cmp	r3, #2
 801af64:	d10b      	bne.n	801af7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801af66:	4b7f      	ldr	r3, [pc, #508]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d06c      	beq.n	801b04c <HAL_RCC_OscConfig+0x12c>
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	685b      	ldr	r3, [r3, #4]
 801af76:	2b00      	cmp	r3, #0
 801af78:	d168      	bne.n	801b04c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801af7a:	2301      	movs	r3, #1
 801af7c:	e3a2      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	685b      	ldr	r3, [r3, #4]
 801af82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af86:	d106      	bne.n	801af96 <HAL_RCC_OscConfig+0x76>
 801af88:	4b76      	ldr	r3, [pc, #472]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801af8a:	681b      	ldr	r3, [r3, #0]
 801af8c:	4a75      	ldr	r2, [pc, #468]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801af8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801af92:	6013      	str	r3, [r2, #0]
 801af94:	e02e      	b.n	801aff4 <HAL_RCC_OscConfig+0xd4>
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	685b      	ldr	r3, [r3, #4]
 801af9a:	2b00      	cmp	r3, #0
 801af9c:	d10c      	bne.n	801afb8 <HAL_RCC_OscConfig+0x98>
 801af9e:	4b71      	ldr	r3, [pc, #452]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	4a70      	ldr	r2, [pc, #448]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801afa8:	6013      	str	r3, [r2, #0]
 801afaa:	4b6e      	ldr	r3, [pc, #440]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	4a6d      	ldr	r2, [pc, #436]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801afb4:	6013      	str	r3, [r2, #0]
 801afb6:	e01d      	b.n	801aff4 <HAL_RCC_OscConfig+0xd4>
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	685b      	ldr	r3, [r3, #4]
 801afbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801afc0:	d10c      	bne.n	801afdc <HAL_RCC_OscConfig+0xbc>
 801afc2:	4b68      	ldr	r3, [pc, #416]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	4a67      	ldr	r2, [pc, #412]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801afcc:	6013      	str	r3, [r2, #0]
 801afce:	4b65      	ldr	r3, [pc, #404]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	4a64      	ldr	r2, [pc, #400]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801afd8:	6013      	str	r3, [r2, #0]
 801afda:	e00b      	b.n	801aff4 <HAL_RCC_OscConfig+0xd4>
 801afdc:	4b61      	ldr	r3, [pc, #388]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	4a60      	ldr	r2, [pc, #384]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801afe6:	6013      	str	r3, [r2, #0]
 801afe8:	4b5e      	ldr	r3, [pc, #376]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	4a5d      	ldr	r2, [pc, #372]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801afee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801aff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	685b      	ldr	r3, [r3, #4]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d013      	beq.n	801b024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801affc:	f7fa f996 	bl	801532c <HAL_GetTick>
 801b000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b002:	e008      	b.n	801b016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b004:	f7fa f992 	bl	801532c <HAL_GetTick>
 801b008:	4602      	mov	r2, r0
 801b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b00c:	1ad3      	subs	r3, r2, r3
 801b00e:	2b64      	cmp	r3, #100	; 0x64
 801b010:	d901      	bls.n	801b016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801b012:	2303      	movs	r3, #3
 801b014:	e356      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b016:	4b53      	ldr	r3, [pc, #332]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d0f0      	beq.n	801b004 <HAL_RCC_OscConfig+0xe4>
 801b022:	e014      	b.n	801b04e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b024:	f7fa f982 	bl	801532c <HAL_GetTick>
 801b028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b02a:	e008      	b.n	801b03e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b02c:	f7fa f97e 	bl	801532c <HAL_GetTick>
 801b030:	4602      	mov	r2, r0
 801b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b034:	1ad3      	subs	r3, r2, r3
 801b036:	2b64      	cmp	r3, #100	; 0x64
 801b038:	d901      	bls.n	801b03e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801b03a:	2303      	movs	r3, #3
 801b03c:	e342      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b03e:	4b49      	ldr	r3, [pc, #292]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b046:	2b00      	cmp	r3, #0
 801b048:	d1f0      	bne.n	801b02c <HAL_RCC_OscConfig+0x10c>
 801b04a:	e000      	b.n	801b04e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b04c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	f003 0302 	and.w	r3, r3, #2
 801b056:	2b00      	cmp	r3, #0
 801b058:	f000 808c 	beq.w	801b174 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b05c:	4b41      	ldr	r3, [pc, #260]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b05e:	691b      	ldr	r3, [r3, #16]
 801b060:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b064:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b066:	4b3f      	ldr	r3, [pc, #252]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b06a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801b06c:	6a3b      	ldr	r3, [r7, #32]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d007      	beq.n	801b082 <HAL_RCC_OscConfig+0x162>
 801b072:	6a3b      	ldr	r3, [r7, #32]
 801b074:	2b18      	cmp	r3, #24
 801b076:	d137      	bne.n	801b0e8 <HAL_RCC_OscConfig+0x1c8>
 801b078:	69fb      	ldr	r3, [r7, #28]
 801b07a:	f003 0303 	and.w	r3, r3, #3
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d132      	bne.n	801b0e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b082:	4b38      	ldr	r3, [pc, #224]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	f003 0304 	and.w	r3, r3, #4
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d005      	beq.n	801b09a <HAL_RCC_OscConfig+0x17a>
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	68db      	ldr	r3, [r3, #12]
 801b092:	2b00      	cmp	r3, #0
 801b094:	d101      	bne.n	801b09a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801b096:	2301      	movs	r3, #1
 801b098:	e314      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b09a:	4b32      	ldr	r3, [pc, #200]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	f023 0219 	bic.w	r2, r3, #25
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	68db      	ldr	r3, [r3, #12]
 801b0a6:	492f      	ldr	r1, [pc, #188]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b0a8:	4313      	orrs	r3, r2
 801b0aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b0ac:	f7fa f93e 	bl	801532c <HAL_GetTick>
 801b0b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b0b2:	e008      	b.n	801b0c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b0b4:	f7fa f93a 	bl	801532c <HAL_GetTick>
 801b0b8:	4602      	mov	r2, r0
 801b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0bc:	1ad3      	subs	r3, r2, r3
 801b0be:	2b02      	cmp	r3, #2
 801b0c0:	d901      	bls.n	801b0c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801b0c2:	2303      	movs	r3, #3
 801b0c4:	e2fe      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b0c6:	4b27      	ldr	r3, [pc, #156]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	f003 0304 	and.w	r3, r3, #4
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d0f0      	beq.n	801b0b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b0d2:	4b24      	ldr	r3, [pc, #144]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b0d4:	685b      	ldr	r3, [r3, #4]
 801b0d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	691b      	ldr	r3, [r3, #16]
 801b0de:	061b      	lsls	r3, r3, #24
 801b0e0:	4920      	ldr	r1, [pc, #128]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b0e2:	4313      	orrs	r3, r2
 801b0e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b0e6:	e045      	b.n	801b174 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	68db      	ldr	r3, [r3, #12]
 801b0ec:	2b00      	cmp	r3, #0
 801b0ee:	d026      	beq.n	801b13e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b0f0:	4b1c      	ldr	r3, [pc, #112]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	f023 0219 	bic.w	r2, r3, #25
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	68db      	ldr	r3, [r3, #12]
 801b0fc:	4919      	ldr	r1, [pc, #100]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b0fe:	4313      	orrs	r3, r2
 801b100:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b102:	f7fa f913 	bl	801532c <HAL_GetTick>
 801b106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b108:	e008      	b.n	801b11c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b10a:	f7fa f90f 	bl	801532c <HAL_GetTick>
 801b10e:	4602      	mov	r2, r0
 801b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b112:	1ad3      	subs	r3, r2, r3
 801b114:	2b02      	cmp	r3, #2
 801b116:	d901      	bls.n	801b11c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801b118:	2303      	movs	r3, #3
 801b11a:	e2d3      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b11c:	4b11      	ldr	r3, [pc, #68]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	f003 0304 	and.w	r3, r3, #4
 801b124:	2b00      	cmp	r3, #0
 801b126:	d0f0      	beq.n	801b10a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b128:	4b0e      	ldr	r3, [pc, #56]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b12a:	685b      	ldr	r3, [r3, #4]
 801b12c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	691b      	ldr	r3, [r3, #16]
 801b134:	061b      	lsls	r3, r3, #24
 801b136:	490b      	ldr	r1, [pc, #44]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b138:	4313      	orrs	r3, r2
 801b13a:	604b      	str	r3, [r1, #4]
 801b13c:	e01a      	b.n	801b174 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b13e:	4b09      	ldr	r3, [pc, #36]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	4a08      	ldr	r2, [pc, #32]	; (801b164 <HAL_RCC_OscConfig+0x244>)
 801b144:	f023 0301 	bic.w	r3, r3, #1
 801b148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b14a:	f7fa f8ef 	bl	801532c <HAL_GetTick>
 801b14e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b150:	e00a      	b.n	801b168 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b152:	f7fa f8eb 	bl	801532c <HAL_GetTick>
 801b156:	4602      	mov	r2, r0
 801b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b15a:	1ad3      	subs	r3, r2, r3
 801b15c:	2b02      	cmp	r3, #2
 801b15e:	d903      	bls.n	801b168 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801b160:	2303      	movs	r3, #3
 801b162:	e2af      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
 801b164:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b168:	4b96      	ldr	r3, [pc, #600]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	f003 0304 	and.w	r3, r3, #4
 801b170:	2b00      	cmp	r3, #0
 801b172:	d1ee      	bne.n	801b152 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	681b      	ldr	r3, [r3, #0]
 801b178:	f003 0310 	and.w	r3, r3, #16
 801b17c:	2b00      	cmp	r3, #0
 801b17e:	d06a      	beq.n	801b256 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b180:	4b90      	ldr	r3, [pc, #576]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b182:	691b      	ldr	r3, [r3, #16]
 801b184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b188:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b18a:	4b8e      	ldr	r3, [pc, #568]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b18c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b18e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801b190:	69bb      	ldr	r3, [r7, #24]
 801b192:	2b08      	cmp	r3, #8
 801b194:	d007      	beq.n	801b1a6 <HAL_RCC_OscConfig+0x286>
 801b196:	69bb      	ldr	r3, [r7, #24]
 801b198:	2b18      	cmp	r3, #24
 801b19a:	d11b      	bne.n	801b1d4 <HAL_RCC_OscConfig+0x2b4>
 801b19c:	697b      	ldr	r3, [r7, #20]
 801b19e:	f003 0303 	and.w	r3, r3, #3
 801b1a2:	2b01      	cmp	r3, #1
 801b1a4:	d116      	bne.n	801b1d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b1a6:	4b87      	ldr	r3, [pc, #540]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d005      	beq.n	801b1be <HAL_RCC_OscConfig+0x29e>
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	69db      	ldr	r3, [r3, #28]
 801b1b6:	2b80      	cmp	r3, #128	; 0x80
 801b1b8:	d001      	beq.n	801b1be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b1ba:	2301      	movs	r3, #1
 801b1bc:	e282      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b1be:	4b81      	ldr	r3, [pc, #516]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b1c0:	68db      	ldr	r3, [r3, #12]
 801b1c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	6a1b      	ldr	r3, [r3, #32]
 801b1ca:	061b      	lsls	r3, r3, #24
 801b1cc:	497d      	ldr	r1, [pc, #500]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b1ce:	4313      	orrs	r3, r2
 801b1d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b1d2:	e040      	b.n	801b256 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	69db      	ldr	r3, [r3, #28]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d023      	beq.n	801b224 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801b1dc:	4b79      	ldr	r3, [pc, #484]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	4a78      	ldr	r2, [pc, #480]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b1e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b1e8:	f7fa f8a0 	bl	801532c <HAL_GetTick>
 801b1ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b1ee:	e008      	b.n	801b202 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b1f0:	f7fa f89c 	bl	801532c <HAL_GetTick>
 801b1f4:	4602      	mov	r2, r0
 801b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1f8:	1ad3      	subs	r3, r2, r3
 801b1fa:	2b02      	cmp	r3, #2
 801b1fc:	d901      	bls.n	801b202 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801b1fe:	2303      	movs	r3, #3
 801b200:	e260      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b202:	4b70      	ldr	r3, [pc, #448]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d0f0      	beq.n	801b1f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b20e:	4b6d      	ldr	r3, [pc, #436]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b210:	68db      	ldr	r3, [r3, #12]
 801b212:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	6a1b      	ldr	r3, [r3, #32]
 801b21a:	061b      	lsls	r3, r3, #24
 801b21c:	4969      	ldr	r1, [pc, #420]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b21e:	4313      	orrs	r3, r2
 801b220:	60cb      	str	r3, [r1, #12]
 801b222:	e018      	b.n	801b256 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801b224:	4b67      	ldr	r3, [pc, #412]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	4a66      	ldr	r2, [pc, #408]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b22a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b22e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b230:	f7fa f87c 	bl	801532c <HAL_GetTick>
 801b234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b236:	e008      	b.n	801b24a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b238:	f7fa f878 	bl	801532c <HAL_GetTick>
 801b23c:	4602      	mov	r2, r0
 801b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b240:	1ad3      	subs	r3, r2, r3
 801b242:	2b02      	cmp	r3, #2
 801b244:	d901      	bls.n	801b24a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801b246:	2303      	movs	r3, #3
 801b248:	e23c      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b24a:	4b5e      	ldr	r3, [pc, #376]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b252:	2b00      	cmp	r3, #0
 801b254:	d1f0      	bne.n	801b238 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	f003 0308 	and.w	r3, r3, #8
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d036      	beq.n	801b2d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	695b      	ldr	r3, [r3, #20]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d019      	beq.n	801b29e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b26a:	4b56      	ldr	r3, [pc, #344]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b26c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b26e:	4a55      	ldr	r2, [pc, #340]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b270:	f043 0301 	orr.w	r3, r3, #1
 801b274:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b276:	f7fa f859 	bl	801532c <HAL_GetTick>
 801b27a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b27c:	e008      	b.n	801b290 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b27e:	f7fa f855 	bl	801532c <HAL_GetTick>
 801b282:	4602      	mov	r2, r0
 801b284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b286:	1ad3      	subs	r3, r2, r3
 801b288:	2b02      	cmp	r3, #2
 801b28a:	d901      	bls.n	801b290 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 801b28c:	2303      	movs	r3, #3
 801b28e:	e219      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b290:	4b4c      	ldr	r3, [pc, #304]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b294:	f003 0302 	and.w	r3, r3, #2
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d0f0      	beq.n	801b27e <HAL_RCC_OscConfig+0x35e>
 801b29c:	e018      	b.n	801b2d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b29e:	4b49      	ldr	r3, [pc, #292]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b2a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b2a2:	4a48      	ldr	r2, [pc, #288]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b2a4:	f023 0301 	bic.w	r3, r3, #1
 801b2a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b2aa:	f7fa f83f 	bl	801532c <HAL_GetTick>
 801b2ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b2b0:	e008      	b.n	801b2c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b2b2:	f7fa f83b 	bl	801532c <HAL_GetTick>
 801b2b6:	4602      	mov	r2, r0
 801b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ba:	1ad3      	subs	r3, r2, r3
 801b2bc:	2b02      	cmp	r3, #2
 801b2be:	d901      	bls.n	801b2c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801b2c0:	2303      	movs	r3, #3
 801b2c2:	e1ff      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b2c4:	4b3f      	ldr	r3, [pc, #252]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b2c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b2c8:	f003 0302 	and.w	r3, r3, #2
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d1f0      	bne.n	801b2b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	f003 0320 	and.w	r3, r3, #32
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	d036      	beq.n	801b34a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	699b      	ldr	r3, [r3, #24]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d019      	beq.n	801b318 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b2e4:	4b37      	ldr	r3, [pc, #220]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	4a36      	ldr	r2, [pc, #216]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b2ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b2ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b2f0:	f7fa f81c 	bl	801532c <HAL_GetTick>
 801b2f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b2f6:	e008      	b.n	801b30a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b2f8:	f7fa f818 	bl	801532c <HAL_GetTick>
 801b2fc:	4602      	mov	r2, r0
 801b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b300:	1ad3      	subs	r3, r2, r3
 801b302:	2b02      	cmp	r3, #2
 801b304:	d901      	bls.n	801b30a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801b306:	2303      	movs	r3, #3
 801b308:	e1dc      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b30a:	4b2e      	ldr	r3, [pc, #184]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b312:	2b00      	cmp	r3, #0
 801b314:	d0f0      	beq.n	801b2f8 <HAL_RCC_OscConfig+0x3d8>
 801b316:	e018      	b.n	801b34a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b318:	4b2a      	ldr	r3, [pc, #168]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	4a29      	ldr	r2, [pc, #164]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b31e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b322:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b324:	f7fa f802 	bl	801532c <HAL_GetTick>
 801b328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b32a:	e008      	b.n	801b33e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b32c:	f7f9 fffe 	bl	801532c <HAL_GetTick>
 801b330:	4602      	mov	r2, r0
 801b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b334:	1ad3      	subs	r3, r2, r3
 801b336:	2b02      	cmp	r3, #2
 801b338:	d901      	bls.n	801b33e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801b33a:	2303      	movs	r3, #3
 801b33c:	e1c2      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b33e:	4b21      	ldr	r3, [pc, #132]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b346:	2b00      	cmp	r3, #0
 801b348:	d1f0      	bne.n	801b32c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	f003 0304 	and.w	r3, r3, #4
 801b352:	2b00      	cmp	r3, #0
 801b354:	f000 8086 	beq.w	801b464 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801b358:	4b1b      	ldr	r3, [pc, #108]	; (801b3c8 <HAL_RCC_OscConfig+0x4a8>)
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	4a1a      	ldr	r2, [pc, #104]	; (801b3c8 <HAL_RCC_OscConfig+0x4a8>)
 801b35e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b362:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b364:	f7f9 ffe2 	bl	801532c <HAL_GetTick>
 801b368:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b36a:	e008      	b.n	801b37e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b36c:	f7f9 ffde 	bl	801532c <HAL_GetTick>
 801b370:	4602      	mov	r2, r0
 801b372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b374:	1ad3      	subs	r3, r2, r3
 801b376:	2b64      	cmp	r3, #100	; 0x64
 801b378:	d901      	bls.n	801b37e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801b37a:	2303      	movs	r3, #3
 801b37c:	e1a2      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b37e:	4b12      	ldr	r3, [pc, #72]	; (801b3c8 <HAL_RCC_OscConfig+0x4a8>)
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b386:	2b00      	cmp	r3, #0
 801b388:	d0f0      	beq.n	801b36c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	689b      	ldr	r3, [r3, #8]
 801b38e:	2b01      	cmp	r3, #1
 801b390:	d106      	bne.n	801b3a0 <HAL_RCC_OscConfig+0x480>
 801b392:	4b0c      	ldr	r3, [pc, #48]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b396:	4a0b      	ldr	r2, [pc, #44]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b398:	f043 0301 	orr.w	r3, r3, #1
 801b39c:	6713      	str	r3, [r2, #112]	; 0x70
 801b39e:	e032      	b.n	801b406 <HAL_RCC_OscConfig+0x4e6>
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	689b      	ldr	r3, [r3, #8]
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d111      	bne.n	801b3cc <HAL_RCC_OscConfig+0x4ac>
 801b3a8:	4b06      	ldr	r3, [pc, #24]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3ac:	4a05      	ldr	r2, [pc, #20]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b3ae:	f023 0301 	bic.w	r3, r3, #1
 801b3b2:	6713      	str	r3, [r2, #112]	; 0x70
 801b3b4:	4b03      	ldr	r3, [pc, #12]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3b8:	4a02      	ldr	r2, [pc, #8]	; (801b3c4 <HAL_RCC_OscConfig+0x4a4>)
 801b3ba:	f023 0304 	bic.w	r3, r3, #4
 801b3be:	6713      	str	r3, [r2, #112]	; 0x70
 801b3c0:	e021      	b.n	801b406 <HAL_RCC_OscConfig+0x4e6>
 801b3c2:	bf00      	nop
 801b3c4:	58024400 	.word	0x58024400
 801b3c8:	58024800 	.word	0x58024800
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	689b      	ldr	r3, [r3, #8]
 801b3d0:	2b05      	cmp	r3, #5
 801b3d2:	d10c      	bne.n	801b3ee <HAL_RCC_OscConfig+0x4ce>
 801b3d4:	4b83      	ldr	r3, [pc, #524]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b3d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3d8:	4a82      	ldr	r2, [pc, #520]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b3da:	f043 0304 	orr.w	r3, r3, #4
 801b3de:	6713      	str	r3, [r2, #112]	; 0x70
 801b3e0:	4b80      	ldr	r3, [pc, #512]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3e4:	4a7f      	ldr	r2, [pc, #508]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b3e6:	f043 0301 	orr.w	r3, r3, #1
 801b3ea:	6713      	str	r3, [r2, #112]	; 0x70
 801b3ec:	e00b      	b.n	801b406 <HAL_RCC_OscConfig+0x4e6>
 801b3ee:	4b7d      	ldr	r3, [pc, #500]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3f2:	4a7c      	ldr	r2, [pc, #496]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b3f4:	f023 0301 	bic.w	r3, r3, #1
 801b3f8:	6713      	str	r3, [r2, #112]	; 0x70
 801b3fa:	4b7a      	ldr	r3, [pc, #488]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3fe:	4a79      	ldr	r2, [pc, #484]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b400:	f023 0304 	bic.w	r3, r3, #4
 801b404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	689b      	ldr	r3, [r3, #8]
 801b40a:	2b00      	cmp	r3, #0
 801b40c:	d015      	beq.n	801b43a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b40e:	f7f9 ff8d 	bl	801532c <HAL_GetTick>
 801b412:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b414:	e00a      	b.n	801b42c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b416:	f7f9 ff89 	bl	801532c <HAL_GetTick>
 801b41a:	4602      	mov	r2, r0
 801b41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b41e:	1ad3      	subs	r3, r2, r3
 801b420:	f241 3288 	movw	r2, #5000	; 0x1388
 801b424:	4293      	cmp	r3, r2
 801b426:	d901      	bls.n	801b42c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801b428:	2303      	movs	r3, #3
 801b42a:	e14b      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b42c:	4b6d      	ldr	r3, [pc, #436]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b42e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b430:	f003 0302 	and.w	r3, r3, #2
 801b434:	2b00      	cmp	r3, #0
 801b436:	d0ee      	beq.n	801b416 <HAL_RCC_OscConfig+0x4f6>
 801b438:	e014      	b.n	801b464 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b43a:	f7f9 ff77 	bl	801532c <HAL_GetTick>
 801b43e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b440:	e00a      	b.n	801b458 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b442:	f7f9 ff73 	bl	801532c <HAL_GetTick>
 801b446:	4602      	mov	r2, r0
 801b448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b44a:	1ad3      	subs	r3, r2, r3
 801b44c:	f241 3288 	movw	r2, #5000	; 0x1388
 801b450:	4293      	cmp	r3, r2
 801b452:	d901      	bls.n	801b458 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 801b454:	2303      	movs	r3, #3
 801b456:	e135      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b458:	4b62      	ldr	r3, [pc, #392]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b45c:	f003 0302 	and.w	r3, r3, #2
 801b460:	2b00      	cmp	r3, #0
 801b462:	d1ee      	bne.n	801b442 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b468:	2b00      	cmp	r3, #0
 801b46a:	f000 812a 	beq.w	801b6c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801b46e:	4b5d      	ldr	r3, [pc, #372]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b470:	691b      	ldr	r3, [r3, #16]
 801b472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b476:	2b18      	cmp	r3, #24
 801b478:	f000 80ba 	beq.w	801b5f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b480:	2b02      	cmp	r3, #2
 801b482:	f040 8095 	bne.w	801b5b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b486:	4b57      	ldr	r3, [pc, #348]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	4a56      	ldr	r2, [pc, #344]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b48c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b492:	f7f9 ff4b 	bl	801532c <HAL_GetTick>
 801b496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b498:	e008      	b.n	801b4ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b49a:	f7f9 ff47 	bl	801532c <HAL_GetTick>
 801b49e:	4602      	mov	r2, r0
 801b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4a2:	1ad3      	subs	r3, r2, r3
 801b4a4:	2b02      	cmp	r3, #2
 801b4a6:	d901      	bls.n	801b4ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801b4a8:	2303      	movs	r3, #3
 801b4aa:	e10b      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b4ac:	4b4d      	ldr	r3, [pc, #308]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	d1f0      	bne.n	801b49a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b4b8:	4b4a      	ldr	r3, [pc, #296]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b4ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b4bc:	4b4a      	ldr	r3, [pc, #296]	; (801b5e8 <HAL_RCC_OscConfig+0x6c8>)
 801b4be:	4013      	ands	r3, r2
 801b4c0:	687a      	ldr	r2, [r7, #4]
 801b4c2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801b4c4:	687a      	ldr	r2, [r7, #4]
 801b4c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b4c8:	0112      	lsls	r2, r2, #4
 801b4ca:	430a      	orrs	r2, r1
 801b4cc:	4945      	ldr	r1, [pc, #276]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b4ce:	4313      	orrs	r3, r2
 801b4d0:	628b      	str	r3, [r1, #40]	; 0x28
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4d6:	3b01      	subs	r3, #1
 801b4d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b4e0:	3b01      	subs	r3, #1
 801b4e2:	025b      	lsls	r3, r3, #9
 801b4e4:	b29b      	uxth	r3, r3
 801b4e6:	431a      	orrs	r2, r3
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4ec:	3b01      	subs	r3, #1
 801b4ee:	041b      	lsls	r3, r3, #16
 801b4f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801b4f4:	431a      	orrs	r2, r3
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b4fa:	3b01      	subs	r3, #1
 801b4fc:	061b      	lsls	r3, r3, #24
 801b4fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801b502:	4938      	ldr	r1, [pc, #224]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b504:	4313      	orrs	r3, r2
 801b506:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801b508:	4b36      	ldr	r3, [pc, #216]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b50c:	4a35      	ldr	r2, [pc, #212]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b50e:	f023 0301 	bic.w	r3, r3, #1
 801b512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b514:	4b33      	ldr	r3, [pc, #204]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b518:	4b34      	ldr	r3, [pc, #208]	; (801b5ec <HAL_RCC_OscConfig+0x6cc>)
 801b51a:	4013      	ands	r3, r2
 801b51c:	687a      	ldr	r2, [r7, #4]
 801b51e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b520:	00d2      	lsls	r2, r2, #3
 801b522:	4930      	ldr	r1, [pc, #192]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b524:	4313      	orrs	r3, r2
 801b526:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801b528:	4b2e      	ldr	r3, [pc, #184]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b52c:	f023 020c 	bic.w	r2, r3, #12
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b534:	492b      	ldr	r1, [pc, #172]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b536:	4313      	orrs	r3, r2
 801b538:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801b53a:	4b2a      	ldr	r3, [pc, #168]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b53e:	f023 0202 	bic.w	r2, r3, #2
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b546:	4927      	ldr	r1, [pc, #156]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b548:	4313      	orrs	r3, r2
 801b54a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801b54c:	4b25      	ldr	r3, [pc, #148]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b550:	4a24      	ldr	r2, [pc, #144]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b558:	4b22      	ldr	r3, [pc, #136]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b55c:	4a21      	ldr	r2, [pc, #132]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b55e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801b564:	4b1f      	ldr	r3, [pc, #124]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b568:	4a1e      	ldr	r2, [pc, #120]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b56a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b56e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801b570:	4b1c      	ldr	r3, [pc, #112]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b574:	4a1b      	ldr	r2, [pc, #108]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b576:	f043 0301 	orr.w	r3, r3, #1
 801b57a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b57c:	4b19      	ldr	r3, [pc, #100]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	4a18      	ldr	r2, [pc, #96]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b588:	f7f9 fed0 	bl	801532c <HAL_GetTick>
 801b58c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b58e:	e008      	b.n	801b5a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b590:	f7f9 fecc 	bl	801532c <HAL_GetTick>
 801b594:	4602      	mov	r2, r0
 801b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b598:	1ad3      	subs	r3, r2, r3
 801b59a:	2b02      	cmp	r3, #2
 801b59c:	d901      	bls.n	801b5a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801b59e:	2303      	movs	r3, #3
 801b5a0:	e090      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b5a2:	4b10      	ldr	r3, [pc, #64]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d0f0      	beq.n	801b590 <HAL_RCC_OscConfig+0x670>
 801b5ae:	e088      	b.n	801b6c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b5b0:	4b0c      	ldr	r3, [pc, #48]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	4a0b      	ldr	r2, [pc, #44]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b5b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b5ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5bc:	f7f9 feb6 	bl	801532c <HAL_GetTick>
 801b5c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b5c2:	e008      	b.n	801b5d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b5c4:	f7f9 feb2 	bl	801532c <HAL_GetTick>
 801b5c8:	4602      	mov	r2, r0
 801b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5cc:	1ad3      	subs	r3, r2, r3
 801b5ce:	2b02      	cmp	r3, #2
 801b5d0:	d901      	bls.n	801b5d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801b5d2:	2303      	movs	r3, #3
 801b5d4:	e076      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b5d6:	4b03      	ldr	r3, [pc, #12]	; (801b5e4 <HAL_RCC_OscConfig+0x6c4>)
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d1f0      	bne.n	801b5c4 <HAL_RCC_OscConfig+0x6a4>
 801b5e2:	e06e      	b.n	801b6c2 <HAL_RCC_OscConfig+0x7a2>
 801b5e4:	58024400 	.word	0x58024400
 801b5e8:	fffffc0c 	.word	0xfffffc0c
 801b5ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801b5f0:	4b36      	ldr	r3, [pc, #216]	; (801b6cc <HAL_RCC_OscConfig+0x7ac>)
 801b5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b5f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801b5f6:	4b35      	ldr	r3, [pc, #212]	; (801b6cc <HAL_RCC_OscConfig+0x7ac>)
 801b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b5fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b600:	2b01      	cmp	r3, #1
 801b602:	d031      	beq.n	801b668 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b604:	693b      	ldr	r3, [r7, #16]
 801b606:	f003 0203 	and.w	r2, r3, #3
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b60e:	429a      	cmp	r2, r3
 801b610:	d12a      	bne.n	801b668 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b612:	693b      	ldr	r3, [r7, #16]
 801b614:	091b      	lsrs	r3, r3, #4
 801b616:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b61e:	429a      	cmp	r2, r3
 801b620:	d122      	bne.n	801b668 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b62c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b62e:	429a      	cmp	r2, r3
 801b630:	d11a      	bne.n	801b668 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	0a5b      	lsrs	r3, r3, #9
 801b636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b63e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b640:	429a      	cmp	r2, r3
 801b642:	d111      	bne.n	801b668 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	0c1b      	lsrs	r3, r3, #16
 801b648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b650:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b652:	429a      	cmp	r2, r3
 801b654:	d108      	bne.n	801b668 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	0e1b      	lsrs	r3, r3, #24
 801b65a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b662:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b664:	429a      	cmp	r2, r3
 801b666:	d001      	beq.n	801b66c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 801b668:	2301      	movs	r3, #1
 801b66a:	e02b      	b.n	801b6c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801b66c:	4b17      	ldr	r3, [pc, #92]	; (801b6cc <HAL_RCC_OscConfig+0x7ac>)
 801b66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b670:	08db      	lsrs	r3, r3, #3
 801b672:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b676:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b67c:	693a      	ldr	r2, [r7, #16]
 801b67e:	429a      	cmp	r2, r3
 801b680:	d01f      	beq.n	801b6c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801b682:	4b12      	ldr	r3, [pc, #72]	; (801b6cc <HAL_RCC_OscConfig+0x7ac>)
 801b684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b686:	4a11      	ldr	r2, [pc, #68]	; (801b6cc <HAL_RCC_OscConfig+0x7ac>)
 801b688:	f023 0301 	bic.w	r3, r3, #1
 801b68c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b68e:	f7f9 fe4d 	bl	801532c <HAL_GetTick>
 801b692:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801b694:	bf00      	nop
 801b696:	f7f9 fe49 	bl	801532c <HAL_GetTick>
 801b69a:	4602      	mov	r2, r0
 801b69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b69e:	4293      	cmp	r3, r2
 801b6a0:	d0f9      	beq.n	801b696 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b6a2:	4b0a      	ldr	r3, [pc, #40]	; (801b6cc <HAL_RCC_OscConfig+0x7ac>)
 801b6a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b6a6:	4b0a      	ldr	r3, [pc, #40]	; (801b6d0 <HAL_RCC_OscConfig+0x7b0>)
 801b6a8:	4013      	ands	r3, r2
 801b6aa:	687a      	ldr	r2, [r7, #4]
 801b6ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b6ae:	00d2      	lsls	r2, r2, #3
 801b6b0:	4906      	ldr	r1, [pc, #24]	; (801b6cc <HAL_RCC_OscConfig+0x7ac>)
 801b6b2:	4313      	orrs	r3, r2
 801b6b4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801b6b6:	4b05      	ldr	r3, [pc, #20]	; (801b6cc <HAL_RCC_OscConfig+0x7ac>)
 801b6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6ba:	4a04      	ldr	r2, [pc, #16]	; (801b6cc <HAL_RCC_OscConfig+0x7ac>)
 801b6bc:	f043 0301 	orr.w	r3, r3, #1
 801b6c0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801b6c2:	2300      	movs	r3, #0
}
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	3730      	adds	r7, #48	; 0x30
 801b6c8:	46bd      	mov	sp, r7
 801b6ca:	bd80      	pop	{r7, pc}
 801b6cc:	58024400 	.word	0x58024400
 801b6d0:	ffff0007 	.word	0xffff0007

0801b6d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b086      	sub	sp, #24
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
 801b6dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d101      	bne.n	801b6e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b6e4:	2301      	movs	r3, #1
 801b6e6:	e19c      	b.n	801ba22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b6e8:	4b8a      	ldr	r3, [pc, #552]	; (801b914 <HAL_RCC_ClockConfig+0x240>)
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	f003 030f 	and.w	r3, r3, #15
 801b6f0:	683a      	ldr	r2, [r7, #0]
 801b6f2:	429a      	cmp	r2, r3
 801b6f4:	d910      	bls.n	801b718 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b6f6:	4b87      	ldr	r3, [pc, #540]	; (801b914 <HAL_RCC_ClockConfig+0x240>)
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	f023 020f 	bic.w	r2, r3, #15
 801b6fe:	4985      	ldr	r1, [pc, #532]	; (801b914 <HAL_RCC_ClockConfig+0x240>)
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	4313      	orrs	r3, r2
 801b704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b706:	4b83      	ldr	r3, [pc, #524]	; (801b914 <HAL_RCC_ClockConfig+0x240>)
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	f003 030f 	and.w	r3, r3, #15
 801b70e:	683a      	ldr	r2, [r7, #0]
 801b710:	429a      	cmp	r2, r3
 801b712:	d001      	beq.n	801b718 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801b714:	2301      	movs	r3, #1
 801b716:	e184      	b.n	801ba22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	f003 0304 	and.w	r3, r3, #4
 801b720:	2b00      	cmp	r3, #0
 801b722:	d010      	beq.n	801b746 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	691a      	ldr	r2, [r3, #16]
 801b728:	4b7b      	ldr	r3, [pc, #492]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b72a:	699b      	ldr	r3, [r3, #24]
 801b72c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b730:	429a      	cmp	r2, r3
 801b732:	d908      	bls.n	801b746 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b734:	4b78      	ldr	r3, [pc, #480]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b736:	699b      	ldr	r3, [r3, #24]
 801b738:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	691b      	ldr	r3, [r3, #16]
 801b740:	4975      	ldr	r1, [pc, #468]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b742:	4313      	orrs	r3, r2
 801b744:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	f003 0308 	and.w	r3, r3, #8
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d010      	beq.n	801b774 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	695a      	ldr	r2, [r3, #20]
 801b756:	4b70      	ldr	r3, [pc, #448]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b758:	69db      	ldr	r3, [r3, #28]
 801b75a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b75e:	429a      	cmp	r2, r3
 801b760:	d908      	bls.n	801b774 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b762:	4b6d      	ldr	r3, [pc, #436]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b764:	69db      	ldr	r3, [r3, #28]
 801b766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	695b      	ldr	r3, [r3, #20]
 801b76e:	496a      	ldr	r1, [pc, #424]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b770:	4313      	orrs	r3, r2
 801b772:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	f003 0310 	and.w	r3, r3, #16
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d010      	beq.n	801b7a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	699a      	ldr	r2, [r3, #24]
 801b784:	4b64      	ldr	r3, [pc, #400]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b786:	69db      	ldr	r3, [r3, #28]
 801b788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b78c:	429a      	cmp	r2, r3
 801b78e:	d908      	bls.n	801b7a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b790:	4b61      	ldr	r3, [pc, #388]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b792:	69db      	ldr	r3, [r3, #28]
 801b794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	699b      	ldr	r3, [r3, #24]
 801b79c:	495e      	ldr	r1, [pc, #376]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b79e:	4313      	orrs	r3, r2
 801b7a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	f003 0320 	and.w	r3, r3, #32
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d010      	beq.n	801b7d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	69da      	ldr	r2, [r3, #28]
 801b7b2:	4b59      	ldr	r3, [pc, #356]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b7b4:	6a1b      	ldr	r3, [r3, #32]
 801b7b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b7ba:	429a      	cmp	r2, r3
 801b7bc:	d908      	bls.n	801b7d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b7be:	4b56      	ldr	r3, [pc, #344]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b7c0:	6a1b      	ldr	r3, [r3, #32]
 801b7c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	69db      	ldr	r3, [r3, #28]
 801b7ca:	4953      	ldr	r1, [pc, #332]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b7cc:	4313      	orrs	r3, r2
 801b7ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	681b      	ldr	r3, [r3, #0]
 801b7d4:	f003 0302 	and.w	r3, r3, #2
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	d010      	beq.n	801b7fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	68da      	ldr	r2, [r3, #12]
 801b7e0:	4b4d      	ldr	r3, [pc, #308]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b7e2:	699b      	ldr	r3, [r3, #24]
 801b7e4:	f003 030f 	and.w	r3, r3, #15
 801b7e8:	429a      	cmp	r2, r3
 801b7ea:	d908      	bls.n	801b7fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b7ec:	4b4a      	ldr	r3, [pc, #296]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b7ee:	699b      	ldr	r3, [r3, #24]
 801b7f0:	f023 020f 	bic.w	r2, r3, #15
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	68db      	ldr	r3, [r3, #12]
 801b7f8:	4947      	ldr	r1, [pc, #284]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b7fa:	4313      	orrs	r3, r2
 801b7fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	681b      	ldr	r3, [r3, #0]
 801b802:	f003 0301 	and.w	r3, r3, #1
 801b806:	2b00      	cmp	r3, #0
 801b808:	d055      	beq.n	801b8b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801b80a:	4b43      	ldr	r3, [pc, #268]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b80c:	699b      	ldr	r3, [r3, #24]
 801b80e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	689b      	ldr	r3, [r3, #8]
 801b816:	4940      	ldr	r1, [pc, #256]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b818:	4313      	orrs	r3, r2
 801b81a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	685b      	ldr	r3, [r3, #4]
 801b820:	2b02      	cmp	r3, #2
 801b822:	d107      	bne.n	801b834 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b824:	4b3c      	ldr	r3, [pc, #240]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d121      	bne.n	801b874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b830:	2301      	movs	r3, #1
 801b832:	e0f6      	b.n	801ba22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	685b      	ldr	r3, [r3, #4]
 801b838:	2b03      	cmp	r3, #3
 801b83a:	d107      	bne.n	801b84c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b83c:	4b36      	ldr	r3, [pc, #216]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b844:	2b00      	cmp	r3, #0
 801b846:	d115      	bne.n	801b874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b848:	2301      	movs	r3, #1
 801b84a:	e0ea      	b.n	801ba22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	685b      	ldr	r3, [r3, #4]
 801b850:	2b01      	cmp	r3, #1
 801b852:	d107      	bne.n	801b864 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b854:	4b30      	ldr	r3, [pc, #192]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d109      	bne.n	801b874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b860:	2301      	movs	r3, #1
 801b862:	e0de      	b.n	801ba22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b864:	4b2c      	ldr	r3, [pc, #176]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	f003 0304 	and.w	r3, r3, #4
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d101      	bne.n	801b874 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b870:	2301      	movs	r3, #1
 801b872:	e0d6      	b.n	801ba22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b874:	4b28      	ldr	r3, [pc, #160]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b876:	691b      	ldr	r3, [r3, #16]
 801b878:	f023 0207 	bic.w	r2, r3, #7
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	685b      	ldr	r3, [r3, #4]
 801b880:	4925      	ldr	r1, [pc, #148]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b882:	4313      	orrs	r3, r2
 801b884:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b886:	f7f9 fd51 	bl	801532c <HAL_GetTick>
 801b88a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b88c:	e00a      	b.n	801b8a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b88e:	f7f9 fd4d 	bl	801532c <HAL_GetTick>
 801b892:	4602      	mov	r2, r0
 801b894:	697b      	ldr	r3, [r7, #20]
 801b896:	1ad3      	subs	r3, r2, r3
 801b898:	f241 3288 	movw	r2, #5000	; 0x1388
 801b89c:	4293      	cmp	r3, r2
 801b89e:	d901      	bls.n	801b8a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801b8a0:	2303      	movs	r3, #3
 801b8a2:	e0be      	b.n	801ba22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b8a4:	4b1c      	ldr	r3, [pc, #112]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b8a6:	691b      	ldr	r3, [r3, #16]
 801b8a8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	685b      	ldr	r3, [r3, #4]
 801b8b0:	00db      	lsls	r3, r3, #3
 801b8b2:	429a      	cmp	r2, r3
 801b8b4:	d1eb      	bne.n	801b88e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	f003 0302 	and.w	r3, r3, #2
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d010      	beq.n	801b8e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	68da      	ldr	r2, [r3, #12]
 801b8c6:	4b14      	ldr	r3, [pc, #80]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b8c8:	699b      	ldr	r3, [r3, #24]
 801b8ca:	f003 030f 	and.w	r3, r3, #15
 801b8ce:	429a      	cmp	r2, r3
 801b8d0:	d208      	bcs.n	801b8e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b8d2:	4b11      	ldr	r3, [pc, #68]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b8d4:	699b      	ldr	r3, [r3, #24]
 801b8d6:	f023 020f 	bic.w	r2, r3, #15
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	68db      	ldr	r3, [r3, #12]
 801b8de:	490e      	ldr	r1, [pc, #56]	; (801b918 <HAL_RCC_ClockConfig+0x244>)
 801b8e0:	4313      	orrs	r3, r2
 801b8e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b8e4:	4b0b      	ldr	r3, [pc, #44]	; (801b914 <HAL_RCC_ClockConfig+0x240>)
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	f003 030f 	and.w	r3, r3, #15
 801b8ec:	683a      	ldr	r2, [r7, #0]
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d214      	bcs.n	801b91c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b8f2:	4b08      	ldr	r3, [pc, #32]	; (801b914 <HAL_RCC_ClockConfig+0x240>)
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	f023 020f 	bic.w	r2, r3, #15
 801b8fa:	4906      	ldr	r1, [pc, #24]	; (801b914 <HAL_RCC_ClockConfig+0x240>)
 801b8fc:	683b      	ldr	r3, [r7, #0]
 801b8fe:	4313      	orrs	r3, r2
 801b900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b902:	4b04      	ldr	r3, [pc, #16]	; (801b914 <HAL_RCC_ClockConfig+0x240>)
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	f003 030f 	and.w	r3, r3, #15
 801b90a:	683a      	ldr	r2, [r7, #0]
 801b90c:	429a      	cmp	r2, r3
 801b90e:	d005      	beq.n	801b91c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801b910:	2301      	movs	r3, #1
 801b912:	e086      	b.n	801ba22 <HAL_RCC_ClockConfig+0x34e>
 801b914:	52002000 	.word	0x52002000
 801b918:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	681b      	ldr	r3, [r3, #0]
 801b920:	f003 0304 	and.w	r3, r3, #4
 801b924:	2b00      	cmp	r3, #0
 801b926:	d010      	beq.n	801b94a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	691a      	ldr	r2, [r3, #16]
 801b92c:	4b3f      	ldr	r3, [pc, #252]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b92e:	699b      	ldr	r3, [r3, #24]
 801b930:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b934:	429a      	cmp	r2, r3
 801b936:	d208      	bcs.n	801b94a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b938:	4b3c      	ldr	r3, [pc, #240]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b93a:	699b      	ldr	r3, [r3, #24]
 801b93c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	691b      	ldr	r3, [r3, #16]
 801b944:	4939      	ldr	r1, [pc, #228]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b946:	4313      	orrs	r3, r2
 801b948:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	f003 0308 	and.w	r3, r3, #8
 801b952:	2b00      	cmp	r3, #0
 801b954:	d010      	beq.n	801b978 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b956:	687b      	ldr	r3, [r7, #4]
 801b958:	695a      	ldr	r2, [r3, #20]
 801b95a:	4b34      	ldr	r3, [pc, #208]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b95c:	69db      	ldr	r3, [r3, #28]
 801b95e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b962:	429a      	cmp	r2, r3
 801b964:	d208      	bcs.n	801b978 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b966:	4b31      	ldr	r3, [pc, #196]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b968:	69db      	ldr	r3, [r3, #28]
 801b96a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	695b      	ldr	r3, [r3, #20]
 801b972:	492e      	ldr	r1, [pc, #184]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b974:	4313      	orrs	r3, r2
 801b976:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	f003 0310 	and.w	r3, r3, #16
 801b980:	2b00      	cmp	r3, #0
 801b982:	d010      	beq.n	801b9a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	699a      	ldr	r2, [r3, #24]
 801b988:	4b28      	ldr	r3, [pc, #160]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b98a:	69db      	ldr	r3, [r3, #28]
 801b98c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b990:	429a      	cmp	r2, r3
 801b992:	d208      	bcs.n	801b9a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b994:	4b25      	ldr	r3, [pc, #148]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b996:	69db      	ldr	r3, [r3, #28]
 801b998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	699b      	ldr	r3, [r3, #24]
 801b9a0:	4922      	ldr	r1, [pc, #136]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b9a2:	4313      	orrs	r3, r2
 801b9a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	f003 0320 	and.w	r3, r3, #32
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	d010      	beq.n	801b9d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	69da      	ldr	r2, [r3, #28]
 801b9b6:	4b1d      	ldr	r3, [pc, #116]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b9b8:	6a1b      	ldr	r3, [r3, #32]
 801b9ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b9be:	429a      	cmp	r2, r3
 801b9c0:	d208      	bcs.n	801b9d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b9c2:	4b1a      	ldr	r3, [pc, #104]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b9c4:	6a1b      	ldr	r3, [r3, #32]
 801b9c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	69db      	ldr	r3, [r3, #28]
 801b9ce:	4917      	ldr	r1, [pc, #92]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b9d0:	4313      	orrs	r3, r2
 801b9d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801b9d4:	f000 f834 	bl	801ba40 <HAL_RCC_GetSysClockFreq>
 801b9d8:	4602      	mov	r2, r0
 801b9da:	4b14      	ldr	r3, [pc, #80]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b9dc:	699b      	ldr	r3, [r3, #24]
 801b9de:	0a1b      	lsrs	r3, r3, #8
 801b9e0:	f003 030f 	and.w	r3, r3, #15
 801b9e4:	4912      	ldr	r1, [pc, #72]	; (801ba30 <HAL_RCC_ClockConfig+0x35c>)
 801b9e6:	5ccb      	ldrb	r3, [r1, r3]
 801b9e8:	f003 031f 	and.w	r3, r3, #31
 801b9ec:	fa22 f303 	lsr.w	r3, r2, r3
 801b9f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b9f2:	4b0e      	ldr	r3, [pc, #56]	; (801ba2c <HAL_RCC_ClockConfig+0x358>)
 801b9f4:	699b      	ldr	r3, [r3, #24]
 801b9f6:	f003 030f 	and.w	r3, r3, #15
 801b9fa:	4a0d      	ldr	r2, [pc, #52]	; (801ba30 <HAL_RCC_ClockConfig+0x35c>)
 801b9fc:	5cd3      	ldrb	r3, [r2, r3]
 801b9fe:	f003 031f 	and.w	r3, r3, #31
 801ba02:	693a      	ldr	r2, [r7, #16]
 801ba04:	fa22 f303 	lsr.w	r3, r2, r3
 801ba08:	4a0a      	ldr	r2, [pc, #40]	; (801ba34 <HAL_RCC_ClockConfig+0x360>)
 801ba0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801ba0c:	4a0a      	ldr	r2, [pc, #40]	; (801ba38 <HAL_RCC_ClockConfig+0x364>)
 801ba0e:	693b      	ldr	r3, [r7, #16]
 801ba10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801ba12:	4b0a      	ldr	r3, [pc, #40]	; (801ba3c <HAL_RCC_ClockConfig+0x368>)
 801ba14:	681b      	ldr	r3, [r3, #0]
 801ba16:	4618      	mov	r0, r3
 801ba18:	f7f9 fc3e 	bl	8015298 <HAL_InitTick>
 801ba1c:	4603      	mov	r3, r0
 801ba1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801ba20:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba22:	4618      	mov	r0, r3
 801ba24:	3718      	adds	r7, #24
 801ba26:	46bd      	mov	sp, r7
 801ba28:	bd80      	pop	{r7, pc}
 801ba2a:	bf00      	nop
 801ba2c:	58024400 	.word	0x58024400
 801ba30:	08020cd8 	.word	0x08020cd8
 801ba34:	24000008 	.word	0x24000008
 801ba38:	24000004 	.word	0x24000004
 801ba3c:	2400000c 	.word	0x2400000c

0801ba40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ba40:	b480      	push	{r7}
 801ba42:	b089      	sub	sp, #36	; 0x24
 801ba44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ba46:	4bb3      	ldr	r3, [pc, #716]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ba48:	691b      	ldr	r3, [r3, #16]
 801ba4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801ba4e:	2b18      	cmp	r3, #24
 801ba50:	f200 8155 	bhi.w	801bcfe <HAL_RCC_GetSysClockFreq+0x2be>
 801ba54:	a201      	add	r2, pc, #4	; (adr r2, 801ba5c <HAL_RCC_GetSysClockFreq+0x1c>)
 801ba56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba5a:	bf00      	nop
 801ba5c:	0801bac1 	.word	0x0801bac1
 801ba60:	0801bcff 	.word	0x0801bcff
 801ba64:	0801bcff 	.word	0x0801bcff
 801ba68:	0801bcff 	.word	0x0801bcff
 801ba6c:	0801bcff 	.word	0x0801bcff
 801ba70:	0801bcff 	.word	0x0801bcff
 801ba74:	0801bcff 	.word	0x0801bcff
 801ba78:	0801bcff 	.word	0x0801bcff
 801ba7c:	0801bae7 	.word	0x0801bae7
 801ba80:	0801bcff 	.word	0x0801bcff
 801ba84:	0801bcff 	.word	0x0801bcff
 801ba88:	0801bcff 	.word	0x0801bcff
 801ba8c:	0801bcff 	.word	0x0801bcff
 801ba90:	0801bcff 	.word	0x0801bcff
 801ba94:	0801bcff 	.word	0x0801bcff
 801ba98:	0801bcff 	.word	0x0801bcff
 801ba9c:	0801baed 	.word	0x0801baed
 801baa0:	0801bcff 	.word	0x0801bcff
 801baa4:	0801bcff 	.word	0x0801bcff
 801baa8:	0801bcff 	.word	0x0801bcff
 801baac:	0801bcff 	.word	0x0801bcff
 801bab0:	0801bcff 	.word	0x0801bcff
 801bab4:	0801bcff 	.word	0x0801bcff
 801bab8:	0801bcff 	.word	0x0801bcff
 801babc:	0801baf3 	.word	0x0801baf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bac0:	4b94      	ldr	r3, [pc, #592]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	f003 0320 	and.w	r3, r3, #32
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d009      	beq.n	801bae0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bacc:	4b91      	ldr	r3, [pc, #580]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bace:	681b      	ldr	r3, [r3, #0]
 801bad0:	08db      	lsrs	r3, r3, #3
 801bad2:	f003 0303 	and.w	r3, r3, #3
 801bad6:	4a90      	ldr	r2, [pc, #576]	; (801bd18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801bad8:	fa22 f303 	lsr.w	r3, r2, r3
 801badc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801bade:	e111      	b.n	801bd04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801bae0:	4b8d      	ldr	r3, [pc, #564]	; (801bd18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801bae2:	61bb      	str	r3, [r7, #24]
      break;
 801bae4:	e10e      	b.n	801bd04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801bae6:	4b8d      	ldr	r3, [pc, #564]	; (801bd1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801bae8:	61bb      	str	r3, [r7, #24]
      break;
 801baea:	e10b      	b.n	801bd04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801baec:	4b8c      	ldr	r3, [pc, #560]	; (801bd20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801baee:	61bb      	str	r3, [r7, #24]
      break;
 801baf0:	e108      	b.n	801bd04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801baf2:	4b88      	ldr	r3, [pc, #544]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801baf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801baf6:	f003 0303 	and.w	r3, r3, #3
 801bafa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801bafc:	4b85      	ldr	r3, [pc, #532]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb00:	091b      	lsrs	r3, r3, #4
 801bb02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bb06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801bb08:	4b82      	ldr	r3, [pc, #520]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb0c:	f003 0301 	and.w	r3, r3, #1
 801bb10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801bb12:	4b80      	ldr	r3, [pc, #512]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb16:	08db      	lsrs	r3, r3, #3
 801bb18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb1c:	68fa      	ldr	r2, [r7, #12]
 801bb1e:	fb02 f303 	mul.w	r3, r2, r3
 801bb22:	ee07 3a90 	vmov	s15, r3
 801bb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801bb2e:	693b      	ldr	r3, [r7, #16]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	f000 80e1 	beq.w	801bcf8 <HAL_RCC_GetSysClockFreq+0x2b8>
 801bb36:	697b      	ldr	r3, [r7, #20]
 801bb38:	2b02      	cmp	r3, #2
 801bb3a:	f000 8083 	beq.w	801bc44 <HAL_RCC_GetSysClockFreq+0x204>
 801bb3e:	697b      	ldr	r3, [r7, #20]
 801bb40:	2b02      	cmp	r3, #2
 801bb42:	f200 80a1 	bhi.w	801bc88 <HAL_RCC_GetSysClockFreq+0x248>
 801bb46:	697b      	ldr	r3, [r7, #20]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d003      	beq.n	801bb54 <HAL_RCC_GetSysClockFreq+0x114>
 801bb4c:	697b      	ldr	r3, [r7, #20]
 801bb4e:	2b01      	cmp	r3, #1
 801bb50:	d056      	beq.n	801bc00 <HAL_RCC_GetSysClockFreq+0x1c0>
 801bb52:	e099      	b.n	801bc88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bb54:	4b6f      	ldr	r3, [pc, #444]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	f003 0320 	and.w	r3, r3, #32
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d02d      	beq.n	801bbbc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bb60:	4b6c      	ldr	r3, [pc, #432]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	08db      	lsrs	r3, r3, #3
 801bb66:	f003 0303 	and.w	r3, r3, #3
 801bb6a:	4a6b      	ldr	r2, [pc, #428]	; (801bd18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801bb6c:	fa22 f303 	lsr.w	r3, r2, r3
 801bb70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	ee07 3a90 	vmov	s15, r3
 801bb78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb7c:	693b      	ldr	r3, [r7, #16]
 801bb7e:	ee07 3a90 	vmov	s15, r3
 801bb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb8a:	4b62      	ldr	r3, [pc, #392]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb92:	ee07 3a90 	vmov	s15, r3
 801bb96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb9a:	ed97 6a02 	vldr	s12, [r7, #8]
 801bb9e:	eddf 5a61 	vldr	s11, [pc, #388]	; 801bd24 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bbaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bbae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bbb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bbb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801bbba:	e087      	b.n	801bccc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bbbc:	693b      	ldr	r3, [r7, #16]
 801bbbe:	ee07 3a90 	vmov	s15, r3
 801bbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bbc6:	eddf 6a58 	vldr	s13, [pc, #352]	; 801bd28 <HAL_RCC_GetSysClockFreq+0x2e8>
 801bbca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bbce:	4b51      	ldr	r3, [pc, #324]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bbd6:	ee07 3a90 	vmov	s15, r3
 801bbda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bbde:	ed97 6a02 	vldr	s12, [r7, #8]
 801bbe2:	eddf 5a50 	vldr	s11, [pc, #320]	; 801bd24 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bbe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bbea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bbee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bbf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bbf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bbfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bbfe:	e065      	b.n	801bccc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bc00:	693b      	ldr	r3, [r7, #16]
 801bc02:	ee07 3a90 	vmov	s15, r3
 801bc06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc0a:	eddf 6a48 	vldr	s13, [pc, #288]	; 801bd2c <HAL_RCC_GetSysClockFreq+0x2ec>
 801bc0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc12:	4b40      	ldr	r3, [pc, #256]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc1a:	ee07 3a90 	vmov	s15, r3
 801bc1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc22:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc26:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801bd24 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bc2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bc2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bc32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bc42:	e043      	b.n	801bccc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bc44:	693b      	ldr	r3, [r7, #16]
 801bc46:	ee07 3a90 	vmov	s15, r3
 801bc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc4e:	eddf 6a38 	vldr	s13, [pc, #224]	; 801bd30 <HAL_RCC_GetSysClockFreq+0x2f0>
 801bc52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc56:	4b2f      	ldr	r3, [pc, #188]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc5e:	ee07 3a90 	vmov	s15, r3
 801bc62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc66:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc6a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801bd24 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bc6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bc72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bc76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bc86:	e021      	b.n	801bccc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bc88:	693b      	ldr	r3, [r7, #16]
 801bc8a:	ee07 3a90 	vmov	s15, r3
 801bc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc92:	eddf 6a26 	vldr	s13, [pc, #152]	; 801bd2c <HAL_RCC_GetSysClockFreq+0x2ec>
 801bc96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc9a:	4b1e      	ldr	r3, [pc, #120]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bca2:	ee07 3a90 	vmov	s15, r3
 801bca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bcaa:	ed97 6a02 	vldr	s12, [r7, #8]
 801bcae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801bd24 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bcb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bcb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bcba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bcbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bcc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bcc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bcca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801bccc:	4b11      	ldr	r3, [pc, #68]	; (801bd14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bcce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcd0:	0a5b      	lsrs	r3, r3, #9
 801bcd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bcd6:	3301      	adds	r3, #1
 801bcd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801bcda:	683b      	ldr	r3, [r7, #0]
 801bcdc:	ee07 3a90 	vmov	s15, r3
 801bce0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801bce4:	edd7 6a07 	vldr	s13, [r7, #28]
 801bce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bcec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bcf0:	ee17 3a90 	vmov	r3, s15
 801bcf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801bcf6:	e005      	b.n	801bd04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	61bb      	str	r3, [r7, #24]
      break;
 801bcfc:	e002      	b.n	801bd04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801bcfe:	4b07      	ldr	r3, [pc, #28]	; (801bd1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801bd00:	61bb      	str	r3, [r7, #24]
      break;
 801bd02:	bf00      	nop
  }

  return sysclockfreq;
 801bd04:	69bb      	ldr	r3, [r7, #24]
}
 801bd06:	4618      	mov	r0, r3
 801bd08:	3724      	adds	r7, #36	; 0x24
 801bd0a:	46bd      	mov	sp, r7
 801bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd10:	4770      	bx	lr
 801bd12:	bf00      	nop
 801bd14:	58024400 	.word	0x58024400
 801bd18:	03d09000 	.word	0x03d09000
 801bd1c:	003d0900 	.word	0x003d0900
 801bd20:	007a1200 	.word	0x007a1200
 801bd24:	46000000 	.word	0x46000000
 801bd28:	4c742400 	.word	0x4c742400
 801bd2c:	4a742400 	.word	0x4a742400
 801bd30:	4af42400 	.word	0x4af42400

0801bd34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bd34:	b580      	push	{r7, lr}
 801bd36:	b082      	sub	sp, #8
 801bd38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801bd3a:	f7ff fe81 	bl	801ba40 <HAL_RCC_GetSysClockFreq>
 801bd3e:	4602      	mov	r2, r0
 801bd40:	4b10      	ldr	r3, [pc, #64]	; (801bd84 <HAL_RCC_GetHCLKFreq+0x50>)
 801bd42:	699b      	ldr	r3, [r3, #24]
 801bd44:	0a1b      	lsrs	r3, r3, #8
 801bd46:	f003 030f 	and.w	r3, r3, #15
 801bd4a:	490f      	ldr	r1, [pc, #60]	; (801bd88 <HAL_RCC_GetHCLKFreq+0x54>)
 801bd4c:	5ccb      	ldrb	r3, [r1, r3]
 801bd4e:	f003 031f 	and.w	r3, r3, #31
 801bd52:	fa22 f303 	lsr.w	r3, r2, r3
 801bd56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bd58:	4b0a      	ldr	r3, [pc, #40]	; (801bd84 <HAL_RCC_GetHCLKFreq+0x50>)
 801bd5a:	699b      	ldr	r3, [r3, #24]
 801bd5c:	f003 030f 	and.w	r3, r3, #15
 801bd60:	4a09      	ldr	r2, [pc, #36]	; (801bd88 <HAL_RCC_GetHCLKFreq+0x54>)
 801bd62:	5cd3      	ldrb	r3, [r2, r3]
 801bd64:	f003 031f 	and.w	r3, r3, #31
 801bd68:	687a      	ldr	r2, [r7, #4]
 801bd6a:	fa22 f303 	lsr.w	r3, r2, r3
 801bd6e:	4a07      	ldr	r2, [pc, #28]	; (801bd8c <HAL_RCC_GetHCLKFreq+0x58>)
 801bd70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801bd72:	4a07      	ldr	r2, [pc, #28]	; (801bd90 <HAL_RCC_GetHCLKFreq+0x5c>)
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801bd78:	4b04      	ldr	r3, [pc, #16]	; (801bd8c <HAL_RCC_GetHCLKFreq+0x58>)
 801bd7a:	681b      	ldr	r3, [r3, #0]
}
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	3708      	adds	r7, #8
 801bd80:	46bd      	mov	sp, r7
 801bd82:	bd80      	pop	{r7, pc}
 801bd84:	58024400 	.word	0x58024400
 801bd88:	08020cd8 	.word	0x08020cd8
 801bd8c:	24000008 	.word	0x24000008
 801bd90:	24000004 	.word	0x24000004

0801bd94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bd94:	b580      	push	{r7, lr}
 801bd96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801bd98:	f7ff ffcc 	bl	801bd34 <HAL_RCC_GetHCLKFreq>
 801bd9c:	4602      	mov	r2, r0
 801bd9e:	4b06      	ldr	r3, [pc, #24]	; (801bdb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801bda0:	69db      	ldr	r3, [r3, #28]
 801bda2:	091b      	lsrs	r3, r3, #4
 801bda4:	f003 0307 	and.w	r3, r3, #7
 801bda8:	4904      	ldr	r1, [pc, #16]	; (801bdbc <HAL_RCC_GetPCLK1Freq+0x28>)
 801bdaa:	5ccb      	ldrb	r3, [r1, r3]
 801bdac:	f003 031f 	and.w	r3, r3, #31
 801bdb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801bdb4:	4618      	mov	r0, r3
 801bdb6:	bd80      	pop	{r7, pc}
 801bdb8:	58024400 	.word	0x58024400
 801bdbc:	08020cd8 	.word	0x08020cd8

0801bdc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bdc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bdc4:	b0c6      	sub	sp, #280	; 0x118
 801bdc6:	af00      	add	r7, sp, #0
 801bdc8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801bdcc:	2300      	movs	r3, #0
 801bdce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801bdd2:	2300      	movs	r3, #0
 801bdd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801bdd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bde0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 801bde4:	2500      	movs	r5, #0
 801bde6:	ea54 0305 	orrs.w	r3, r4, r5
 801bdea:	d049      	beq.n	801be80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801bdec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bdf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bdf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801bdf6:	d02f      	beq.n	801be58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801bdf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801bdfc:	d828      	bhi.n	801be50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801bdfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801be02:	d01a      	beq.n	801be3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801be04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801be08:	d822      	bhi.n	801be50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d003      	beq.n	801be16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801be0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801be12:	d007      	beq.n	801be24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801be14:	e01c      	b.n	801be50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801be16:	4bab      	ldr	r3, [pc, #684]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be1a:	4aaa      	ldr	r2, [pc, #680]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801be20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801be22:	e01a      	b.n	801be5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801be24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be28:	3308      	adds	r3, #8
 801be2a:	2102      	movs	r1, #2
 801be2c:	4618      	mov	r0, r3
 801be2e:	f002 fa49 	bl	801e2c4 <RCCEx_PLL2_Config>
 801be32:	4603      	mov	r3, r0
 801be34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801be38:	e00f      	b.n	801be5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801be3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be3e:	3328      	adds	r3, #40	; 0x28
 801be40:	2102      	movs	r1, #2
 801be42:	4618      	mov	r0, r3
 801be44:	f002 faf0 	bl	801e428 <RCCEx_PLL3_Config>
 801be48:	4603      	mov	r3, r0
 801be4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801be4e:	e004      	b.n	801be5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801be50:	2301      	movs	r3, #1
 801be52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801be56:	e000      	b.n	801be5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801be58:	bf00      	nop
    }

    if (ret == HAL_OK)
 801be5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d10a      	bne.n	801be78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801be62:	4b98      	ldr	r3, [pc, #608]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801be66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801be6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801be70:	4a94      	ldr	r2, [pc, #592]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be72:	430b      	orrs	r3, r1
 801be74:	6513      	str	r3, [r2, #80]	; 0x50
 801be76:	e003      	b.n	801be80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801be78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801be7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801be80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be88:	f402 7880 	and.w	r8, r2, #256	; 0x100
 801be8c:	f04f 0900 	mov.w	r9, #0
 801be90:	ea58 0309 	orrs.w	r3, r8, r9
 801be94:	d047      	beq.n	801bf26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801be96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801be9c:	2b04      	cmp	r3, #4
 801be9e:	d82a      	bhi.n	801bef6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801bea0:	a201      	add	r2, pc, #4	; (adr r2, 801bea8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801bea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bea6:	bf00      	nop
 801bea8:	0801bebd 	.word	0x0801bebd
 801beac:	0801becb 	.word	0x0801becb
 801beb0:	0801bee1 	.word	0x0801bee1
 801beb4:	0801beff 	.word	0x0801beff
 801beb8:	0801beff 	.word	0x0801beff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bebc:	4b81      	ldr	r3, [pc, #516]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bec0:	4a80      	ldr	r2, [pc, #512]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bec6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bec8:	e01a      	b.n	801bf00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801beca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bece:	3308      	adds	r3, #8
 801bed0:	2100      	movs	r1, #0
 801bed2:	4618      	mov	r0, r3
 801bed4:	f002 f9f6 	bl	801e2c4 <RCCEx_PLL2_Config>
 801bed8:	4603      	mov	r3, r0
 801beda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bede:	e00f      	b.n	801bf00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bee4:	3328      	adds	r3, #40	; 0x28
 801bee6:	2100      	movs	r1, #0
 801bee8:	4618      	mov	r0, r3
 801beea:	f002 fa9d 	bl	801e428 <RCCEx_PLL3_Config>
 801beee:	4603      	mov	r3, r0
 801bef0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bef4:	e004      	b.n	801bf00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bef6:	2301      	movs	r3, #1
 801bef8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801befc:	e000      	b.n	801bf00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801befe:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bf00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	d10a      	bne.n	801bf1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801bf08:	4b6e      	ldr	r3, [pc, #440]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bf0c:	f023 0107 	bic.w	r1, r3, #7
 801bf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bf16:	4a6b      	ldr	r2, [pc, #428]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf18:	430b      	orrs	r3, r1
 801bf1a:	6513      	str	r3, [r2, #80]	; 0x50
 801bf1c:	e003      	b.n	801bf26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bf1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bf22:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801bf26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf2e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 801bf32:	f04f 0b00 	mov.w	fp, #0
 801bf36:	ea5a 030b 	orrs.w	r3, sl, fp
 801bf3a:	d05b      	beq.n	801bff4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801bf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801bf44:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801bf48:	d03b      	beq.n	801bfc2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 801bf4a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801bf4e:	d834      	bhi.n	801bfba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801bf54:	d037      	beq.n	801bfc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 801bf56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801bf5a:	d82e      	bhi.n	801bfba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801bf60:	d033      	beq.n	801bfca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801bf62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801bf66:	d828      	bhi.n	801bfba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bf6c:	d01a      	beq.n	801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801bf6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bf72:	d822      	bhi.n	801bfba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d003      	beq.n	801bf80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 801bf78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bf7c:	d007      	beq.n	801bf8e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801bf7e:	e01c      	b.n	801bfba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bf80:	4b50      	ldr	r3, [pc, #320]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf84:	4a4f      	ldr	r2, [pc, #316]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bf8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bf8c:	e01e      	b.n	801bfcc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bf8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf92:	3308      	adds	r3, #8
 801bf94:	2100      	movs	r1, #0
 801bf96:	4618      	mov	r0, r3
 801bf98:	f002 f994 	bl	801e2c4 <RCCEx_PLL2_Config>
 801bf9c:	4603      	mov	r3, r0
 801bf9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801bfa2:	e013      	b.n	801bfcc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bfa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bfa8:	3328      	adds	r3, #40	; 0x28
 801bfaa:	2100      	movs	r1, #0
 801bfac:	4618      	mov	r0, r3
 801bfae:	f002 fa3b 	bl	801e428 <RCCEx_PLL3_Config>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bfb8:	e008      	b.n	801bfcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801bfba:	2301      	movs	r3, #1
 801bfbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801bfc0:	e004      	b.n	801bfcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bfc2:	bf00      	nop
 801bfc4:	e002      	b.n	801bfcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bfc6:	bf00      	nop
 801bfc8:	e000      	b.n	801bfcc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bfca:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bfcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d10b      	bne.n	801bfec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801bfd4:	4b3b      	ldr	r3, [pc, #236]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bfd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bfd8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 801bfdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bfe0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801bfe4:	4a37      	ldr	r2, [pc, #220]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bfe6:	430b      	orrs	r3, r1
 801bfe8:	6593      	str	r3, [r2, #88]	; 0x58
 801bfea:	e003      	b.n	801bff4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bfec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bff0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801bff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bffc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 801c000:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801c004:	2300      	movs	r3, #0
 801c006:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801c00a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 801c00e:	460b      	mov	r3, r1
 801c010:	4313      	orrs	r3, r2
 801c012:	d05d      	beq.n	801c0d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801c014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c018:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c01c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801c020:	d03b      	beq.n	801c09a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801c022:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801c026:	d834      	bhi.n	801c092 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c02c:	d037      	beq.n	801c09e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801c02e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c032:	d82e      	bhi.n	801c092 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c034:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801c038:	d033      	beq.n	801c0a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801c03a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801c03e:	d828      	bhi.n	801c092 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c044:	d01a      	beq.n	801c07c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801c046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c04a:	d822      	bhi.n	801c092 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	d003      	beq.n	801c058 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801c050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c054:	d007      	beq.n	801c066 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801c056:	e01c      	b.n	801c092 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c058:	4b1a      	ldr	r3, [pc, #104]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c05c:	4a19      	ldr	r2, [pc, #100]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c05e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c062:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c064:	e01e      	b.n	801c0a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c06a:	3308      	adds	r3, #8
 801c06c:	2100      	movs	r1, #0
 801c06e:	4618      	mov	r0, r3
 801c070:	f002 f928 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c074:	4603      	mov	r3, r0
 801c076:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c07a:	e013      	b.n	801c0a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c080:	3328      	adds	r3, #40	; 0x28
 801c082:	2100      	movs	r1, #0
 801c084:	4618      	mov	r0, r3
 801c086:	f002 f9cf 	bl	801e428 <RCCEx_PLL3_Config>
 801c08a:	4603      	mov	r3, r0
 801c08c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c090:	e008      	b.n	801c0a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c092:	2301      	movs	r3, #1
 801c094:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c098:	e004      	b.n	801c0a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c09a:	bf00      	nop
 801c09c:	e002      	b.n	801c0a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c09e:	bf00      	nop
 801c0a0:	e000      	b.n	801c0a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c0a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c0a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	d10d      	bne.n	801c0c8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c0ac:	4b05      	ldr	r3, [pc, #20]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c0b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 801c0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c0bc:	4a01      	ldr	r2, [pc, #4]	; (801c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c0be:	430b      	orrs	r3, r1
 801c0c0:	6593      	str	r3, [r2, #88]	; 0x58
 801c0c2:	e005      	b.n	801c0d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801c0c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c0c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c0cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801c0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 801c0dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801c0e0:	2300      	movs	r3, #0
 801c0e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801c0e6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 801c0ea:	460b      	mov	r3, r1
 801c0ec:	4313      	orrs	r3, r2
 801c0ee:	d03a      	beq.n	801c166 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 801c0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c0f6:	2b30      	cmp	r3, #48	; 0x30
 801c0f8:	d01f      	beq.n	801c13a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 801c0fa:	2b30      	cmp	r3, #48	; 0x30
 801c0fc:	d819      	bhi.n	801c132 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801c0fe:	2b20      	cmp	r3, #32
 801c100:	d00c      	beq.n	801c11c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801c102:	2b20      	cmp	r3, #32
 801c104:	d815      	bhi.n	801c132 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801c106:	2b00      	cmp	r3, #0
 801c108:	d019      	beq.n	801c13e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801c10a:	2b10      	cmp	r3, #16
 801c10c:	d111      	bne.n	801c132 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c10e:	4baa      	ldr	r3, [pc, #680]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c112:	4aa9      	ldr	r2, [pc, #676]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c11a:	e011      	b.n	801c140 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c120:	3308      	adds	r3, #8
 801c122:	2102      	movs	r1, #2
 801c124:	4618      	mov	r0, r3
 801c126:	f002 f8cd 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c12a:	4603      	mov	r3, r0
 801c12c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c130:	e006      	b.n	801c140 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c132:	2301      	movs	r3, #1
 801c134:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c138:	e002      	b.n	801c140 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c13a:	bf00      	nop
 801c13c:	e000      	b.n	801c140 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c13e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c140:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c144:	2b00      	cmp	r3, #0
 801c146:	d10a      	bne.n	801c15e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801c148:	4b9b      	ldr	r3, [pc, #620]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c14a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c14c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801c150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c156:	4a98      	ldr	r2, [pc, #608]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c158:	430b      	orrs	r3, r1
 801c15a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c15c:	e003      	b.n	801c166 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c15e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c162:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c16e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801c172:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c176:	2300      	movs	r3, #0
 801c178:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801c17c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 801c180:	460b      	mov	r3, r1
 801c182:	4313      	orrs	r3, r2
 801c184:	d051      	beq.n	801c22a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801c186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c18a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c18c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c190:	d035      	beq.n	801c1fe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801c192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c196:	d82e      	bhi.n	801c1f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c198:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c19c:	d031      	beq.n	801c202 <HAL_RCCEx_PeriphCLKConfig+0x442>
 801c19e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c1a2:	d828      	bhi.n	801c1f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c1a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c1a8:	d01a      	beq.n	801c1e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801c1aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c1ae:	d822      	bhi.n	801c1f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d003      	beq.n	801c1bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801c1b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c1b8:	d007      	beq.n	801c1ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801c1ba:	e01c      	b.n	801c1f6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c1bc:	4b7e      	ldr	r3, [pc, #504]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1c0:	4a7d      	ldr	r2, [pc, #500]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c1c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c1c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c1c8:	e01c      	b.n	801c204 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1ce:	3308      	adds	r3, #8
 801c1d0:	2100      	movs	r1, #0
 801c1d2:	4618      	mov	r0, r3
 801c1d4:	f002 f876 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c1d8:	4603      	mov	r3, r0
 801c1da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c1de:	e011      	b.n	801c204 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c1e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1e4:	3328      	adds	r3, #40	; 0x28
 801c1e6:	2100      	movs	r1, #0
 801c1e8:	4618      	mov	r0, r3
 801c1ea:	f002 f91d 	bl	801e428 <RCCEx_PLL3_Config>
 801c1ee:	4603      	mov	r3, r0
 801c1f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c1f4:	e006      	b.n	801c204 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c1f6:	2301      	movs	r3, #1
 801c1f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c1fc:	e002      	b.n	801c204 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c1fe:	bf00      	nop
 801c200:	e000      	b.n	801c204 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c202:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c204:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d10a      	bne.n	801c222 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801c20c:	4b6a      	ldr	r3, [pc, #424]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c20e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c210:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 801c214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c21a:	4a67      	ldr	r2, [pc, #412]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c21c:	430b      	orrs	r3, r1
 801c21e:	6513      	str	r3, [r2, #80]	; 0x50
 801c220:	e003      	b.n	801c22a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c222:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c226:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c232:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 801c236:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c23a:	2300      	movs	r3, #0
 801c23c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c240:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 801c244:	460b      	mov	r3, r1
 801c246:	4313      	orrs	r3, r2
 801c248:	d053      	beq.n	801c2f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801c24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c24e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c254:	d033      	beq.n	801c2be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801c256:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c25a:	d82c      	bhi.n	801c2b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c25c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c260:	d02f      	beq.n	801c2c2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 801c262:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c266:	d826      	bhi.n	801c2b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c268:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c26c:	d02b      	beq.n	801c2c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801c26e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c272:	d820      	bhi.n	801c2b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c278:	d012      	beq.n	801c2a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801c27a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c27e:	d81a      	bhi.n	801c2b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c280:	2b00      	cmp	r3, #0
 801c282:	d022      	beq.n	801c2ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801c284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c288:	d115      	bne.n	801c2b6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c28e:	3308      	adds	r3, #8
 801c290:	2101      	movs	r1, #1
 801c292:	4618      	mov	r0, r3
 801c294:	f002 f816 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c298:	4603      	mov	r3, r0
 801c29a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c29e:	e015      	b.n	801c2cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2a4:	3328      	adds	r3, #40	; 0x28
 801c2a6:	2101      	movs	r1, #1
 801c2a8:	4618      	mov	r0, r3
 801c2aa:	f002 f8bd 	bl	801e428 <RCCEx_PLL3_Config>
 801c2ae:	4603      	mov	r3, r0
 801c2b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c2b4:	e00a      	b.n	801c2cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c2b6:	2301      	movs	r3, #1
 801c2b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c2bc:	e006      	b.n	801c2cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c2be:	bf00      	nop
 801c2c0:	e004      	b.n	801c2cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c2c2:	bf00      	nop
 801c2c4:	e002      	b.n	801c2cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c2c6:	bf00      	nop
 801c2c8:	e000      	b.n	801c2cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c2ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c2cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c2d0:	2b00      	cmp	r3, #0
 801c2d2:	d10a      	bne.n	801c2ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801c2d4:	4b38      	ldr	r3, [pc, #224]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c2d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c2d8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 801c2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c2e2:	4a35      	ldr	r2, [pc, #212]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c2e4:	430b      	orrs	r3, r1
 801c2e6:	6513      	str	r3, [r2, #80]	; 0x50
 801c2e8:	e003      	b.n	801c2f2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c2ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c2ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801c2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2fa:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801c2fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c302:	2300      	movs	r3, #0
 801c304:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c308:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c30c:	460b      	mov	r3, r1
 801c30e:	4313      	orrs	r3, r2
 801c310:	d058      	beq.n	801c3c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801c312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c316:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c31a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c31e:	d033      	beq.n	801c388 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 801c320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c324:	d82c      	bhi.n	801c380 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c32a:	d02f      	beq.n	801c38c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801c32c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c330:	d826      	bhi.n	801c380 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c332:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c336:	d02b      	beq.n	801c390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 801c338:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c33c:	d820      	bhi.n	801c380 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c33e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c342:	d012      	beq.n	801c36a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801c344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c348:	d81a      	bhi.n	801c380 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c34a:	2b00      	cmp	r3, #0
 801c34c:	d022      	beq.n	801c394 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801c34e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c352:	d115      	bne.n	801c380 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c358:	3308      	adds	r3, #8
 801c35a:	2101      	movs	r1, #1
 801c35c:	4618      	mov	r0, r3
 801c35e:	f001 ffb1 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c362:	4603      	mov	r3, r0
 801c364:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c368:	e015      	b.n	801c396 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c36e:	3328      	adds	r3, #40	; 0x28
 801c370:	2101      	movs	r1, #1
 801c372:	4618      	mov	r0, r3
 801c374:	f002 f858 	bl	801e428 <RCCEx_PLL3_Config>
 801c378:	4603      	mov	r3, r0
 801c37a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c37e:	e00a      	b.n	801c396 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801c380:	2301      	movs	r3, #1
 801c382:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c386:	e006      	b.n	801c396 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c388:	bf00      	nop
 801c38a:	e004      	b.n	801c396 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c38c:	bf00      	nop
 801c38e:	e002      	b.n	801c396 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c390:	bf00      	nop
 801c392:	e000      	b.n	801c396 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c394:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c396:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	d10e      	bne.n	801c3bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801c39e:	4b06      	ldr	r3, [pc, #24]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c3a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c3ae:	4a02      	ldr	r2, [pc, #8]	; (801c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c3b0:	430b      	orrs	r3, r1
 801c3b2:	6593      	str	r3, [r2, #88]	; 0x58
 801c3b4:	e006      	b.n	801c3c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 801c3b6:	bf00      	nop
 801c3b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c3bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c3c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801c3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3cc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801c3d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801c3da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801c3de:	460b      	mov	r3, r1
 801c3e0:	4313      	orrs	r3, r2
 801c3e2:	d037      	beq.n	801c454 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801c3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c3ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c3ee:	d00e      	beq.n	801c40e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 801c3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c3f4:	d816      	bhi.n	801c424 <HAL_RCCEx_PeriphCLKConfig+0x664>
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d018      	beq.n	801c42c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801c3fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c3fe:	d111      	bne.n	801c424 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c400:	4bc4      	ldr	r3, [pc, #784]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c404:	4ac3      	ldr	r2, [pc, #780]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c40a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c40c:	e00f      	b.n	801c42e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c412:	3308      	adds	r3, #8
 801c414:	2101      	movs	r1, #1
 801c416:	4618      	mov	r0, r3
 801c418:	f001 ff54 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c41c:	4603      	mov	r3, r0
 801c41e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c422:	e004      	b.n	801c42e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c424:	2301      	movs	r3, #1
 801c426:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c42a:	e000      	b.n	801c42e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801c42c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c42e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c432:	2b00      	cmp	r3, #0
 801c434:	d10a      	bne.n	801c44c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801c436:	4bb7      	ldr	r3, [pc, #732]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c43a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801c43e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c444:	4ab3      	ldr	r2, [pc, #716]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c446:	430b      	orrs	r3, r1
 801c448:	6513      	str	r3, [r2, #80]	; 0x50
 801c44a:	e003      	b.n	801c454 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c44c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c450:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801c454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c45c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 801c460:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c464:	2300      	movs	r3, #0
 801c466:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c46a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801c46e:	460b      	mov	r3, r1
 801c470:	4313      	orrs	r3, r2
 801c472:	d039      	beq.n	801c4e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801c474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c47a:	2b03      	cmp	r3, #3
 801c47c:	d81c      	bhi.n	801c4b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801c47e:	a201      	add	r2, pc, #4	; (adr r2, 801c484 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801c480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c484:	0801c4c1 	.word	0x0801c4c1
 801c488:	0801c495 	.word	0x0801c495
 801c48c:	0801c4a3 	.word	0x0801c4a3
 801c490:	0801c4c1 	.word	0x0801c4c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c494:	4b9f      	ldr	r3, [pc, #636]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c498:	4a9e      	ldr	r2, [pc, #632]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c49a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c49e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c4a0:	e00f      	b.n	801c4c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4a6:	3308      	adds	r3, #8
 801c4a8:	2102      	movs	r1, #2
 801c4aa:	4618      	mov	r0, r3
 801c4ac:	f001 ff0a 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c4b0:	4603      	mov	r3, r0
 801c4b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c4b6:	e004      	b.n	801c4c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c4b8:	2301      	movs	r3, #1
 801c4ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c4be:	e000      	b.n	801c4c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 801c4c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c4c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d10a      	bne.n	801c4e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801c4ca:	4b92      	ldr	r3, [pc, #584]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c4ce:	f023 0103 	bic.w	r1, r3, #3
 801c4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c4d8:	4a8e      	ldr	r2, [pc, #568]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4da:	430b      	orrs	r3, r1
 801c4dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c4de:	e003      	b.n	801c4e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c4e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c4e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801c4f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c4fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801c502:	460b      	mov	r3, r1
 801c504:	4313      	orrs	r3, r2
 801c506:	f000 8099 	beq.w	801c63c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c50a:	4b83      	ldr	r3, [pc, #524]	; (801c718 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	4a82      	ldr	r2, [pc, #520]	; (801c718 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c514:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c516:	f7f8 ff09 	bl	801532c <HAL_GetTick>
 801c51a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c51e:	e00b      	b.n	801c538 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c520:	f7f8 ff04 	bl	801532c <HAL_GetTick>
 801c524:	4602      	mov	r2, r0
 801c526:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c52a:	1ad3      	subs	r3, r2, r3
 801c52c:	2b64      	cmp	r3, #100	; 0x64
 801c52e:	d903      	bls.n	801c538 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 801c530:	2303      	movs	r3, #3
 801c532:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c536:	e005      	b.n	801c544 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c538:	4b77      	ldr	r3, [pc, #476]	; (801c718 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c540:	2b00      	cmp	r3, #0
 801c542:	d0ed      	beq.n	801c520 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801c544:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d173      	bne.n	801c634 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801c54c:	4b71      	ldr	r3, [pc, #452]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c54e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c558:	4053      	eors	r3, r2
 801c55a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d015      	beq.n	801c58e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c562:	4b6c      	ldr	r3, [pc, #432]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c56a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c56e:	4b69      	ldr	r3, [pc, #420]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c572:	4a68      	ldr	r2, [pc, #416]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c578:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c57a:	4b66      	ldr	r3, [pc, #408]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c57e:	4a65      	ldr	r2, [pc, #404]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c584:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801c586:	4a63      	ldr	r2, [pc, #396]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c58c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801c58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c59a:	d118      	bne.n	801c5ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c59c:	f7f8 fec6 	bl	801532c <HAL_GetTick>
 801c5a0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c5a4:	e00d      	b.n	801c5c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c5a6:	f7f8 fec1 	bl	801532c <HAL_GetTick>
 801c5aa:	4602      	mov	r2, r0
 801c5ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c5b0:	1ad2      	subs	r2, r2, r3
 801c5b2:	f241 3388 	movw	r3, #5000	; 0x1388
 801c5b6:	429a      	cmp	r2, r3
 801c5b8:	d903      	bls.n	801c5c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801c5ba:	2303      	movs	r3, #3
 801c5bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 801c5c0:	e005      	b.n	801c5ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c5c2:	4b54      	ldr	r3, [pc, #336]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c5c6:	f003 0302 	and.w	r3, r3, #2
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d0eb      	beq.n	801c5a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801c5ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	d129      	bne.n	801c62a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c5de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c5e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c5e6:	d10e      	bne.n	801c606 <HAL_RCCEx_PeriphCLKConfig+0x846>
 801c5e8:	4b4a      	ldr	r3, [pc, #296]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5ea:	691b      	ldr	r3, [r3, #16]
 801c5ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 801c5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c5f8:	091a      	lsrs	r2, r3, #4
 801c5fa:	4b48      	ldr	r3, [pc, #288]	; (801c71c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801c5fc:	4013      	ands	r3, r2
 801c5fe:	4a45      	ldr	r2, [pc, #276]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c600:	430b      	orrs	r3, r1
 801c602:	6113      	str	r3, [r2, #16]
 801c604:	e005      	b.n	801c612 <HAL_RCCEx_PeriphCLKConfig+0x852>
 801c606:	4b43      	ldr	r3, [pc, #268]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c608:	691b      	ldr	r3, [r3, #16]
 801c60a:	4a42      	ldr	r2, [pc, #264]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c60c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c610:	6113      	str	r3, [r2, #16]
 801c612:	4b40      	ldr	r3, [pc, #256]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c614:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c61a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c61e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c622:	4a3c      	ldr	r2, [pc, #240]	; (801c714 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c624:	430b      	orrs	r3, r1
 801c626:	6713      	str	r3, [r2, #112]	; 0x70
 801c628:	e008      	b.n	801c63c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c62a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c62e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801c632:	e003      	b.n	801c63c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c634:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c638:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801c63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c644:	f002 0301 	and.w	r3, r2, #1
 801c648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c64c:	2300      	movs	r3, #0
 801c64e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801c652:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801c656:	460b      	mov	r3, r1
 801c658:	4313      	orrs	r3, r2
 801c65a:	f000 808f 	beq.w	801c77c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801c65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c662:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c664:	2b28      	cmp	r3, #40	; 0x28
 801c666:	d871      	bhi.n	801c74c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 801c668:	a201      	add	r2, pc, #4	; (adr r2, 801c670 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801c66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c66e:	bf00      	nop
 801c670:	0801c755 	.word	0x0801c755
 801c674:	0801c74d 	.word	0x0801c74d
 801c678:	0801c74d 	.word	0x0801c74d
 801c67c:	0801c74d 	.word	0x0801c74d
 801c680:	0801c74d 	.word	0x0801c74d
 801c684:	0801c74d 	.word	0x0801c74d
 801c688:	0801c74d 	.word	0x0801c74d
 801c68c:	0801c74d 	.word	0x0801c74d
 801c690:	0801c721 	.word	0x0801c721
 801c694:	0801c74d 	.word	0x0801c74d
 801c698:	0801c74d 	.word	0x0801c74d
 801c69c:	0801c74d 	.word	0x0801c74d
 801c6a0:	0801c74d 	.word	0x0801c74d
 801c6a4:	0801c74d 	.word	0x0801c74d
 801c6a8:	0801c74d 	.word	0x0801c74d
 801c6ac:	0801c74d 	.word	0x0801c74d
 801c6b0:	0801c737 	.word	0x0801c737
 801c6b4:	0801c74d 	.word	0x0801c74d
 801c6b8:	0801c74d 	.word	0x0801c74d
 801c6bc:	0801c74d 	.word	0x0801c74d
 801c6c0:	0801c74d 	.word	0x0801c74d
 801c6c4:	0801c74d 	.word	0x0801c74d
 801c6c8:	0801c74d 	.word	0x0801c74d
 801c6cc:	0801c74d 	.word	0x0801c74d
 801c6d0:	0801c755 	.word	0x0801c755
 801c6d4:	0801c74d 	.word	0x0801c74d
 801c6d8:	0801c74d 	.word	0x0801c74d
 801c6dc:	0801c74d 	.word	0x0801c74d
 801c6e0:	0801c74d 	.word	0x0801c74d
 801c6e4:	0801c74d 	.word	0x0801c74d
 801c6e8:	0801c74d 	.word	0x0801c74d
 801c6ec:	0801c74d 	.word	0x0801c74d
 801c6f0:	0801c755 	.word	0x0801c755
 801c6f4:	0801c74d 	.word	0x0801c74d
 801c6f8:	0801c74d 	.word	0x0801c74d
 801c6fc:	0801c74d 	.word	0x0801c74d
 801c700:	0801c74d 	.word	0x0801c74d
 801c704:	0801c74d 	.word	0x0801c74d
 801c708:	0801c74d 	.word	0x0801c74d
 801c70c:	0801c74d 	.word	0x0801c74d
 801c710:	0801c755 	.word	0x0801c755
 801c714:	58024400 	.word	0x58024400
 801c718:	58024800 	.word	0x58024800
 801c71c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c724:	3308      	adds	r3, #8
 801c726:	2101      	movs	r1, #1
 801c728:	4618      	mov	r0, r3
 801c72a:	f001 fdcb 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c72e:	4603      	mov	r3, r0
 801c730:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c734:	e00f      	b.n	801c756 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c73a:	3328      	adds	r3, #40	; 0x28
 801c73c:	2101      	movs	r1, #1
 801c73e:	4618      	mov	r0, r3
 801c740:	f001 fe72 	bl	801e428 <RCCEx_PLL3_Config>
 801c744:	4603      	mov	r3, r0
 801c746:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c74a:	e004      	b.n	801c756 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c74c:	2301      	movs	r3, #1
 801c74e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c752:	e000      	b.n	801c756 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801c754:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c756:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d10a      	bne.n	801c774 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801c75e:	4bbf      	ldr	r3, [pc, #764]	; (801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c762:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801c766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c76a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c76c:	4abb      	ldr	r2, [pc, #748]	; (801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c76e:	430b      	orrs	r3, r1
 801c770:	6553      	str	r3, [r2, #84]	; 0x54
 801c772:	e003      	b.n	801c77c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c774:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c778:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801c77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c780:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c784:	f002 0302 	and.w	r3, r2, #2
 801c788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c78c:	2300      	movs	r3, #0
 801c78e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c792:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801c796:	460b      	mov	r3, r1
 801c798:	4313      	orrs	r3, r2
 801c79a:	d041      	beq.n	801c820 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801c79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c7a2:	2b05      	cmp	r3, #5
 801c7a4:	d824      	bhi.n	801c7f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801c7a6:	a201      	add	r2, pc, #4	; (adr r2, 801c7ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 801c7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c7ac:	0801c7f9 	.word	0x0801c7f9
 801c7b0:	0801c7c5 	.word	0x0801c7c5
 801c7b4:	0801c7db 	.word	0x0801c7db
 801c7b8:	0801c7f9 	.word	0x0801c7f9
 801c7bc:	0801c7f9 	.word	0x0801c7f9
 801c7c0:	0801c7f9 	.word	0x0801c7f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7c8:	3308      	adds	r3, #8
 801c7ca:	2101      	movs	r1, #1
 801c7cc:	4618      	mov	r0, r3
 801c7ce:	f001 fd79 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c7d2:	4603      	mov	r3, r0
 801c7d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c7d8:	e00f      	b.n	801c7fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7de:	3328      	adds	r3, #40	; 0x28
 801c7e0:	2101      	movs	r1, #1
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	f001 fe20 	bl	801e428 <RCCEx_PLL3_Config>
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c7ee:	e004      	b.n	801c7fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c7f0:	2301      	movs	r3, #1
 801c7f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c7f6:	e000      	b.n	801c7fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 801c7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c7fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	d10a      	bne.n	801c818 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801c802:	4b96      	ldr	r3, [pc, #600]	; (801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c806:	f023 0107 	bic.w	r1, r3, #7
 801c80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c80e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c810:	4a92      	ldr	r2, [pc, #584]	; (801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c812:	430b      	orrs	r3, r1
 801c814:	6553      	str	r3, [r2, #84]	; 0x54
 801c816:	e003      	b.n	801c820 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c818:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c81c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c824:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c828:	f002 0304 	and.w	r3, r2, #4
 801c82c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801c830:	2300      	movs	r3, #0
 801c832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c836:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801c83a:	460b      	mov	r3, r1
 801c83c:	4313      	orrs	r3, r2
 801c83e:	d044      	beq.n	801c8ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801c840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c848:	2b05      	cmp	r3, #5
 801c84a:	d825      	bhi.n	801c898 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 801c84c:	a201      	add	r2, pc, #4	; (adr r2, 801c854 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 801c84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c852:	bf00      	nop
 801c854:	0801c8a1 	.word	0x0801c8a1
 801c858:	0801c86d 	.word	0x0801c86d
 801c85c:	0801c883 	.word	0x0801c883
 801c860:	0801c8a1 	.word	0x0801c8a1
 801c864:	0801c8a1 	.word	0x0801c8a1
 801c868:	0801c8a1 	.word	0x0801c8a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c870:	3308      	adds	r3, #8
 801c872:	2101      	movs	r1, #1
 801c874:	4618      	mov	r0, r3
 801c876:	f001 fd25 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c87a:	4603      	mov	r3, r0
 801c87c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c880:	e00f      	b.n	801c8a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c886:	3328      	adds	r3, #40	; 0x28
 801c888:	2101      	movs	r1, #1
 801c88a:	4618      	mov	r0, r3
 801c88c:	f001 fdcc 	bl	801e428 <RCCEx_PLL3_Config>
 801c890:	4603      	mov	r3, r0
 801c892:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c896:	e004      	b.n	801c8a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c898:	2301      	movs	r3, #1
 801c89a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c89e:	e000      	b.n	801c8a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 801c8a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c8a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d10b      	bne.n	801c8c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c8aa:	4b6c      	ldr	r3, [pc, #432]	; (801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c8ae:	f023 0107 	bic.w	r1, r3, #7
 801c8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c8ba:	4a68      	ldr	r2, [pc, #416]	; (801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c8bc:	430b      	orrs	r3, r1
 801c8be:	6593      	str	r3, [r2, #88]	; 0x58
 801c8c0:	e003      	b.n	801c8ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c8c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c8c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801c8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8d2:	f002 0320 	and.w	r3, r2, #32
 801c8d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801c8da:	2300      	movs	r3, #0
 801c8dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801c8e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801c8e4:	460b      	mov	r3, r1
 801c8e6:	4313      	orrs	r3, r2
 801c8e8:	d055      	beq.n	801c996 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801c8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c8f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c8f6:	d033      	beq.n	801c960 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 801c8f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c8fc:	d82c      	bhi.n	801c958 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c902:	d02f      	beq.n	801c964 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 801c904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c908:	d826      	bhi.n	801c958 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c90a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c90e:	d02b      	beq.n	801c968 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 801c910:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c914:	d820      	bhi.n	801c958 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c91a:	d012      	beq.n	801c942 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 801c91c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c920:	d81a      	bhi.n	801c958 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c922:	2b00      	cmp	r3, #0
 801c924:	d022      	beq.n	801c96c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801c926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c92a:	d115      	bne.n	801c958 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c930:	3308      	adds	r3, #8
 801c932:	2100      	movs	r1, #0
 801c934:	4618      	mov	r0, r3
 801c936:	f001 fcc5 	bl	801e2c4 <RCCEx_PLL2_Config>
 801c93a:	4603      	mov	r3, r0
 801c93c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c940:	e015      	b.n	801c96e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c946:	3328      	adds	r3, #40	; 0x28
 801c948:	2102      	movs	r1, #2
 801c94a:	4618      	mov	r0, r3
 801c94c:	f001 fd6c 	bl	801e428 <RCCEx_PLL3_Config>
 801c950:	4603      	mov	r3, r0
 801c952:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c956:	e00a      	b.n	801c96e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c958:	2301      	movs	r3, #1
 801c95a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c95e:	e006      	b.n	801c96e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c960:	bf00      	nop
 801c962:	e004      	b.n	801c96e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c964:	bf00      	nop
 801c966:	e002      	b.n	801c96e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c968:	bf00      	nop
 801c96a:	e000      	b.n	801c96e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c96c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c96e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c972:	2b00      	cmp	r3, #0
 801c974:	d10b      	bne.n	801c98e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c976:	4b39      	ldr	r3, [pc, #228]	; (801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c97a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c97e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c986:	4a35      	ldr	r2, [pc, #212]	; (801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c988:	430b      	orrs	r3, r1
 801c98a:	6553      	str	r3, [r2, #84]	; 0x54
 801c98c:	e003      	b.n	801c996 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c98e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c992:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801c996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c99e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801c9a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c9ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801c9b0:	460b      	mov	r3, r1
 801c9b2:	4313      	orrs	r3, r2
 801c9b4:	d058      	beq.n	801ca68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801c9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c9be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c9c2:	d033      	beq.n	801ca2c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 801c9c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c9c8:	d82c      	bhi.n	801ca24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c9ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c9ce:	d02f      	beq.n	801ca30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801c9d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c9d4:	d826      	bhi.n	801ca24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c9d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c9da:	d02b      	beq.n	801ca34 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801c9dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c9e0:	d820      	bhi.n	801ca24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c9e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c9e6:	d012      	beq.n	801ca0e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 801c9e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c9ec:	d81a      	bhi.n	801ca24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d022      	beq.n	801ca38 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 801c9f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c9f6:	d115      	bne.n	801ca24 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9fc:	3308      	adds	r3, #8
 801c9fe:	2100      	movs	r1, #0
 801ca00:	4618      	mov	r0, r3
 801ca02:	f001 fc5f 	bl	801e2c4 <RCCEx_PLL2_Config>
 801ca06:	4603      	mov	r3, r0
 801ca08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ca0c:	e015      	b.n	801ca3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ca0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca12:	3328      	adds	r3, #40	; 0x28
 801ca14:	2102      	movs	r1, #2
 801ca16:	4618      	mov	r0, r3
 801ca18:	f001 fd06 	bl	801e428 <RCCEx_PLL3_Config>
 801ca1c:	4603      	mov	r3, r0
 801ca1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ca22:	e00a      	b.n	801ca3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ca24:	2301      	movs	r3, #1
 801ca26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ca2a:	e006      	b.n	801ca3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801ca2c:	bf00      	nop
 801ca2e:	e004      	b.n	801ca3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801ca30:	bf00      	nop
 801ca32:	e002      	b.n	801ca3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801ca34:	bf00      	nop
 801ca36:	e000      	b.n	801ca3a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801ca38:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ca3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d10e      	bne.n	801ca60 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801ca42:	4b06      	ldr	r3, [pc, #24]	; (801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801ca44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca46:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801ca4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ca52:	4a02      	ldr	r2, [pc, #8]	; (801ca5c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801ca54:	430b      	orrs	r3, r1
 801ca56:	6593      	str	r3, [r2, #88]	; 0x58
 801ca58:	e006      	b.n	801ca68 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 801ca5a:	bf00      	nop
 801ca5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ca68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca70:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801ca74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801ca78:	2300      	movs	r3, #0
 801ca7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ca7e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801ca82:	460b      	mov	r3, r1
 801ca84:	4313      	orrs	r3, r2
 801ca86:	d055      	beq.n	801cb34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ca88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ca90:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801ca94:	d033      	beq.n	801cafe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801ca96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801ca9a:	d82c      	bhi.n	801caf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801ca9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801caa0:	d02f      	beq.n	801cb02 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801caa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801caa6:	d826      	bhi.n	801caf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801caa8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801caac:	d02b      	beq.n	801cb06 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801caae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801cab2:	d820      	bhi.n	801caf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801cab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cab8:	d012      	beq.n	801cae0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801caba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801cabe:	d81a      	bhi.n	801caf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d022      	beq.n	801cb0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801cac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cac8:	d115      	bne.n	801caf6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801caca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cace:	3308      	adds	r3, #8
 801cad0:	2100      	movs	r1, #0
 801cad2:	4618      	mov	r0, r3
 801cad4:	f001 fbf6 	bl	801e2c4 <RCCEx_PLL2_Config>
 801cad8:	4603      	mov	r3, r0
 801cada:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801cade:	e015      	b.n	801cb0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cae4:	3328      	adds	r3, #40	; 0x28
 801cae6:	2102      	movs	r1, #2
 801cae8:	4618      	mov	r0, r3
 801caea:	f001 fc9d 	bl	801e428 <RCCEx_PLL3_Config>
 801caee:	4603      	mov	r3, r0
 801caf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801caf4:	e00a      	b.n	801cb0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801caf6:	2301      	movs	r3, #1
 801caf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cafc:	e006      	b.n	801cb0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cafe:	bf00      	nop
 801cb00:	e004      	b.n	801cb0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cb02:	bf00      	nop
 801cb04:	e002      	b.n	801cb0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cb06:	bf00      	nop
 801cb08:	e000      	b.n	801cb0c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cb0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cb0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d10b      	bne.n	801cb2c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801cb14:	4ba0      	ldr	r3, [pc, #640]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb18:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 801cb1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cb24:	4a9c      	ldr	r2, [pc, #624]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb26:	430b      	orrs	r3, r1
 801cb28:	6593      	str	r3, [r2, #88]	; 0x58
 801cb2a:	e003      	b.n	801cb34 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 801cb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb3c:	f002 0308 	and.w	r3, r2, #8
 801cb40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801cb44:	2300      	movs	r3, #0
 801cb46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801cb4a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 801cb4e:	460b      	mov	r3, r1
 801cb50:	4313      	orrs	r3, r2
 801cb52:	d01e      	beq.n	801cb92 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 801cb54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cb60:	d10c      	bne.n	801cb7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cb62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb66:	3328      	adds	r3, #40	; 0x28
 801cb68:	2102      	movs	r1, #2
 801cb6a:	4618      	mov	r0, r3
 801cb6c:	f001 fc5c 	bl	801e428 <RCCEx_PLL3_Config>
 801cb70:	4603      	mov	r3, r0
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d002      	beq.n	801cb7c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801cb76:	2301      	movs	r3, #1
 801cb78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801cb7c:	4b86      	ldr	r3, [pc, #536]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801cb84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb8c:	4a82      	ldr	r2, [pc, #520]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb8e:	430b      	orrs	r3, r1
 801cb90:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801cb92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb9a:	f002 0310 	and.w	r3, r2, #16
 801cb9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cba2:	2300      	movs	r3, #0
 801cba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cba8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801cbac:	460b      	mov	r3, r1
 801cbae:	4313      	orrs	r3, r2
 801cbb0:	d01e      	beq.n	801cbf0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801cbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cbba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cbbe:	d10c      	bne.n	801cbda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbc4:	3328      	adds	r3, #40	; 0x28
 801cbc6:	2102      	movs	r1, #2
 801cbc8:	4618      	mov	r0, r3
 801cbca:	f001 fc2d 	bl	801e428 <RCCEx_PLL3_Config>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d002      	beq.n	801cbda <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 801cbd4:	2301      	movs	r3, #1
 801cbd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801cbda:	4b6f      	ldr	r3, [pc, #444]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cbdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cbde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801cbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cbea:	4a6b      	ldr	r2, [pc, #428]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cbec:	430b      	orrs	r3, r1
 801cbee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801cbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbf8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801cbfc:	67bb      	str	r3, [r7, #120]	; 0x78
 801cbfe:	2300      	movs	r3, #0
 801cc00:	67fb      	str	r3, [r7, #124]	; 0x7c
 801cc02:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 801cc06:	460b      	mov	r3, r1
 801cc08:	4313      	orrs	r3, r2
 801cc0a:	d03e      	beq.n	801cc8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801cc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cc14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cc18:	d022      	beq.n	801cc60 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801cc1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cc1e:	d81b      	bhi.n	801cc58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d003      	beq.n	801cc2c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 801cc24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cc28:	d00b      	beq.n	801cc42 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801cc2a:	e015      	b.n	801cc58 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cc2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc30:	3308      	adds	r3, #8
 801cc32:	2100      	movs	r1, #0
 801cc34:	4618      	mov	r0, r3
 801cc36:	f001 fb45 	bl	801e2c4 <RCCEx_PLL2_Config>
 801cc3a:	4603      	mov	r3, r0
 801cc3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cc40:	e00f      	b.n	801cc62 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cc42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc46:	3328      	adds	r3, #40	; 0x28
 801cc48:	2102      	movs	r1, #2
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	f001 fbec 	bl	801e428 <RCCEx_PLL3_Config>
 801cc50:	4603      	mov	r3, r0
 801cc52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cc56:	e004      	b.n	801cc62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cc58:	2301      	movs	r3, #1
 801cc5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cc5e:	e000      	b.n	801cc62 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 801cc60:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d10b      	bne.n	801cc82 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801cc6a:	4b4b      	ldr	r3, [pc, #300]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc6e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801cc72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cc7a:	4a47      	ldr	r2, [pc, #284]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc7c:	430b      	orrs	r3, r1
 801cc7e:	6593      	str	r3, [r2, #88]	; 0x58
 801cc80:	e003      	b.n	801cc8a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801cc8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc92:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801cc96:	673b      	str	r3, [r7, #112]	; 0x70
 801cc98:	2300      	movs	r3, #0
 801cc9a:	677b      	str	r3, [r7, #116]	; 0x74
 801cc9c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801cca0:	460b      	mov	r3, r1
 801cca2:	4313      	orrs	r3, r2
 801cca4:	d03b      	beq.n	801cd1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801cca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ccae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801ccb2:	d01f      	beq.n	801ccf4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801ccb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801ccb8:	d818      	bhi.n	801ccec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801ccba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ccbe:	d003      	beq.n	801ccc8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 801ccc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801ccc4:	d007      	beq.n	801ccd6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801ccc6:	e011      	b.n	801ccec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ccc8:	4b33      	ldr	r3, [pc, #204]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ccca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cccc:	4a32      	ldr	r2, [pc, #200]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ccce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ccd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801ccd4:	e00f      	b.n	801ccf6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ccd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccda:	3328      	adds	r3, #40	; 0x28
 801ccdc:	2101      	movs	r1, #1
 801ccde:	4618      	mov	r0, r3
 801cce0:	f001 fba2 	bl	801e428 <RCCEx_PLL3_Config>
 801cce4:	4603      	mov	r3, r0
 801cce6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801ccea:	e004      	b.n	801ccf6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ccec:	2301      	movs	r3, #1
 801ccee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ccf2:	e000      	b.n	801ccf6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 801ccf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ccf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d10b      	bne.n	801cd16 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801ccfe:	4b26      	ldr	r3, [pc, #152]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801cd06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cd0e:	4a22      	ldr	r2, [pc, #136]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd10:	430b      	orrs	r3, r1
 801cd12:	6553      	str	r3, [r2, #84]	; 0x54
 801cd14:	e003      	b.n	801cd1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801cd1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd26:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801cd2a:	66bb      	str	r3, [r7, #104]	; 0x68
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801cd30:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801cd34:	460b      	mov	r3, r1
 801cd36:	4313      	orrs	r3, r2
 801cd38:	d034      	beq.n	801cda4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801cd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d003      	beq.n	801cd4c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801cd44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cd48:	d007      	beq.n	801cd5a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801cd4a:	e011      	b.n	801cd70 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cd4c:	4b12      	ldr	r3, [pc, #72]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd50:	4a11      	ldr	r2, [pc, #68]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cd56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801cd58:	e00e      	b.n	801cd78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cd5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd5e:	3308      	adds	r3, #8
 801cd60:	2102      	movs	r1, #2
 801cd62:	4618      	mov	r0, r3
 801cd64:	f001 faae 	bl	801e2c4 <RCCEx_PLL2_Config>
 801cd68:	4603      	mov	r3, r0
 801cd6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801cd6e:	e003      	b.n	801cd78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 801cd70:	2301      	movs	r3, #1
 801cd72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cd76:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd7c:	2b00      	cmp	r3, #0
 801cd7e:	d10d      	bne.n	801cd9c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801cd80:	4b05      	ldr	r3, [pc, #20]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801cd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd8e:	4a02      	ldr	r2, [pc, #8]	; (801cd98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd90:	430b      	orrs	r3, r1
 801cd92:	64d3      	str	r3, [r2, #76]	; 0x4c
 801cd94:	e006      	b.n	801cda4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801cd96:	bf00      	nop
 801cd98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cda0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801cda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 801cdb0:	663b      	str	r3, [r7, #96]	; 0x60
 801cdb2:	2300      	movs	r3, #0
 801cdb4:	667b      	str	r3, [r7, #100]	; 0x64
 801cdb6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801cdba:	460b      	mov	r3, r1
 801cdbc:	4313      	orrs	r3, r2
 801cdbe:	d00c      	beq.n	801cdda <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdc4:	3328      	adds	r3, #40	; 0x28
 801cdc6:	2102      	movs	r1, #2
 801cdc8:	4618      	mov	r0, r3
 801cdca:	f001 fb2d 	bl	801e428 <RCCEx_PLL3_Config>
 801cdce:	4603      	mov	r3, r0
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d002      	beq.n	801cdda <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 801cdd4:	2301      	movs	r3, #1
 801cdd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801cdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cde2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801cde6:	65bb      	str	r3, [r7, #88]	; 0x58
 801cde8:	2300      	movs	r3, #0
 801cdea:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cdec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801cdf0:	460b      	mov	r3, r1
 801cdf2:	4313      	orrs	r3, r2
 801cdf4:	d036      	beq.n	801ce64 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801cdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cdfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ce00:	d018      	beq.n	801ce34 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801ce02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ce06:	d811      	bhi.n	801ce2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801ce08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce0c:	d014      	beq.n	801ce38 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 801ce0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce12:	d80b      	bhi.n	801ce2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d011      	beq.n	801ce3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 801ce18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ce1c:	d106      	bne.n	801ce2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ce1e:	4bb7      	ldr	r3, [pc, #732]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce22:	4ab6      	ldr	r2, [pc, #728]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ce28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801ce2a:	e008      	b.n	801ce3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ce2c:	2301      	movs	r3, #1
 801ce2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ce32:	e004      	b.n	801ce3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801ce34:	bf00      	nop
 801ce36:	e002      	b.n	801ce3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801ce38:	bf00      	nop
 801ce3a:	e000      	b.n	801ce3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801ce3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ce3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d10a      	bne.n	801ce5c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801ce46:	4bad      	ldr	r3, [pc, #692]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801ce4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ce54:	4aa9      	ldr	r2, [pc, #676]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce56:	430b      	orrs	r3, r1
 801ce58:	6553      	str	r3, [r2, #84]	; 0x54
 801ce5a:	e003      	b.n	801ce64 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801ce64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce6c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801ce70:	653b      	str	r3, [r7, #80]	; 0x50
 801ce72:	2300      	movs	r3, #0
 801ce74:	657b      	str	r3, [r7, #84]	; 0x54
 801ce76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801ce7a:	460b      	mov	r3, r1
 801ce7c:	4313      	orrs	r3, r2
 801ce7e:	d009      	beq.n	801ce94 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801ce80:	4b9e      	ldr	r3, [pc, #632]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ce88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce8e:	4a9b      	ldr	r2, [pc, #620]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce90:	430b      	orrs	r3, r1
 801ce92:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801ce94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce9c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801cea0:	64bb      	str	r3, [r7, #72]	; 0x48
 801cea2:	2300      	movs	r3, #0
 801cea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cea6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801ceaa:	460b      	mov	r3, r1
 801ceac:	4313      	orrs	r3, r2
 801ceae:	d009      	beq.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801ceb0:	4b92      	ldr	r3, [pc, #584]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ceb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ceb4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801ceb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cebe:	4a8f      	ldr	r2, [pc, #572]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cec0:	430b      	orrs	r3, r1
 801cec2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801cec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cecc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801ced0:	643b      	str	r3, [r7, #64]	; 0x40
 801ced2:	2300      	movs	r3, #0
 801ced4:	647b      	str	r3, [r7, #68]	; 0x44
 801ced6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801ceda:	460b      	mov	r3, r1
 801cedc:	4313      	orrs	r3, r2
 801cede:	d00e      	beq.n	801cefe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801cee0:	4b86      	ldr	r3, [pc, #536]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cee2:	691b      	ldr	r3, [r3, #16]
 801cee4:	4a85      	ldr	r2, [pc, #532]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cee6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801ceea:	6113      	str	r3, [r2, #16]
 801ceec:	4b83      	ldr	r3, [pc, #524]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ceee:	6919      	ldr	r1, [r3, #16]
 801cef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cef4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801cef8:	4a80      	ldr	r2, [pc, #512]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cefa:	430b      	orrs	r3, r1
 801cefc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801cefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf06:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801cf0a:	63bb      	str	r3, [r7, #56]	; 0x38
 801cf0c:	2300      	movs	r3, #0
 801cf0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cf10:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801cf14:	460b      	mov	r3, r1
 801cf16:	4313      	orrs	r3, r2
 801cf18:	d009      	beq.n	801cf2e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801cf1a:	4b78      	ldr	r3, [pc, #480]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801cf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf28:	4a74      	ldr	r2, [pc, #464]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf2a:	430b      	orrs	r3, r1
 801cf2c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801cf2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf36:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 801cf3a:	633b      	str	r3, [r7, #48]	; 0x30
 801cf3c:	2300      	movs	r3, #0
 801cf3e:	637b      	str	r3, [r7, #52]	; 0x34
 801cf40:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801cf44:	460b      	mov	r3, r1
 801cf46:	4313      	orrs	r3, r2
 801cf48:	d00a      	beq.n	801cf60 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801cf4a:	4b6c      	ldr	r3, [pc, #432]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf4e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801cf52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf5a:	4a68      	ldr	r2, [pc, #416]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf5c:	430b      	orrs	r3, r1
 801cf5e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801cf60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf68:	2100      	movs	r1, #0
 801cf6a:	62b9      	str	r1, [r7, #40]	; 0x28
 801cf6c:	f003 0301 	and.w	r3, r3, #1
 801cf70:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cf72:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801cf76:	460b      	mov	r3, r1
 801cf78:	4313      	orrs	r3, r2
 801cf7a:	d011      	beq.n	801cfa0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cf7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf80:	3308      	adds	r3, #8
 801cf82:	2100      	movs	r1, #0
 801cf84:	4618      	mov	r0, r3
 801cf86:	f001 f99d 	bl	801e2c4 <RCCEx_PLL2_Config>
 801cf8a:	4603      	mov	r3, r0
 801cf8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801cf90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d003      	beq.n	801cfa0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801cfa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfa8:	2100      	movs	r1, #0
 801cfaa:	6239      	str	r1, [r7, #32]
 801cfac:	f003 0302 	and.w	r3, r3, #2
 801cfb0:	627b      	str	r3, [r7, #36]	; 0x24
 801cfb2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801cfb6:	460b      	mov	r3, r1
 801cfb8:	4313      	orrs	r3, r2
 801cfba:	d011      	beq.n	801cfe0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cfbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfc0:	3308      	adds	r3, #8
 801cfc2:	2101      	movs	r1, #1
 801cfc4:	4618      	mov	r0, r3
 801cfc6:	f001 f97d 	bl	801e2c4 <RCCEx_PLL2_Config>
 801cfca:	4603      	mov	r3, r0
 801cfcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801cfd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d003      	beq.n	801cfe0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cfd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cfdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801cfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfe8:	2100      	movs	r1, #0
 801cfea:	61b9      	str	r1, [r7, #24]
 801cfec:	f003 0304 	and.w	r3, r3, #4
 801cff0:	61fb      	str	r3, [r7, #28]
 801cff2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801cff6:	460b      	mov	r3, r1
 801cff8:	4313      	orrs	r3, r2
 801cffa:	d011      	beq.n	801d020 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d000:	3308      	adds	r3, #8
 801d002:	2102      	movs	r1, #2
 801d004:	4618      	mov	r0, r3
 801d006:	f001 f95d 	bl	801e2c4 <RCCEx_PLL2_Config>
 801d00a:	4603      	mov	r3, r0
 801d00c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d010:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d014:	2b00      	cmp	r3, #0
 801d016:	d003      	beq.n	801d020 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d018:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d01c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801d020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d024:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d028:	2100      	movs	r1, #0
 801d02a:	6139      	str	r1, [r7, #16]
 801d02c:	f003 0308 	and.w	r3, r3, #8
 801d030:	617b      	str	r3, [r7, #20]
 801d032:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d036:	460b      	mov	r3, r1
 801d038:	4313      	orrs	r3, r2
 801d03a:	d011      	beq.n	801d060 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d040:	3328      	adds	r3, #40	; 0x28
 801d042:	2100      	movs	r1, #0
 801d044:	4618      	mov	r0, r3
 801d046:	f001 f9ef 	bl	801e428 <RCCEx_PLL3_Config>
 801d04a:	4603      	mov	r3, r0
 801d04c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 801d050:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d054:	2b00      	cmp	r3, #0
 801d056:	d003      	beq.n	801d060 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d058:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d05c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801d060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d064:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d068:	2100      	movs	r1, #0
 801d06a:	60b9      	str	r1, [r7, #8]
 801d06c:	f003 0310 	and.w	r3, r3, #16
 801d070:	60fb      	str	r3, [r7, #12]
 801d072:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d076:	460b      	mov	r3, r1
 801d078:	4313      	orrs	r3, r2
 801d07a:	d011      	beq.n	801d0a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d080:	3328      	adds	r3, #40	; 0x28
 801d082:	2101      	movs	r1, #1
 801d084:	4618      	mov	r0, r3
 801d086:	f001 f9cf 	bl	801e428 <RCCEx_PLL3_Config>
 801d08a:	4603      	mov	r3, r0
 801d08c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d090:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d094:	2b00      	cmp	r3, #0
 801d096:	d003      	beq.n	801d0a0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d098:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d09c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801d0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0a8:	2100      	movs	r1, #0
 801d0aa:	6039      	str	r1, [r7, #0]
 801d0ac:	f003 0320 	and.w	r3, r3, #32
 801d0b0:	607b      	str	r3, [r7, #4]
 801d0b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d0b6:	460b      	mov	r3, r1
 801d0b8:	4313      	orrs	r3, r2
 801d0ba:	d011      	beq.n	801d0e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d0c0:	3328      	adds	r3, #40	; 0x28
 801d0c2:	2102      	movs	r1, #2
 801d0c4:	4618      	mov	r0, r3
 801d0c6:	f001 f9af 	bl	801e428 <RCCEx_PLL3_Config>
 801d0ca:	4603      	mov	r3, r0
 801d0cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d0d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d003      	beq.n	801d0e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d0d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d0dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 801d0e0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d101      	bne.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 801d0e8:	2300      	movs	r3, #0
 801d0ea:	e000      	b.n	801d0ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801d0ec:	2301      	movs	r3, #1
}
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801d0f4:	46bd      	mov	sp, r7
 801d0f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d0fa:	bf00      	nop
 801d0fc:	58024400 	.word	0x58024400

0801d100 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801d100:	b580      	push	{r7, lr}
 801d102:	b090      	sub	sp, #64	; 0x40
 801d104:	af00      	add	r7, sp, #0
 801d106:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801d10a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d10e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 801d112:	430b      	orrs	r3, r1
 801d114:	f040 8094 	bne.w	801d240 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801d118:	4b9b      	ldr	r3, [pc, #620]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d11c:	f003 0307 	and.w	r3, r3, #7
 801d120:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d124:	2b04      	cmp	r3, #4
 801d126:	f200 8087 	bhi.w	801d238 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801d12a:	a201      	add	r2, pc, #4	; (adr r2, 801d130 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801d12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d130:	0801d145 	.word	0x0801d145
 801d134:	0801d16d 	.word	0x0801d16d
 801d138:	0801d195 	.word	0x0801d195
 801d13c:	0801d231 	.word	0x0801d231
 801d140:	0801d1bd 	.word	0x0801d1bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d144:	4b90      	ldr	r3, [pc, #576]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d146:	681b      	ldr	r3, [r3, #0]
 801d148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d14c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d150:	d108      	bne.n	801d164 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d156:	4618      	mov	r0, r3
 801d158:	f000 ff62 	bl	801e020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d160:	f000 bc93 	b.w	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d164:	2300      	movs	r3, #0
 801d166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d168:	f000 bc8f 	b.w	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d16c:	4b86      	ldr	r3, [pc, #536]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d178:	d108      	bne.n	801d18c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d17a:	f107 0318 	add.w	r3, r7, #24
 801d17e:	4618      	mov	r0, r3
 801d180:	f000 fca6 	bl	801dad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d184:	69bb      	ldr	r3, [r7, #24]
 801d186:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d188:	f000 bc7f 	b.w	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d18c:	2300      	movs	r3, #0
 801d18e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d190:	f000 bc7b 	b.w	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d194:	4b7c      	ldr	r3, [pc, #496]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d196:	681b      	ldr	r3, [r3, #0]
 801d198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d19c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d1a0:	d108      	bne.n	801d1b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d1a2:	f107 030c 	add.w	r3, r7, #12
 801d1a6:	4618      	mov	r0, r3
 801d1a8:	f000 fde6 	bl	801dd78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d1b0:	f000 bc6b 	b.w	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d1b4:	2300      	movs	r3, #0
 801d1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d1b8:	f000 bc67 	b.w	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d1bc:	4b72      	ldr	r3, [pc, #456]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d1c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d1c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d1c6:	4b70      	ldr	r3, [pc, #448]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	f003 0304 	and.w	r3, r3, #4
 801d1ce:	2b04      	cmp	r3, #4
 801d1d0:	d10c      	bne.n	801d1ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801d1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1d4:	2b00      	cmp	r3, #0
 801d1d6:	d109      	bne.n	801d1ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d1d8:	4b6b      	ldr	r3, [pc, #428]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	08db      	lsrs	r3, r3, #3
 801d1de:	f003 0303 	and.w	r3, r3, #3
 801d1e2:	4a6a      	ldr	r2, [pc, #424]	; (801d38c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d1e4:	fa22 f303 	lsr.w	r3, r2, r3
 801d1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d1ea:	e01f      	b.n	801d22c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d1ec:	4b66      	ldr	r3, [pc, #408]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1ee:	681b      	ldr	r3, [r3, #0]
 801d1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d1f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d1f8:	d106      	bne.n	801d208 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801d1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d200:	d102      	bne.n	801d208 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d202:	4b63      	ldr	r3, [pc, #396]	; (801d390 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d204:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d206:	e011      	b.n	801d22c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d208:	4b5f      	ldr	r3, [pc, #380]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d214:	d106      	bne.n	801d224 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801d216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d21c:	d102      	bne.n	801d224 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d21e:	4b5d      	ldr	r3, [pc, #372]	; (801d394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d220:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d222:	e003      	b.n	801d22c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d224:	2300      	movs	r3, #0
 801d226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d228:	f000 bc2f 	b.w	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d22c:	f000 bc2d 	b.w	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d230:	4b59      	ldr	r3, [pc, #356]	; (801d398 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d234:	f000 bc29 	b.w	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d238:	2300      	movs	r3, #0
 801d23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d23c:	f000 bc25 	b.w	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801d240:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d244:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801d248:	430b      	orrs	r3, r1
 801d24a:	f040 80a7 	bne.w	801d39c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801d24e:	4b4e      	ldr	r3, [pc, #312]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d252:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801d256:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d25a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d25e:	d054      	beq.n	801d30a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 801d260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d262:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d266:	f200 808b 	bhi.w	801d380 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d26c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d270:	f000 8083 	beq.w	801d37a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801d274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d276:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d27a:	f200 8081 	bhi.w	801d380 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d284:	d02f      	beq.n	801d2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801d286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d28c:	d878      	bhi.n	801d380 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d290:	2b00      	cmp	r3, #0
 801d292:	d004      	beq.n	801d29e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801d294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d29a:	d012      	beq.n	801d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801d29c:	e070      	b.n	801d380 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d29e:	4b3a      	ldr	r3, [pc, #232]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2a0:	681b      	ldr	r3, [r3, #0]
 801d2a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d2a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d2aa:	d107      	bne.n	801d2bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d2ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d2b0:	4618      	mov	r0, r3
 801d2b2:	f000 feb5 	bl	801e020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d2ba:	e3e6      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d2bc:	2300      	movs	r3, #0
 801d2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d2c0:	e3e3      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d2c2:	4b31      	ldr	r3, [pc, #196]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d2ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d2ce:	d107      	bne.n	801d2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d2d0:	f107 0318 	add.w	r3, r7, #24
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	f000 fbfb 	bl	801dad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d2da:	69bb      	ldr	r3, [r7, #24]
 801d2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d2de:	e3d4      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d2e0:	2300      	movs	r3, #0
 801d2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d2e4:	e3d1      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d2e6:	4b28      	ldr	r3, [pc, #160]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2e8:	681b      	ldr	r3, [r3, #0]
 801d2ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d2ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d2f2:	d107      	bne.n	801d304 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d2f4:	f107 030c 	add.w	r3, r7, #12
 801d2f8:	4618      	mov	r0, r3
 801d2fa:	f000 fd3d 	bl	801dd78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d302:	e3c2      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d304:	2300      	movs	r3, #0
 801d306:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d308:	e3bf      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d30a:	4b1f      	ldr	r3, [pc, #124]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d30c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d30e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d312:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d314:	4b1c      	ldr	r3, [pc, #112]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	f003 0304 	and.w	r3, r3, #4
 801d31c:	2b04      	cmp	r3, #4
 801d31e:	d10c      	bne.n	801d33a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 801d320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d322:	2b00      	cmp	r3, #0
 801d324:	d109      	bne.n	801d33a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d326:	4b18      	ldr	r3, [pc, #96]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	08db      	lsrs	r3, r3, #3
 801d32c:	f003 0303 	and.w	r3, r3, #3
 801d330:	4a16      	ldr	r2, [pc, #88]	; (801d38c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d332:	fa22 f303 	lsr.w	r3, r2, r3
 801d336:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d338:	e01e      	b.n	801d378 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d33a:	4b13      	ldr	r3, [pc, #76]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d346:	d106      	bne.n	801d356 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 801d348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d34a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d34e:	d102      	bne.n	801d356 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d350:	4b0f      	ldr	r3, [pc, #60]	; (801d390 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d352:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d354:	e010      	b.n	801d378 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d356:	4b0c      	ldr	r3, [pc, #48]	; (801d388 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d358:	681b      	ldr	r3, [r3, #0]
 801d35a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d35e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d362:	d106      	bne.n	801d372 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801d364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d36a:	d102      	bne.n	801d372 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d36c:	4b09      	ldr	r3, [pc, #36]	; (801d394 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d36e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d370:	e002      	b.n	801d378 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d372:	2300      	movs	r3, #0
 801d374:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d376:	e388      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d378:	e387      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d37a:	4b07      	ldr	r3, [pc, #28]	; (801d398 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d37e:	e384      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d380:	2300      	movs	r3, #0
 801d382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d384:	e381      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d386:	bf00      	nop
 801d388:	58024400 	.word	0x58024400
 801d38c:	03d09000 	.word	0x03d09000
 801d390:	003d0900 	.word	0x003d0900
 801d394:	007a1200 	.word	0x007a1200
 801d398:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801d39c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d3a0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801d3a4:	430b      	orrs	r3, r1
 801d3a6:	f040 809c 	bne.w	801d4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801d3aa:	4b9e      	ldr	r3, [pc, #632]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d3ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801d3b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d3ba:	d054      	beq.n	801d466 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801d3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d3c2:	f200 808b 	bhi.w	801d4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d3cc:	f000 8083 	beq.w	801d4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 801d3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d3d6:	f200 8081 	bhi.w	801d4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d3e0:	d02f      	beq.n	801d442 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801d3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d3e8:	d878      	bhi.n	801d4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d004      	beq.n	801d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d3f6:	d012      	beq.n	801d41e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 801d3f8:	e070      	b.n	801d4dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d3fa:	4b8a      	ldr	r3, [pc, #552]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d402:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d406:	d107      	bne.n	801d418 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d40c:	4618      	mov	r0, r3
 801d40e:	f000 fe07 	bl	801e020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d414:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d416:	e338      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d418:	2300      	movs	r3, #0
 801d41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d41c:	e335      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d41e:	4b81      	ldr	r3, [pc, #516]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d42a:	d107      	bne.n	801d43c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d42c:	f107 0318 	add.w	r3, r7, #24
 801d430:	4618      	mov	r0, r3
 801d432:	f000 fb4d 	bl	801dad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d436:	69bb      	ldr	r3, [r7, #24]
 801d438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d43a:	e326      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d43c:	2300      	movs	r3, #0
 801d43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d440:	e323      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d442:	4b78      	ldr	r3, [pc, #480]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d444:	681b      	ldr	r3, [r3, #0]
 801d446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d44a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d44e:	d107      	bne.n	801d460 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d450:	f107 030c 	add.w	r3, r7, #12
 801d454:	4618      	mov	r0, r3
 801d456:	f000 fc8f 	bl	801dd78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d45e:	e314      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d460:	2300      	movs	r3, #0
 801d462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d464:	e311      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d466:	4b6f      	ldr	r3, [pc, #444]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d46a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d46e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d470:	4b6c      	ldr	r3, [pc, #432]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	f003 0304 	and.w	r3, r3, #4
 801d478:	2b04      	cmp	r3, #4
 801d47a:	d10c      	bne.n	801d496 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801d47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d109      	bne.n	801d496 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d482:	4b68      	ldr	r3, [pc, #416]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	08db      	lsrs	r3, r3, #3
 801d488:	f003 0303 	and.w	r3, r3, #3
 801d48c:	4a66      	ldr	r2, [pc, #408]	; (801d628 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801d48e:	fa22 f303 	lsr.w	r3, r2, r3
 801d492:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d494:	e01e      	b.n	801d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d496:	4b63      	ldr	r3, [pc, #396]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d4a2:	d106      	bne.n	801d4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801d4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d4aa:	d102      	bne.n	801d4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d4ac:	4b5f      	ldr	r3, [pc, #380]	; (801d62c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801d4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4b0:	e010      	b.n	801d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d4b2:	4b5c      	ldr	r3, [pc, #368]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d4ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d4be:	d106      	bne.n	801d4ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 801d4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d4c6:	d102      	bne.n	801d4ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d4c8:	4b59      	ldr	r3, [pc, #356]	; (801d630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801d4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4cc:	e002      	b.n	801d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d4ce:	2300      	movs	r3, #0
 801d4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d4d2:	e2da      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d4d4:	e2d9      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d4d6:	4b57      	ldr	r3, [pc, #348]	; (801d634 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801d4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d4da:	e2d6      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d4dc:	2300      	movs	r3, #0
 801d4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d4e0:	e2d3      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801d4e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d4e6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801d4ea:	430b      	orrs	r3, r1
 801d4ec:	f040 80a7 	bne.w	801d63e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801d4f0:	4b4c      	ldr	r3, [pc, #304]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d4f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801d4f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d500:	d055      	beq.n	801d5ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801d502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d508:	f200 8096 	bhi.w	801d638 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d50e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d512:	f000 8084 	beq.w	801d61e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801d516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d51c:	f200 808c 	bhi.w	801d638 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d526:	d030      	beq.n	801d58a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801d528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d52a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d52e:	f200 8083 	bhi.w	801d638 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d534:	2b00      	cmp	r3, #0
 801d536:	d004      	beq.n	801d542 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 801d538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d53a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d53e:	d012      	beq.n	801d566 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 801d540:	e07a      	b.n	801d638 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d542:	4b38      	ldr	r3, [pc, #224]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d544:	681b      	ldr	r3, [r3, #0]
 801d546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d54a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d54e:	d107      	bne.n	801d560 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d554:	4618      	mov	r0, r3
 801d556:	f000 fd63 	bl	801e020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d55e:	e294      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d560:	2300      	movs	r3, #0
 801d562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d564:	e291      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d566:	4b2f      	ldr	r3, [pc, #188]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d568:	681b      	ldr	r3, [r3, #0]
 801d56a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d56e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d572:	d107      	bne.n	801d584 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d574:	f107 0318 	add.w	r3, r7, #24
 801d578:	4618      	mov	r0, r3
 801d57a:	f000 faa9 	bl	801dad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d57e:	69bb      	ldr	r3, [r7, #24]
 801d580:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d582:	e282      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d584:	2300      	movs	r3, #0
 801d586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d588:	e27f      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d58a:	4b26      	ldr	r3, [pc, #152]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d592:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d596:	d107      	bne.n	801d5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d598:	f107 030c 	add.w	r3, r7, #12
 801d59c:	4618      	mov	r0, r3
 801d59e:	f000 fbeb 	bl	801dd78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d5a2:	68fb      	ldr	r3, [r7, #12]
 801d5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d5a6:	e270      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d5a8:	2300      	movs	r3, #0
 801d5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d5ac:	e26d      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d5ae:	4b1d      	ldr	r3, [pc, #116]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d5b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d5b6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d5b8:	4b1a      	ldr	r3, [pc, #104]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5ba:	681b      	ldr	r3, [r3, #0]
 801d5bc:	f003 0304 	and.w	r3, r3, #4
 801d5c0:	2b04      	cmp	r3, #4
 801d5c2:	d10c      	bne.n	801d5de <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801d5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5c6:	2b00      	cmp	r3, #0
 801d5c8:	d109      	bne.n	801d5de <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d5ca:	4b16      	ldr	r3, [pc, #88]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	08db      	lsrs	r3, r3, #3
 801d5d0:	f003 0303 	and.w	r3, r3, #3
 801d5d4:	4a14      	ldr	r2, [pc, #80]	; (801d628 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801d5d6:	fa22 f303 	lsr.w	r3, r2, r3
 801d5da:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d5dc:	e01e      	b.n	801d61c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d5de:	4b11      	ldr	r3, [pc, #68]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d5ea:	d106      	bne.n	801d5fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801d5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d5f2:	d102      	bne.n	801d5fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d5f4:	4b0d      	ldr	r3, [pc, #52]	; (801d62c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801d5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d5f8:	e010      	b.n	801d61c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d5fa:	4b0a      	ldr	r3, [pc, #40]	; (801d624 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5fc:	681b      	ldr	r3, [r3, #0]
 801d5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d606:	d106      	bne.n	801d616 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 801d608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d60a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d60e:	d102      	bne.n	801d616 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d610:	4b07      	ldr	r3, [pc, #28]	; (801d630 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801d612:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d614:	e002      	b.n	801d61c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d616:	2300      	movs	r3, #0
 801d618:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d61a:	e236      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d61c:	e235      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d61e:	4b05      	ldr	r3, [pc, #20]	; (801d634 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801d620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d622:	e232      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d624:	58024400 	.word	0x58024400
 801d628:	03d09000 	.word	0x03d09000
 801d62c:	003d0900 	.word	0x003d0900
 801d630:	007a1200 	.word	0x007a1200
 801d634:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 801d638:	2300      	movs	r3, #0
 801d63a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d63c:	e225      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801d63e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d642:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 801d646:	430b      	orrs	r3, r1
 801d648:	f040 8085 	bne.w	801d756 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801d64c:	4b9c      	ldr	r3, [pc, #624]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d650:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 801d654:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 801d656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d65c:	d06b      	beq.n	801d736 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801d65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d664:	d874      	bhi.n	801d750 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d668:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801d66c:	d056      	beq.n	801d71c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801d66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d670:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801d674:	d86c      	bhi.n	801d750 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d678:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801d67c:	d03b      	beq.n	801d6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801d67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d680:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801d684:	d864      	bhi.n	801d750 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d68c:	d021      	beq.n	801d6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801d68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d694:	d85c      	bhi.n	801d750 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d004      	beq.n	801d6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801d69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d69e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d6a2:	d004      	beq.n	801d6ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801d6a4:	e054      	b.n	801d750 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801d6a6:	f7fe fb75 	bl	801bd94 <HAL_RCC_GetPCLK1Freq>
 801d6aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801d6ac:	e1ed      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d6ae:	4b84      	ldr	r3, [pc, #528]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d6b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d6ba:	d107      	bne.n	801d6cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d6bc:	f107 0318 	add.w	r3, r7, #24
 801d6c0:	4618      	mov	r0, r3
 801d6c2:	f000 fa05 	bl	801dad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d6c6:	69fb      	ldr	r3, [r7, #28]
 801d6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d6ca:	e1de      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d6cc:	2300      	movs	r3, #0
 801d6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d6d0:	e1db      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d6d2:	4b7b      	ldr	r3, [pc, #492]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d6da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d6de:	d107      	bne.n	801d6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d6e0:	f107 030c 	add.w	r3, r7, #12
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f000 fb47 	bl	801dd78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d6ea:	693b      	ldr	r3, [r7, #16]
 801d6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d6ee:	e1cc      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d6f0:	2300      	movs	r3, #0
 801d6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d6f4:	e1c9      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d6f6:	4b72      	ldr	r3, [pc, #456]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	f003 0304 	and.w	r3, r3, #4
 801d6fe:	2b04      	cmp	r3, #4
 801d700:	d109      	bne.n	801d716 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d702:	4b6f      	ldr	r3, [pc, #444]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d704:	681b      	ldr	r3, [r3, #0]
 801d706:	08db      	lsrs	r3, r3, #3
 801d708:	f003 0303 	and.w	r3, r3, #3
 801d70c:	4a6d      	ldr	r2, [pc, #436]	; (801d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801d70e:	fa22 f303 	lsr.w	r3, r2, r3
 801d712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d714:	e1b9      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d716:	2300      	movs	r3, #0
 801d718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d71a:	e1b6      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d71c:	4b68      	ldr	r3, [pc, #416]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d728:	d102      	bne.n	801d730 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801d72a:	4b67      	ldr	r3, [pc, #412]	; (801d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801d72c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d72e:	e1ac      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d730:	2300      	movs	r3, #0
 801d732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d734:	e1a9      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d736:	4b62      	ldr	r3, [pc, #392]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d73e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d742:	d102      	bne.n	801d74a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801d744:	4b61      	ldr	r3, [pc, #388]	; (801d8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801d746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d748:	e19f      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d74a:	2300      	movs	r3, #0
 801d74c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d74e:	e19c      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d750:	2300      	movs	r3, #0
 801d752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d754:	e199      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801d756:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d75a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 801d75e:	430b      	orrs	r3, r1
 801d760:	d173      	bne.n	801d84a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801d762:	4b57      	ldr	r3, [pc, #348]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d766:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d76a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d76e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d772:	d02f      	beq.n	801d7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801d774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d77a:	d863      	bhi.n	801d844 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 801d77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d004      	beq.n	801d78c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801d782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d788:	d012      	beq.n	801d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801d78a:	e05b      	b.n	801d844 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d78c:	4b4c      	ldr	r3, [pc, #304]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d798:	d107      	bne.n	801d7aa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d79a:	f107 0318 	add.w	r3, r7, #24
 801d79e:	4618      	mov	r0, r3
 801d7a0:	f000 f996 	bl	801dad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d7a4:	69bb      	ldr	r3, [r7, #24]
 801d7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d7a8:	e16f      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d7aa:	2300      	movs	r3, #0
 801d7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d7ae:	e16c      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d7b0:	4b43      	ldr	r3, [pc, #268]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d7b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d7bc:	d107      	bne.n	801d7ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d7be:	f107 030c 	add.w	r3, r7, #12
 801d7c2:	4618      	mov	r0, r3
 801d7c4:	f000 fad8 	bl	801dd78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801d7c8:	697b      	ldr	r3, [r7, #20]
 801d7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d7cc:	e15d      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d7ce:	2300      	movs	r3, #0
 801d7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d7d2:	e15a      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d7d4:	4b3a      	ldr	r3, [pc, #232]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d7d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d7dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d7de:	4b38      	ldr	r3, [pc, #224]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	f003 0304 	and.w	r3, r3, #4
 801d7e6:	2b04      	cmp	r3, #4
 801d7e8:	d10c      	bne.n	801d804 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801d7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d109      	bne.n	801d804 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d7f0:	4b33      	ldr	r3, [pc, #204]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	08db      	lsrs	r3, r3, #3
 801d7f6:	f003 0303 	and.w	r3, r3, #3
 801d7fa:	4a32      	ldr	r2, [pc, #200]	; (801d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801d7fc:	fa22 f303 	lsr.w	r3, r2, r3
 801d800:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d802:	e01e      	b.n	801d842 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d804:	4b2e      	ldr	r3, [pc, #184]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d806:	681b      	ldr	r3, [r3, #0]
 801d808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d80c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d810:	d106      	bne.n	801d820 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801d812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d814:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d818:	d102      	bne.n	801d820 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d81a:	4b2b      	ldr	r3, [pc, #172]	; (801d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801d81c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d81e:	e010      	b.n	801d842 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d820:	4b27      	ldr	r3, [pc, #156]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d822:	681b      	ldr	r3, [r3, #0]
 801d824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d82c:	d106      	bne.n	801d83c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801d82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d834:	d102      	bne.n	801d83c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d836:	4b25      	ldr	r3, [pc, #148]	; (801d8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801d838:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d83a:	e002      	b.n	801d842 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d83c:	2300      	movs	r3, #0
 801d83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d840:	e123      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d842:	e122      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d844:	2300      	movs	r3, #0
 801d846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d848:	e11f      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801d84a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d84e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 801d852:	430b      	orrs	r3, r1
 801d854:	d13c      	bne.n	801d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801d856:	4b1a      	ldr	r3, [pc, #104]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d85a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d85e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d862:	2b00      	cmp	r3, #0
 801d864:	d004      	beq.n	801d870 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801d866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d86c:	d012      	beq.n	801d894 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801d86e:	e023      	b.n	801d8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d870:	4b13      	ldr	r3, [pc, #76]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d872:	681b      	ldr	r3, [r3, #0]
 801d874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d878:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d87c:	d107      	bne.n	801d88e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d87e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d882:	4618      	mov	r0, r3
 801d884:	f000 fbcc 	bl	801e020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d88c:	e0fd      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d88e:	2300      	movs	r3, #0
 801d890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d892:	e0fa      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d894:	4b0a      	ldr	r3, [pc, #40]	; (801d8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d896:	681b      	ldr	r3, [r3, #0]
 801d898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d89c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d8a0:	d107      	bne.n	801d8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d8a2:	f107 0318 	add.w	r3, r7, #24
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	f000 f912 	bl	801dad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801d8ac:	6a3b      	ldr	r3, [r7, #32]
 801d8ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d8b0:	e0eb      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d8b2:	2300      	movs	r3, #0
 801d8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8b6:	e0e8      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d8b8:	2300      	movs	r3, #0
 801d8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8bc:	e0e5      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d8be:	bf00      	nop
 801d8c0:	58024400 	.word	0x58024400
 801d8c4:	03d09000 	.word	0x03d09000
 801d8c8:	003d0900 	.word	0x003d0900
 801d8cc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801d8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d8d4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 801d8d8:	430b      	orrs	r3, r1
 801d8da:	f040 8085 	bne.w	801d9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801d8de:	4b6d      	ldr	r3, [pc, #436]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d8e2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801d8e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d8ee:	d06b      	beq.n	801d9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 801d8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d8f6:	d874      	bhi.n	801d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d8fe:	d056      	beq.n	801d9ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 801d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d906:	d86c      	bhi.n	801d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d90a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d90e:	d03b      	beq.n	801d988 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 801d910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d912:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d916:	d864      	bhi.n	801d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d91a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d91e:	d021      	beq.n	801d964 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 801d920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d926:	d85c      	bhi.n	801d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	d004      	beq.n	801d938 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 801d92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d934:	d004      	beq.n	801d940 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801d936:	e054      	b.n	801d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801d938:	f000 f8b4 	bl	801daa4 <HAL_RCCEx_GetD3PCLK1Freq>
 801d93c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801d93e:	e0a4      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d940:	4b54      	ldr	r3, [pc, #336]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d942:	681b      	ldr	r3, [r3, #0]
 801d944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d94c:	d107      	bne.n	801d95e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d94e:	f107 0318 	add.w	r3, r7, #24
 801d952:	4618      	mov	r0, r3
 801d954:	f000 f8bc 	bl	801dad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d958:	69fb      	ldr	r3, [r7, #28]
 801d95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d95c:	e095      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d95e:	2300      	movs	r3, #0
 801d960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d962:	e092      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d964:	4b4b      	ldr	r3, [pc, #300]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d966:	681b      	ldr	r3, [r3, #0]
 801d968:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d96c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d970:	d107      	bne.n	801d982 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d972:	f107 030c 	add.w	r3, r7, #12
 801d976:	4618      	mov	r0, r3
 801d978:	f000 f9fe 	bl	801dd78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d97c:	693b      	ldr	r3, [r7, #16]
 801d97e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d980:	e083      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d982:	2300      	movs	r3, #0
 801d984:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d986:	e080      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d988:	4b42      	ldr	r3, [pc, #264]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	f003 0304 	and.w	r3, r3, #4
 801d990:	2b04      	cmp	r3, #4
 801d992:	d109      	bne.n	801d9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d994:	4b3f      	ldr	r3, [pc, #252]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	08db      	lsrs	r3, r3, #3
 801d99a:	f003 0303 	and.w	r3, r3, #3
 801d99e:	4a3e      	ldr	r2, [pc, #248]	; (801da98 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 801d9a0:	fa22 f303 	lsr.w	r3, r2, r3
 801d9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d9a6:	e070      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d9a8:	2300      	movs	r3, #0
 801d9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9ac:	e06d      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d9ae:	4b39      	ldr	r3, [pc, #228]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d9ba:	d102      	bne.n	801d9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801d9bc:	4b37      	ldr	r3, [pc, #220]	; (801da9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801d9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d9c0:	e063      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9c6:	e060      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d9c8:	4b32      	ldr	r3, [pc, #200]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9ca:	681b      	ldr	r3, [r3, #0]
 801d9cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d9d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d9d4:	d102      	bne.n	801d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801d9d6:	4b32      	ldr	r3, [pc, #200]	; (801daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801d9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d9da:	e056      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d9dc:	2300      	movs	r3, #0
 801d9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9e0:	e053      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801d9e2:	2300      	movs	r3, #0
 801d9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9e6:	e050      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801d9e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d9ec:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 801d9f0:	430b      	orrs	r3, r1
 801d9f2:	d148      	bne.n	801da86 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801d9f4:	4b27      	ldr	r3, [pc, #156]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d9f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d9fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801da04:	d02a      	beq.n	801da5c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801da06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801da0c:	d838      	bhi.n	801da80 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801da0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da10:	2b00      	cmp	r3, #0
 801da12:	d004      	beq.n	801da1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 801da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801da1a:	d00d      	beq.n	801da38 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 801da1c:	e030      	b.n	801da80 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801da1e:	4b1d      	ldr	r3, [pc, #116]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da20:	681b      	ldr	r3, [r3, #0]
 801da22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801da26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801da2a:	d102      	bne.n	801da32 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 801da2c:	4b1c      	ldr	r3, [pc, #112]	; (801daa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801da2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da30:	e02b      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da32:	2300      	movs	r3, #0
 801da34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da36:	e028      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801da38:	4b16      	ldr	r3, [pc, #88]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da3a:	681b      	ldr	r3, [r3, #0]
 801da3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801da40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801da44:	d107      	bne.n	801da56 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801da46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801da4a:	4618      	mov	r0, r3
 801da4c:	f000 fae8 	bl	801e020 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801da50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da54:	e019      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da56:	2300      	movs	r3, #0
 801da58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da5a:	e016      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801da5c:	4b0d      	ldr	r3, [pc, #52]	; (801da94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801da64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801da68:	d107      	bne.n	801da7a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801da6a:	f107 0318 	add.w	r3, r7, #24
 801da6e:	4618      	mov	r0, r3
 801da70:	f000 f82e 	bl	801dad0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801da74:	69fb      	ldr	r3, [r7, #28]
 801da76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da78:	e007      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da7a:	2300      	movs	r3, #0
 801da7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da7e:	e004      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801da80:	2300      	movs	r3, #0
 801da82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da84:	e001      	b.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801da86:	2300      	movs	r3, #0
 801da88:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801da8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801da8c:	4618      	mov	r0, r3
 801da8e:	3740      	adds	r7, #64	; 0x40
 801da90:	46bd      	mov	sp, r7
 801da92:	bd80      	pop	{r7, pc}
 801da94:	58024400 	.word	0x58024400
 801da98:	03d09000 	.word	0x03d09000
 801da9c:	003d0900 	.word	0x003d0900
 801daa0:	007a1200 	.word	0x007a1200

0801daa4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801daa4:	b580      	push	{r7, lr}
 801daa6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801daa8:	f7fe f944 	bl	801bd34 <HAL_RCC_GetHCLKFreq>
 801daac:	4602      	mov	r2, r0
 801daae:	4b06      	ldr	r3, [pc, #24]	; (801dac8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801dab0:	6a1b      	ldr	r3, [r3, #32]
 801dab2:	091b      	lsrs	r3, r3, #4
 801dab4:	f003 0307 	and.w	r3, r3, #7
 801dab8:	4904      	ldr	r1, [pc, #16]	; (801dacc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801daba:	5ccb      	ldrb	r3, [r1, r3]
 801dabc:	f003 031f 	and.w	r3, r3, #31
 801dac0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801dac4:	4618      	mov	r0, r3
 801dac6:	bd80      	pop	{r7, pc}
 801dac8:	58024400 	.word	0x58024400
 801dacc:	08020cd8 	.word	0x08020cd8

0801dad0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801dad0:	b480      	push	{r7}
 801dad2:	b089      	sub	sp, #36	; 0x24
 801dad4:	af00      	add	r7, sp, #0
 801dad6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dad8:	4ba1      	ldr	r3, [pc, #644]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dadc:	f003 0303 	and.w	r3, r3, #3
 801dae0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801dae2:	4b9f      	ldr	r3, [pc, #636]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dae6:	0b1b      	lsrs	r3, r3, #12
 801dae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801daec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801daee:	4b9c      	ldr	r3, [pc, #624]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801daf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801daf2:	091b      	lsrs	r3, r3, #4
 801daf4:	f003 0301 	and.w	r3, r3, #1
 801daf8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801dafa:	4b99      	ldr	r3, [pc, #612]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801dafe:	08db      	lsrs	r3, r3, #3
 801db00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801db04:	693a      	ldr	r2, [r7, #16]
 801db06:	fb02 f303 	mul.w	r3, r2, r3
 801db0a:	ee07 3a90 	vmov	s15, r3
 801db0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801db16:	697b      	ldr	r3, [r7, #20]
 801db18:	2b00      	cmp	r3, #0
 801db1a:	f000 8111 	beq.w	801dd40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801db1e:	69bb      	ldr	r3, [r7, #24]
 801db20:	2b02      	cmp	r3, #2
 801db22:	f000 8083 	beq.w	801dc2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801db26:	69bb      	ldr	r3, [r7, #24]
 801db28:	2b02      	cmp	r3, #2
 801db2a:	f200 80a1 	bhi.w	801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801db2e:	69bb      	ldr	r3, [r7, #24]
 801db30:	2b00      	cmp	r3, #0
 801db32:	d003      	beq.n	801db3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801db34:	69bb      	ldr	r3, [r7, #24]
 801db36:	2b01      	cmp	r3, #1
 801db38:	d056      	beq.n	801dbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801db3a:	e099      	b.n	801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801db3c:	4b88      	ldr	r3, [pc, #544]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db3e:	681b      	ldr	r3, [r3, #0]
 801db40:	f003 0320 	and.w	r3, r3, #32
 801db44:	2b00      	cmp	r3, #0
 801db46:	d02d      	beq.n	801dba4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801db48:	4b85      	ldr	r3, [pc, #532]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	08db      	lsrs	r3, r3, #3
 801db4e:	f003 0303 	and.w	r3, r3, #3
 801db52:	4a84      	ldr	r2, [pc, #528]	; (801dd64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801db54:	fa22 f303 	lsr.w	r3, r2, r3
 801db58:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db5a:	68bb      	ldr	r3, [r7, #8]
 801db5c:	ee07 3a90 	vmov	s15, r3
 801db60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db64:	697b      	ldr	r3, [r7, #20]
 801db66:	ee07 3a90 	vmov	s15, r3
 801db6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db72:	4b7b      	ldr	r3, [pc, #492]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db7a:	ee07 3a90 	vmov	s15, r3
 801db7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db82:	ed97 6a03 	vldr	s12, [r7, #12]
 801db86:	eddf 5a78 	vldr	s11, [pc, #480]	; 801dd68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801db8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801db96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801dba2:	e087      	b.n	801dcb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dba4:	697b      	ldr	r3, [r7, #20]
 801dba6:	ee07 3a90 	vmov	s15, r3
 801dbaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801dd6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801dbb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dbb6:	4b6a      	ldr	r3, [pc, #424]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dbbe:	ee07 3a90 	vmov	s15, r3
 801dbc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dbc6:	ed97 6a03 	vldr	s12, [r7, #12]
 801dbca:	eddf 5a67 	vldr	s11, [pc, #412]	; 801dd68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dbce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dbd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dbd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dbda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dbde:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dbe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dbe6:	e065      	b.n	801dcb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dbe8:	697b      	ldr	r3, [r7, #20]
 801dbea:	ee07 3a90 	vmov	s15, r3
 801dbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801dd70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801dbf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dbfa:	4b59      	ldr	r3, [pc, #356]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc02:	ee07 3a90 	vmov	s15, r3
 801dc06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc0a:	ed97 6a03 	vldr	s12, [r7, #12]
 801dc0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 801dd68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dc12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc22:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dc2a:	e043      	b.n	801dcb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dc2c:	697b      	ldr	r3, [r7, #20]
 801dc2e:	ee07 3a90 	vmov	s15, r3
 801dc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801dd74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801dc3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc3e:	4b48      	ldr	r3, [pc, #288]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc46:	ee07 3a90 	vmov	s15, r3
 801dc4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc4e:	ed97 6a03 	vldr	s12, [r7, #12]
 801dc52:	eddf 5a45 	vldr	s11, [pc, #276]	; 801dd68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dc56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc66:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dc6e:	e021      	b.n	801dcb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dc70:	697b      	ldr	r3, [r7, #20]
 801dc72:	ee07 3a90 	vmov	s15, r3
 801dc76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801dd70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801dc7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc82:	4b37      	ldr	r3, [pc, #220]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc8a:	ee07 3a90 	vmov	s15, r3
 801dc8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc92:	ed97 6a03 	vldr	s12, [r7, #12]
 801dc96:	eddf 5a34 	vldr	s11, [pc, #208]	; 801dd68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dc9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dcaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dcae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dcb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801dcb4:	4b2a      	ldr	r3, [pc, #168]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcb8:	0a5b      	lsrs	r3, r3, #9
 801dcba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dcbe:	ee07 3a90 	vmov	s15, r3
 801dcc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dcca:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dcce:	edd7 6a07 	vldr	s13, [r7, #28]
 801dcd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dcd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dcda:	ee17 2a90 	vmov	r2, s15
 801dcde:	687b      	ldr	r3, [r7, #4]
 801dce0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801dce2:	4b1f      	ldr	r3, [pc, #124]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dce6:	0c1b      	lsrs	r3, r3, #16
 801dce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dcec:	ee07 3a90 	vmov	s15, r3
 801dcf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dcf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dcfc:	edd7 6a07 	vldr	s13, [r7, #28]
 801dd00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dd04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dd08:	ee17 2a90 	vmov	r2, s15
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801dd10:	4b13      	ldr	r3, [pc, #76]	; (801dd60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd14:	0e1b      	lsrs	r3, r3, #24
 801dd16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dd1a:	ee07 3a90 	vmov	s15, r3
 801dd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dd26:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dd2a:	edd7 6a07 	vldr	s13, [r7, #28]
 801dd2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dd32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dd36:	ee17 2a90 	vmov	r2, s15
 801dd3a:	687b      	ldr	r3, [r7, #4]
 801dd3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801dd3e:	e008      	b.n	801dd52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	2200      	movs	r2, #0
 801dd44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	2200      	movs	r2, #0
 801dd4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	2200      	movs	r2, #0
 801dd50:	609a      	str	r2, [r3, #8]
}
 801dd52:	bf00      	nop
 801dd54:	3724      	adds	r7, #36	; 0x24
 801dd56:	46bd      	mov	sp, r7
 801dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd5c:	4770      	bx	lr
 801dd5e:	bf00      	nop
 801dd60:	58024400 	.word	0x58024400
 801dd64:	03d09000 	.word	0x03d09000
 801dd68:	46000000 	.word	0x46000000
 801dd6c:	4c742400 	.word	0x4c742400
 801dd70:	4a742400 	.word	0x4a742400
 801dd74:	4af42400 	.word	0x4af42400

0801dd78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801dd78:	b480      	push	{r7}
 801dd7a:	b089      	sub	sp, #36	; 0x24
 801dd7c:	af00      	add	r7, sp, #0
 801dd7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dd80:	4ba1      	ldr	r3, [pc, #644]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd84:	f003 0303 	and.w	r3, r3, #3
 801dd88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801dd8a:	4b9f      	ldr	r3, [pc, #636]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd8e:	0d1b      	lsrs	r3, r3, #20
 801dd90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dd94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801dd96:	4b9c      	ldr	r3, [pc, #624]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd9a:	0a1b      	lsrs	r3, r3, #8
 801dd9c:	f003 0301 	and.w	r3, r3, #1
 801dda0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801dda2:	4b99      	ldr	r3, [pc, #612]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dda4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dda6:	08db      	lsrs	r3, r3, #3
 801dda8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ddac:	693a      	ldr	r2, [r7, #16]
 801ddae:	fb02 f303 	mul.w	r3, r2, r3
 801ddb2:	ee07 3a90 	vmov	s15, r3
 801ddb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801ddbe:	697b      	ldr	r3, [r7, #20]
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	f000 8111 	beq.w	801dfe8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801ddc6:	69bb      	ldr	r3, [r7, #24]
 801ddc8:	2b02      	cmp	r3, #2
 801ddca:	f000 8083 	beq.w	801ded4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801ddce:	69bb      	ldr	r3, [r7, #24]
 801ddd0:	2b02      	cmp	r3, #2
 801ddd2:	f200 80a1 	bhi.w	801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801ddd6:	69bb      	ldr	r3, [r7, #24]
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d003      	beq.n	801dde4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801dddc:	69bb      	ldr	r3, [r7, #24]
 801ddde:	2b01      	cmp	r3, #1
 801dde0:	d056      	beq.n	801de90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801dde2:	e099      	b.n	801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dde4:	4b88      	ldr	r3, [pc, #544]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	f003 0320 	and.w	r3, r3, #32
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d02d      	beq.n	801de4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ddf0:	4b85      	ldr	r3, [pc, #532]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	08db      	lsrs	r3, r3, #3
 801ddf6:	f003 0303 	and.w	r3, r3, #3
 801ddfa:	4a84      	ldr	r2, [pc, #528]	; (801e00c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801ddfc:	fa22 f303 	lsr.w	r3, r2, r3
 801de00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de02:	68bb      	ldr	r3, [r7, #8]
 801de04:	ee07 3a90 	vmov	s15, r3
 801de08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de0c:	697b      	ldr	r3, [r7, #20]
 801de0e:	ee07 3a90 	vmov	s15, r3
 801de12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de1a:	4b7b      	ldr	r3, [pc, #492]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de22:	ee07 3a90 	vmov	s15, r3
 801de26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de2a:	ed97 6a03 	vldr	s12, [r7, #12]
 801de2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 801e010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801de32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de42:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801de4a:	e087      	b.n	801df5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de4c:	697b      	ldr	r3, [r7, #20]
 801de4e:	ee07 3a90 	vmov	s15, r3
 801de52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801e014 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801de5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de5e:	4b6a      	ldr	r3, [pc, #424]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de66:	ee07 3a90 	vmov	s15, r3
 801de6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de6e:	ed97 6a03 	vldr	s12, [r7, #12]
 801de72:	eddf 5a67 	vldr	s11, [pc, #412]	; 801e010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801de76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de86:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801de8e:	e065      	b.n	801df5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de90:	697b      	ldr	r3, [r7, #20]
 801de92:	ee07 3a90 	vmov	s15, r3
 801de96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801e018 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801de9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dea2:	4b59      	ldr	r3, [pc, #356]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801deaa:	ee07 3a90 	vmov	s15, r3
 801deae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801deb2:	ed97 6a03 	vldr	s12, [r7, #12]
 801deb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 801e010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801deba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801debe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801deca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ded2:	e043      	b.n	801df5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ded4:	697b      	ldr	r3, [r7, #20]
 801ded6:	ee07 3a90 	vmov	s15, r3
 801deda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dede:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801e01c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801dee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dee6:	4b48      	ldr	r3, [pc, #288]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801deea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801deee:	ee07 3a90 	vmov	s15, r3
 801def2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801def6:	ed97 6a03 	vldr	s12, [r7, #12]
 801defa:	eddf 5a45 	vldr	s11, [pc, #276]	; 801e010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801defe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801df02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801df06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801df0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801df16:	e021      	b.n	801df5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801df18:	697b      	ldr	r3, [r7, #20]
 801df1a:	ee07 3a90 	vmov	s15, r3
 801df1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801e018 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801df26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801df2a:	4b37      	ldr	r3, [pc, #220]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df32:	ee07 3a90 	vmov	s15, r3
 801df36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801df3a:	ed97 6a03 	vldr	s12, [r7, #12]
 801df3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e010 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801df42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801df46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801df4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801df52:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801df5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801df5c:	4b2a      	ldr	r3, [pc, #168]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df60:	0a5b      	lsrs	r3, r3, #9
 801df62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801df66:	ee07 3a90 	vmov	s15, r3
 801df6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801df72:	ee37 7a87 	vadd.f32	s14, s15, s14
 801df76:	edd7 6a07 	vldr	s13, [r7, #28]
 801df7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801df7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801df82:	ee17 2a90 	vmov	r2, s15
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801df8a:	4b1f      	ldr	r3, [pc, #124]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df8e:	0c1b      	lsrs	r3, r3, #16
 801df90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801df94:	ee07 3a90 	vmov	s15, r3
 801df98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dfa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dfa4:	edd7 6a07 	vldr	s13, [r7, #28]
 801dfa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dfac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dfb0:	ee17 2a90 	vmov	r2, s15
 801dfb4:	687b      	ldr	r3, [r7, #4]
 801dfb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801dfb8:	4b13      	ldr	r3, [pc, #76]	; (801e008 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfbc:	0e1b      	lsrs	r3, r3, #24
 801dfbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dfc2:	ee07 3a90 	vmov	s15, r3
 801dfc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dfca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dfce:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dfd2:	edd7 6a07 	vldr	s13, [r7, #28]
 801dfd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dfda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dfde:	ee17 2a90 	vmov	r2, s15
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801dfe6:	e008      	b.n	801dffa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	2200      	movs	r2, #0
 801dfec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801dfee:	687b      	ldr	r3, [r7, #4]
 801dff0:	2200      	movs	r2, #0
 801dff2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	2200      	movs	r2, #0
 801dff8:	609a      	str	r2, [r3, #8]
}
 801dffa:	bf00      	nop
 801dffc:	3724      	adds	r7, #36	; 0x24
 801dffe:	46bd      	mov	sp, r7
 801e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e004:	4770      	bx	lr
 801e006:	bf00      	nop
 801e008:	58024400 	.word	0x58024400
 801e00c:	03d09000 	.word	0x03d09000
 801e010:	46000000 	.word	0x46000000
 801e014:	4c742400 	.word	0x4c742400
 801e018:	4a742400 	.word	0x4a742400
 801e01c:	4af42400 	.word	0x4af42400

0801e020 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801e020:	b480      	push	{r7}
 801e022:	b089      	sub	sp, #36	; 0x24
 801e024:	af00      	add	r7, sp, #0
 801e026:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e028:	4ba0      	ldr	r3, [pc, #640]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e02c:	f003 0303 	and.w	r3, r3, #3
 801e030:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801e032:	4b9e      	ldr	r3, [pc, #632]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e036:	091b      	lsrs	r3, r3, #4
 801e038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e03c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801e03e:	4b9b      	ldr	r3, [pc, #620]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e042:	f003 0301 	and.w	r3, r3, #1
 801e046:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801e048:	4b98      	ldr	r3, [pc, #608]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e04c:	08db      	lsrs	r3, r3, #3
 801e04e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e052:	693a      	ldr	r2, [r7, #16]
 801e054:	fb02 f303 	mul.w	r3, r2, r3
 801e058:	ee07 3a90 	vmov	s15, r3
 801e05c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e060:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801e064:	697b      	ldr	r3, [r7, #20]
 801e066:	2b00      	cmp	r3, #0
 801e068:	f000 8111 	beq.w	801e28e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801e06c:	69bb      	ldr	r3, [r7, #24]
 801e06e:	2b02      	cmp	r3, #2
 801e070:	f000 8083 	beq.w	801e17a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801e074:	69bb      	ldr	r3, [r7, #24]
 801e076:	2b02      	cmp	r3, #2
 801e078:	f200 80a1 	bhi.w	801e1be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801e07c:	69bb      	ldr	r3, [r7, #24]
 801e07e:	2b00      	cmp	r3, #0
 801e080:	d003      	beq.n	801e08a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801e082:	69bb      	ldr	r3, [r7, #24]
 801e084:	2b01      	cmp	r3, #1
 801e086:	d056      	beq.n	801e136 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801e088:	e099      	b.n	801e1be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e08a:	4b88      	ldr	r3, [pc, #544]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	f003 0320 	and.w	r3, r3, #32
 801e092:	2b00      	cmp	r3, #0
 801e094:	d02d      	beq.n	801e0f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e096:	4b85      	ldr	r3, [pc, #532]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e098:	681b      	ldr	r3, [r3, #0]
 801e09a:	08db      	lsrs	r3, r3, #3
 801e09c:	f003 0303 	and.w	r3, r3, #3
 801e0a0:	4a83      	ldr	r2, [pc, #524]	; (801e2b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801e0a2:	fa22 f303 	lsr.w	r3, r2, r3
 801e0a6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e0a8:	68bb      	ldr	r3, [r7, #8]
 801e0aa:	ee07 3a90 	vmov	s15, r3
 801e0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e0b2:	697b      	ldr	r3, [r7, #20]
 801e0b4:	ee07 3a90 	vmov	s15, r3
 801e0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e0bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e0c0:	4b7a      	ldr	r3, [pc, #488]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e0c8:	ee07 3a90 	vmov	s15, r3
 801e0cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e0d0:	ed97 6a03 	vldr	s12, [r7, #12]
 801e0d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 801e2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e0d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e0dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e0e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e0e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e0e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e0ec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e0f0:	e087      	b.n	801e202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e0f2:	697b      	ldr	r3, [r7, #20]
 801e0f4:	ee07 3a90 	vmov	s15, r3
 801e0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e0fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801e2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e104:	4b69      	ldr	r3, [pc, #420]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e10c:	ee07 3a90 	vmov	s15, r3
 801e110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e114:	ed97 6a03 	vldr	s12, [r7, #12]
 801e118:	eddf 5a66 	vldr	s11, [pc, #408]	; 801e2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e11c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e12c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e130:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e134:	e065      	b.n	801e202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e136:	697b      	ldr	r3, [r7, #20]
 801e138:	ee07 3a90 	vmov	s15, r3
 801e13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e140:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801e2bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801e144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e148:	4b58      	ldr	r3, [pc, #352]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e150:	ee07 3a90 	vmov	s15, r3
 801e154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e158:	ed97 6a03 	vldr	s12, [r7, #12]
 801e15c:	eddf 5a55 	vldr	s11, [pc, #340]	; 801e2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e16c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e170:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e174:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e178:	e043      	b.n	801e202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e17a:	697b      	ldr	r3, [r7, #20]
 801e17c:	ee07 3a90 	vmov	s15, r3
 801e180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e184:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801e2c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801e188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e18c:	4b47      	ldr	r3, [pc, #284]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e194:	ee07 3a90 	vmov	s15, r3
 801e198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e19c:	ed97 6a03 	vldr	s12, [r7, #12]
 801e1a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 801e2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e1a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e1a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e1ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e1b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e1bc:	e021      	b.n	801e202 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e1be:	697b      	ldr	r3, [r7, #20]
 801e1c0:	ee07 3a90 	vmov	s15, r3
 801e1c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1c8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801e2b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e1cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e1d0:	4b36      	ldr	r3, [pc, #216]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e1d8:	ee07 3a90 	vmov	s15, r3
 801e1dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e1e0:	ed97 6a03 	vldr	s12, [r7, #12]
 801e1e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 801e2b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e1e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e1ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e1f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e1f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e1f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e200:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801e202:	4b2a      	ldr	r3, [pc, #168]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e206:	0a5b      	lsrs	r3, r3, #9
 801e208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e20c:	ee07 3a90 	vmov	s15, r3
 801e210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e218:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e21c:	edd7 6a07 	vldr	s13, [r7, #28]
 801e220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e228:	ee17 2a90 	vmov	r2, s15
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801e230:	4b1e      	ldr	r3, [pc, #120]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e234:	0c1b      	lsrs	r3, r3, #16
 801e236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e23a:	ee07 3a90 	vmov	s15, r3
 801e23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e246:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e24a:	edd7 6a07 	vldr	s13, [r7, #28]
 801e24e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e256:	ee17 2a90 	vmov	r2, s15
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801e25e:	4b13      	ldr	r3, [pc, #76]	; (801e2ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e262:	0e1b      	lsrs	r3, r3, #24
 801e264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e268:	ee07 3a90 	vmov	s15, r3
 801e26c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e274:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e278:	edd7 6a07 	vldr	s13, [r7, #28]
 801e27c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e284:	ee17 2a90 	vmov	r2, s15
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801e28c:	e008      	b.n	801e2a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	2200      	movs	r2, #0
 801e292:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	2200      	movs	r2, #0
 801e298:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	2200      	movs	r2, #0
 801e29e:	609a      	str	r2, [r3, #8]
}
 801e2a0:	bf00      	nop
 801e2a2:	3724      	adds	r7, #36	; 0x24
 801e2a4:	46bd      	mov	sp, r7
 801e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2aa:	4770      	bx	lr
 801e2ac:	58024400 	.word	0x58024400
 801e2b0:	03d09000 	.word	0x03d09000
 801e2b4:	46000000 	.word	0x46000000
 801e2b8:	4c742400 	.word	0x4c742400
 801e2bc:	4a742400 	.word	0x4a742400
 801e2c0:	4af42400 	.word	0x4af42400

0801e2c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801e2c4:	b580      	push	{r7, lr}
 801e2c6:	b084      	sub	sp, #16
 801e2c8:	af00      	add	r7, sp, #0
 801e2ca:	6078      	str	r0, [r7, #4]
 801e2cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e2ce:	2300      	movs	r3, #0
 801e2d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e2d2:	4b53      	ldr	r3, [pc, #332]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e2d6:	f003 0303 	and.w	r3, r3, #3
 801e2da:	2b03      	cmp	r3, #3
 801e2dc:	d101      	bne.n	801e2e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801e2de:	2301      	movs	r3, #1
 801e2e0:	e099      	b.n	801e416 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801e2e2:	4b4f      	ldr	r3, [pc, #316]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	4a4e      	ldr	r2, [pc, #312]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e2e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801e2ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e2ee:	f7f7 f81d 	bl	801532c <HAL_GetTick>
 801e2f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e2f4:	e008      	b.n	801e308 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e2f6:	f7f7 f819 	bl	801532c <HAL_GetTick>
 801e2fa:	4602      	mov	r2, r0
 801e2fc:	68bb      	ldr	r3, [r7, #8]
 801e2fe:	1ad3      	subs	r3, r2, r3
 801e300:	2b02      	cmp	r3, #2
 801e302:	d901      	bls.n	801e308 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e304:	2303      	movs	r3, #3
 801e306:	e086      	b.n	801e416 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e308:	4b45      	ldr	r3, [pc, #276]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e310:	2b00      	cmp	r3, #0
 801e312:	d1f0      	bne.n	801e2f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801e314:	4b42      	ldr	r3, [pc, #264]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e318:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801e31c:	687b      	ldr	r3, [r7, #4]
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	031b      	lsls	r3, r3, #12
 801e322:	493f      	ldr	r1, [pc, #252]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e324:	4313      	orrs	r3, r2
 801e326:	628b      	str	r3, [r1, #40]	; 0x28
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	685b      	ldr	r3, [r3, #4]
 801e32c:	3b01      	subs	r3, #1
 801e32e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	689b      	ldr	r3, [r3, #8]
 801e336:	3b01      	subs	r3, #1
 801e338:	025b      	lsls	r3, r3, #9
 801e33a:	b29b      	uxth	r3, r3
 801e33c:	431a      	orrs	r2, r3
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	68db      	ldr	r3, [r3, #12]
 801e342:	3b01      	subs	r3, #1
 801e344:	041b      	lsls	r3, r3, #16
 801e346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e34a:	431a      	orrs	r2, r3
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	691b      	ldr	r3, [r3, #16]
 801e350:	3b01      	subs	r3, #1
 801e352:	061b      	lsls	r3, r3, #24
 801e354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e358:	4931      	ldr	r1, [pc, #196]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e35a:	4313      	orrs	r3, r2
 801e35c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801e35e:	4b30      	ldr	r3, [pc, #192]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e362:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	695b      	ldr	r3, [r3, #20]
 801e36a:	492d      	ldr	r1, [pc, #180]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e36c:	4313      	orrs	r3, r2
 801e36e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801e370:	4b2b      	ldr	r3, [pc, #172]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e374:	f023 0220 	bic.w	r2, r3, #32
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	699b      	ldr	r3, [r3, #24]
 801e37c:	4928      	ldr	r1, [pc, #160]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e37e:	4313      	orrs	r3, r2
 801e380:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801e382:	4b27      	ldr	r3, [pc, #156]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e386:	4a26      	ldr	r2, [pc, #152]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e388:	f023 0310 	bic.w	r3, r3, #16
 801e38c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801e38e:	4b24      	ldr	r3, [pc, #144]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e392:	4b24      	ldr	r3, [pc, #144]	; (801e424 <RCCEx_PLL2_Config+0x160>)
 801e394:	4013      	ands	r3, r2
 801e396:	687a      	ldr	r2, [r7, #4]
 801e398:	69d2      	ldr	r2, [r2, #28]
 801e39a:	00d2      	lsls	r2, r2, #3
 801e39c:	4920      	ldr	r1, [pc, #128]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e39e:	4313      	orrs	r3, r2
 801e3a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801e3a2:	4b1f      	ldr	r3, [pc, #124]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3a6:	4a1e      	ldr	r2, [pc, #120]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e3a8:	f043 0310 	orr.w	r3, r3, #16
 801e3ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e3ae:	683b      	ldr	r3, [r7, #0]
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	d106      	bne.n	801e3c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801e3b4:	4b1a      	ldr	r3, [pc, #104]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3b8:	4a19      	ldr	r2, [pc, #100]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e3ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e3be:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e3c0:	e00f      	b.n	801e3e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e3c2:	683b      	ldr	r3, [r7, #0]
 801e3c4:	2b01      	cmp	r3, #1
 801e3c6:	d106      	bne.n	801e3d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801e3c8:	4b15      	ldr	r3, [pc, #84]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3cc:	4a14      	ldr	r2, [pc, #80]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e3ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e3d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e3d4:	e005      	b.n	801e3e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801e3d6:	4b12      	ldr	r3, [pc, #72]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3da:	4a11      	ldr	r2, [pc, #68]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e3dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801e3e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801e3e2:	4b0f      	ldr	r3, [pc, #60]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e3e4:	681b      	ldr	r3, [r3, #0]
 801e3e6:	4a0e      	ldr	r2, [pc, #56]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e3e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801e3ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e3ee:	f7f6 ff9d 	bl	801532c <HAL_GetTick>
 801e3f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e3f4:	e008      	b.n	801e408 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e3f6:	f7f6 ff99 	bl	801532c <HAL_GetTick>
 801e3fa:	4602      	mov	r2, r0
 801e3fc:	68bb      	ldr	r3, [r7, #8]
 801e3fe:	1ad3      	subs	r3, r2, r3
 801e400:	2b02      	cmp	r3, #2
 801e402:	d901      	bls.n	801e408 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e404:	2303      	movs	r3, #3
 801e406:	e006      	b.n	801e416 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e408:	4b05      	ldr	r3, [pc, #20]	; (801e420 <RCCEx_PLL2_Config+0x15c>)
 801e40a:	681b      	ldr	r3, [r3, #0]
 801e40c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e410:	2b00      	cmp	r3, #0
 801e412:	d0f0      	beq.n	801e3f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801e414:	7bfb      	ldrb	r3, [r7, #15]
}
 801e416:	4618      	mov	r0, r3
 801e418:	3710      	adds	r7, #16
 801e41a:	46bd      	mov	sp, r7
 801e41c:	bd80      	pop	{r7, pc}
 801e41e:	bf00      	nop
 801e420:	58024400 	.word	0x58024400
 801e424:	ffff0007 	.word	0xffff0007

0801e428 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801e428:	b580      	push	{r7, lr}
 801e42a:	b084      	sub	sp, #16
 801e42c:	af00      	add	r7, sp, #0
 801e42e:	6078      	str	r0, [r7, #4]
 801e430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e432:	2300      	movs	r3, #0
 801e434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e436:	4b53      	ldr	r3, [pc, #332]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e43a:	f003 0303 	and.w	r3, r3, #3
 801e43e:	2b03      	cmp	r3, #3
 801e440:	d101      	bne.n	801e446 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801e442:	2301      	movs	r3, #1
 801e444:	e099      	b.n	801e57a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801e446:	4b4f      	ldr	r3, [pc, #316]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	4a4e      	ldr	r2, [pc, #312]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e44c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e452:	f7f6 ff6b 	bl	801532c <HAL_GetTick>
 801e456:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e458:	e008      	b.n	801e46c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e45a:	f7f6 ff67 	bl	801532c <HAL_GetTick>
 801e45e:	4602      	mov	r2, r0
 801e460:	68bb      	ldr	r3, [r7, #8]
 801e462:	1ad3      	subs	r3, r2, r3
 801e464:	2b02      	cmp	r3, #2
 801e466:	d901      	bls.n	801e46c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e468:	2303      	movs	r3, #3
 801e46a:	e086      	b.n	801e57a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e46c:	4b45      	ldr	r3, [pc, #276]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e474:	2b00      	cmp	r3, #0
 801e476:	d1f0      	bne.n	801e45a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801e478:	4b42      	ldr	r3, [pc, #264]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e47c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	051b      	lsls	r3, r3, #20
 801e486:	493f      	ldr	r1, [pc, #252]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e488:	4313      	orrs	r3, r2
 801e48a:	628b      	str	r3, [r1, #40]	; 0x28
 801e48c:	687b      	ldr	r3, [r7, #4]
 801e48e:	685b      	ldr	r3, [r3, #4]
 801e490:	3b01      	subs	r3, #1
 801e492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	689b      	ldr	r3, [r3, #8]
 801e49a:	3b01      	subs	r3, #1
 801e49c:	025b      	lsls	r3, r3, #9
 801e49e:	b29b      	uxth	r3, r3
 801e4a0:	431a      	orrs	r2, r3
 801e4a2:	687b      	ldr	r3, [r7, #4]
 801e4a4:	68db      	ldr	r3, [r3, #12]
 801e4a6:	3b01      	subs	r3, #1
 801e4a8:	041b      	lsls	r3, r3, #16
 801e4aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e4ae:	431a      	orrs	r2, r3
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	691b      	ldr	r3, [r3, #16]
 801e4b4:	3b01      	subs	r3, #1
 801e4b6:	061b      	lsls	r3, r3, #24
 801e4b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e4bc:	4931      	ldr	r1, [pc, #196]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e4be:	4313      	orrs	r3, r2
 801e4c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801e4c2:	4b30      	ldr	r3, [pc, #192]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	695b      	ldr	r3, [r3, #20]
 801e4ce:	492d      	ldr	r1, [pc, #180]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e4d0:	4313      	orrs	r3, r2
 801e4d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801e4d4:	4b2b      	ldr	r3, [pc, #172]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	699b      	ldr	r3, [r3, #24]
 801e4e0:	4928      	ldr	r1, [pc, #160]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e4e2:	4313      	orrs	r3, r2
 801e4e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801e4e6:	4b27      	ldr	r3, [pc, #156]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4ea:	4a26      	ldr	r2, [pc, #152]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e4ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e4f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801e4f2:	4b24      	ldr	r3, [pc, #144]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e4f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e4f6:	4b24      	ldr	r3, [pc, #144]	; (801e588 <RCCEx_PLL3_Config+0x160>)
 801e4f8:	4013      	ands	r3, r2
 801e4fa:	687a      	ldr	r2, [r7, #4]
 801e4fc:	69d2      	ldr	r2, [r2, #28]
 801e4fe:	00d2      	lsls	r2, r2, #3
 801e500:	4920      	ldr	r1, [pc, #128]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e502:	4313      	orrs	r3, r2
 801e504:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801e506:	4b1f      	ldr	r3, [pc, #124]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e50a:	4a1e      	ldr	r2, [pc, #120]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e50c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e512:	683b      	ldr	r3, [r7, #0]
 801e514:	2b00      	cmp	r3, #0
 801e516:	d106      	bne.n	801e526 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801e518:	4b1a      	ldr	r3, [pc, #104]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e51c:	4a19      	ldr	r2, [pc, #100]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e51e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801e522:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e524:	e00f      	b.n	801e546 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e526:	683b      	ldr	r3, [r7, #0]
 801e528:	2b01      	cmp	r3, #1
 801e52a:	d106      	bne.n	801e53a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801e52c:	4b15      	ldr	r3, [pc, #84]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e530:	4a14      	ldr	r2, [pc, #80]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e532:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801e536:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e538:	e005      	b.n	801e546 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801e53a:	4b12      	ldr	r3, [pc, #72]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e53e:	4a11      	ldr	r2, [pc, #68]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e544:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801e546:	4b0f      	ldr	r3, [pc, #60]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e548:	681b      	ldr	r3, [r3, #0]
 801e54a:	4a0e      	ldr	r2, [pc, #56]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e54c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e552:	f7f6 feeb 	bl	801532c <HAL_GetTick>
 801e556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e558:	e008      	b.n	801e56c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e55a:	f7f6 fee7 	bl	801532c <HAL_GetTick>
 801e55e:	4602      	mov	r2, r0
 801e560:	68bb      	ldr	r3, [r7, #8]
 801e562:	1ad3      	subs	r3, r2, r3
 801e564:	2b02      	cmp	r3, #2
 801e566:	d901      	bls.n	801e56c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e568:	2303      	movs	r3, #3
 801e56a:	e006      	b.n	801e57a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e56c:	4b05      	ldr	r3, [pc, #20]	; (801e584 <RCCEx_PLL3_Config+0x15c>)
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e574:	2b00      	cmp	r3, #0
 801e576:	d0f0      	beq.n	801e55a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801e578:	7bfb      	ldrb	r3, [r7, #15]
}
 801e57a:	4618      	mov	r0, r3
 801e57c:	3710      	adds	r7, #16
 801e57e:	46bd      	mov	sp, r7
 801e580:	bd80      	pop	{r7, pc}
 801e582:	bf00      	nop
 801e584:	58024400 	.word	0x58024400
 801e588:	ffff0007 	.word	0xffff0007

0801e58c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e58c:	b580      	push	{r7, lr}
 801e58e:	b082      	sub	sp, #8
 801e590:	af00      	add	r7, sp, #0
 801e592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	2b00      	cmp	r3, #0
 801e598:	d101      	bne.n	801e59e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e59a:	2301      	movs	r3, #1
 801e59c:	e049      	b.n	801e632 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e5a4:	b2db      	uxtb	r3, r3
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d106      	bne.n	801e5b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801e5b2:	6878      	ldr	r0, [r7, #4]
 801e5b4:	f7f6 f8ce 	bl	8014754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	2202      	movs	r2, #2
 801e5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	681a      	ldr	r2, [r3, #0]
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	3304      	adds	r3, #4
 801e5c8:	4619      	mov	r1, r3
 801e5ca:	4610      	mov	r0, r2
 801e5cc:	f001 f8d0 	bl	801f770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	2201      	movs	r2, #1
 801e5d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	2201      	movs	r2, #1
 801e5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e5e0:	687b      	ldr	r3, [r7, #4]
 801e5e2:	2201      	movs	r2, #1
 801e5e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e5e8:	687b      	ldr	r3, [r7, #4]
 801e5ea:	2201      	movs	r2, #1
 801e5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e5f0:	687b      	ldr	r3, [r7, #4]
 801e5f2:	2201      	movs	r2, #1
 801e5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e5f8:	687b      	ldr	r3, [r7, #4]
 801e5fa:	2201      	movs	r2, #1
 801e5fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	2201      	movs	r2, #1
 801e604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	2201      	movs	r2, #1
 801e60c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	2201      	movs	r2, #1
 801e614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	2201      	movs	r2, #1
 801e61c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	2201      	movs	r2, #1
 801e624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e628:	687b      	ldr	r3, [r7, #4]
 801e62a:	2201      	movs	r2, #1
 801e62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e630:	2300      	movs	r3, #0
}
 801e632:	4618      	mov	r0, r3
 801e634:	3708      	adds	r7, #8
 801e636:	46bd      	mov	sp, r7
 801e638:	bd80      	pop	{r7, pc}
	...

0801e63c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801e63c:	b480      	push	{r7}
 801e63e:	b085      	sub	sp, #20
 801e640:	af00      	add	r7, sp, #0
 801e642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e64a:	b2db      	uxtb	r3, r3
 801e64c:	2b01      	cmp	r3, #1
 801e64e:	d001      	beq.n	801e654 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801e650:	2301      	movs	r3, #1
 801e652:	e056      	b.n	801e702 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	2202      	movs	r2, #2
 801e658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	681b      	ldr	r3, [r3, #0]
 801e660:	4a2b      	ldr	r2, [pc, #172]	; (801e710 <HAL_TIM_Base_Start+0xd4>)
 801e662:	4293      	cmp	r3, r2
 801e664:	d02c      	beq.n	801e6c0 <HAL_TIM_Base_Start+0x84>
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e66e:	d027      	beq.n	801e6c0 <HAL_TIM_Base_Start+0x84>
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	4a27      	ldr	r2, [pc, #156]	; (801e714 <HAL_TIM_Base_Start+0xd8>)
 801e676:	4293      	cmp	r3, r2
 801e678:	d022      	beq.n	801e6c0 <HAL_TIM_Base_Start+0x84>
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	681b      	ldr	r3, [r3, #0]
 801e67e:	4a26      	ldr	r2, [pc, #152]	; (801e718 <HAL_TIM_Base_Start+0xdc>)
 801e680:	4293      	cmp	r3, r2
 801e682:	d01d      	beq.n	801e6c0 <HAL_TIM_Base_Start+0x84>
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	4a24      	ldr	r2, [pc, #144]	; (801e71c <HAL_TIM_Base_Start+0xe0>)
 801e68a:	4293      	cmp	r3, r2
 801e68c:	d018      	beq.n	801e6c0 <HAL_TIM_Base_Start+0x84>
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	681b      	ldr	r3, [r3, #0]
 801e692:	4a23      	ldr	r2, [pc, #140]	; (801e720 <HAL_TIM_Base_Start+0xe4>)
 801e694:	4293      	cmp	r3, r2
 801e696:	d013      	beq.n	801e6c0 <HAL_TIM_Base_Start+0x84>
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	681b      	ldr	r3, [r3, #0]
 801e69c:	4a21      	ldr	r2, [pc, #132]	; (801e724 <HAL_TIM_Base_Start+0xe8>)
 801e69e:	4293      	cmp	r3, r2
 801e6a0:	d00e      	beq.n	801e6c0 <HAL_TIM_Base_Start+0x84>
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	4a20      	ldr	r2, [pc, #128]	; (801e728 <HAL_TIM_Base_Start+0xec>)
 801e6a8:	4293      	cmp	r3, r2
 801e6aa:	d009      	beq.n	801e6c0 <HAL_TIM_Base_Start+0x84>
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	4a1e      	ldr	r2, [pc, #120]	; (801e72c <HAL_TIM_Base_Start+0xf0>)
 801e6b2:	4293      	cmp	r3, r2
 801e6b4:	d004      	beq.n	801e6c0 <HAL_TIM_Base_Start+0x84>
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	681b      	ldr	r3, [r3, #0]
 801e6ba:	4a1d      	ldr	r2, [pc, #116]	; (801e730 <HAL_TIM_Base_Start+0xf4>)
 801e6bc:	4293      	cmp	r3, r2
 801e6be:	d115      	bne.n	801e6ec <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	681b      	ldr	r3, [r3, #0]
 801e6c4:	689a      	ldr	r2, [r3, #8]
 801e6c6:	4b1b      	ldr	r3, [pc, #108]	; (801e734 <HAL_TIM_Base_Start+0xf8>)
 801e6c8:	4013      	ands	r3, r2
 801e6ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e6cc:	68fb      	ldr	r3, [r7, #12]
 801e6ce:	2b06      	cmp	r3, #6
 801e6d0:	d015      	beq.n	801e6fe <HAL_TIM_Base_Start+0xc2>
 801e6d2:	68fb      	ldr	r3, [r7, #12]
 801e6d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e6d8:	d011      	beq.n	801e6fe <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	681b      	ldr	r3, [r3, #0]
 801e6de:	681a      	ldr	r2, [r3, #0]
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	681b      	ldr	r3, [r3, #0]
 801e6e4:	f042 0201 	orr.w	r2, r2, #1
 801e6e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e6ea:	e008      	b.n	801e6fe <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	681b      	ldr	r3, [r3, #0]
 801e6f0:	681a      	ldr	r2, [r3, #0]
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	681b      	ldr	r3, [r3, #0]
 801e6f6:	f042 0201 	orr.w	r2, r2, #1
 801e6fa:	601a      	str	r2, [r3, #0]
 801e6fc:	e000      	b.n	801e700 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e6fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e700:	2300      	movs	r3, #0
}
 801e702:	4618      	mov	r0, r3
 801e704:	3714      	adds	r7, #20
 801e706:	46bd      	mov	sp, r7
 801e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e70c:	4770      	bx	lr
 801e70e:	bf00      	nop
 801e710:	40010000 	.word	0x40010000
 801e714:	40000400 	.word	0x40000400
 801e718:	40000800 	.word	0x40000800
 801e71c:	40000c00 	.word	0x40000c00
 801e720:	40010400 	.word	0x40010400
 801e724:	40001800 	.word	0x40001800
 801e728:	40014000 	.word	0x40014000
 801e72c:	4000e000 	.word	0x4000e000
 801e730:	4000e400 	.word	0x4000e400
 801e734:	00010007 	.word	0x00010007

0801e738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e738:	b480      	push	{r7}
 801e73a:	b085      	sub	sp, #20
 801e73c:	af00      	add	r7, sp, #0
 801e73e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e746:	b2db      	uxtb	r3, r3
 801e748:	2b01      	cmp	r3, #1
 801e74a:	d001      	beq.n	801e750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e74c:	2301      	movs	r3, #1
 801e74e:	e05e      	b.n	801e80e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	2202      	movs	r2, #2
 801e754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	681b      	ldr	r3, [r3, #0]
 801e75c:	68da      	ldr	r2, [r3, #12]
 801e75e:	687b      	ldr	r3, [r7, #4]
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	f042 0201 	orr.w	r2, r2, #1
 801e766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	681b      	ldr	r3, [r3, #0]
 801e76c:	4a2b      	ldr	r2, [pc, #172]	; (801e81c <HAL_TIM_Base_Start_IT+0xe4>)
 801e76e:	4293      	cmp	r3, r2
 801e770:	d02c      	beq.n	801e7cc <HAL_TIM_Base_Start_IT+0x94>
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	681b      	ldr	r3, [r3, #0]
 801e776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e77a:	d027      	beq.n	801e7cc <HAL_TIM_Base_Start_IT+0x94>
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	4a27      	ldr	r2, [pc, #156]	; (801e820 <HAL_TIM_Base_Start_IT+0xe8>)
 801e782:	4293      	cmp	r3, r2
 801e784:	d022      	beq.n	801e7cc <HAL_TIM_Base_Start_IT+0x94>
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	681b      	ldr	r3, [r3, #0]
 801e78a:	4a26      	ldr	r2, [pc, #152]	; (801e824 <HAL_TIM_Base_Start_IT+0xec>)
 801e78c:	4293      	cmp	r3, r2
 801e78e:	d01d      	beq.n	801e7cc <HAL_TIM_Base_Start_IT+0x94>
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	681b      	ldr	r3, [r3, #0]
 801e794:	4a24      	ldr	r2, [pc, #144]	; (801e828 <HAL_TIM_Base_Start_IT+0xf0>)
 801e796:	4293      	cmp	r3, r2
 801e798:	d018      	beq.n	801e7cc <HAL_TIM_Base_Start_IT+0x94>
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	681b      	ldr	r3, [r3, #0]
 801e79e:	4a23      	ldr	r2, [pc, #140]	; (801e82c <HAL_TIM_Base_Start_IT+0xf4>)
 801e7a0:	4293      	cmp	r3, r2
 801e7a2:	d013      	beq.n	801e7cc <HAL_TIM_Base_Start_IT+0x94>
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	681b      	ldr	r3, [r3, #0]
 801e7a8:	4a21      	ldr	r2, [pc, #132]	; (801e830 <HAL_TIM_Base_Start_IT+0xf8>)
 801e7aa:	4293      	cmp	r3, r2
 801e7ac:	d00e      	beq.n	801e7cc <HAL_TIM_Base_Start_IT+0x94>
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	681b      	ldr	r3, [r3, #0]
 801e7b2:	4a20      	ldr	r2, [pc, #128]	; (801e834 <HAL_TIM_Base_Start_IT+0xfc>)
 801e7b4:	4293      	cmp	r3, r2
 801e7b6:	d009      	beq.n	801e7cc <HAL_TIM_Base_Start_IT+0x94>
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	4a1e      	ldr	r2, [pc, #120]	; (801e838 <HAL_TIM_Base_Start_IT+0x100>)
 801e7be:	4293      	cmp	r3, r2
 801e7c0:	d004      	beq.n	801e7cc <HAL_TIM_Base_Start_IT+0x94>
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	4a1d      	ldr	r2, [pc, #116]	; (801e83c <HAL_TIM_Base_Start_IT+0x104>)
 801e7c8:	4293      	cmp	r3, r2
 801e7ca:	d115      	bne.n	801e7f8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	681b      	ldr	r3, [r3, #0]
 801e7d0:	689a      	ldr	r2, [r3, #8]
 801e7d2:	4b1b      	ldr	r3, [pc, #108]	; (801e840 <HAL_TIM_Base_Start_IT+0x108>)
 801e7d4:	4013      	ands	r3, r2
 801e7d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e7d8:	68fb      	ldr	r3, [r7, #12]
 801e7da:	2b06      	cmp	r3, #6
 801e7dc:	d015      	beq.n	801e80a <HAL_TIM_Base_Start_IT+0xd2>
 801e7de:	68fb      	ldr	r3, [r7, #12]
 801e7e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e7e4:	d011      	beq.n	801e80a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	681b      	ldr	r3, [r3, #0]
 801e7ea:	681a      	ldr	r2, [r3, #0]
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	681b      	ldr	r3, [r3, #0]
 801e7f0:	f042 0201 	orr.w	r2, r2, #1
 801e7f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e7f6:	e008      	b.n	801e80a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	681b      	ldr	r3, [r3, #0]
 801e7fc:	681a      	ldr	r2, [r3, #0]
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	681b      	ldr	r3, [r3, #0]
 801e802:	f042 0201 	orr.w	r2, r2, #1
 801e806:	601a      	str	r2, [r3, #0]
 801e808:	e000      	b.n	801e80c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e80a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e80c:	2300      	movs	r3, #0
}
 801e80e:	4618      	mov	r0, r3
 801e810:	3714      	adds	r7, #20
 801e812:	46bd      	mov	sp, r7
 801e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e818:	4770      	bx	lr
 801e81a:	bf00      	nop
 801e81c:	40010000 	.word	0x40010000
 801e820:	40000400 	.word	0x40000400
 801e824:	40000800 	.word	0x40000800
 801e828:	40000c00 	.word	0x40000c00
 801e82c:	40010400 	.word	0x40010400
 801e830:	40001800 	.word	0x40001800
 801e834:	40014000 	.word	0x40014000
 801e838:	4000e000 	.word	0x4000e000
 801e83c:	4000e400 	.word	0x4000e400
 801e840:	00010007 	.word	0x00010007

0801e844 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801e844:	b480      	push	{r7}
 801e846:	b083      	sub	sp, #12
 801e848:	af00      	add	r7, sp, #0
 801e84a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	681b      	ldr	r3, [r3, #0]
 801e850:	68da      	ldr	r2, [r3, #12]
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	f022 0201 	bic.w	r2, r2, #1
 801e85a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	6a1a      	ldr	r2, [r3, #32]
 801e862:	f241 1311 	movw	r3, #4369	; 0x1111
 801e866:	4013      	ands	r3, r2
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d10f      	bne.n	801e88c <HAL_TIM_Base_Stop_IT+0x48>
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	681b      	ldr	r3, [r3, #0]
 801e870:	6a1a      	ldr	r2, [r3, #32]
 801e872:	f240 4344 	movw	r3, #1092	; 0x444
 801e876:	4013      	ands	r3, r2
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d107      	bne.n	801e88c <HAL_TIM_Base_Stop_IT+0x48>
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	681a      	ldr	r2, [r3, #0]
 801e882:	687b      	ldr	r3, [r7, #4]
 801e884:	681b      	ldr	r3, [r3, #0]
 801e886:	f022 0201 	bic.w	r2, r2, #1
 801e88a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801e88c:	687b      	ldr	r3, [r7, #4]
 801e88e:	2201      	movs	r2, #1
 801e890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801e894:	2300      	movs	r3, #0
}
 801e896:	4618      	mov	r0, r3
 801e898:	370c      	adds	r7, #12
 801e89a:	46bd      	mov	sp, r7
 801e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8a0:	4770      	bx	lr

0801e8a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801e8a2:	b580      	push	{r7, lr}
 801e8a4:	b082      	sub	sp, #8
 801e8a6:	af00      	add	r7, sp, #0
 801e8a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d101      	bne.n	801e8b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801e8b0:	2301      	movs	r3, #1
 801e8b2:	e049      	b.n	801e948 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e8ba:	b2db      	uxtb	r3, r3
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	d106      	bne.n	801e8ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e8c0:	687b      	ldr	r3, [r7, #4]
 801e8c2:	2200      	movs	r2, #0
 801e8c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801e8c8:	6878      	ldr	r0, [r7, #4]
 801e8ca:	f000 f841 	bl	801e950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	2202      	movs	r2, #2
 801e8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e8d6:	687b      	ldr	r3, [r7, #4]
 801e8d8:	681a      	ldr	r2, [r3, #0]
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	3304      	adds	r3, #4
 801e8de:	4619      	mov	r1, r3
 801e8e0:	4610      	mov	r0, r2
 801e8e2:	f000 ff45 	bl	801f770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e8e6:	687b      	ldr	r3, [r7, #4]
 801e8e8:	2201      	movs	r2, #1
 801e8ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	2201      	movs	r2, #1
 801e8f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	2201      	movs	r2, #1
 801e8fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	2201      	movs	r2, #1
 801e902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e906:	687b      	ldr	r3, [r7, #4]
 801e908:	2201      	movs	r2, #1
 801e90a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e90e:	687b      	ldr	r3, [r7, #4]
 801e910:	2201      	movs	r2, #1
 801e912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e916:	687b      	ldr	r3, [r7, #4]
 801e918:	2201      	movs	r2, #1
 801e91a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e91e:	687b      	ldr	r3, [r7, #4]
 801e920:	2201      	movs	r2, #1
 801e922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e926:	687b      	ldr	r3, [r7, #4]
 801e928:	2201      	movs	r2, #1
 801e92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e92e:	687b      	ldr	r3, [r7, #4]
 801e930:	2201      	movs	r2, #1
 801e932:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	2201      	movs	r2, #1
 801e93a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	2201      	movs	r2, #1
 801e942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e946:	2300      	movs	r3, #0
}
 801e948:	4618      	mov	r0, r3
 801e94a:	3708      	adds	r7, #8
 801e94c:	46bd      	mov	sp, r7
 801e94e:	bd80      	pop	{r7, pc}

0801e950 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801e950:	b480      	push	{r7}
 801e952:	b083      	sub	sp, #12
 801e954:	af00      	add	r7, sp, #0
 801e956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801e958:	bf00      	nop
 801e95a:	370c      	adds	r7, #12
 801e95c:	46bd      	mov	sp, r7
 801e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e962:	4770      	bx	lr

0801e964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e964:	b580      	push	{r7, lr}
 801e966:	b084      	sub	sp, #16
 801e968:	af00      	add	r7, sp, #0
 801e96a:	6078      	str	r0, [r7, #4]
 801e96c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801e96e:	683b      	ldr	r3, [r7, #0]
 801e970:	2b00      	cmp	r3, #0
 801e972:	d109      	bne.n	801e988 <HAL_TIM_PWM_Start+0x24>
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e97a:	b2db      	uxtb	r3, r3
 801e97c:	2b01      	cmp	r3, #1
 801e97e:	bf14      	ite	ne
 801e980:	2301      	movne	r3, #1
 801e982:	2300      	moveq	r3, #0
 801e984:	b2db      	uxtb	r3, r3
 801e986:	e03c      	b.n	801ea02 <HAL_TIM_PWM_Start+0x9e>
 801e988:	683b      	ldr	r3, [r7, #0]
 801e98a:	2b04      	cmp	r3, #4
 801e98c:	d109      	bne.n	801e9a2 <HAL_TIM_PWM_Start+0x3e>
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801e994:	b2db      	uxtb	r3, r3
 801e996:	2b01      	cmp	r3, #1
 801e998:	bf14      	ite	ne
 801e99a:	2301      	movne	r3, #1
 801e99c:	2300      	moveq	r3, #0
 801e99e:	b2db      	uxtb	r3, r3
 801e9a0:	e02f      	b.n	801ea02 <HAL_TIM_PWM_Start+0x9e>
 801e9a2:	683b      	ldr	r3, [r7, #0]
 801e9a4:	2b08      	cmp	r3, #8
 801e9a6:	d109      	bne.n	801e9bc <HAL_TIM_PWM_Start+0x58>
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e9ae:	b2db      	uxtb	r3, r3
 801e9b0:	2b01      	cmp	r3, #1
 801e9b2:	bf14      	ite	ne
 801e9b4:	2301      	movne	r3, #1
 801e9b6:	2300      	moveq	r3, #0
 801e9b8:	b2db      	uxtb	r3, r3
 801e9ba:	e022      	b.n	801ea02 <HAL_TIM_PWM_Start+0x9e>
 801e9bc:	683b      	ldr	r3, [r7, #0]
 801e9be:	2b0c      	cmp	r3, #12
 801e9c0:	d109      	bne.n	801e9d6 <HAL_TIM_PWM_Start+0x72>
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e9c8:	b2db      	uxtb	r3, r3
 801e9ca:	2b01      	cmp	r3, #1
 801e9cc:	bf14      	ite	ne
 801e9ce:	2301      	movne	r3, #1
 801e9d0:	2300      	moveq	r3, #0
 801e9d2:	b2db      	uxtb	r3, r3
 801e9d4:	e015      	b.n	801ea02 <HAL_TIM_PWM_Start+0x9e>
 801e9d6:	683b      	ldr	r3, [r7, #0]
 801e9d8:	2b10      	cmp	r3, #16
 801e9da:	d109      	bne.n	801e9f0 <HAL_TIM_PWM_Start+0x8c>
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e9e2:	b2db      	uxtb	r3, r3
 801e9e4:	2b01      	cmp	r3, #1
 801e9e6:	bf14      	ite	ne
 801e9e8:	2301      	movne	r3, #1
 801e9ea:	2300      	moveq	r3, #0
 801e9ec:	b2db      	uxtb	r3, r3
 801e9ee:	e008      	b.n	801ea02 <HAL_TIM_PWM_Start+0x9e>
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801e9f6:	b2db      	uxtb	r3, r3
 801e9f8:	2b01      	cmp	r3, #1
 801e9fa:	bf14      	ite	ne
 801e9fc:	2301      	movne	r3, #1
 801e9fe:	2300      	moveq	r3, #0
 801ea00:	b2db      	uxtb	r3, r3
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d001      	beq.n	801ea0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801ea06:	2301      	movs	r3, #1
 801ea08:	e0ab      	b.n	801eb62 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ea0a:	683b      	ldr	r3, [r7, #0]
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d104      	bne.n	801ea1a <HAL_TIM_PWM_Start+0xb6>
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	2202      	movs	r2, #2
 801ea14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ea18:	e023      	b.n	801ea62 <HAL_TIM_PWM_Start+0xfe>
 801ea1a:	683b      	ldr	r3, [r7, #0]
 801ea1c:	2b04      	cmp	r3, #4
 801ea1e:	d104      	bne.n	801ea2a <HAL_TIM_PWM_Start+0xc6>
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	2202      	movs	r2, #2
 801ea24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ea28:	e01b      	b.n	801ea62 <HAL_TIM_PWM_Start+0xfe>
 801ea2a:	683b      	ldr	r3, [r7, #0]
 801ea2c:	2b08      	cmp	r3, #8
 801ea2e:	d104      	bne.n	801ea3a <HAL_TIM_PWM_Start+0xd6>
 801ea30:	687b      	ldr	r3, [r7, #4]
 801ea32:	2202      	movs	r2, #2
 801ea34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ea38:	e013      	b.n	801ea62 <HAL_TIM_PWM_Start+0xfe>
 801ea3a:	683b      	ldr	r3, [r7, #0]
 801ea3c:	2b0c      	cmp	r3, #12
 801ea3e:	d104      	bne.n	801ea4a <HAL_TIM_PWM_Start+0xe6>
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	2202      	movs	r2, #2
 801ea44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ea48:	e00b      	b.n	801ea62 <HAL_TIM_PWM_Start+0xfe>
 801ea4a:	683b      	ldr	r3, [r7, #0]
 801ea4c:	2b10      	cmp	r3, #16
 801ea4e:	d104      	bne.n	801ea5a <HAL_TIM_PWM_Start+0xf6>
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	2202      	movs	r2, #2
 801ea54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ea58:	e003      	b.n	801ea62 <HAL_TIM_PWM_Start+0xfe>
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	2202      	movs	r2, #2
 801ea5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	2201      	movs	r2, #1
 801ea68:	6839      	ldr	r1, [r7, #0]
 801ea6a:	4618      	mov	r0, r3
 801ea6c:	f001 fbd0 	bl	8020210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	681b      	ldr	r3, [r3, #0]
 801ea74:	4a3d      	ldr	r2, [pc, #244]	; (801eb6c <HAL_TIM_PWM_Start+0x208>)
 801ea76:	4293      	cmp	r3, r2
 801ea78:	d013      	beq.n	801eaa2 <HAL_TIM_PWM_Start+0x13e>
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	681b      	ldr	r3, [r3, #0]
 801ea7e:	4a3c      	ldr	r2, [pc, #240]	; (801eb70 <HAL_TIM_PWM_Start+0x20c>)
 801ea80:	4293      	cmp	r3, r2
 801ea82:	d00e      	beq.n	801eaa2 <HAL_TIM_PWM_Start+0x13e>
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	681b      	ldr	r3, [r3, #0]
 801ea88:	4a3a      	ldr	r2, [pc, #232]	; (801eb74 <HAL_TIM_PWM_Start+0x210>)
 801ea8a:	4293      	cmp	r3, r2
 801ea8c:	d009      	beq.n	801eaa2 <HAL_TIM_PWM_Start+0x13e>
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	681b      	ldr	r3, [r3, #0]
 801ea92:	4a39      	ldr	r2, [pc, #228]	; (801eb78 <HAL_TIM_PWM_Start+0x214>)
 801ea94:	4293      	cmp	r3, r2
 801ea96:	d004      	beq.n	801eaa2 <HAL_TIM_PWM_Start+0x13e>
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	681b      	ldr	r3, [r3, #0]
 801ea9c:	4a37      	ldr	r2, [pc, #220]	; (801eb7c <HAL_TIM_PWM_Start+0x218>)
 801ea9e:	4293      	cmp	r3, r2
 801eaa0:	d101      	bne.n	801eaa6 <HAL_TIM_PWM_Start+0x142>
 801eaa2:	2301      	movs	r3, #1
 801eaa4:	e000      	b.n	801eaa8 <HAL_TIM_PWM_Start+0x144>
 801eaa6:	2300      	movs	r3, #0
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	d007      	beq.n	801eabc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	681b      	ldr	r3, [r3, #0]
 801eab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	681b      	ldr	r3, [r3, #0]
 801eab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801eaba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	681b      	ldr	r3, [r3, #0]
 801eac0:	4a2a      	ldr	r2, [pc, #168]	; (801eb6c <HAL_TIM_PWM_Start+0x208>)
 801eac2:	4293      	cmp	r3, r2
 801eac4:	d02c      	beq.n	801eb20 <HAL_TIM_PWM_Start+0x1bc>
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	681b      	ldr	r3, [r3, #0]
 801eaca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eace:	d027      	beq.n	801eb20 <HAL_TIM_PWM_Start+0x1bc>
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	681b      	ldr	r3, [r3, #0]
 801ead4:	4a2a      	ldr	r2, [pc, #168]	; (801eb80 <HAL_TIM_PWM_Start+0x21c>)
 801ead6:	4293      	cmp	r3, r2
 801ead8:	d022      	beq.n	801eb20 <HAL_TIM_PWM_Start+0x1bc>
 801eada:	687b      	ldr	r3, [r7, #4]
 801eadc:	681b      	ldr	r3, [r3, #0]
 801eade:	4a29      	ldr	r2, [pc, #164]	; (801eb84 <HAL_TIM_PWM_Start+0x220>)
 801eae0:	4293      	cmp	r3, r2
 801eae2:	d01d      	beq.n	801eb20 <HAL_TIM_PWM_Start+0x1bc>
 801eae4:	687b      	ldr	r3, [r7, #4]
 801eae6:	681b      	ldr	r3, [r3, #0]
 801eae8:	4a27      	ldr	r2, [pc, #156]	; (801eb88 <HAL_TIM_PWM_Start+0x224>)
 801eaea:	4293      	cmp	r3, r2
 801eaec:	d018      	beq.n	801eb20 <HAL_TIM_PWM_Start+0x1bc>
 801eaee:	687b      	ldr	r3, [r7, #4]
 801eaf0:	681b      	ldr	r3, [r3, #0]
 801eaf2:	4a1f      	ldr	r2, [pc, #124]	; (801eb70 <HAL_TIM_PWM_Start+0x20c>)
 801eaf4:	4293      	cmp	r3, r2
 801eaf6:	d013      	beq.n	801eb20 <HAL_TIM_PWM_Start+0x1bc>
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	4a23      	ldr	r2, [pc, #140]	; (801eb8c <HAL_TIM_PWM_Start+0x228>)
 801eafe:	4293      	cmp	r3, r2
 801eb00:	d00e      	beq.n	801eb20 <HAL_TIM_PWM_Start+0x1bc>
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	4a1b      	ldr	r2, [pc, #108]	; (801eb74 <HAL_TIM_PWM_Start+0x210>)
 801eb08:	4293      	cmp	r3, r2
 801eb0a:	d009      	beq.n	801eb20 <HAL_TIM_PWM_Start+0x1bc>
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	681b      	ldr	r3, [r3, #0]
 801eb10:	4a1f      	ldr	r2, [pc, #124]	; (801eb90 <HAL_TIM_PWM_Start+0x22c>)
 801eb12:	4293      	cmp	r3, r2
 801eb14:	d004      	beq.n	801eb20 <HAL_TIM_PWM_Start+0x1bc>
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	681b      	ldr	r3, [r3, #0]
 801eb1a:	4a1e      	ldr	r2, [pc, #120]	; (801eb94 <HAL_TIM_PWM_Start+0x230>)
 801eb1c:	4293      	cmp	r3, r2
 801eb1e:	d115      	bne.n	801eb4c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801eb20:	687b      	ldr	r3, [r7, #4]
 801eb22:	681b      	ldr	r3, [r3, #0]
 801eb24:	689a      	ldr	r2, [r3, #8]
 801eb26:	4b1c      	ldr	r3, [pc, #112]	; (801eb98 <HAL_TIM_PWM_Start+0x234>)
 801eb28:	4013      	ands	r3, r2
 801eb2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb2c:	68fb      	ldr	r3, [r7, #12]
 801eb2e:	2b06      	cmp	r3, #6
 801eb30:	d015      	beq.n	801eb5e <HAL_TIM_PWM_Start+0x1fa>
 801eb32:	68fb      	ldr	r3, [r7, #12]
 801eb34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eb38:	d011      	beq.n	801eb5e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	681b      	ldr	r3, [r3, #0]
 801eb3e:	681a      	ldr	r2, [r3, #0]
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	f042 0201 	orr.w	r2, r2, #1
 801eb48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb4a:	e008      	b.n	801eb5e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801eb4c:	687b      	ldr	r3, [r7, #4]
 801eb4e:	681b      	ldr	r3, [r3, #0]
 801eb50:	681a      	ldr	r2, [r3, #0]
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	681b      	ldr	r3, [r3, #0]
 801eb56:	f042 0201 	orr.w	r2, r2, #1
 801eb5a:	601a      	str	r2, [r3, #0]
 801eb5c:	e000      	b.n	801eb60 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801eb60:	2300      	movs	r3, #0
}
 801eb62:	4618      	mov	r0, r3
 801eb64:	3710      	adds	r7, #16
 801eb66:	46bd      	mov	sp, r7
 801eb68:	bd80      	pop	{r7, pc}
 801eb6a:	bf00      	nop
 801eb6c:	40010000 	.word	0x40010000
 801eb70:	40010400 	.word	0x40010400
 801eb74:	40014000 	.word	0x40014000
 801eb78:	40014400 	.word	0x40014400
 801eb7c:	40014800 	.word	0x40014800
 801eb80:	40000400 	.word	0x40000400
 801eb84:	40000800 	.word	0x40000800
 801eb88:	40000c00 	.word	0x40000c00
 801eb8c:	40001800 	.word	0x40001800
 801eb90:	4000e000 	.word	0x4000e000
 801eb94:	4000e400 	.word	0x4000e400
 801eb98:	00010007 	.word	0x00010007

0801eb9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801eb9c:	b580      	push	{r7, lr}
 801eb9e:	b082      	sub	sp, #8
 801eba0:	af00      	add	r7, sp, #0
 801eba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	d101      	bne.n	801ebae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801ebaa:	2301      	movs	r3, #1
 801ebac:	e049      	b.n	801ec42 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ebae:	687b      	ldr	r3, [r7, #4]
 801ebb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ebb4:	b2db      	uxtb	r3, r3
 801ebb6:	2b00      	cmp	r3, #0
 801ebb8:	d106      	bne.n	801ebc8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ebba:	687b      	ldr	r3, [r7, #4]
 801ebbc:	2200      	movs	r2, #0
 801ebbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801ebc2:	6878      	ldr	r0, [r7, #4]
 801ebc4:	f000 f841 	bl	801ec4a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	2202      	movs	r2, #2
 801ebcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	681a      	ldr	r2, [r3, #0]
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	3304      	adds	r3, #4
 801ebd8:	4619      	mov	r1, r3
 801ebda:	4610      	mov	r0, r2
 801ebdc:	f000 fdc8 	bl	801f770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	2201      	movs	r2, #1
 801ebe4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	2201      	movs	r2, #1
 801ebec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ebf0:	687b      	ldr	r3, [r7, #4]
 801ebf2:	2201      	movs	r2, #1
 801ebf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	2201      	movs	r2, #1
 801ebfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	2201      	movs	r2, #1
 801ec04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	2201      	movs	r2, #1
 801ec0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ec10:	687b      	ldr	r3, [r7, #4]
 801ec12:	2201      	movs	r2, #1
 801ec14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	2201      	movs	r2, #1
 801ec1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	2201      	movs	r2, #1
 801ec24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	2201      	movs	r2, #1
 801ec2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	2201      	movs	r2, #1
 801ec34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	2201      	movs	r2, #1
 801ec3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ec40:	2300      	movs	r3, #0
}
 801ec42:	4618      	mov	r0, r3
 801ec44:	3708      	adds	r7, #8
 801ec46:	46bd      	mov	sp, r7
 801ec48:	bd80      	pop	{r7, pc}

0801ec4a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801ec4a:	b480      	push	{r7}
 801ec4c:	b083      	sub	sp, #12
 801ec4e:	af00      	add	r7, sp, #0
 801ec50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801ec52:	bf00      	nop
 801ec54:	370c      	adds	r7, #12
 801ec56:	46bd      	mov	sp, r7
 801ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec5c:	4770      	bx	lr
	...

0801ec60 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ec60:	b580      	push	{r7, lr}
 801ec62:	b084      	sub	sp, #16
 801ec64:	af00      	add	r7, sp, #0
 801ec66:	6078      	str	r0, [r7, #4]
 801ec68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801ec6e:	683b      	ldr	r3, [r7, #0]
 801ec70:	2b00      	cmp	r3, #0
 801ec72:	d104      	bne.n	801ec7e <HAL_TIM_IC_Start_IT+0x1e>
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ec7a:	b2db      	uxtb	r3, r3
 801ec7c:	e023      	b.n	801ecc6 <HAL_TIM_IC_Start_IT+0x66>
 801ec7e:	683b      	ldr	r3, [r7, #0]
 801ec80:	2b04      	cmp	r3, #4
 801ec82:	d104      	bne.n	801ec8e <HAL_TIM_IC_Start_IT+0x2e>
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ec8a:	b2db      	uxtb	r3, r3
 801ec8c:	e01b      	b.n	801ecc6 <HAL_TIM_IC_Start_IT+0x66>
 801ec8e:	683b      	ldr	r3, [r7, #0]
 801ec90:	2b08      	cmp	r3, #8
 801ec92:	d104      	bne.n	801ec9e <HAL_TIM_IC_Start_IT+0x3e>
 801ec94:	687b      	ldr	r3, [r7, #4]
 801ec96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ec9a:	b2db      	uxtb	r3, r3
 801ec9c:	e013      	b.n	801ecc6 <HAL_TIM_IC_Start_IT+0x66>
 801ec9e:	683b      	ldr	r3, [r7, #0]
 801eca0:	2b0c      	cmp	r3, #12
 801eca2:	d104      	bne.n	801ecae <HAL_TIM_IC_Start_IT+0x4e>
 801eca4:	687b      	ldr	r3, [r7, #4]
 801eca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ecaa:	b2db      	uxtb	r3, r3
 801ecac:	e00b      	b.n	801ecc6 <HAL_TIM_IC_Start_IT+0x66>
 801ecae:	683b      	ldr	r3, [r7, #0]
 801ecb0:	2b10      	cmp	r3, #16
 801ecb2:	d104      	bne.n	801ecbe <HAL_TIM_IC_Start_IT+0x5e>
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ecba:	b2db      	uxtb	r3, r3
 801ecbc:	e003      	b.n	801ecc6 <HAL_TIM_IC_Start_IT+0x66>
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ecc4:	b2db      	uxtb	r3, r3
 801ecc6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801ecc8:	683b      	ldr	r3, [r7, #0]
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	d104      	bne.n	801ecd8 <HAL_TIM_IC_Start_IT+0x78>
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ecd4:	b2db      	uxtb	r3, r3
 801ecd6:	e013      	b.n	801ed00 <HAL_TIM_IC_Start_IT+0xa0>
 801ecd8:	683b      	ldr	r3, [r7, #0]
 801ecda:	2b04      	cmp	r3, #4
 801ecdc:	d104      	bne.n	801ece8 <HAL_TIM_IC_Start_IT+0x88>
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ece4:	b2db      	uxtb	r3, r3
 801ece6:	e00b      	b.n	801ed00 <HAL_TIM_IC_Start_IT+0xa0>
 801ece8:	683b      	ldr	r3, [r7, #0]
 801ecea:	2b08      	cmp	r3, #8
 801ecec:	d104      	bne.n	801ecf8 <HAL_TIM_IC_Start_IT+0x98>
 801ecee:	687b      	ldr	r3, [r7, #4]
 801ecf0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801ecf4:	b2db      	uxtb	r3, r3
 801ecf6:	e003      	b.n	801ed00 <HAL_TIM_IC_Start_IT+0xa0>
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801ecfe:	b2db      	uxtb	r3, r3
 801ed00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801ed02:	7bbb      	ldrb	r3, [r7, #14]
 801ed04:	2b01      	cmp	r3, #1
 801ed06:	d102      	bne.n	801ed0e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801ed08:	7b7b      	ldrb	r3, [r7, #13]
 801ed0a:	2b01      	cmp	r3, #1
 801ed0c:	d001      	beq.n	801ed12 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801ed0e:	2301      	movs	r3, #1
 801ed10:	e0ec      	b.n	801eeec <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ed12:	683b      	ldr	r3, [r7, #0]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d104      	bne.n	801ed22 <HAL_TIM_IC_Start_IT+0xc2>
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	2202      	movs	r2, #2
 801ed1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ed20:	e023      	b.n	801ed6a <HAL_TIM_IC_Start_IT+0x10a>
 801ed22:	683b      	ldr	r3, [r7, #0]
 801ed24:	2b04      	cmp	r3, #4
 801ed26:	d104      	bne.n	801ed32 <HAL_TIM_IC_Start_IT+0xd2>
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	2202      	movs	r2, #2
 801ed2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ed30:	e01b      	b.n	801ed6a <HAL_TIM_IC_Start_IT+0x10a>
 801ed32:	683b      	ldr	r3, [r7, #0]
 801ed34:	2b08      	cmp	r3, #8
 801ed36:	d104      	bne.n	801ed42 <HAL_TIM_IC_Start_IT+0xe2>
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	2202      	movs	r2, #2
 801ed3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ed40:	e013      	b.n	801ed6a <HAL_TIM_IC_Start_IT+0x10a>
 801ed42:	683b      	ldr	r3, [r7, #0]
 801ed44:	2b0c      	cmp	r3, #12
 801ed46:	d104      	bne.n	801ed52 <HAL_TIM_IC_Start_IT+0xf2>
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	2202      	movs	r2, #2
 801ed4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ed50:	e00b      	b.n	801ed6a <HAL_TIM_IC_Start_IT+0x10a>
 801ed52:	683b      	ldr	r3, [r7, #0]
 801ed54:	2b10      	cmp	r3, #16
 801ed56:	d104      	bne.n	801ed62 <HAL_TIM_IC_Start_IT+0x102>
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	2202      	movs	r2, #2
 801ed5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ed60:	e003      	b.n	801ed6a <HAL_TIM_IC_Start_IT+0x10a>
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	2202      	movs	r2, #2
 801ed66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ed6a:	683b      	ldr	r3, [r7, #0]
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	d104      	bne.n	801ed7a <HAL_TIM_IC_Start_IT+0x11a>
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	2202      	movs	r2, #2
 801ed74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ed78:	e013      	b.n	801eda2 <HAL_TIM_IC_Start_IT+0x142>
 801ed7a:	683b      	ldr	r3, [r7, #0]
 801ed7c:	2b04      	cmp	r3, #4
 801ed7e:	d104      	bne.n	801ed8a <HAL_TIM_IC_Start_IT+0x12a>
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	2202      	movs	r2, #2
 801ed84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ed88:	e00b      	b.n	801eda2 <HAL_TIM_IC_Start_IT+0x142>
 801ed8a:	683b      	ldr	r3, [r7, #0]
 801ed8c:	2b08      	cmp	r3, #8
 801ed8e:	d104      	bne.n	801ed9a <HAL_TIM_IC_Start_IT+0x13a>
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	2202      	movs	r2, #2
 801ed94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ed98:	e003      	b.n	801eda2 <HAL_TIM_IC_Start_IT+0x142>
 801ed9a:	687b      	ldr	r3, [r7, #4]
 801ed9c:	2202      	movs	r2, #2
 801ed9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801eda2:	683b      	ldr	r3, [r7, #0]
 801eda4:	2b0c      	cmp	r3, #12
 801eda6:	d841      	bhi.n	801ee2c <HAL_TIM_IC_Start_IT+0x1cc>
 801eda8:	a201      	add	r2, pc, #4	; (adr r2, 801edb0 <HAL_TIM_IC_Start_IT+0x150>)
 801edaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801edae:	bf00      	nop
 801edb0:	0801ede5 	.word	0x0801ede5
 801edb4:	0801ee2d 	.word	0x0801ee2d
 801edb8:	0801ee2d 	.word	0x0801ee2d
 801edbc:	0801ee2d 	.word	0x0801ee2d
 801edc0:	0801edf7 	.word	0x0801edf7
 801edc4:	0801ee2d 	.word	0x0801ee2d
 801edc8:	0801ee2d 	.word	0x0801ee2d
 801edcc:	0801ee2d 	.word	0x0801ee2d
 801edd0:	0801ee09 	.word	0x0801ee09
 801edd4:	0801ee2d 	.word	0x0801ee2d
 801edd8:	0801ee2d 	.word	0x0801ee2d
 801eddc:	0801ee2d 	.word	0x0801ee2d
 801ede0:	0801ee1b 	.word	0x0801ee1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	681b      	ldr	r3, [r3, #0]
 801ede8:	68da      	ldr	r2, [r3, #12]
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	f042 0202 	orr.w	r2, r2, #2
 801edf2:	60da      	str	r2, [r3, #12]
      break;
 801edf4:	e01d      	b.n	801ee32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	681b      	ldr	r3, [r3, #0]
 801edfa:	68da      	ldr	r2, [r3, #12]
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	f042 0204 	orr.w	r2, r2, #4
 801ee04:	60da      	str	r2, [r3, #12]
      break;
 801ee06:	e014      	b.n	801ee32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	681b      	ldr	r3, [r3, #0]
 801ee0c:	68da      	ldr	r2, [r3, #12]
 801ee0e:	687b      	ldr	r3, [r7, #4]
 801ee10:	681b      	ldr	r3, [r3, #0]
 801ee12:	f042 0208 	orr.w	r2, r2, #8
 801ee16:	60da      	str	r2, [r3, #12]
      break;
 801ee18:	e00b      	b.n	801ee32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	681b      	ldr	r3, [r3, #0]
 801ee1e:	68da      	ldr	r2, [r3, #12]
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	681b      	ldr	r3, [r3, #0]
 801ee24:	f042 0210 	orr.w	r2, r2, #16
 801ee28:	60da      	str	r2, [r3, #12]
      break;
 801ee2a:	e002      	b.n	801ee32 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801ee2c:	2301      	movs	r3, #1
 801ee2e:	73fb      	strb	r3, [r7, #15]
      break;
 801ee30:	bf00      	nop
  }

  if (status == HAL_OK)
 801ee32:	7bfb      	ldrb	r3, [r7, #15]
 801ee34:	2b00      	cmp	r3, #0
 801ee36:	d158      	bne.n	801eeea <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	681b      	ldr	r3, [r3, #0]
 801ee3c:	2201      	movs	r2, #1
 801ee3e:	6839      	ldr	r1, [r7, #0]
 801ee40:	4618      	mov	r0, r3
 801ee42:	f001 f9e5 	bl	8020210 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	681b      	ldr	r3, [r3, #0]
 801ee4a:	4a2a      	ldr	r2, [pc, #168]	; (801eef4 <HAL_TIM_IC_Start_IT+0x294>)
 801ee4c:	4293      	cmp	r3, r2
 801ee4e:	d02c      	beq.n	801eeaa <HAL_TIM_IC_Start_IT+0x24a>
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	681b      	ldr	r3, [r3, #0]
 801ee54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ee58:	d027      	beq.n	801eeaa <HAL_TIM_IC_Start_IT+0x24a>
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	681b      	ldr	r3, [r3, #0]
 801ee5e:	4a26      	ldr	r2, [pc, #152]	; (801eef8 <HAL_TIM_IC_Start_IT+0x298>)
 801ee60:	4293      	cmp	r3, r2
 801ee62:	d022      	beq.n	801eeaa <HAL_TIM_IC_Start_IT+0x24a>
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	681b      	ldr	r3, [r3, #0]
 801ee68:	4a24      	ldr	r2, [pc, #144]	; (801eefc <HAL_TIM_IC_Start_IT+0x29c>)
 801ee6a:	4293      	cmp	r3, r2
 801ee6c:	d01d      	beq.n	801eeaa <HAL_TIM_IC_Start_IT+0x24a>
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	681b      	ldr	r3, [r3, #0]
 801ee72:	4a23      	ldr	r2, [pc, #140]	; (801ef00 <HAL_TIM_IC_Start_IT+0x2a0>)
 801ee74:	4293      	cmp	r3, r2
 801ee76:	d018      	beq.n	801eeaa <HAL_TIM_IC_Start_IT+0x24a>
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	4a21      	ldr	r2, [pc, #132]	; (801ef04 <HAL_TIM_IC_Start_IT+0x2a4>)
 801ee7e:	4293      	cmp	r3, r2
 801ee80:	d013      	beq.n	801eeaa <HAL_TIM_IC_Start_IT+0x24a>
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	4a20      	ldr	r2, [pc, #128]	; (801ef08 <HAL_TIM_IC_Start_IT+0x2a8>)
 801ee88:	4293      	cmp	r3, r2
 801ee8a:	d00e      	beq.n	801eeaa <HAL_TIM_IC_Start_IT+0x24a>
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	4a1e      	ldr	r2, [pc, #120]	; (801ef0c <HAL_TIM_IC_Start_IT+0x2ac>)
 801ee92:	4293      	cmp	r3, r2
 801ee94:	d009      	beq.n	801eeaa <HAL_TIM_IC_Start_IT+0x24a>
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	4a1d      	ldr	r2, [pc, #116]	; (801ef10 <HAL_TIM_IC_Start_IT+0x2b0>)
 801ee9c:	4293      	cmp	r3, r2
 801ee9e:	d004      	beq.n	801eeaa <HAL_TIM_IC_Start_IT+0x24a>
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	681b      	ldr	r3, [r3, #0]
 801eea4:	4a1b      	ldr	r2, [pc, #108]	; (801ef14 <HAL_TIM_IC_Start_IT+0x2b4>)
 801eea6:	4293      	cmp	r3, r2
 801eea8:	d115      	bne.n	801eed6 <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	681b      	ldr	r3, [r3, #0]
 801eeae:	689a      	ldr	r2, [r3, #8]
 801eeb0:	4b19      	ldr	r3, [pc, #100]	; (801ef18 <HAL_TIM_IC_Start_IT+0x2b8>)
 801eeb2:	4013      	ands	r3, r2
 801eeb4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eeb6:	68bb      	ldr	r3, [r7, #8]
 801eeb8:	2b06      	cmp	r3, #6
 801eeba:	d015      	beq.n	801eee8 <HAL_TIM_IC_Start_IT+0x288>
 801eebc:	68bb      	ldr	r3, [r7, #8]
 801eebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eec2:	d011      	beq.n	801eee8 <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 801eec4:	687b      	ldr	r3, [r7, #4]
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	681a      	ldr	r2, [r3, #0]
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	681b      	ldr	r3, [r3, #0]
 801eece:	f042 0201 	orr.w	r2, r2, #1
 801eed2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eed4:	e008      	b.n	801eee8 <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	681b      	ldr	r3, [r3, #0]
 801eeda:	681a      	ldr	r2, [r3, #0]
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	681b      	ldr	r3, [r3, #0]
 801eee0:	f042 0201 	orr.w	r2, r2, #1
 801eee4:	601a      	str	r2, [r3, #0]
 801eee6:	e000      	b.n	801eeea <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eee8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801eeea:	7bfb      	ldrb	r3, [r7, #15]
}
 801eeec:	4618      	mov	r0, r3
 801eeee:	3710      	adds	r7, #16
 801eef0:	46bd      	mov	sp, r7
 801eef2:	bd80      	pop	{r7, pc}
 801eef4:	40010000 	.word	0x40010000
 801eef8:	40000400 	.word	0x40000400
 801eefc:	40000800 	.word	0x40000800
 801ef00:	40000c00 	.word	0x40000c00
 801ef04:	40010400 	.word	0x40010400
 801ef08:	40001800 	.word	0x40001800
 801ef0c:	40014000 	.word	0x40014000
 801ef10:	4000e000 	.word	0x4000e000
 801ef14:	4000e400 	.word	0x4000e400
 801ef18:	00010007 	.word	0x00010007

0801ef1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ef1c:	b580      	push	{r7, lr}
 801ef1e:	b082      	sub	sp, #8
 801ef20:	af00      	add	r7, sp, #0
 801ef22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	691b      	ldr	r3, [r3, #16]
 801ef2a:	f003 0302 	and.w	r3, r3, #2
 801ef2e:	2b02      	cmp	r3, #2
 801ef30:	d122      	bne.n	801ef78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801ef32:	687b      	ldr	r3, [r7, #4]
 801ef34:	681b      	ldr	r3, [r3, #0]
 801ef36:	68db      	ldr	r3, [r3, #12]
 801ef38:	f003 0302 	and.w	r3, r3, #2
 801ef3c:	2b02      	cmp	r3, #2
 801ef3e:	d11b      	bne.n	801ef78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ef40:	687b      	ldr	r3, [r7, #4]
 801ef42:	681b      	ldr	r3, [r3, #0]
 801ef44:	f06f 0202 	mvn.w	r2, #2
 801ef48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	2201      	movs	r2, #1
 801ef4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	699b      	ldr	r3, [r3, #24]
 801ef56:	f003 0303 	and.w	r3, r3, #3
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	d003      	beq.n	801ef66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ef5e:	6878      	ldr	r0, [r7, #4]
 801ef60:	f7ee fb02 	bl	800d568 <HAL_TIM_IC_CaptureCallback>
 801ef64:	e005      	b.n	801ef72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ef66:	6878      	ldr	r0, [r7, #4]
 801ef68:	f000 fbe4 	bl	801f734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ef6c:	6878      	ldr	r0, [r7, #4]
 801ef6e:	f000 fbeb 	bl	801f748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	2200      	movs	r2, #0
 801ef76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	681b      	ldr	r3, [r3, #0]
 801ef7c:	691b      	ldr	r3, [r3, #16]
 801ef7e:	f003 0304 	and.w	r3, r3, #4
 801ef82:	2b04      	cmp	r3, #4
 801ef84:	d122      	bne.n	801efcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	68db      	ldr	r3, [r3, #12]
 801ef8c:	f003 0304 	and.w	r3, r3, #4
 801ef90:	2b04      	cmp	r3, #4
 801ef92:	d11b      	bne.n	801efcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ef94:	687b      	ldr	r3, [r7, #4]
 801ef96:	681b      	ldr	r3, [r3, #0]
 801ef98:	f06f 0204 	mvn.w	r2, #4
 801ef9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	2202      	movs	r2, #2
 801efa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	699b      	ldr	r3, [r3, #24]
 801efaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801efae:	2b00      	cmp	r3, #0
 801efb0:	d003      	beq.n	801efba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801efb2:	6878      	ldr	r0, [r7, #4]
 801efb4:	f7ee fad8 	bl	800d568 <HAL_TIM_IC_CaptureCallback>
 801efb8:	e005      	b.n	801efc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801efba:	6878      	ldr	r0, [r7, #4]
 801efbc:	f000 fbba 	bl	801f734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801efc0:	6878      	ldr	r0, [r7, #4]
 801efc2:	f000 fbc1 	bl	801f748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801efc6:	687b      	ldr	r3, [r7, #4]
 801efc8:	2200      	movs	r2, #0
 801efca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801efcc:	687b      	ldr	r3, [r7, #4]
 801efce:	681b      	ldr	r3, [r3, #0]
 801efd0:	691b      	ldr	r3, [r3, #16]
 801efd2:	f003 0308 	and.w	r3, r3, #8
 801efd6:	2b08      	cmp	r3, #8
 801efd8:	d122      	bne.n	801f020 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	68db      	ldr	r3, [r3, #12]
 801efe0:	f003 0308 	and.w	r3, r3, #8
 801efe4:	2b08      	cmp	r3, #8
 801efe6:	d11b      	bne.n	801f020 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	681b      	ldr	r3, [r3, #0]
 801efec:	f06f 0208 	mvn.w	r2, #8
 801eff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	2204      	movs	r2, #4
 801eff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	681b      	ldr	r3, [r3, #0]
 801effc:	69db      	ldr	r3, [r3, #28]
 801effe:	f003 0303 	and.w	r3, r3, #3
 801f002:	2b00      	cmp	r3, #0
 801f004:	d003      	beq.n	801f00e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f006:	6878      	ldr	r0, [r7, #4]
 801f008:	f7ee faae 	bl	800d568 <HAL_TIM_IC_CaptureCallback>
 801f00c:	e005      	b.n	801f01a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f00e:	6878      	ldr	r0, [r7, #4]
 801f010:	f000 fb90 	bl	801f734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f014:	6878      	ldr	r0, [r7, #4]
 801f016:	f000 fb97 	bl	801f748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f01a:	687b      	ldr	r3, [r7, #4]
 801f01c:	2200      	movs	r2, #0
 801f01e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801f020:	687b      	ldr	r3, [r7, #4]
 801f022:	681b      	ldr	r3, [r3, #0]
 801f024:	691b      	ldr	r3, [r3, #16]
 801f026:	f003 0310 	and.w	r3, r3, #16
 801f02a:	2b10      	cmp	r3, #16
 801f02c:	d122      	bne.n	801f074 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801f02e:	687b      	ldr	r3, [r7, #4]
 801f030:	681b      	ldr	r3, [r3, #0]
 801f032:	68db      	ldr	r3, [r3, #12]
 801f034:	f003 0310 	and.w	r3, r3, #16
 801f038:	2b10      	cmp	r3, #16
 801f03a:	d11b      	bne.n	801f074 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	681b      	ldr	r3, [r3, #0]
 801f040:	f06f 0210 	mvn.w	r2, #16
 801f044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f046:	687b      	ldr	r3, [r7, #4]
 801f048:	2208      	movs	r2, #8
 801f04a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	69db      	ldr	r3, [r3, #28]
 801f052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f056:	2b00      	cmp	r3, #0
 801f058:	d003      	beq.n	801f062 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f05a:	6878      	ldr	r0, [r7, #4]
 801f05c:	f7ee fa84 	bl	800d568 <HAL_TIM_IC_CaptureCallback>
 801f060:	e005      	b.n	801f06e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f062:	6878      	ldr	r0, [r7, #4]
 801f064:	f000 fb66 	bl	801f734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f068:	6878      	ldr	r0, [r7, #4]
 801f06a:	f000 fb6d 	bl	801f748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	2200      	movs	r2, #0
 801f072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	681b      	ldr	r3, [r3, #0]
 801f078:	691b      	ldr	r3, [r3, #16]
 801f07a:	f003 0301 	and.w	r3, r3, #1
 801f07e:	2b01      	cmp	r3, #1
 801f080:	d10e      	bne.n	801f0a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801f082:	687b      	ldr	r3, [r7, #4]
 801f084:	681b      	ldr	r3, [r3, #0]
 801f086:	68db      	ldr	r3, [r3, #12]
 801f088:	f003 0301 	and.w	r3, r3, #1
 801f08c:	2b01      	cmp	r3, #1
 801f08e:	d107      	bne.n	801f0a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	681b      	ldr	r3, [r3, #0]
 801f094:	f06f 0201 	mvn.w	r2, #1
 801f098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f09a:	6878      	ldr	r0, [r7, #4]
 801f09c:	f7ee fa79 	bl	800d592 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	681b      	ldr	r3, [r3, #0]
 801f0a4:	691b      	ldr	r3, [r3, #16]
 801f0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f0aa:	2b80      	cmp	r3, #128	; 0x80
 801f0ac:	d10e      	bne.n	801f0cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	681b      	ldr	r3, [r3, #0]
 801f0b2:	68db      	ldr	r3, [r3, #12]
 801f0b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f0b8:	2b80      	cmp	r3, #128	; 0x80
 801f0ba:	d107      	bne.n	801f0cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801f0c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f0c6:	6878      	ldr	r0, [r7, #4]
 801f0c8:	f001 fa0e 	bl	80204e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	681b      	ldr	r3, [r3, #0]
 801f0d0:	691b      	ldr	r3, [r3, #16]
 801f0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f0da:	d10e      	bne.n	801f0fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	681b      	ldr	r3, [r3, #0]
 801f0e0:	68db      	ldr	r3, [r3, #12]
 801f0e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f0e6:	2b80      	cmp	r3, #128	; 0x80
 801f0e8:	d107      	bne.n	801f0fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	681b      	ldr	r3, [r3, #0]
 801f0ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f0f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f0f4:	6878      	ldr	r0, [r7, #4]
 801f0f6:	f001 fa01 	bl	80204fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	681b      	ldr	r3, [r3, #0]
 801f0fe:	691b      	ldr	r3, [r3, #16]
 801f100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f104:	2b40      	cmp	r3, #64	; 0x40
 801f106:	d10e      	bne.n	801f126 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f108:	687b      	ldr	r3, [r7, #4]
 801f10a:	681b      	ldr	r3, [r3, #0]
 801f10c:	68db      	ldr	r3, [r3, #12]
 801f10e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f112:	2b40      	cmp	r3, #64	; 0x40
 801f114:	d107      	bne.n	801f126 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f11e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f120:	6878      	ldr	r0, [r7, #4]
 801f122:	f000 fb1b 	bl	801f75c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	681b      	ldr	r3, [r3, #0]
 801f12a:	691b      	ldr	r3, [r3, #16]
 801f12c:	f003 0320 	and.w	r3, r3, #32
 801f130:	2b20      	cmp	r3, #32
 801f132:	d10e      	bne.n	801f152 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f134:	687b      	ldr	r3, [r7, #4]
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	68db      	ldr	r3, [r3, #12]
 801f13a:	f003 0320 	and.w	r3, r3, #32
 801f13e:	2b20      	cmp	r3, #32
 801f140:	d107      	bne.n	801f152 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	f06f 0220 	mvn.w	r2, #32
 801f14a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f14c:	6878      	ldr	r0, [r7, #4]
 801f14e:	f001 f9c1 	bl	80204d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f152:	bf00      	nop
 801f154:	3708      	adds	r7, #8
 801f156:	46bd      	mov	sp, r7
 801f158:	bd80      	pop	{r7, pc}

0801f15a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801f15a:	b580      	push	{r7, lr}
 801f15c:	b086      	sub	sp, #24
 801f15e:	af00      	add	r7, sp, #0
 801f160:	60f8      	str	r0, [r7, #12]
 801f162:	60b9      	str	r1, [r7, #8]
 801f164:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f166:	2300      	movs	r3, #0
 801f168:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f16a:	68fb      	ldr	r3, [r7, #12]
 801f16c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f170:	2b01      	cmp	r3, #1
 801f172:	d101      	bne.n	801f178 <HAL_TIM_IC_ConfigChannel+0x1e>
 801f174:	2302      	movs	r3, #2
 801f176:	e088      	b.n	801f28a <HAL_TIM_IC_ConfigChannel+0x130>
 801f178:	68fb      	ldr	r3, [r7, #12]
 801f17a:	2201      	movs	r2, #1
 801f17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801f180:	687b      	ldr	r3, [r7, #4]
 801f182:	2b00      	cmp	r3, #0
 801f184:	d11b      	bne.n	801f1be <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801f186:	68fb      	ldr	r3, [r7, #12]
 801f188:	6818      	ldr	r0, [r3, #0]
 801f18a:	68bb      	ldr	r3, [r7, #8]
 801f18c:	6819      	ldr	r1, [r3, #0]
 801f18e:	68bb      	ldr	r3, [r7, #8]
 801f190:	685a      	ldr	r2, [r3, #4]
 801f192:	68bb      	ldr	r3, [r7, #8]
 801f194:	68db      	ldr	r3, [r3, #12]
 801f196:	f000 fe67 	bl	801fe68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801f19a:	68fb      	ldr	r3, [r7, #12]
 801f19c:	681b      	ldr	r3, [r3, #0]
 801f19e:	699a      	ldr	r2, [r3, #24]
 801f1a0:	68fb      	ldr	r3, [r7, #12]
 801f1a2:	681b      	ldr	r3, [r3, #0]
 801f1a4:	f022 020c 	bic.w	r2, r2, #12
 801f1a8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801f1aa:	68fb      	ldr	r3, [r7, #12]
 801f1ac:	681b      	ldr	r3, [r3, #0]
 801f1ae:	6999      	ldr	r1, [r3, #24]
 801f1b0:	68bb      	ldr	r3, [r7, #8]
 801f1b2:	689a      	ldr	r2, [r3, #8]
 801f1b4:	68fb      	ldr	r3, [r7, #12]
 801f1b6:	681b      	ldr	r3, [r3, #0]
 801f1b8:	430a      	orrs	r2, r1
 801f1ba:	619a      	str	r2, [r3, #24]
 801f1bc:	e060      	b.n	801f280 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	2b04      	cmp	r3, #4
 801f1c2:	d11c      	bne.n	801f1fe <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801f1c4:	68fb      	ldr	r3, [r7, #12]
 801f1c6:	6818      	ldr	r0, [r3, #0]
 801f1c8:	68bb      	ldr	r3, [r7, #8]
 801f1ca:	6819      	ldr	r1, [r3, #0]
 801f1cc:	68bb      	ldr	r3, [r7, #8]
 801f1ce:	685a      	ldr	r2, [r3, #4]
 801f1d0:	68bb      	ldr	r3, [r7, #8]
 801f1d2:	68db      	ldr	r3, [r3, #12]
 801f1d4:	f000 fef7 	bl	801ffc6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801f1d8:	68fb      	ldr	r3, [r7, #12]
 801f1da:	681b      	ldr	r3, [r3, #0]
 801f1dc:	699a      	ldr	r2, [r3, #24]
 801f1de:	68fb      	ldr	r3, [r7, #12]
 801f1e0:	681b      	ldr	r3, [r3, #0]
 801f1e2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f1e6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	6999      	ldr	r1, [r3, #24]
 801f1ee:	68bb      	ldr	r3, [r7, #8]
 801f1f0:	689b      	ldr	r3, [r3, #8]
 801f1f2:	021a      	lsls	r2, r3, #8
 801f1f4:	68fb      	ldr	r3, [r7, #12]
 801f1f6:	681b      	ldr	r3, [r3, #0]
 801f1f8:	430a      	orrs	r2, r1
 801f1fa:	619a      	str	r2, [r3, #24]
 801f1fc:	e040      	b.n	801f280 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	2b08      	cmp	r3, #8
 801f202:	d11b      	bne.n	801f23c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801f204:	68fb      	ldr	r3, [r7, #12]
 801f206:	6818      	ldr	r0, [r3, #0]
 801f208:	68bb      	ldr	r3, [r7, #8]
 801f20a:	6819      	ldr	r1, [r3, #0]
 801f20c:	68bb      	ldr	r3, [r7, #8]
 801f20e:	685a      	ldr	r2, [r3, #4]
 801f210:	68bb      	ldr	r3, [r7, #8]
 801f212:	68db      	ldr	r3, [r3, #12]
 801f214:	f000 ff44 	bl	80200a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801f218:	68fb      	ldr	r3, [r7, #12]
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	69da      	ldr	r2, [r3, #28]
 801f21e:	68fb      	ldr	r3, [r7, #12]
 801f220:	681b      	ldr	r3, [r3, #0]
 801f222:	f022 020c 	bic.w	r2, r2, #12
 801f226:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801f228:	68fb      	ldr	r3, [r7, #12]
 801f22a:	681b      	ldr	r3, [r3, #0]
 801f22c:	69d9      	ldr	r1, [r3, #28]
 801f22e:	68bb      	ldr	r3, [r7, #8]
 801f230:	689a      	ldr	r2, [r3, #8]
 801f232:	68fb      	ldr	r3, [r7, #12]
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	430a      	orrs	r2, r1
 801f238:	61da      	str	r2, [r3, #28]
 801f23a:	e021      	b.n	801f280 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	2b0c      	cmp	r3, #12
 801f240:	d11c      	bne.n	801f27c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801f242:	68fb      	ldr	r3, [r7, #12]
 801f244:	6818      	ldr	r0, [r3, #0]
 801f246:	68bb      	ldr	r3, [r7, #8]
 801f248:	6819      	ldr	r1, [r3, #0]
 801f24a:	68bb      	ldr	r3, [r7, #8]
 801f24c:	685a      	ldr	r2, [r3, #4]
 801f24e:	68bb      	ldr	r3, [r7, #8]
 801f250:	68db      	ldr	r3, [r3, #12]
 801f252:	f000 ff61 	bl	8020118 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801f256:	68fb      	ldr	r3, [r7, #12]
 801f258:	681b      	ldr	r3, [r3, #0]
 801f25a:	69da      	ldr	r2, [r3, #28]
 801f25c:	68fb      	ldr	r3, [r7, #12]
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f264:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801f266:	68fb      	ldr	r3, [r7, #12]
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	69d9      	ldr	r1, [r3, #28]
 801f26c:	68bb      	ldr	r3, [r7, #8]
 801f26e:	689b      	ldr	r3, [r3, #8]
 801f270:	021a      	lsls	r2, r3, #8
 801f272:	68fb      	ldr	r3, [r7, #12]
 801f274:	681b      	ldr	r3, [r3, #0]
 801f276:	430a      	orrs	r2, r1
 801f278:	61da      	str	r2, [r3, #28]
 801f27a:	e001      	b.n	801f280 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801f27c:	2301      	movs	r3, #1
 801f27e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801f280:	68fb      	ldr	r3, [r7, #12]
 801f282:	2200      	movs	r2, #0
 801f284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f288:	7dfb      	ldrb	r3, [r7, #23]
}
 801f28a:	4618      	mov	r0, r3
 801f28c:	3718      	adds	r7, #24
 801f28e:	46bd      	mov	sp, r7
 801f290:	bd80      	pop	{r7, pc}
	...

0801f294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f294:	b580      	push	{r7, lr}
 801f296:	b086      	sub	sp, #24
 801f298:	af00      	add	r7, sp, #0
 801f29a:	60f8      	str	r0, [r7, #12]
 801f29c:	60b9      	str	r1, [r7, #8]
 801f29e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f2a0:	2300      	movs	r3, #0
 801f2a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f2a4:	68fb      	ldr	r3, [r7, #12]
 801f2a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f2aa:	2b01      	cmp	r3, #1
 801f2ac:	d101      	bne.n	801f2b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f2ae:	2302      	movs	r3, #2
 801f2b0:	e0ff      	b.n	801f4b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f2b2:	68fb      	ldr	r3, [r7, #12]
 801f2b4:	2201      	movs	r2, #1
 801f2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801f2ba:	687b      	ldr	r3, [r7, #4]
 801f2bc:	2b14      	cmp	r3, #20
 801f2be:	f200 80f0 	bhi.w	801f4a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f2c2:	a201      	add	r2, pc, #4	; (adr r2, 801f2c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f2c8:	0801f31d 	.word	0x0801f31d
 801f2cc:	0801f4a3 	.word	0x0801f4a3
 801f2d0:	0801f4a3 	.word	0x0801f4a3
 801f2d4:	0801f4a3 	.word	0x0801f4a3
 801f2d8:	0801f35d 	.word	0x0801f35d
 801f2dc:	0801f4a3 	.word	0x0801f4a3
 801f2e0:	0801f4a3 	.word	0x0801f4a3
 801f2e4:	0801f4a3 	.word	0x0801f4a3
 801f2e8:	0801f39f 	.word	0x0801f39f
 801f2ec:	0801f4a3 	.word	0x0801f4a3
 801f2f0:	0801f4a3 	.word	0x0801f4a3
 801f2f4:	0801f4a3 	.word	0x0801f4a3
 801f2f8:	0801f3df 	.word	0x0801f3df
 801f2fc:	0801f4a3 	.word	0x0801f4a3
 801f300:	0801f4a3 	.word	0x0801f4a3
 801f304:	0801f4a3 	.word	0x0801f4a3
 801f308:	0801f421 	.word	0x0801f421
 801f30c:	0801f4a3 	.word	0x0801f4a3
 801f310:	0801f4a3 	.word	0x0801f4a3
 801f314:	0801f4a3 	.word	0x0801f4a3
 801f318:	0801f461 	.word	0x0801f461
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	68b9      	ldr	r1, [r7, #8]
 801f322:	4618      	mov	r0, r3
 801f324:	f000 faca 	bl	801f8bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f328:	68fb      	ldr	r3, [r7, #12]
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	699a      	ldr	r2, [r3, #24]
 801f32e:	68fb      	ldr	r3, [r7, #12]
 801f330:	681b      	ldr	r3, [r3, #0]
 801f332:	f042 0208 	orr.w	r2, r2, #8
 801f336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f338:	68fb      	ldr	r3, [r7, #12]
 801f33a:	681b      	ldr	r3, [r3, #0]
 801f33c:	699a      	ldr	r2, [r3, #24]
 801f33e:	68fb      	ldr	r3, [r7, #12]
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	f022 0204 	bic.w	r2, r2, #4
 801f346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f348:	68fb      	ldr	r3, [r7, #12]
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	6999      	ldr	r1, [r3, #24]
 801f34e:	68bb      	ldr	r3, [r7, #8]
 801f350:	691a      	ldr	r2, [r3, #16]
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	681b      	ldr	r3, [r3, #0]
 801f356:	430a      	orrs	r2, r1
 801f358:	619a      	str	r2, [r3, #24]
      break;
 801f35a:	e0a5      	b.n	801f4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f35c:	68fb      	ldr	r3, [r7, #12]
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	68b9      	ldr	r1, [r7, #8]
 801f362:	4618      	mov	r0, r3
 801f364:	f000 fb3a 	bl	801f9dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f368:	68fb      	ldr	r3, [r7, #12]
 801f36a:	681b      	ldr	r3, [r3, #0]
 801f36c:	699a      	ldr	r2, [r3, #24]
 801f36e:	68fb      	ldr	r3, [r7, #12]
 801f370:	681b      	ldr	r3, [r3, #0]
 801f372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f378:	68fb      	ldr	r3, [r7, #12]
 801f37a:	681b      	ldr	r3, [r3, #0]
 801f37c:	699a      	ldr	r2, [r3, #24]
 801f37e:	68fb      	ldr	r3, [r7, #12]
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f388:	68fb      	ldr	r3, [r7, #12]
 801f38a:	681b      	ldr	r3, [r3, #0]
 801f38c:	6999      	ldr	r1, [r3, #24]
 801f38e:	68bb      	ldr	r3, [r7, #8]
 801f390:	691b      	ldr	r3, [r3, #16]
 801f392:	021a      	lsls	r2, r3, #8
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	681b      	ldr	r3, [r3, #0]
 801f398:	430a      	orrs	r2, r1
 801f39a:	619a      	str	r2, [r3, #24]
      break;
 801f39c:	e084      	b.n	801f4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f39e:	68fb      	ldr	r3, [r7, #12]
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	68b9      	ldr	r1, [r7, #8]
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f000 fba3 	bl	801faf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f3aa:	68fb      	ldr	r3, [r7, #12]
 801f3ac:	681b      	ldr	r3, [r3, #0]
 801f3ae:	69da      	ldr	r2, [r3, #28]
 801f3b0:	68fb      	ldr	r3, [r7, #12]
 801f3b2:	681b      	ldr	r3, [r3, #0]
 801f3b4:	f042 0208 	orr.w	r2, r2, #8
 801f3b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f3ba:	68fb      	ldr	r3, [r7, #12]
 801f3bc:	681b      	ldr	r3, [r3, #0]
 801f3be:	69da      	ldr	r2, [r3, #28]
 801f3c0:	68fb      	ldr	r3, [r7, #12]
 801f3c2:	681b      	ldr	r3, [r3, #0]
 801f3c4:	f022 0204 	bic.w	r2, r2, #4
 801f3c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f3ca:	68fb      	ldr	r3, [r7, #12]
 801f3cc:	681b      	ldr	r3, [r3, #0]
 801f3ce:	69d9      	ldr	r1, [r3, #28]
 801f3d0:	68bb      	ldr	r3, [r7, #8]
 801f3d2:	691a      	ldr	r2, [r3, #16]
 801f3d4:	68fb      	ldr	r3, [r7, #12]
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	430a      	orrs	r2, r1
 801f3da:	61da      	str	r2, [r3, #28]
      break;
 801f3dc:	e064      	b.n	801f4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f3de:	68fb      	ldr	r3, [r7, #12]
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	68b9      	ldr	r1, [r7, #8]
 801f3e4:	4618      	mov	r0, r3
 801f3e6:	f000 fc0b 	bl	801fc00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f3ea:	68fb      	ldr	r3, [r7, #12]
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	69da      	ldr	r2, [r3, #28]
 801f3f0:	68fb      	ldr	r3, [r7, #12]
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f3f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f3fa:	68fb      	ldr	r3, [r7, #12]
 801f3fc:	681b      	ldr	r3, [r3, #0]
 801f3fe:	69da      	ldr	r2, [r3, #28]
 801f400:	68fb      	ldr	r3, [r7, #12]
 801f402:	681b      	ldr	r3, [r3, #0]
 801f404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	681b      	ldr	r3, [r3, #0]
 801f40e:	69d9      	ldr	r1, [r3, #28]
 801f410:	68bb      	ldr	r3, [r7, #8]
 801f412:	691b      	ldr	r3, [r3, #16]
 801f414:	021a      	lsls	r2, r3, #8
 801f416:	68fb      	ldr	r3, [r7, #12]
 801f418:	681b      	ldr	r3, [r3, #0]
 801f41a:	430a      	orrs	r2, r1
 801f41c:	61da      	str	r2, [r3, #28]
      break;
 801f41e:	e043      	b.n	801f4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f420:	68fb      	ldr	r3, [r7, #12]
 801f422:	681b      	ldr	r3, [r3, #0]
 801f424:	68b9      	ldr	r1, [r7, #8]
 801f426:	4618      	mov	r0, r3
 801f428:	f000 fc54 	bl	801fcd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f42c:	68fb      	ldr	r3, [r7, #12]
 801f42e:	681b      	ldr	r3, [r3, #0]
 801f430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f432:	68fb      	ldr	r3, [r7, #12]
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	f042 0208 	orr.w	r2, r2, #8
 801f43a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f43c:	68fb      	ldr	r3, [r7, #12]
 801f43e:	681b      	ldr	r3, [r3, #0]
 801f440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f442:	68fb      	ldr	r3, [r7, #12]
 801f444:	681b      	ldr	r3, [r3, #0]
 801f446:	f022 0204 	bic.w	r2, r2, #4
 801f44a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f44c:	68fb      	ldr	r3, [r7, #12]
 801f44e:	681b      	ldr	r3, [r3, #0]
 801f450:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801f452:	68bb      	ldr	r3, [r7, #8]
 801f454:	691a      	ldr	r2, [r3, #16]
 801f456:	68fb      	ldr	r3, [r7, #12]
 801f458:	681b      	ldr	r3, [r3, #0]
 801f45a:	430a      	orrs	r2, r1
 801f45c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801f45e:	e023      	b.n	801f4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f460:	68fb      	ldr	r3, [r7, #12]
 801f462:	681b      	ldr	r3, [r3, #0]
 801f464:	68b9      	ldr	r1, [r7, #8]
 801f466:	4618      	mov	r0, r3
 801f468:	f000 fc98 	bl	801fd9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	681b      	ldr	r3, [r3, #0]
 801f470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	681b      	ldr	r3, [r3, #0]
 801f476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f47a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f47c:	68fb      	ldr	r3, [r7, #12]
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f482:	68fb      	ldr	r3, [r7, #12]
 801f484:	681b      	ldr	r3, [r3, #0]
 801f486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f48a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f48c:	68fb      	ldr	r3, [r7, #12]
 801f48e:	681b      	ldr	r3, [r3, #0]
 801f490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801f492:	68bb      	ldr	r3, [r7, #8]
 801f494:	691b      	ldr	r3, [r3, #16]
 801f496:	021a      	lsls	r2, r3, #8
 801f498:	68fb      	ldr	r3, [r7, #12]
 801f49a:	681b      	ldr	r3, [r3, #0]
 801f49c:	430a      	orrs	r2, r1
 801f49e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801f4a0:	e002      	b.n	801f4a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f4a2:	2301      	movs	r3, #1
 801f4a4:	75fb      	strb	r3, [r7, #23]
      break;
 801f4a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f4a8:	68fb      	ldr	r3, [r7, #12]
 801f4aa:	2200      	movs	r2, #0
 801f4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 801f4b2:	4618      	mov	r0, r3
 801f4b4:	3718      	adds	r7, #24
 801f4b6:	46bd      	mov	sp, r7
 801f4b8:	bd80      	pop	{r7, pc}
 801f4ba:	bf00      	nop

0801f4bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801f4bc:	b580      	push	{r7, lr}
 801f4be:	b084      	sub	sp, #16
 801f4c0:	af00      	add	r7, sp, #0
 801f4c2:	6078      	str	r0, [r7, #4]
 801f4c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f4c6:	2300      	movs	r3, #0
 801f4c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f4d0:	2b01      	cmp	r3, #1
 801f4d2:	d101      	bne.n	801f4d8 <HAL_TIM_ConfigClockSource+0x1c>
 801f4d4:	2302      	movs	r3, #2
 801f4d6:	e0dc      	b.n	801f692 <HAL_TIM_ConfigClockSource+0x1d6>
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	2201      	movs	r2, #1
 801f4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801f4e0:	687b      	ldr	r3, [r7, #4]
 801f4e2:	2202      	movs	r2, #2
 801f4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801f4e8:	687b      	ldr	r3, [r7, #4]
 801f4ea:	681b      	ldr	r3, [r3, #0]
 801f4ec:	689b      	ldr	r3, [r3, #8]
 801f4ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801f4f0:	68ba      	ldr	r2, [r7, #8]
 801f4f2:	4b6a      	ldr	r3, [pc, #424]	; (801f69c <HAL_TIM_ConfigClockSource+0x1e0>)
 801f4f4:	4013      	ands	r3, r2
 801f4f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f4f8:	68bb      	ldr	r3, [r7, #8]
 801f4fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801f4fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801f500:	687b      	ldr	r3, [r7, #4]
 801f502:	681b      	ldr	r3, [r3, #0]
 801f504:	68ba      	ldr	r2, [r7, #8]
 801f506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801f508:	683b      	ldr	r3, [r7, #0]
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	4a64      	ldr	r2, [pc, #400]	; (801f6a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 801f50e:	4293      	cmp	r3, r2
 801f510:	f000 80a9 	beq.w	801f666 <HAL_TIM_ConfigClockSource+0x1aa>
 801f514:	4a62      	ldr	r2, [pc, #392]	; (801f6a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 801f516:	4293      	cmp	r3, r2
 801f518:	f200 80ae 	bhi.w	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f51c:	4a61      	ldr	r2, [pc, #388]	; (801f6a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f51e:	4293      	cmp	r3, r2
 801f520:	f000 80a1 	beq.w	801f666 <HAL_TIM_ConfigClockSource+0x1aa>
 801f524:	4a5f      	ldr	r2, [pc, #380]	; (801f6a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f526:	4293      	cmp	r3, r2
 801f528:	f200 80a6 	bhi.w	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f52c:	4a5e      	ldr	r2, [pc, #376]	; (801f6a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f52e:	4293      	cmp	r3, r2
 801f530:	f000 8099 	beq.w	801f666 <HAL_TIM_ConfigClockSource+0x1aa>
 801f534:	4a5c      	ldr	r2, [pc, #368]	; (801f6a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f536:	4293      	cmp	r3, r2
 801f538:	f200 809e 	bhi.w	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f53c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801f540:	f000 8091 	beq.w	801f666 <HAL_TIM_ConfigClockSource+0x1aa>
 801f544:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801f548:	f200 8096 	bhi.w	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f54c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f550:	f000 8089 	beq.w	801f666 <HAL_TIM_ConfigClockSource+0x1aa>
 801f554:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f558:	f200 808e 	bhi.w	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f55c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f560:	d03e      	beq.n	801f5e0 <HAL_TIM_ConfigClockSource+0x124>
 801f562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f566:	f200 8087 	bhi.w	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f56a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f56e:	f000 8086 	beq.w	801f67e <HAL_TIM_ConfigClockSource+0x1c2>
 801f572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f576:	d87f      	bhi.n	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f578:	2b70      	cmp	r3, #112	; 0x70
 801f57a:	d01a      	beq.n	801f5b2 <HAL_TIM_ConfigClockSource+0xf6>
 801f57c:	2b70      	cmp	r3, #112	; 0x70
 801f57e:	d87b      	bhi.n	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f580:	2b60      	cmp	r3, #96	; 0x60
 801f582:	d050      	beq.n	801f626 <HAL_TIM_ConfigClockSource+0x16a>
 801f584:	2b60      	cmp	r3, #96	; 0x60
 801f586:	d877      	bhi.n	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f588:	2b50      	cmp	r3, #80	; 0x50
 801f58a:	d03c      	beq.n	801f606 <HAL_TIM_ConfigClockSource+0x14a>
 801f58c:	2b50      	cmp	r3, #80	; 0x50
 801f58e:	d873      	bhi.n	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f590:	2b40      	cmp	r3, #64	; 0x40
 801f592:	d058      	beq.n	801f646 <HAL_TIM_ConfigClockSource+0x18a>
 801f594:	2b40      	cmp	r3, #64	; 0x40
 801f596:	d86f      	bhi.n	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f598:	2b30      	cmp	r3, #48	; 0x30
 801f59a:	d064      	beq.n	801f666 <HAL_TIM_ConfigClockSource+0x1aa>
 801f59c:	2b30      	cmp	r3, #48	; 0x30
 801f59e:	d86b      	bhi.n	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f5a0:	2b20      	cmp	r3, #32
 801f5a2:	d060      	beq.n	801f666 <HAL_TIM_ConfigClockSource+0x1aa>
 801f5a4:	2b20      	cmp	r3, #32
 801f5a6:	d867      	bhi.n	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
 801f5a8:	2b00      	cmp	r3, #0
 801f5aa:	d05c      	beq.n	801f666 <HAL_TIM_ConfigClockSource+0x1aa>
 801f5ac:	2b10      	cmp	r3, #16
 801f5ae:	d05a      	beq.n	801f666 <HAL_TIM_ConfigClockSource+0x1aa>
 801f5b0:	e062      	b.n	801f678 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f5b2:	687b      	ldr	r3, [r7, #4]
 801f5b4:	6818      	ldr	r0, [r3, #0]
 801f5b6:	683b      	ldr	r3, [r7, #0]
 801f5b8:	6899      	ldr	r1, [r3, #8]
 801f5ba:	683b      	ldr	r3, [r7, #0]
 801f5bc:	685a      	ldr	r2, [r3, #4]
 801f5be:	683b      	ldr	r3, [r7, #0]
 801f5c0:	68db      	ldr	r3, [r3, #12]
 801f5c2:	f000 fe05 	bl	80201d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801f5c6:	687b      	ldr	r3, [r7, #4]
 801f5c8:	681b      	ldr	r3, [r3, #0]
 801f5ca:	689b      	ldr	r3, [r3, #8]
 801f5cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801f5ce:	68bb      	ldr	r3, [r7, #8]
 801f5d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801f5d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801f5d6:	687b      	ldr	r3, [r7, #4]
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	68ba      	ldr	r2, [r7, #8]
 801f5dc:	609a      	str	r2, [r3, #8]
      break;
 801f5de:	e04f      	b.n	801f680 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	6818      	ldr	r0, [r3, #0]
 801f5e4:	683b      	ldr	r3, [r7, #0]
 801f5e6:	6899      	ldr	r1, [r3, #8]
 801f5e8:	683b      	ldr	r3, [r7, #0]
 801f5ea:	685a      	ldr	r2, [r3, #4]
 801f5ec:	683b      	ldr	r3, [r7, #0]
 801f5ee:	68db      	ldr	r3, [r3, #12]
 801f5f0:	f000 fdee 	bl	80201d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801f5f4:	687b      	ldr	r3, [r7, #4]
 801f5f6:	681b      	ldr	r3, [r3, #0]
 801f5f8:	689a      	ldr	r2, [r3, #8]
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	681b      	ldr	r3, [r3, #0]
 801f5fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801f602:	609a      	str	r2, [r3, #8]
      break;
 801f604:	e03c      	b.n	801f680 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	6818      	ldr	r0, [r3, #0]
 801f60a:	683b      	ldr	r3, [r7, #0]
 801f60c:	6859      	ldr	r1, [r3, #4]
 801f60e:	683b      	ldr	r3, [r7, #0]
 801f610:	68db      	ldr	r3, [r3, #12]
 801f612:	461a      	mov	r2, r3
 801f614:	f000 fca8 	bl	801ff68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801f618:	687b      	ldr	r3, [r7, #4]
 801f61a:	681b      	ldr	r3, [r3, #0]
 801f61c:	2150      	movs	r1, #80	; 0x50
 801f61e:	4618      	mov	r0, r3
 801f620:	f000 fdb8 	bl	8020194 <TIM_ITRx_SetConfig>
      break;
 801f624:	e02c      	b.n	801f680 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	6818      	ldr	r0, [r3, #0]
 801f62a:	683b      	ldr	r3, [r7, #0]
 801f62c:	6859      	ldr	r1, [r3, #4]
 801f62e:	683b      	ldr	r3, [r7, #0]
 801f630:	68db      	ldr	r3, [r3, #12]
 801f632:	461a      	mov	r2, r3
 801f634:	f000 fd04 	bl	8020040 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	2160      	movs	r1, #96	; 0x60
 801f63e:	4618      	mov	r0, r3
 801f640:	f000 fda8 	bl	8020194 <TIM_ITRx_SetConfig>
      break;
 801f644:	e01c      	b.n	801f680 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f646:	687b      	ldr	r3, [r7, #4]
 801f648:	6818      	ldr	r0, [r3, #0]
 801f64a:	683b      	ldr	r3, [r7, #0]
 801f64c:	6859      	ldr	r1, [r3, #4]
 801f64e:	683b      	ldr	r3, [r7, #0]
 801f650:	68db      	ldr	r3, [r3, #12]
 801f652:	461a      	mov	r2, r3
 801f654:	f000 fc88 	bl	801ff68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801f658:	687b      	ldr	r3, [r7, #4]
 801f65a:	681b      	ldr	r3, [r3, #0]
 801f65c:	2140      	movs	r1, #64	; 0x40
 801f65e:	4618      	mov	r0, r3
 801f660:	f000 fd98 	bl	8020194 <TIM_ITRx_SetConfig>
      break;
 801f664:	e00c      	b.n	801f680 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801f666:	687b      	ldr	r3, [r7, #4]
 801f668:	681a      	ldr	r2, [r3, #0]
 801f66a:	683b      	ldr	r3, [r7, #0]
 801f66c:	681b      	ldr	r3, [r3, #0]
 801f66e:	4619      	mov	r1, r3
 801f670:	4610      	mov	r0, r2
 801f672:	f000 fd8f 	bl	8020194 <TIM_ITRx_SetConfig>
      break;
 801f676:	e003      	b.n	801f680 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801f678:	2301      	movs	r3, #1
 801f67a:	73fb      	strb	r3, [r7, #15]
      break;
 801f67c:	e000      	b.n	801f680 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801f67e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801f680:	687b      	ldr	r3, [r7, #4]
 801f682:	2201      	movs	r2, #1
 801f684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f688:	687b      	ldr	r3, [r7, #4]
 801f68a:	2200      	movs	r2, #0
 801f68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f690:	7bfb      	ldrb	r3, [r7, #15]
}
 801f692:	4618      	mov	r0, r3
 801f694:	3710      	adds	r7, #16
 801f696:	46bd      	mov	sp, r7
 801f698:	bd80      	pop	{r7, pc}
 801f69a:	bf00      	nop
 801f69c:	ffceff88 	.word	0xffceff88
 801f6a0:	00100040 	.word	0x00100040
 801f6a4:	00100030 	.word	0x00100030
 801f6a8:	00100020 	.word	0x00100020

0801f6ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f6ac:	b480      	push	{r7}
 801f6ae:	b085      	sub	sp, #20
 801f6b0:	af00      	add	r7, sp, #0
 801f6b2:	6078      	str	r0, [r7, #4]
 801f6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801f6b6:	2300      	movs	r3, #0
 801f6b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801f6ba:	683b      	ldr	r3, [r7, #0]
 801f6bc:	2b0c      	cmp	r3, #12
 801f6be:	d831      	bhi.n	801f724 <HAL_TIM_ReadCapturedValue+0x78>
 801f6c0:	a201      	add	r2, pc, #4	; (adr r2, 801f6c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 801f6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f6c6:	bf00      	nop
 801f6c8:	0801f6fd 	.word	0x0801f6fd
 801f6cc:	0801f725 	.word	0x0801f725
 801f6d0:	0801f725 	.word	0x0801f725
 801f6d4:	0801f725 	.word	0x0801f725
 801f6d8:	0801f707 	.word	0x0801f707
 801f6dc:	0801f725 	.word	0x0801f725
 801f6e0:	0801f725 	.word	0x0801f725
 801f6e4:	0801f725 	.word	0x0801f725
 801f6e8:	0801f711 	.word	0x0801f711
 801f6ec:	0801f725 	.word	0x0801f725
 801f6f0:	0801f725 	.word	0x0801f725
 801f6f4:	0801f725 	.word	0x0801f725
 801f6f8:	0801f71b 	.word	0x0801f71b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	681b      	ldr	r3, [r3, #0]
 801f700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f702:	60fb      	str	r3, [r7, #12]

      break;
 801f704:	e00f      	b.n	801f726 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f70c:	60fb      	str	r3, [r7, #12]

      break;
 801f70e:	e00a      	b.n	801f726 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	681b      	ldr	r3, [r3, #0]
 801f714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f716:	60fb      	str	r3, [r7, #12]

      break;
 801f718:	e005      	b.n	801f726 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f720:	60fb      	str	r3, [r7, #12]

      break;
 801f722:	e000      	b.n	801f726 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801f724:	bf00      	nop
  }

  return tmpreg;
 801f726:	68fb      	ldr	r3, [r7, #12]
}
 801f728:	4618      	mov	r0, r3
 801f72a:	3714      	adds	r7, #20
 801f72c:	46bd      	mov	sp, r7
 801f72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f732:	4770      	bx	lr

0801f734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f734:	b480      	push	{r7}
 801f736:	b083      	sub	sp, #12
 801f738:	af00      	add	r7, sp, #0
 801f73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f73c:	bf00      	nop
 801f73e:	370c      	adds	r7, #12
 801f740:	46bd      	mov	sp, r7
 801f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f746:	4770      	bx	lr

0801f748 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f748:	b480      	push	{r7}
 801f74a:	b083      	sub	sp, #12
 801f74c:	af00      	add	r7, sp, #0
 801f74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f750:	bf00      	nop
 801f752:	370c      	adds	r7, #12
 801f754:	46bd      	mov	sp, r7
 801f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f75a:	4770      	bx	lr

0801f75c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f75c:	b480      	push	{r7}
 801f75e:	b083      	sub	sp, #12
 801f760:	af00      	add	r7, sp, #0
 801f762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f764:	bf00      	nop
 801f766:	370c      	adds	r7, #12
 801f768:	46bd      	mov	sp, r7
 801f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f76e:	4770      	bx	lr

0801f770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801f770:	b480      	push	{r7}
 801f772:	b085      	sub	sp, #20
 801f774:	af00      	add	r7, sp, #0
 801f776:	6078      	str	r0, [r7, #4]
 801f778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f77a:	687b      	ldr	r3, [r7, #4]
 801f77c:	681b      	ldr	r3, [r3, #0]
 801f77e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	4a44      	ldr	r2, [pc, #272]	; (801f894 <TIM_Base_SetConfig+0x124>)
 801f784:	4293      	cmp	r3, r2
 801f786:	d013      	beq.n	801f7b0 <TIM_Base_SetConfig+0x40>
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f78e:	d00f      	beq.n	801f7b0 <TIM_Base_SetConfig+0x40>
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	4a41      	ldr	r2, [pc, #260]	; (801f898 <TIM_Base_SetConfig+0x128>)
 801f794:	4293      	cmp	r3, r2
 801f796:	d00b      	beq.n	801f7b0 <TIM_Base_SetConfig+0x40>
 801f798:	687b      	ldr	r3, [r7, #4]
 801f79a:	4a40      	ldr	r2, [pc, #256]	; (801f89c <TIM_Base_SetConfig+0x12c>)
 801f79c:	4293      	cmp	r3, r2
 801f79e:	d007      	beq.n	801f7b0 <TIM_Base_SetConfig+0x40>
 801f7a0:	687b      	ldr	r3, [r7, #4]
 801f7a2:	4a3f      	ldr	r2, [pc, #252]	; (801f8a0 <TIM_Base_SetConfig+0x130>)
 801f7a4:	4293      	cmp	r3, r2
 801f7a6:	d003      	beq.n	801f7b0 <TIM_Base_SetConfig+0x40>
 801f7a8:	687b      	ldr	r3, [r7, #4]
 801f7aa:	4a3e      	ldr	r2, [pc, #248]	; (801f8a4 <TIM_Base_SetConfig+0x134>)
 801f7ac:	4293      	cmp	r3, r2
 801f7ae:	d108      	bne.n	801f7c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f7b0:	68fb      	ldr	r3, [r7, #12]
 801f7b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f7b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f7b8:	683b      	ldr	r3, [r7, #0]
 801f7ba:	685b      	ldr	r3, [r3, #4]
 801f7bc:	68fa      	ldr	r2, [r7, #12]
 801f7be:	4313      	orrs	r3, r2
 801f7c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f7c2:	687b      	ldr	r3, [r7, #4]
 801f7c4:	4a33      	ldr	r2, [pc, #204]	; (801f894 <TIM_Base_SetConfig+0x124>)
 801f7c6:	4293      	cmp	r3, r2
 801f7c8:	d027      	beq.n	801f81a <TIM_Base_SetConfig+0xaa>
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f7d0:	d023      	beq.n	801f81a <TIM_Base_SetConfig+0xaa>
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	4a30      	ldr	r2, [pc, #192]	; (801f898 <TIM_Base_SetConfig+0x128>)
 801f7d6:	4293      	cmp	r3, r2
 801f7d8:	d01f      	beq.n	801f81a <TIM_Base_SetConfig+0xaa>
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	4a2f      	ldr	r2, [pc, #188]	; (801f89c <TIM_Base_SetConfig+0x12c>)
 801f7de:	4293      	cmp	r3, r2
 801f7e0:	d01b      	beq.n	801f81a <TIM_Base_SetConfig+0xaa>
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	4a2e      	ldr	r2, [pc, #184]	; (801f8a0 <TIM_Base_SetConfig+0x130>)
 801f7e6:	4293      	cmp	r3, r2
 801f7e8:	d017      	beq.n	801f81a <TIM_Base_SetConfig+0xaa>
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	4a2d      	ldr	r2, [pc, #180]	; (801f8a4 <TIM_Base_SetConfig+0x134>)
 801f7ee:	4293      	cmp	r3, r2
 801f7f0:	d013      	beq.n	801f81a <TIM_Base_SetConfig+0xaa>
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	4a2c      	ldr	r2, [pc, #176]	; (801f8a8 <TIM_Base_SetConfig+0x138>)
 801f7f6:	4293      	cmp	r3, r2
 801f7f8:	d00f      	beq.n	801f81a <TIM_Base_SetConfig+0xaa>
 801f7fa:	687b      	ldr	r3, [r7, #4]
 801f7fc:	4a2b      	ldr	r2, [pc, #172]	; (801f8ac <TIM_Base_SetConfig+0x13c>)
 801f7fe:	4293      	cmp	r3, r2
 801f800:	d00b      	beq.n	801f81a <TIM_Base_SetConfig+0xaa>
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	4a2a      	ldr	r2, [pc, #168]	; (801f8b0 <TIM_Base_SetConfig+0x140>)
 801f806:	4293      	cmp	r3, r2
 801f808:	d007      	beq.n	801f81a <TIM_Base_SetConfig+0xaa>
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	4a29      	ldr	r2, [pc, #164]	; (801f8b4 <TIM_Base_SetConfig+0x144>)
 801f80e:	4293      	cmp	r3, r2
 801f810:	d003      	beq.n	801f81a <TIM_Base_SetConfig+0xaa>
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	4a28      	ldr	r2, [pc, #160]	; (801f8b8 <TIM_Base_SetConfig+0x148>)
 801f816:	4293      	cmp	r3, r2
 801f818:	d108      	bne.n	801f82c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f81a:	68fb      	ldr	r3, [r7, #12]
 801f81c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f822:	683b      	ldr	r3, [r7, #0]
 801f824:	68db      	ldr	r3, [r3, #12]
 801f826:	68fa      	ldr	r2, [r7, #12]
 801f828:	4313      	orrs	r3, r2
 801f82a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f82c:	68fb      	ldr	r3, [r7, #12]
 801f82e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801f832:	683b      	ldr	r3, [r7, #0]
 801f834:	695b      	ldr	r3, [r3, #20]
 801f836:	4313      	orrs	r3, r2
 801f838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801f83a:	687b      	ldr	r3, [r7, #4]
 801f83c:	68fa      	ldr	r2, [r7, #12]
 801f83e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f840:	683b      	ldr	r3, [r7, #0]
 801f842:	689a      	ldr	r2, [r3, #8]
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f848:	683b      	ldr	r3, [r7, #0]
 801f84a:	681a      	ldr	r2, [r3, #0]
 801f84c:	687b      	ldr	r3, [r7, #4]
 801f84e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f850:	687b      	ldr	r3, [r7, #4]
 801f852:	4a10      	ldr	r2, [pc, #64]	; (801f894 <TIM_Base_SetConfig+0x124>)
 801f854:	4293      	cmp	r3, r2
 801f856:	d00f      	beq.n	801f878 <TIM_Base_SetConfig+0x108>
 801f858:	687b      	ldr	r3, [r7, #4]
 801f85a:	4a12      	ldr	r2, [pc, #72]	; (801f8a4 <TIM_Base_SetConfig+0x134>)
 801f85c:	4293      	cmp	r3, r2
 801f85e:	d00b      	beq.n	801f878 <TIM_Base_SetConfig+0x108>
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	4a11      	ldr	r2, [pc, #68]	; (801f8a8 <TIM_Base_SetConfig+0x138>)
 801f864:	4293      	cmp	r3, r2
 801f866:	d007      	beq.n	801f878 <TIM_Base_SetConfig+0x108>
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	4a10      	ldr	r2, [pc, #64]	; (801f8ac <TIM_Base_SetConfig+0x13c>)
 801f86c:	4293      	cmp	r3, r2
 801f86e:	d003      	beq.n	801f878 <TIM_Base_SetConfig+0x108>
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	4a0f      	ldr	r2, [pc, #60]	; (801f8b0 <TIM_Base_SetConfig+0x140>)
 801f874:	4293      	cmp	r3, r2
 801f876:	d103      	bne.n	801f880 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f878:	683b      	ldr	r3, [r7, #0]
 801f87a:	691a      	ldr	r2, [r3, #16]
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f880:	687b      	ldr	r3, [r7, #4]
 801f882:	2201      	movs	r2, #1
 801f884:	615a      	str	r2, [r3, #20]
}
 801f886:	bf00      	nop
 801f888:	3714      	adds	r7, #20
 801f88a:	46bd      	mov	sp, r7
 801f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f890:	4770      	bx	lr
 801f892:	bf00      	nop
 801f894:	40010000 	.word	0x40010000
 801f898:	40000400 	.word	0x40000400
 801f89c:	40000800 	.word	0x40000800
 801f8a0:	40000c00 	.word	0x40000c00
 801f8a4:	40010400 	.word	0x40010400
 801f8a8:	40014000 	.word	0x40014000
 801f8ac:	40014400 	.word	0x40014400
 801f8b0:	40014800 	.word	0x40014800
 801f8b4:	4000e000 	.word	0x4000e000
 801f8b8:	4000e400 	.word	0x4000e400

0801f8bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801f8bc:	b480      	push	{r7}
 801f8be:	b087      	sub	sp, #28
 801f8c0:	af00      	add	r7, sp, #0
 801f8c2:	6078      	str	r0, [r7, #4]
 801f8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	6a1b      	ldr	r3, [r3, #32]
 801f8ca:	f023 0201 	bic.w	r2, r3, #1
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f8d2:	687b      	ldr	r3, [r7, #4]
 801f8d4:	6a1b      	ldr	r3, [r3, #32]
 801f8d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f8d8:	687b      	ldr	r3, [r7, #4]
 801f8da:	685b      	ldr	r3, [r3, #4]
 801f8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	699b      	ldr	r3, [r3, #24]
 801f8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801f8e4:	68fa      	ldr	r2, [r7, #12]
 801f8e6:	4b37      	ldr	r3, [pc, #220]	; (801f9c4 <TIM_OC1_SetConfig+0x108>)
 801f8e8:	4013      	ands	r3, r2
 801f8ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801f8ec:	68fb      	ldr	r3, [r7, #12]
 801f8ee:	f023 0303 	bic.w	r3, r3, #3
 801f8f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f8f4:	683b      	ldr	r3, [r7, #0]
 801f8f6:	681b      	ldr	r3, [r3, #0]
 801f8f8:	68fa      	ldr	r2, [r7, #12]
 801f8fa:	4313      	orrs	r3, r2
 801f8fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801f8fe:	697b      	ldr	r3, [r7, #20]
 801f900:	f023 0302 	bic.w	r3, r3, #2
 801f904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801f906:	683b      	ldr	r3, [r7, #0]
 801f908:	689b      	ldr	r3, [r3, #8]
 801f90a:	697a      	ldr	r2, [r7, #20]
 801f90c:	4313      	orrs	r3, r2
 801f90e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	4a2d      	ldr	r2, [pc, #180]	; (801f9c8 <TIM_OC1_SetConfig+0x10c>)
 801f914:	4293      	cmp	r3, r2
 801f916:	d00f      	beq.n	801f938 <TIM_OC1_SetConfig+0x7c>
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	4a2c      	ldr	r2, [pc, #176]	; (801f9cc <TIM_OC1_SetConfig+0x110>)
 801f91c:	4293      	cmp	r3, r2
 801f91e:	d00b      	beq.n	801f938 <TIM_OC1_SetConfig+0x7c>
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	4a2b      	ldr	r2, [pc, #172]	; (801f9d0 <TIM_OC1_SetConfig+0x114>)
 801f924:	4293      	cmp	r3, r2
 801f926:	d007      	beq.n	801f938 <TIM_OC1_SetConfig+0x7c>
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	4a2a      	ldr	r2, [pc, #168]	; (801f9d4 <TIM_OC1_SetConfig+0x118>)
 801f92c:	4293      	cmp	r3, r2
 801f92e:	d003      	beq.n	801f938 <TIM_OC1_SetConfig+0x7c>
 801f930:	687b      	ldr	r3, [r7, #4]
 801f932:	4a29      	ldr	r2, [pc, #164]	; (801f9d8 <TIM_OC1_SetConfig+0x11c>)
 801f934:	4293      	cmp	r3, r2
 801f936:	d10c      	bne.n	801f952 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801f938:	697b      	ldr	r3, [r7, #20]
 801f93a:	f023 0308 	bic.w	r3, r3, #8
 801f93e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801f940:	683b      	ldr	r3, [r7, #0]
 801f942:	68db      	ldr	r3, [r3, #12]
 801f944:	697a      	ldr	r2, [r7, #20]
 801f946:	4313      	orrs	r3, r2
 801f948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801f94a:	697b      	ldr	r3, [r7, #20]
 801f94c:	f023 0304 	bic.w	r3, r3, #4
 801f950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f952:	687b      	ldr	r3, [r7, #4]
 801f954:	4a1c      	ldr	r2, [pc, #112]	; (801f9c8 <TIM_OC1_SetConfig+0x10c>)
 801f956:	4293      	cmp	r3, r2
 801f958:	d00f      	beq.n	801f97a <TIM_OC1_SetConfig+0xbe>
 801f95a:	687b      	ldr	r3, [r7, #4]
 801f95c:	4a1b      	ldr	r2, [pc, #108]	; (801f9cc <TIM_OC1_SetConfig+0x110>)
 801f95e:	4293      	cmp	r3, r2
 801f960:	d00b      	beq.n	801f97a <TIM_OC1_SetConfig+0xbe>
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	4a1a      	ldr	r2, [pc, #104]	; (801f9d0 <TIM_OC1_SetConfig+0x114>)
 801f966:	4293      	cmp	r3, r2
 801f968:	d007      	beq.n	801f97a <TIM_OC1_SetConfig+0xbe>
 801f96a:	687b      	ldr	r3, [r7, #4]
 801f96c:	4a19      	ldr	r2, [pc, #100]	; (801f9d4 <TIM_OC1_SetConfig+0x118>)
 801f96e:	4293      	cmp	r3, r2
 801f970:	d003      	beq.n	801f97a <TIM_OC1_SetConfig+0xbe>
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	4a18      	ldr	r2, [pc, #96]	; (801f9d8 <TIM_OC1_SetConfig+0x11c>)
 801f976:	4293      	cmp	r3, r2
 801f978:	d111      	bne.n	801f99e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801f97a:	693b      	ldr	r3, [r7, #16]
 801f97c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801f982:	693b      	ldr	r3, [r7, #16]
 801f984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801f988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801f98a:	683b      	ldr	r3, [r7, #0]
 801f98c:	695b      	ldr	r3, [r3, #20]
 801f98e:	693a      	ldr	r2, [r7, #16]
 801f990:	4313      	orrs	r3, r2
 801f992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801f994:	683b      	ldr	r3, [r7, #0]
 801f996:	699b      	ldr	r3, [r3, #24]
 801f998:	693a      	ldr	r2, [r7, #16]
 801f99a:	4313      	orrs	r3, r2
 801f99c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	693a      	ldr	r2, [r7, #16]
 801f9a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	68fa      	ldr	r2, [r7, #12]
 801f9a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801f9aa:	683b      	ldr	r3, [r7, #0]
 801f9ac:	685a      	ldr	r2, [r3, #4]
 801f9ae:	687b      	ldr	r3, [r7, #4]
 801f9b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f9b2:	687b      	ldr	r3, [r7, #4]
 801f9b4:	697a      	ldr	r2, [r7, #20]
 801f9b6:	621a      	str	r2, [r3, #32]
}
 801f9b8:	bf00      	nop
 801f9ba:	371c      	adds	r7, #28
 801f9bc:	46bd      	mov	sp, r7
 801f9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9c2:	4770      	bx	lr
 801f9c4:	fffeff8f 	.word	0xfffeff8f
 801f9c8:	40010000 	.word	0x40010000
 801f9cc:	40010400 	.word	0x40010400
 801f9d0:	40014000 	.word	0x40014000
 801f9d4:	40014400 	.word	0x40014400
 801f9d8:	40014800 	.word	0x40014800

0801f9dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801f9dc:	b480      	push	{r7}
 801f9de:	b087      	sub	sp, #28
 801f9e0:	af00      	add	r7, sp, #0
 801f9e2:	6078      	str	r0, [r7, #4]
 801f9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	6a1b      	ldr	r3, [r3, #32]
 801f9ea:	f023 0210 	bic.w	r2, r3, #16
 801f9ee:	687b      	ldr	r3, [r7, #4]
 801f9f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f9f2:	687b      	ldr	r3, [r7, #4]
 801f9f4:	6a1b      	ldr	r3, [r3, #32]
 801f9f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	685b      	ldr	r3, [r3, #4]
 801f9fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f9fe:	687b      	ldr	r3, [r7, #4]
 801fa00:	699b      	ldr	r3, [r3, #24]
 801fa02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801fa04:	68fa      	ldr	r2, [r7, #12]
 801fa06:	4b34      	ldr	r3, [pc, #208]	; (801fad8 <TIM_OC2_SetConfig+0xfc>)
 801fa08:	4013      	ands	r3, r2
 801fa0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801fa0c:	68fb      	ldr	r3, [r7, #12]
 801fa0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fa12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fa14:	683b      	ldr	r3, [r7, #0]
 801fa16:	681b      	ldr	r3, [r3, #0]
 801fa18:	021b      	lsls	r3, r3, #8
 801fa1a:	68fa      	ldr	r2, [r7, #12]
 801fa1c:	4313      	orrs	r3, r2
 801fa1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801fa20:	697b      	ldr	r3, [r7, #20]
 801fa22:	f023 0320 	bic.w	r3, r3, #32
 801fa26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801fa28:	683b      	ldr	r3, [r7, #0]
 801fa2a:	689b      	ldr	r3, [r3, #8]
 801fa2c:	011b      	lsls	r3, r3, #4
 801fa2e:	697a      	ldr	r2, [r7, #20]
 801fa30:	4313      	orrs	r3, r2
 801fa32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801fa34:	687b      	ldr	r3, [r7, #4]
 801fa36:	4a29      	ldr	r2, [pc, #164]	; (801fadc <TIM_OC2_SetConfig+0x100>)
 801fa38:	4293      	cmp	r3, r2
 801fa3a:	d003      	beq.n	801fa44 <TIM_OC2_SetConfig+0x68>
 801fa3c:	687b      	ldr	r3, [r7, #4]
 801fa3e:	4a28      	ldr	r2, [pc, #160]	; (801fae0 <TIM_OC2_SetConfig+0x104>)
 801fa40:	4293      	cmp	r3, r2
 801fa42:	d10d      	bne.n	801fa60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801fa44:	697b      	ldr	r3, [r7, #20]
 801fa46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801fa4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801fa4c:	683b      	ldr	r3, [r7, #0]
 801fa4e:	68db      	ldr	r3, [r3, #12]
 801fa50:	011b      	lsls	r3, r3, #4
 801fa52:	697a      	ldr	r2, [r7, #20]
 801fa54:	4313      	orrs	r3, r2
 801fa56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801fa58:	697b      	ldr	r3, [r7, #20]
 801fa5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fa5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fa60:	687b      	ldr	r3, [r7, #4]
 801fa62:	4a1e      	ldr	r2, [pc, #120]	; (801fadc <TIM_OC2_SetConfig+0x100>)
 801fa64:	4293      	cmp	r3, r2
 801fa66:	d00f      	beq.n	801fa88 <TIM_OC2_SetConfig+0xac>
 801fa68:	687b      	ldr	r3, [r7, #4]
 801fa6a:	4a1d      	ldr	r2, [pc, #116]	; (801fae0 <TIM_OC2_SetConfig+0x104>)
 801fa6c:	4293      	cmp	r3, r2
 801fa6e:	d00b      	beq.n	801fa88 <TIM_OC2_SetConfig+0xac>
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	4a1c      	ldr	r2, [pc, #112]	; (801fae4 <TIM_OC2_SetConfig+0x108>)
 801fa74:	4293      	cmp	r3, r2
 801fa76:	d007      	beq.n	801fa88 <TIM_OC2_SetConfig+0xac>
 801fa78:	687b      	ldr	r3, [r7, #4]
 801fa7a:	4a1b      	ldr	r2, [pc, #108]	; (801fae8 <TIM_OC2_SetConfig+0x10c>)
 801fa7c:	4293      	cmp	r3, r2
 801fa7e:	d003      	beq.n	801fa88 <TIM_OC2_SetConfig+0xac>
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	4a1a      	ldr	r2, [pc, #104]	; (801faec <TIM_OC2_SetConfig+0x110>)
 801fa84:	4293      	cmp	r3, r2
 801fa86:	d113      	bne.n	801fab0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801fa88:	693b      	ldr	r3, [r7, #16]
 801fa8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fa8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801fa90:	693b      	ldr	r3, [r7, #16]
 801fa92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801fa96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801fa98:	683b      	ldr	r3, [r7, #0]
 801fa9a:	695b      	ldr	r3, [r3, #20]
 801fa9c:	009b      	lsls	r3, r3, #2
 801fa9e:	693a      	ldr	r2, [r7, #16]
 801faa0:	4313      	orrs	r3, r2
 801faa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801faa4:	683b      	ldr	r3, [r7, #0]
 801faa6:	699b      	ldr	r3, [r3, #24]
 801faa8:	009b      	lsls	r3, r3, #2
 801faaa:	693a      	ldr	r2, [r7, #16]
 801faac:	4313      	orrs	r3, r2
 801faae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	693a      	ldr	r2, [r7, #16]
 801fab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	68fa      	ldr	r2, [r7, #12]
 801faba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801fabc:	683b      	ldr	r3, [r7, #0]
 801fabe:	685a      	ldr	r2, [r3, #4]
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	697a      	ldr	r2, [r7, #20]
 801fac8:	621a      	str	r2, [r3, #32]
}
 801faca:	bf00      	nop
 801facc:	371c      	adds	r7, #28
 801face:	46bd      	mov	sp, r7
 801fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fad4:	4770      	bx	lr
 801fad6:	bf00      	nop
 801fad8:	feff8fff 	.word	0xfeff8fff
 801fadc:	40010000 	.word	0x40010000
 801fae0:	40010400 	.word	0x40010400
 801fae4:	40014000 	.word	0x40014000
 801fae8:	40014400 	.word	0x40014400
 801faec:	40014800 	.word	0x40014800

0801faf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801faf0:	b480      	push	{r7}
 801faf2:	b087      	sub	sp, #28
 801faf4:	af00      	add	r7, sp, #0
 801faf6:	6078      	str	r0, [r7, #4]
 801faf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801fafa:	687b      	ldr	r3, [r7, #4]
 801fafc:	6a1b      	ldr	r3, [r3, #32]
 801fafe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fb06:	687b      	ldr	r3, [r7, #4]
 801fb08:	6a1b      	ldr	r3, [r3, #32]
 801fb0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fb0c:	687b      	ldr	r3, [r7, #4]
 801fb0e:	685b      	ldr	r3, [r3, #4]
 801fb10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fb12:	687b      	ldr	r3, [r7, #4]
 801fb14:	69db      	ldr	r3, [r3, #28]
 801fb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801fb18:	68fa      	ldr	r2, [r7, #12]
 801fb1a:	4b33      	ldr	r3, [pc, #204]	; (801fbe8 <TIM_OC3_SetConfig+0xf8>)
 801fb1c:	4013      	ands	r3, r2
 801fb1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801fb20:	68fb      	ldr	r3, [r7, #12]
 801fb22:	f023 0303 	bic.w	r3, r3, #3
 801fb26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fb28:	683b      	ldr	r3, [r7, #0]
 801fb2a:	681b      	ldr	r3, [r3, #0]
 801fb2c:	68fa      	ldr	r2, [r7, #12]
 801fb2e:	4313      	orrs	r3, r2
 801fb30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801fb32:	697b      	ldr	r3, [r7, #20]
 801fb34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801fb38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801fb3a:	683b      	ldr	r3, [r7, #0]
 801fb3c:	689b      	ldr	r3, [r3, #8]
 801fb3e:	021b      	lsls	r3, r3, #8
 801fb40:	697a      	ldr	r2, [r7, #20]
 801fb42:	4313      	orrs	r3, r2
 801fb44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	4a28      	ldr	r2, [pc, #160]	; (801fbec <TIM_OC3_SetConfig+0xfc>)
 801fb4a:	4293      	cmp	r3, r2
 801fb4c:	d003      	beq.n	801fb56 <TIM_OC3_SetConfig+0x66>
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	4a27      	ldr	r2, [pc, #156]	; (801fbf0 <TIM_OC3_SetConfig+0x100>)
 801fb52:	4293      	cmp	r3, r2
 801fb54:	d10d      	bne.n	801fb72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801fb56:	697b      	ldr	r3, [r7, #20]
 801fb58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801fb5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801fb5e:	683b      	ldr	r3, [r7, #0]
 801fb60:	68db      	ldr	r3, [r3, #12]
 801fb62:	021b      	lsls	r3, r3, #8
 801fb64:	697a      	ldr	r2, [r7, #20]
 801fb66:	4313      	orrs	r3, r2
 801fb68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801fb6a:	697b      	ldr	r3, [r7, #20]
 801fb6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fb70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fb72:	687b      	ldr	r3, [r7, #4]
 801fb74:	4a1d      	ldr	r2, [pc, #116]	; (801fbec <TIM_OC3_SetConfig+0xfc>)
 801fb76:	4293      	cmp	r3, r2
 801fb78:	d00f      	beq.n	801fb9a <TIM_OC3_SetConfig+0xaa>
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	4a1c      	ldr	r2, [pc, #112]	; (801fbf0 <TIM_OC3_SetConfig+0x100>)
 801fb7e:	4293      	cmp	r3, r2
 801fb80:	d00b      	beq.n	801fb9a <TIM_OC3_SetConfig+0xaa>
 801fb82:	687b      	ldr	r3, [r7, #4]
 801fb84:	4a1b      	ldr	r2, [pc, #108]	; (801fbf4 <TIM_OC3_SetConfig+0x104>)
 801fb86:	4293      	cmp	r3, r2
 801fb88:	d007      	beq.n	801fb9a <TIM_OC3_SetConfig+0xaa>
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	4a1a      	ldr	r2, [pc, #104]	; (801fbf8 <TIM_OC3_SetConfig+0x108>)
 801fb8e:	4293      	cmp	r3, r2
 801fb90:	d003      	beq.n	801fb9a <TIM_OC3_SetConfig+0xaa>
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	4a19      	ldr	r2, [pc, #100]	; (801fbfc <TIM_OC3_SetConfig+0x10c>)
 801fb96:	4293      	cmp	r3, r2
 801fb98:	d113      	bne.n	801fbc2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801fb9a:	693b      	ldr	r3, [r7, #16]
 801fb9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801fba2:	693b      	ldr	r3, [r7, #16]
 801fba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801fba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801fbaa:	683b      	ldr	r3, [r7, #0]
 801fbac:	695b      	ldr	r3, [r3, #20]
 801fbae:	011b      	lsls	r3, r3, #4
 801fbb0:	693a      	ldr	r2, [r7, #16]
 801fbb2:	4313      	orrs	r3, r2
 801fbb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801fbb6:	683b      	ldr	r3, [r7, #0]
 801fbb8:	699b      	ldr	r3, [r3, #24]
 801fbba:	011b      	lsls	r3, r3, #4
 801fbbc:	693a      	ldr	r2, [r7, #16]
 801fbbe:	4313      	orrs	r3, r2
 801fbc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fbc2:	687b      	ldr	r3, [r7, #4]
 801fbc4:	693a      	ldr	r2, [r7, #16]
 801fbc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	68fa      	ldr	r2, [r7, #12]
 801fbcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801fbce:	683b      	ldr	r3, [r7, #0]
 801fbd0:	685a      	ldr	r2, [r3, #4]
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fbd6:	687b      	ldr	r3, [r7, #4]
 801fbd8:	697a      	ldr	r2, [r7, #20]
 801fbda:	621a      	str	r2, [r3, #32]
}
 801fbdc:	bf00      	nop
 801fbde:	371c      	adds	r7, #28
 801fbe0:	46bd      	mov	sp, r7
 801fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbe6:	4770      	bx	lr
 801fbe8:	fffeff8f 	.word	0xfffeff8f
 801fbec:	40010000 	.word	0x40010000
 801fbf0:	40010400 	.word	0x40010400
 801fbf4:	40014000 	.word	0x40014000
 801fbf8:	40014400 	.word	0x40014400
 801fbfc:	40014800 	.word	0x40014800

0801fc00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fc00:	b480      	push	{r7}
 801fc02:	b087      	sub	sp, #28
 801fc04:	af00      	add	r7, sp, #0
 801fc06:	6078      	str	r0, [r7, #4]
 801fc08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	6a1b      	ldr	r3, [r3, #32]
 801fc0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801fc12:	687b      	ldr	r3, [r7, #4]
 801fc14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	6a1b      	ldr	r3, [r3, #32]
 801fc1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	685b      	ldr	r3, [r3, #4]
 801fc20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fc22:	687b      	ldr	r3, [r7, #4]
 801fc24:	69db      	ldr	r3, [r3, #28]
 801fc26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801fc28:	68fa      	ldr	r2, [r7, #12]
 801fc2a:	4b24      	ldr	r3, [pc, #144]	; (801fcbc <TIM_OC4_SetConfig+0xbc>)
 801fc2c:	4013      	ands	r3, r2
 801fc2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801fc30:	68fb      	ldr	r3, [r7, #12]
 801fc32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fc36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fc38:	683b      	ldr	r3, [r7, #0]
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	021b      	lsls	r3, r3, #8
 801fc3e:	68fa      	ldr	r2, [r7, #12]
 801fc40:	4313      	orrs	r3, r2
 801fc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801fc44:	693b      	ldr	r3, [r7, #16]
 801fc46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801fc4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801fc4c:	683b      	ldr	r3, [r7, #0]
 801fc4e:	689b      	ldr	r3, [r3, #8]
 801fc50:	031b      	lsls	r3, r3, #12
 801fc52:	693a      	ldr	r2, [r7, #16]
 801fc54:	4313      	orrs	r3, r2
 801fc56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	4a19      	ldr	r2, [pc, #100]	; (801fcc0 <TIM_OC4_SetConfig+0xc0>)
 801fc5c:	4293      	cmp	r3, r2
 801fc5e:	d00f      	beq.n	801fc80 <TIM_OC4_SetConfig+0x80>
 801fc60:	687b      	ldr	r3, [r7, #4]
 801fc62:	4a18      	ldr	r2, [pc, #96]	; (801fcc4 <TIM_OC4_SetConfig+0xc4>)
 801fc64:	4293      	cmp	r3, r2
 801fc66:	d00b      	beq.n	801fc80 <TIM_OC4_SetConfig+0x80>
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	4a17      	ldr	r2, [pc, #92]	; (801fcc8 <TIM_OC4_SetConfig+0xc8>)
 801fc6c:	4293      	cmp	r3, r2
 801fc6e:	d007      	beq.n	801fc80 <TIM_OC4_SetConfig+0x80>
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	4a16      	ldr	r2, [pc, #88]	; (801fccc <TIM_OC4_SetConfig+0xcc>)
 801fc74:	4293      	cmp	r3, r2
 801fc76:	d003      	beq.n	801fc80 <TIM_OC4_SetConfig+0x80>
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	4a15      	ldr	r2, [pc, #84]	; (801fcd0 <TIM_OC4_SetConfig+0xd0>)
 801fc7c:	4293      	cmp	r3, r2
 801fc7e:	d109      	bne.n	801fc94 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801fc80:	697b      	ldr	r3, [r7, #20]
 801fc82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801fc86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801fc88:	683b      	ldr	r3, [r7, #0]
 801fc8a:	695b      	ldr	r3, [r3, #20]
 801fc8c:	019b      	lsls	r3, r3, #6
 801fc8e:	697a      	ldr	r2, [r7, #20]
 801fc90:	4313      	orrs	r3, r2
 801fc92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	697a      	ldr	r2, [r7, #20]
 801fc98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	68fa      	ldr	r2, [r7, #12]
 801fc9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801fca0:	683b      	ldr	r3, [r7, #0]
 801fca2:	685a      	ldr	r2, [r3, #4]
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	693a      	ldr	r2, [r7, #16]
 801fcac:	621a      	str	r2, [r3, #32]
}
 801fcae:	bf00      	nop
 801fcb0:	371c      	adds	r7, #28
 801fcb2:	46bd      	mov	sp, r7
 801fcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcb8:	4770      	bx	lr
 801fcba:	bf00      	nop
 801fcbc:	feff8fff 	.word	0xfeff8fff
 801fcc0:	40010000 	.word	0x40010000
 801fcc4:	40010400 	.word	0x40010400
 801fcc8:	40014000 	.word	0x40014000
 801fccc:	40014400 	.word	0x40014400
 801fcd0:	40014800 	.word	0x40014800

0801fcd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801fcd4:	b480      	push	{r7}
 801fcd6:	b087      	sub	sp, #28
 801fcd8:	af00      	add	r7, sp, #0
 801fcda:	6078      	str	r0, [r7, #4]
 801fcdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	6a1b      	ldr	r3, [r3, #32]
 801fce2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801fce6:	687b      	ldr	r3, [r7, #4]
 801fce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fcea:	687b      	ldr	r3, [r7, #4]
 801fcec:	6a1b      	ldr	r3, [r3, #32]
 801fcee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	685b      	ldr	r3, [r3, #4]
 801fcf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fcfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801fcfc:	68fa      	ldr	r2, [r7, #12]
 801fcfe:	4b21      	ldr	r3, [pc, #132]	; (801fd84 <TIM_OC5_SetConfig+0xb0>)
 801fd00:	4013      	ands	r3, r2
 801fd02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fd04:	683b      	ldr	r3, [r7, #0]
 801fd06:	681b      	ldr	r3, [r3, #0]
 801fd08:	68fa      	ldr	r2, [r7, #12]
 801fd0a:	4313      	orrs	r3, r2
 801fd0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801fd0e:	693b      	ldr	r3, [r7, #16]
 801fd10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801fd14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801fd16:	683b      	ldr	r3, [r7, #0]
 801fd18:	689b      	ldr	r3, [r3, #8]
 801fd1a:	041b      	lsls	r3, r3, #16
 801fd1c:	693a      	ldr	r2, [r7, #16]
 801fd1e:	4313      	orrs	r3, r2
 801fd20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	4a18      	ldr	r2, [pc, #96]	; (801fd88 <TIM_OC5_SetConfig+0xb4>)
 801fd26:	4293      	cmp	r3, r2
 801fd28:	d00f      	beq.n	801fd4a <TIM_OC5_SetConfig+0x76>
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	4a17      	ldr	r2, [pc, #92]	; (801fd8c <TIM_OC5_SetConfig+0xb8>)
 801fd2e:	4293      	cmp	r3, r2
 801fd30:	d00b      	beq.n	801fd4a <TIM_OC5_SetConfig+0x76>
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	4a16      	ldr	r2, [pc, #88]	; (801fd90 <TIM_OC5_SetConfig+0xbc>)
 801fd36:	4293      	cmp	r3, r2
 801fd38:	d007      	beq.n	801fd4a <TIM_OC5_SetConfig+0x76>
 801fd3a:	687b      	ldr	r3, [r7, #4]
 801fd3c:	4a15      	ldr	r2, [pc, #84]	; (801fd94 <TIM_OC5_SetConfig+0xc0>)
 801fd3e:	4293      	cmp	r3, r2
 801fd40:	d003      	beq.n	801fd4a <TIM_OC5_SetConfig+0x76>
 801fd42:	687b      	ldr	r3, [r7, #4]
 801fd44:	4a14      	ldr	r2, [pc, #80]	; (801fd98 <TIM_OC5_SetConfig+0xc4>)
 801fd46:	4293      	cmp	r3, r2
 801fd48:	d109      	bne.n	801fd5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801fd4a:	697b      	ldr	r3, [r7, #20]
 801fd4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801fd50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801fd52:	683b      	ldr	r3, [r7, #0]
 801fd54:	695b      	ldr	r3, [r3, #20]
 801fd56:	021b      	lsls	r3, r3, #8
 801fd58:	697a      	ldr	r2, [r7, #20]
 801fd5a:	4313      	orrs	r3, r2
 801fd5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	697a      	ldr	r2, [r7, #20]
 801fd62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	68fa      	ldr	r2, [r7, #12]
 801fd68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801fd6a:	683b      	ldr	r3, [r7, #0]
 801fd6c:	685a      	ldr	r2, [r3, #4]
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	693a      	ldr	r2, [r7, #16]
 801fd76:	621a      	str	r2, [r3, #32]
}
 801fd78:	bf00      	nop
 801fd7a:	371c      	adds	r7, #28
 801fd7c:	46bd      	mov	sp, r7
 801fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd82:	4770      	bx	lr
 801fd84:	fffeff8f 	.word	0xfffeff8f
 801fd88:	40010000 	.word	0x40010000
 801fd8c:	40010400 	.word	0x40010400
 801fd90:	40014000 	.word	0x40014000
 801fd94:	40014400 	.word	0x40014400
 801fd98:	40014800 	.word	0x40014800

0801fd9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801fd9c:	b480      	push	{r7}
 801fd9e:	b087      	sub	sp, #28
 801fda0:	af00      	add	r7, sp, #0
 801fda2:	6078      	str	r0, [r7, #4]
 801fda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	6a1b      	ldr	r3, [r3, #32]
 801fdaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	6a1b      	ldr	r3, [r3, #32]
 801fdb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fdb8:	687b      	ldr	r3, [r7, #4]
 801fdba:	685b      	ldr	r3, [r3, #4]
 801fdbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fdbe:	687b      	ldr	r3, [r7, #4]
 801fdc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fdc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801fdc4:	68fa      	ldr	r2, [r7, #12]
 801fdc6:	4b22      	ldr	r3, [pc, #136]	; (801fe50 <TIM_OC6_SetConfig+0xb4>)
 801fdc8:	4013      	ands	r3, r2
 801fdca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fdcc:	683b      	ldr	r3, [r7, #0]
 801fdce:	681b      	ldr	r3, [r3, #0]
 801fdd0:	021b      	lsls	r3, r3, #8
 801fdd2:	68fa      	ldr	r2, [r7, #12]
 801fdd4:	4313      	orrs	r3, r2
 801fdd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801fdd8:	693b      	ldr	r3, [r7, #16]
 801fdda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801fdde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801fde0:	683b      	ldr	r3, [r7, #0]
 801fde2:	689b      	ldr	r3, [r3, #8]
 801fde4:	051b      	lsls	r3, r3, #20
 801fde6:	693a      	ldr	r2, [r7, #16]
 801fde8:	4313      	orrs	r3, r2
 801fdea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	4a19      	ldr	r2, [pc, #100]	; (801fe54 <TIM_OC6_SetConfig+0xb8>)
 801fdf0:	4293      	cmp	r3, r2
 801fdf2:	d00f      	beq.n	801fe14 <TIM_OC6_SetConfig+0x78>
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	4a18      	ldr	r2, [pc, #96]	; (801fe58 <TIM_OC6_SetConfig+0xbc>)
 801fdf8:	4293      	cmp	r3, r2
 801fdfa:	d00b      	beq.n	801fe14 <TIM_OC6_SetConfig+0x78>
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	4a17      	ldr	r2, [pc, #92]	; (801fe5c <TIM_OC6_SetConfig+0xc0>)
 801fe00:	4293      	cmp	r3, r2
 801fe02:	d007      	beq.n	801fe14 <TIM_OC6_SetConfig+0x78>
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	4a16      	ldr	r2, [pc, #88]	; (801fe60 <TIM_OC6_SetConfig+0xc4>)
 801fe08:	4293      	cmp	r3, r2
 801fe0a:	d003      	beq.n	801fe14 <TIM_OC6_SetConfig+0x78>
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	4a15      	ldr	r2, [pc, #84]	; (801fe64 <TIM_OC6_SetConfig+0xc8>)
 801fe10:	4293      	cmp	r3, r2
 801fe12:	d109      	bne.n	801fe28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801fe14:	697b      	ldr	r3, [r7, #20]
 801fe16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801fe1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801fe1c:	683b      	ldr	r3, [r7, #0]
 801fe1e:	695b      	ldr	r3, [r3, #20]
 801fe20:	029b      	lsls	r3, r3, #10
 801fe22:	697a      	ldr	r2, [r7, #20]
 801fe24:	4313      	orrs	r3, r2
 801fe26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	697a      	ldr	r2, [r7, #20]
 801fe2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	68fa      	ldr	r2, [r7, #12]
 801fe32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801fe34:	683b      	ldr	r3, [r7, #0]
 801fe36:	685a      	ldr	r2, [r3, #4]
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fe3c:	687b      	ldr	r3, [r7, #4]
 801fe3e:	693a      	ldr	r2, [r7, #16]
 801fe40:	621a      	str	r2, [r3, #32]
}
 801fe42:	bf00      	nop
 801fe44:	371c      	adds	r7, #28
 801fe46:	46bd      	mov	sp, r7
 801fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe4c:	4770      	bx	lr
 801fe4e:	bf00      	nop
 801fe50:	feff8fff 	.word	0xfeff8fff
 801fe54:	40010000 	.word	0x40010000
 801fe58:	40010400 	.word	0x40010400
 801fe5c:	40014000 	.word	0x40014000
 801fe60:	40014400 	.word	0x40014400
 801fe64:	40014800 	.word	0x40014800

0801fe68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801fe68:	b480      	push	{r7}
 801fe6a:	b087      	sub	sp, #28
 801fe6c:	af00      	add	r7, sp, #0
 801fe6e:	60f8      	str	r0, [r7, #12]
 801fe70:	60b9      	str	r1, [r7, #8]
 801fe72:	607a      	str	r2, [r7, #4]
 801fe74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801fe76:	68fb      	ldr	r3, [r7, #12]
 801fe78:	6a1b      	ldr	r3, [r3, #32]
 801fe7a:	f023 0201 	bic.w	r2, r3, #1
 801fe7e:	68fb      	ldr	r3, [r7, #12]
 801fe80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801fe82:	68fb      	ldr	r3, [r7, #12]
 801fe84:	699b      	ldr	r3, [r3, #24]
 801fe86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801fe88:	68fb      	ldr	r3, [r7, #12]
 801fe8a:	6a1b      	ldr	r3, [r3, #32]
 801fe8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801fe8e:	68fb      	ldr	r3, [r7, #12]
 801fe90:	4a2c      	ldr	r2, [pc, #176]	; (801ff44 <TIM_TI1_SetConfig+0xdc>)
 801fe92:	4293      	cmp	r3, r2
 801fe94:	d023      	beq.n	801fede <TIM_TI1_SetConfig+0x76>
 801fe96:	68fb      	ldr	r3, [r7, #12]
 801fe98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fe9c:	d01f      	beq.n	801fede <TIM_TI1_SetConfig+0x76>
 801fe9e:	68fb      	ldr	r3, [r7, #12]
 801fea0:	4a29      	ldr	r2, [pc, #164]	; (801ff48 <TIM_TI1_SetConfig+0xe0>)
 801fea2:	4293      	cmp	r3, r2
 801fea4:	d01b      	beq.n	801fede <TIM_TI1_SetConfig+0x76>
 801fea6:	68fb      	ldr	r3, [r7, #12]
 801fea8:	4a28      	ldr	r2, [pc, #160]	; (801ff4c <TIM_TI1_SetConfig+0xe4>)
 801feaa:	4293      	cmp	r3, r2
 801feac:	d017      	beq.n	801fede <TIM_TI1_SetConfig+0x76>
 801feae:	68fb      	ldr	r3, [r7, #12]
 801feb0:	4a27      	ldr	r2, [pc, #156]	; (801ff50 <TIM_TI1_SetConfig+0xe8>)
 801feb2:	4293      	cmp	r3, r2
 801feb4:	d013      	beq.n	801fede <TIM_TI1_SetConfig+0x76>
 801feb6:	68fb      	ldr	r3, [r7, #12]
 801feb8:	4a26      	ldr	r2, [pc, #152]	; (801ff54 <TIM_TI1_SetConfig+0xec>)
 801feba:	4293      	cmp	r3, r2
 801febc:	d00f      	beq.n	801fede <TIM_TI1_SetConfig+0x76>
 801febe:	68fb      	ldr	r3, [r7, #12]
 801fec0:	4a25      	ldr	r2, [pc, #148]	; (801ff58 <TIM_TI1_SetConfig+0xf0>)
 801fec2:	4293      	cmp	r3, r2
 801fec4:	d00b      	beq.n	801fede <TIM_TI1_SetConfig+0x76>
 801fec6:	68fb      	ldr	r3, [r7, #12]
 801fec8:	4a24      	ldr	r2, [pc, #144]	; (801ff5c <TIM_TI1_SetConfig+0xf4>)
 801feca:	4293      	cmp	r3, r2
 801fecc:	d007      	beq.n	801fede <TIM_TI1_SetConfig+0x76>
 801fece:	68fb      	ldr	r3, [r7, #12]
 801fed0:	4a23      	ldr	r2, [pc, #140]	; (801ff60 <TIM_TI1_SetConfig+0xf8>)
 801fed2:	4293      	cmp	r3, r2
 801fed4:	d003      	beq.n	801fede <TIM_TI1_SetConfig+0x76>
 801fed6:	68fb      	ldr	r3, [r7, #12]
 801fed8:	4a22      	ldr	r2, [pc, #136]	; (801ff64 <TIM_TI1_SetConfig+0xfc>)
 801feda:	4293      	cmp	r3, r2
 801fedc:	d101      	bne.n	801fee2 <TIM_TI1_SetConfig+0x7a>
 801fede:	2301      	movs	r3, #1
 801fee0:	e000      	b.n	801fee4 <TIM_TI1_SetConfig+0x7c>
 801fee2:	2300      	movs	r3, #0
 801fee4:	2b00      	cmp	r3, #0
 801fee6:	d008      	beq.n	801fefa <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801fee8:	697b      	ldr	r3, [r7, #20]
 801feea:	f023 0303 	bic.w	r3, r3, #3
 801feee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801fef0:	697a      	ldr	r2, [r7, #20]
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	4313      	orrs	r3, r2
 801fef6:	617b      	str	r3, [r7, #20]
 801fef8:	e003      	b.n	801ff02 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801fefa:	697b      	ldr	r3, [r7, #20]
 801fefc:	f043 0301 	orr.w	r3, r3, #1
 801ff00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ff02:	697b      	ldr	r3, [r7, #20]
 801ff04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ff08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801ff0a:	683b      	ldr	r3, [r7, #0]
 801ff0c:	011b      	lsls	r3, r3, #4
 801ff0e:	b2db      	uxtb	r3, r3
 801ff10:	697a      	ldr	r2, [r7, #20]
 801ff12:	4313      	orrs	r3, r2
 801ff14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ff16:	693b      	ldr	r3, [r7, #16]
 801ff18:	f023 030a 	bic.w	r3, r3, #10
 801ff1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801ff1e:	68bb      	ldr	r3, [r7, #8]
 801ff20:	f003 030a 	and.w	r3, r3, #10
 801ff24:	693a      	ldr	r2, [r7, #16]
 801ff26:	4313      	orrs	r3, r2
 801ff28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ff2a:	68fb      	ldr	r3, [r7, #12]
 801ff2c:	697a      	ldr	r2, [r7, #20]
 801ff2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ff30:	68fb      	ldr	r3, [r7, #12]
 801ff32:	693a      	ldr	r2, [r7, #16]
 801ff34:	621a      	str	r2, [r3, #32]
}
 801ff36:	bf00      	nop
 801ff38:	371c      	adds	r7, #28
 801ff3a:	46bd      	mov	sp, r7
 801ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff40:	4770      	bx	lr
 801ff42:	bf00      	nop
 801ff44:	40010000 	.word	0x40010000
 801ff48:	40000400 	.word	0x40000400
 801ff4c:	40000800 	.word	0x40000800
 801ff50:	40000c00 	.word	0x40000c00
 801ff54:	40010400 	.word	0x40010400
 801ff58:	40001800 	.word	0x40001800
 801ff5c:	40014000 	.word	0x40014000
 801ff60:	4000e000 	.word	0x4000e000
 801ff64:	4000e400 	.word	0x4000e400

0801ff68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ff68:	b480      	push	{r7}
 801ff6a:	b087      	sub	sp, #28
 801ff6c:	af00      	add	r7, sp, #0
 801ff6e:	60f8      	str	r0, [r7, #12]
 801ff70:	60b9      	str	r1, [r7, #8]
 801ff72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801ff74:	68fb      	ldr	r3, [r7, #12]
 801ff76:	6a1b      	ldr	r3, [r3, #32]
 801ff78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ff7a:	68fb      	ldr	r3, [r7, #12]
 801ff7c:	6a1b      	ldr	r3, [r3, #32]
 801ff7e:	f023 0201 	bic.w	r2, r3, #1
 801ff82:	68fb      	ldr	r3, [r7, #12]
 801ff84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ff86:	68fb      	ldr	r3, [r7, #12]
 801ff88:	699b      	ldr	r3, [r3, #24]
 801ff8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ff8c:	693b      	ldr	r3, [r7, #16]
 801ff8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ff92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801ff94:	687b      	ldr	r3, [r7, #4]
 801ff96:	011b      	lsls	r3, r3, #4
 801ff98:	693a      	ldr	r2, [r7, #16]
 801ff9a:	4313      	orrs	r3, r2
 801ff9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ff9e:	697b      	ldr	r3, [r7, #20]
 801ffa0:	f023 030a 	bic.w	r3, r3, #10
 801ffa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801ffa6:	697a      	ldr	r2, [r7, #20]
 801ffa8:	68bb      	ldr	r3, [r7, #8]
 801ffaa:	4313      	orrs	r3, r2
 801ffac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ffae:	68fb      	ldr	r3, [r7, #12]
 801ffb0:	693a      	ldr	r2, [r7, #16]
 801ffb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ffb4:	68fb      	ldr	r3, [r7, #12]
 801ffb6:	697a      	ldr	r2, [r7, #20]
 801ffb8:	621a      	str	r2, [r3, #32]
}
 801ffba:	bf00      	nop
 801ffbc:	371c      	adds	r7, #28
 801ffbe:	46bd      	mov	sp, r7
 801ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffc4:	4770      	bx	lr

0801ffc6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801ffc6:	b480      	push	{r7}
 801ffc8:	b087      	sub	sp, #28
 801ffca:	af00      	add	r7, sp, #0
 801ffcc:	60f8      	str	r0, [r7, #12]
 801ffce:	60b9      	str	r1, [r7, #8]
 801ffd0:	607a      	str	r2, [r7, #4]
 801ffd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ffd4:	68fb      	ldr	r3, [r7, #12]
 801ffd6:	6a1b      	ldr	r3, [r3, #32]
 801ffd8:	f023 0210 	bic.w	r2, r3, #16
 801ffdc:	68fb      	ldr	r3, [r7, #12]
 801ffde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ffe0:	68fb      	ldr	r3, [r7, #12]
 801ffe2:	699b      	ldr	r3, [r3, #24]
 801ffe4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801ffe6:	68fb      	ldr	r3, [r7, #12]
 801ffe8:	6a1b      	ldr	r3, [r3, #32]
 801ffea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 801ffec:	697b      	ldr	r3, [r7, #20]
 801ffee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fff2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	021b      	lsls	r3, r3, #8
 801fff8:	697a      	ldr	r2, [r7, #20]
 801fffa:	4313      	orrs	r3, r2
 801fffc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801fffe:	697b      	ldr	r3, [r7, #20]
 8020000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8020006:	683b      	ldr	r3, [r7, #0]
 8020008:	031b      	lsls	r3, r3, #12
 802000a:	b29b      	uxth	r3, r3
 802000c:	697a      	ldr	r2, [r7, #20]
 802000e:	4313      	orrs	r3, r2
 8020010:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020012:	693b      	ldr	r3, [r7, #16]
 8020014:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020018:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 802001a:	68bb      	ldr	r3, [r7, #8]
 802001c:	011b      	lsls	r3, r3, #4
 802001e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8020022:	693a      	ldr	r2, [r7, #16]
 8020024:	4313      	orrs	r3, r2
 8020026:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020028:	68fb      	ldr	r3, [r7, #12]
 802002a:	697a      	ldr	r2, [r7, #20]
 802002c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802002e:	68fb      	ldr	r3, [r7, #12]
 8020030:	693a      	ldr	r2, [r7, #16]
 8020032:	621a      	str	r2, [r3, #32]
}
 8020034:	bf00      	nop
 8020036:	371c      	adds	r7, #28
 8020038:	46bd      	mov	sp, r7
 802003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802003e:	4770      	bx	lr

08020040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020040:	b480      	push	{r7}
 8020042:	b087      	sub	sp, #28
 8020044:	af00      	add	r7, sp, #0
 8020046:	60f8      	str	r0, [r7, #12]
 8020048:	60b9      	str	r1, [r7, #8]
 802004a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802004c:	68fb      	ldr	r3, [r7, #12]
 802004e:	6a1b      	ldr	r3, [r3, #32]
 8020050:	f023 0210 	bic.w	r2, r3, #16
 8020054:	68fb      	ldr	r3, [r7, #12]
 8020056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020058:	68fb      	ldr	r3, [r7, #12]
 802005a:	699b      	ldr	r3, [r3, #24]
 802005c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802005e:	68fb      	ldr	r3, [r7, #12]
 8020060:	6a1b      	ldr	r3, [r3, #32]
 8020062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020064:	697b      	ldr	r3, [r7, #20]
 8020066:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802006a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	031b      	lsls	r3, r3, #12
 8020070:	697a      	ldr	r2, [r7, #20]
 8020072:	4313      	orrs	r3, r2
 8020074:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020076:	693b      	ldr	r3, [r7, #16]
 8020078:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802007c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802007e:	68bb      	ldr	r3, [r7, #8]
 8020080:	011b      	lsls	r3, r3, #4
 8020082:	693a      	ldr	r2, [r7, #16]
 8020084:	4313      	orrs	r3, r2
 8020086:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020088:	68fb      	ldr	r3, [r7, #12]
 802008a:	697a      	ldr	r2, [r7, #20]
 802008c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802008e:	68fb      	ldr	r3, [r7, #12]
 8020090:	693a      	ldr	r2, [r7, #16]
 8020092:	621a      	str	r2, [r3, #32]
}
 8020094:	bf00      	nop
 8020096:	371c      	adds	r7, #28
 8020098:	46bd      	mov	sp, r7
 802009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802009e:	4770      	bx	lr

080200a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80200a0:	b480      	push	{r7}
 80200a2:	b087      	sub	sp, #28
 80200a4:	af00      	add	r7, sp, #0
 80200a6:	60f8      	str	r0, [r7, #12]
 80200a8:	60b9      	str	r1, [r7, #8]
 80200aa:	607a      	str	r2, [r7, #4]
 80200ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80200ae:	68fb      	ldr	r3, [r7, #12]
 80200b0:	6a1b      	ldr	r3, [r3, #32]
 80200b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80200b6:	68fb      	ldr	r3, [r7, #12]
 80200b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80200ba:	68fb      	ldr	r3, [r7, #12]
 80200bc:	69db      	ldr	r3, [r3, #28]
 80200be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80200c0:	68fb      	ldr	r3, [r7, #12]
 80200c2:	6a1b      	ldr	r3, [r3, #32]
 80200c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80200c6:	697b      	ldr	r3, [r7, #20]
 80200c8:	f023 0303 	bic.w	r3, r3, #3
 80200cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80200ce:	697a      	ldr	r2, [r7, #20]
 80200d0:	687b      	ldr	r3, [r7, #4]
 80200d2:	4313      	orrs	r3, r2
 80200d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80200d6:	697b      	ldr	r3, [r7, #20]
 80200d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80200dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80200de:	683b      	ldr	r3, [r7, #0]
 80200e0:	011b      	lsls	r3, r3, #4
 80200e2:	b2db      	uxtb	r3, r3
 80200e4:	697a      	ldr	r2, [r7, #20]
 80200e6:	4313      	orrs	r3, r2
 80200e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80200ea:	693b      	ldr	r3, [r7, #16]
 80200ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80200f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80200f2:	68bb      	ldr	r3, [r7, #8]
 80200f4:	021b      	lsls	r3, r3, #8
 80200f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80200fa:	693a      	ldr	r2, [r7, #16]
 80200fc:	4313      	orrs	r3, r2
 80200fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8020100:	68fb      	ldr	r3, [r7, #12]
 8020102:	697a      	ldr	r2, [r7, #20]
 8020104:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8020106:	68fb      	ldr	r3, [r7, #12]
 8020108:	693a      	ldr	r2, [r7, #16]
 802010a:	621a      	str	r2, [r3, #32]
}
 802010c:	bf00      	nop
 802010e:	371c      	adds	r7, #28
 8020110:	46bd      	mov	sp, r7
 8020112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020116:	4770      	bx	lr

08020118 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8020118:	b480      	push	{r7}
 802011a:	b087      	sub	sp, #28
 802011c:	af00      	add	r7, sp, #0
 802011e:	60f8      	str	r0, [r7, #12]
 8020120:	60b9      	str	r1, [r7, #8]
 8020122:	607a      	str	r2, [r7, #4]
 8020124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020126:	68fb      	ldr	r3, [r7, #12]
 8020128:	6a1b      	ldr	r3, [r3, #32]
 802012a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802012e:	68fb      	ldr	r3, [r7, #12]
 8020130:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8020132:	68fb      	ldr	r3, [r7, #12]
 8020134:	69db      	ldr	r3, [r3, #28]
 8020136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020138:	68fb      	ldr	r3, [r7, #12]
 802013a:	6a1b      	ldr	r3, [r3, #32]
 802013c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 802013e:	697b      	ldr	r3, [r7, #20]
 8020140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020144:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	021b      	lsls	r3, r3, #8
 802014a:	697a      	ldr	r2, [r7, #20]
 802014c:	4313      	orrs	r3, r2
 802014e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8020150:	697b      	ldr	r3, [r7, #20]
 8020152:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020156:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8020158:	683b      	ldr	r3, [r7, #0]
 802015a:	031b      	lsls	r3, r3, #12
 802015c:	b29b      	uxth	r3, r3
 802015e:	697a      	ldr	r2, [r7, #20]
 8020160:	4313      	orrs	r3, r2
 8020162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8020164:	693b      	ldr	r3, [r7, #16]
 8020166:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 802016a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 802016c:	68bb      	ldr	r3, [r7, #8]
 802016e:	031b      	lsls	r3, r3, #12
 8020170:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8020174:	693a      	ldr	r2, [r7, #16]
 8020176:	4313      	orrs	r3, r2
 8020178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 802017a:	68fb      	ldr	r3, [r7, #12]
 802017c:	697a      	ldr	r2, [r7, #20]
 802017e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	693a      	ldr	r2, [r7, #16]
 8020184:	621a      	str	r2, [r3, #32]
}
 8020186:	bf00      	nop
 8020188:	371c      	adds	r7, #28
 802018a:	46bd      	mov	sp, r7
 802018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020190:	4770      	bx	lr
	...

08020194 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020194:	b480      	push	{r7}
 8020196:	b085      	sub	sp, #20
 8020198:	af00      	add	r7, sp, #0
 802019a:	6078      	str	r0, [r7, #4]
 802019c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802019e:	687b      	ldr	r3, [r7, #4]
 80201a0:	689b      	ldr	r3, [r3, #8]
 80201a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80201a4:	68fa      	ldr	r2, [r7, #12]
 80201a6:	4b09      	ldr	r3, [pc, #36]	; (80201cc <TIM_ITRx_SetConfig+0x38>)
 80201a8:	4013      	ands	r3, r2
 80201aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80201ac:	683a      	ldr	r2, [r7, #0]
 80201ae:	68fb      	ldr	r3, [r7, #12]
 80201b0:	4313      	orrs	r3, r2
 80201b2:	f043 0307 	orr.w	r3, r3, #7
 80201b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	68fa      	ldr	r2, [r7, #12]
 80201bc:	609a      	str	r2, [r3, #8]
}
 80201be:	bf00      	nop
 80201c0:	3714      	adds	r7, #20
 80201c2:	46bd      	mov	sp, r7
 80201c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201c8:	4770      	bx	lr
 80201ca:	bf00      	nop
 80201cc:	ffcfff8f 	.word	0xffcfff8f

080201d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80201d0:	b480      	push	{r7}
 80201d2:	b087      	sub	sp, #28
 80201d4:	af00      	add	r7, sp, #0
 80201d6:	60f8      	str	r0, [r7, #12]
 80201d8:	60b9      	str	r1, [r7, #8]
 80201da:	607a      	str	r2, [r7, #4]
 80201dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80201de:	68fb      	ldr	r3, [r7, #12]
 80201e0:	689b      	ldr	r3, [r3, #8]
 80201e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80201e4:	697b      	ldr	r3, [r7, #20]
 80201e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80201ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80201ec:	683b      	ldr	r3, [r7, #0]
 80201ee:	021a      	lsls	r2, r3, #8
 80201f0:	687b      	ldr	r3, [r7, #4]
 80201f2:	431a      	orrs	r2, r3
 80201f4:	68bb      	ldr	r3, [r7, #8]
 80201f6:	4313      	orrs	r3, r2
 80201f8:	697a      	ldr	r2, [r7, #20]
 80201fa:	4313      	orrs	r3, r2
 80201fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80201fe:	68fb      	ldr	r3, [r7, #12]
 8020200:	697a      	ldr	r2, [r7, #20]
 8020202:	609a      	str	r2, [r3, #8]
}
 8020204:	bf00      	nop
 8020206:	371c      	adds	r7, #28
 8020208:	46bd      	mov	sp, r7
 802020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802020e:	4770      	bx	lr

08020210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020210:	b480      	push	{r7}
 8020212:	b087      	sub	sp, #28
 8020214:	af00      	add	r7, sp, #0
 8020216:	60f8      	str	r0, [r7, #12]
 8020218:	60b9      	str	r1, [r7, #8]
 802021a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802021c:	68bb      	ldr	r3, [r7, #8]
 802021e:	f003 031f 	and.w	r3, r3, #31
 8020222:	2201      	movs	r2, #1
 8020224:	fa02 f303 	lsl.w	r3, r2, r3
 8020228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802022a:	68fb      	ldr	r3, [r7, #12]
 802022c:	6a1a      	ldr	r2, [r3, #32]
 802022e:	697b      	ldr	r3, [r7, #20]
 8020230:	43db      	mvns	r3, r3
 8020232:	401a      	ands	r2, r3
 8020234:	68fb      	ldr	r3, [r7, #12]
 8020236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020238:	68fb      	ldr	r3, [r7, #12]
 802023a:	6a1a      	ldr	r2, [r3, #32]
 802023c:	68bb      	ldr	r3, [r7, #8]
 802023e:	f003 031f 	and.w	r3, r3, #31
 8020242:	6879      	ldr	r1, [r7, #4]
 8020244:	fa01 f303 	lsl.w	r3, r1, r3
 8020248:	431a      	orrs	r2, r3
 802024a:	68fb      	ldr	r3, [r7, #12]
 802024c:	621a      	str	r2, [r3, #32]
}
 802024e:	bf00      	nop
 8020250:	371c      	adds	r7, #28
 8020252:	46bd      	mov	sp, r7
 8020254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020258:	4770      	bx	lr
	...

0802025c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 802025c:	b480      	push	{r7}
 802025e:	b085      	sub	sp, #20
 8020260:	af00      	add	r7, sp, #0
 8020262:	6078      	str	r0, [r7, #4]
 8020264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802026c:	2b01      	cmp	r3, #1
 802026e:	d101      	bne.n	8020274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020270:	2302      	movs	r3, #2
 8020272:	e077      	b.n	8020364 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	2201      	movs	r2, #1
 8020278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	2202      	movs	r2, #2
 8020280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	681b      	ldr	r3, [r3, #0]
 8020288:	685b      	ldr	r3, [r3, #4]
 802028a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802028c:	687b      	ldr	r3, [r7, #4]
 802028e:	681b      	ldr	r3, [r3, #0]
 8020290:	689b      	ldr	r3, [r3, #8]
 8020292:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	681b      	ldr	r3, [r3, #0]
 8020298:	4a35      	ldr	r2, [pc, #212]	; (8020370 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 802029a:	4293      	cmp	r3, r2
 802029c:	d004      	beq.n	80202a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802029e:	687b      	ldr	r3, [r7, #4]
 80202a0:	681b      	ldr	r3, [r3, #0]
 80202a2:	4a34      	ldr	r2, [pc, #208]	; (8020374 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80202a4:	4293      	cmp	r3, r2
 80202a6:	d108      	bne.n	80202ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80202a8:	68fb      	ldr	r3, [r7, #12]
 80202aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80202ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80202b0:	683b      	ldr	r3, [r7, #0]
 80202b2:	685b      	ldr	r3, [r3, #4]
 80202b4:	68fa      	ldr	r2, [r7, #12]
 80202b6:	4313      	orrs	r3, r2
 80202b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80202c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80202c2:	683b      	ldr	r3, [r7, #0]
 80202c4:	681b      	ldr	r3, [r3, #0]
 80202c6:	68fa      	ldr	r2, [r7, #12]
 80202c8:	4313      	orrs	r3, r2
 80202ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	68fa      	ldr	r2, [r7, #12]
 80202d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	681b      	ldr	r3, [r3, #0]
 80202d8:	4a25      	ldr	r2, [pc, #148]	; (8020370 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80202da:	4293      	cmp	r3, r2
 80202dc:	d02c      	beq.n	8020338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80202de:	687b      	ldr	r3, [r7, #4]
 80202e0:	681b      	ldr	r3, [r3, #0]
 80202e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80202e6:	d027      	beq.n	8020338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80202e8:	687b      	ldr	r3, [r7, #4]
 80202ea:	681b      	ldr	r3, [r3, #0]
 80202ec:	4a22      	ldr	r2, [pc, #136]	; (8020378 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80202ee:	4293      	cmp	r3, r2
 80202f0:	d022      	beq.n	8020338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80202f2:	687b      	ldr	r3, [r7, #4]
 80202f4:	681b      	ldr	r3, [r3, #0]
 80202f6:	4a21      	ldr	r2, [pc, #132]	; (802037c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80202f8:	4293      	cmp	r3, r2
 80202fa:	d01d      	beq.n	8020338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	681b      	ldr	r3, [r3, #0]
 8020300:	4a1f      	ldr	r2, [pc, #124]	; (8020380 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8020302:	4293      	cmp	r3, r2
 8020304:	d018      	beq.n	8020338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	681b      	ldr	r3, [r3, #0]
 802030a:	4a1a      	ldr	r2, [pc, #104]	; (8020374 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 802030c:	4293      	cmp	r3, r2
 802030e:	d013      	beq.n	8020338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	681b      	ldr	r3, [r3, #0]
 8020314:	4a1b      	ldr	r2, [pc, #108]	; (8020384 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8020316:	4293      	cmp	r3, r2
 8020318:	d00e      	beq.n	8020338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	4a1a      	ldr	r2, [pc, #104]	; (8020388 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8020320:	4293      	cmp	r3, r2
 8020322:	d009      	beq.n	8020338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020324:	687b      	ldr	r3, [r7, #4]
 8020326:	681b      	ldr	r3, [r3, #0]
 8020328:	4a18      	ldr	r2, [pc, #96]	; (802038c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 802032a:	4293      	cmp	r3, r2
 802032c:	d004      	beq.n	8020338 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802032e:	687b      	ldr	r3, [r7, #4]
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	4a17      	ldr	r2, [pc, #92]	; (8020390 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8020334:	4293      	cmp	r3, r2
 8020336:	d10c      	bne.n	8020352 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020338:	68bb      	ldr	r3, [r7, #8]
 802033a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802033e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020340:	683b      	ldr	r3, [r7, #0]
 8020342:	689b      	ldr	r3, [r3, #8]
 8020344:	68ba      	ldr	r2, [r7, #8]
 8020346:	4313      	orrs	r3, r2
 8020348:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	68ba      	ldr	r2, [r7, #8]
 8020350:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020352:	687b      	ldr	r3, [r7, #4]
 8020354:	2201      	movs	r2, #1
 8020356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	2200      	movs	r2, #0
 802035e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020362:	2300      	movs	r3, #0
}
 8020364:	4618      	mov	r0, r3
 8020366:	3714      	adds	r7, #20
 8020368:	46bd      	mov	sp, r7
 802036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802036e:	4770      	bx	lr
 8020370:	40010000 	.word	0x40010000
 8020374:	40010400 	.word	0x40010400
 8020378:	40000400 	.word	0x40000400
 802037c:	40000800 	.word	0x40000800
 8020380:	40000c00 	.word	0x40000c00
 8020384:	40001800 	.word	0x40001800
 8020388:	40014000 	.word	0x40014000
 802038c:	4000e000 	.word	0x4000e000
 8020390:	4000e400 	.word	0x4000e400

08020394 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8020394:	b480      	push	{r7}
 8020396:	b085      	sub	sp, #20
 8020398:	af00      	add	r7, sp, #0
 802039a:	6078      	str	r0, [r7, #4]
 802039c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802039e:	2300      	movs	r3, #0
 80203a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80203a2:	687b      	ldr	r3, [r7, #4]
 80203a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80203a8:	2b01      	cmp	r3, #1
 80203aa:	d101      	bne.n	80203b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80203ac:	2302      	movs	r3, #2
 80203ae:	e087      	b.n	80204c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80203b0:	687b      	ldr	r3, [r7, #4]
 80203b2:	2201      	movs	r2, #1
 80203b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80203b8:	68fb      	ldr	r3, [r7, #12]
 80203ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80203be:	683b      	ldr	r3, [r7, #0]
 80203c0:	68db      	ldr	r3, [r3, #12]
 80203c2:	4313      	orrs	r3, r2
 80203c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80203c6:	68fb      	ldr	r3, [r7, #12]
 80203c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80203cc:	683b      	ldr	r3, [r7, #0]
 80203ce:	689b      	ldr	r3, [r3, #8]
 80203d0:	4313      	orrs	r3, r2
 80203d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80203d4:	68fb      	ldr	r3, [r7, #12]
 80203d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80203da:	683b      	ldr	r3, [r7, #0]
 80203dc:	685b      	ldr	r3, [r3, #4]
 80203de:	4313      	orrs	r3, r2
 80203e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80203e2:	68fb      	ldr	r3, [r7, #12]
 80203e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80203e8:	683b      	ldr	r3, [r7, #0]
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	4313      	orrs	r3, r2
 80203ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80203f0:	68fb      	ldr	r3, [r7, #12]
 80203f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80203f6:	683b      	ldr	r3, [r7, #0]
 80203f8:	691b      	ldr	r3, [r3, #16]
 80203fa:	4313      	orrs	r3, r2
 80203fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80203fe:	68fb      	ldr	r3, [r7, #12]
 8020400:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8020404:	683b      	ldr	r3, [r7, #0]
 8020406:	695b      	ldr	r3, [r3, #20]
 8020408:	4313      	orrs	r3, r2
 802040a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802040c:	68fb      	ldr	r3, [r7, #12]
 802040e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8020412:	683b      	ldr	r3, [r7, #0]
 8020414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020416:	4313      	orrs	r3, r2
 8020418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 802041a:	68fb      	ldr	r3, [r7, #12]
 802041c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8020420:	683b      	ldr	r3, [r7, #0]
 8020422:	699b      	ldr	r3, [r3, #24]
 8020424:	041b      	lsls	r3, r3, #16
 8020426:	4313      	orrs	r3, r2
 8020428:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	681b      	ldr	r3, [r3, #0]
 802042e:	4a27      	ldr	r2, [pc, #156]	; (80204cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020430:	4293      	cmp	r3, r2
 8020432:	d004      	beq.n	802043e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	681b      	ldr	r3, [r3, #0]
 8020438:	4a25      	ldr	r2, [pc, #148]	; (80204d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 802043a:	4293      	cmp	r3, r2
 802043c:	d106      	bne.n	802044c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 802043e:	68fb      	ldr	r3, [r7, #12]
 8020440:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8020444:	683b      	ldr	r3, [r7, #0]
 8020446:	69db      	ldr	r3, [r3, #28]
 8020448:	4313      	orrs	r3, r2
 802044a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 802044c:	687b      	ldr	r3, [r7, #4]
 802044e:	681b      	ldr	r3, [r3, #0]
 8020450:	4a1e      	ldr	r2, [pc, #120]	; (80204cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020452:	4293      	cmp	r3, r2
 8020454:	d004      	beq.n	8020460 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	681b      	ldr	r3, [r3, #0]
 802045a:	4a1d      	ldr	r2, [pc, #116]	; (80204d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 802045c:	4293      	cmp	r3, r2
 802045e:	d126      	bne.n	80204ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8020460:	68fb      	ldr	r3, [r7, #12]
 8020462:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8020466:	683b      	ldr	r3, [r7, #0]
 8020468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802046a:	051b      	lsls	r3, r3, #20
 802046c:	4313      	orrs	r3, r2
 802046e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8020470:	68fb      	ldr	r3, [r7, #12]
 8020472:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8020476:	683b      	ldr	r3, [r7, #0]
 8020478:	6a1b      	ldr	r3, [r3, #32]
 802047a:	4313      	orrs	r3, r2
 802047c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 802047e:	68fb      	ldr	r3, [r7, #12]
 8020480:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8020484:	683b      	ldr	r3, [r7, #0]
 8020486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020488:	4313      	orrs	r3, r2
 802048a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	681b      	ldr	r3, [r3, #0]
 8020490:	4a0e      	ldr	r2, [pc, #56]	; (80204cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020492:	4293      	cmp	r3, r2
 8020494:	d004      	beq.n	80204a0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8020496:	687b      	ldr	r3, [r7, #4]
 8020498:	681b      	ldr	r3, [r3, #0]
 802049a:	4a0d      	ldr	r2, [pc, #52]	; (80204d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 802049c:	4293      	cmp	r3, r2
 802049e:	d106      	bne.n	80204ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80204a0:	68fb      	ldr	r3, [r7, #12]
 80204a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80204a6:	683b      	ldr	r3, [r7, #0]
 80204a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80204aa:	4313      	orrs	r3, r2
 80204ac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80204ae:	687b      	ldr	r3, [r7, #4]
 80204b0:	681b      	ldr	r3, [r3, #0]
 80204b2:	68fa      	ldr	r2, [r7, #12]
 80204b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80204b6:	687b      	ldr	r3, [r7, #4]
 80204b8:	2200      	movs	r2, #0
 80204ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80204be:	2300      	movs	r3, #0
}
 80204c0:	4618      	mov	r0, r3
 80204c2:	3714      	adds	r7, #20
 80204c4:	46bd      	mov	sp, r7
 80204c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204ca:	4770      	bx	lr
 80204cc:	40010000 	.word	0x40010000
 80204d0:	40010400 	.word	0x40010400

080204d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80204d4:	b480      	push	{r7}
 80204d6:	b083      	sub	sp, #12
 80204d8:	af00      	add	r7, sp, #0
 80204da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80204dc:	bf00      	nop
 80204de:	370c      	adds	r7, #12
 80204e0:	46bd      	mov	sp, r7
 80204e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204e6:	4770      	bx	lr

080204e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80204e8:	b480      	push	{r7}
 80204ea:	b083      	sub	sp, #12
 80204ec:	af00      	add	r7, sp, #0
 80204ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80204f0:	bf00      	nop
 80204f2:	370c      	adds	r7, #12
 80204f4:	46bd      	mov	sp, r7
 80204f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204fa:	4770      	bx	lr

080204fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80204fc:	b480      	push	{r7}
 80204fe:	b083      	sub	sp, #12
 8020500:	af00      	add	r7, sp, #0
 8020502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8020504:	bf00      	nop
 8020506:	370c      	adds	r7, #12
 8020508:	46bd      	mov	sp, r7
 802050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802050e:	4770      	bx	lr

08020510 <_ZdlPv>:
 8020510:	f000 b926 	b.w	8020760 <free>

08020514 <_ZdlPvj>:
 8020514:	f7ff bffc 	b.w	8020510 <_ZdlPv>

08020518 <_Znwj>:
 8020518:	2801      	cmp	r0, #1
 802051a:	bf38      	it	cc
 802051c:	2001      	movcc	r0, #1
 802051e:	b510      	push	{r4, lr}
 8020520:	4604      	mov	r4, r0
 8020522:	4620      	mov	r0, r4
 8020524:	f000 f914 	bl	8020750 <malloc>
 8020528:	b930      	cbnz	r0, 8020538 <_Znwj+0x20>
 802052a:	f000 f8d7 	bl	80206dc <_ZSt15get_new_handlerv>
 802052e:	b908      	cbnz	r0, 8020534 <_Znwj+0x1c>
 8020530:	f000 f8dc 	bl	80206ec <abort>
 8020534:	4780      	blx	r0
 8020536:	e7f4      	b.n	8020522 <_Znwj+0xa>
 8020538:	bd10      	pop	{r4, pc}

0802053a <__cxa_pure_virtual>:
 802053a:	b508      	push	{r3, lr}
 802053c:	f000 f8c8 	bl	80206d0 <_ZSt9terminatev>

08020540 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8020540:	68c3      	ldr	r3, [r0, #12]
 8020542:	689a      	ldr	r2, [r3, #8]
 8020544:	60c2      	str	r2, [r0, #12]
 8020546:	b510      	push	{r4, lr}
 8020548:	b102      	cbz	r2, 802054c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 802054a:	6050      	str	r0, [r2, #4]
 802054c:	6842      	ldr	r2, [r0, #4]
 802054e:	605a      	str	r2, [r3, #4]
 8020550:	680c      	ldr	r4, [r1, #0]
 8020552:	4284      	cmp	r4, r0
 8020554:	d103      	bne.n	802055e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 8020556:	600b      	str	r3, [r1, #0]
 8020558:	6098      	str	r0, [r3, #8]
 802055a:	6043      	str	r3, [r0, #4]
 802055c:	bd10      	pop	{r4, pc}
 802055e:	6891      	ldr	r1, [r2, #8]
 8020560:	4281      	cmp	r1, r0
 8020562:	bf0c      	ite	eq
 8020564:	6093      	streq	r3, [r2, #8]
 8020566:	60d3      	strne	r3, [r2, #12]
 8020568:	e7f6      	b.n	8020558 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0802056a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 802056a:	6883      	ldr	r3, [r0, #8]
 802056c:	68da      	ldr	r2, [r3, #12]
 802056e:	6082      	str	r2, [r0, #8]
 8020570:	b510      	push	{r4, lr}
 8020572:	b102      	cbz	r2, 8020576 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8020574:	6050      	str	r0, [r2, #4]
 8020576:	6842      	ldr	r2, [r0, #4]
 8020578:	605a      	str	r2, [r3, #4]
 802057a:	680c      	ldr	r4, [r1, #0]
 802057c:	4284      	cmp	r4, r0
 802057e:	d103      	bne.n	8020588 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8020580:	600b      	str	r3, [r1, #0]
 8020582:	60d8      	str	r0, [r3, #12]
 8020584:	6043      	str	r3, [r0, #4]
 8020586:	bd10      	pop	{r4, pc}
 8020588:	68d1      	ldr	r1, [r2, #12]
 802058a:	4281      	cmp	r1, r0
 802058c:	bf0c      	ite	eq
 802058e:	60d3      	streq	r3, [r2, #12]
 8020590:	6093      	strne	r3, [r2, #8]
 8020592:	e7f6      	b.n	8020582 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08020594 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8020594:	68c3      	ldr	r3, [r0, #12]
 8020596:	b123      	cbz	r3, 80205a2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 8020598:	4618      	mov	r0, r3
 802059a:	689b      	ldr	r3, [r3, #8]
 802059c:	2b00      	cmp	r3, #0
 802059e:	d1fb      	bne.n	8020598 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80205a0:	4770      	bx	lr
 80205a2:	6843      	ldr	r3, [r0, #4]
 80205a4:	68da      	ldr	r2, [r3, #12]
 80205a6:	4282      	cmp	r2, r0
 80205a8:	d102      	bne.n	80205b0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80205aa:	4618      	mov	r0, r3
 80205ac:	685b      	ldr	r3, [r3, #4]
 80205ae:	e7f9      	b.n	80205a4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80205b0:	68c2      	ldr	r2, [r0, #12]
 80205b2:	4293      	cmp	r3, r2
 80205b4:	bf18      	it	ne
 80205b6:	4618      	movne	r0, r3
 80205b8:	4770      	bx	lr

080205ba <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80205ba:	7803      	ldrb	r3, [r0, #0]
 80205bc:	b933      	cbnz	r3, 80205cc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80205be:	6843      	ldr	r3, [r0, #4]
 80205c0:	685b      	ldr	r3, [r3, #4]
 80205c2:	4283      	cmp	r3, r0
 80205c4:	d102      	bne.n	80205cc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80205c6:	68db      	ldr	r3, [r3, #12]
 80205c8:	4618      	mov	r0, r3
 80205ca:	4770      	bx	lr
 80205cc:	6882      	ldr	r2, [r0, #8]
 80205ce:	b122      	cbz	r2, 80205da <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80205d0:	4613      	mov	r3, r2
 80205d2:	68d2      	ldr	r2, [r2, #12]
 80205d4:	2a00      	cmp	r2, #0
 80205d6:	d1fb      	bne.n	80205d0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80205d8:	e7f6      	b.n	80205c8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80205da:	6843      	ldr	r3, [r0, #4]
 80205dc:	689a      	ldr	r2, [r3, #8]
 80205de:	4282      	cmp	r2, r0
 80205e0:	d1f2      	bne.n	80205c8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80205e2:	4618      	mov	r0, r3
 80205e4:	685b      	ldr	r3, [r3, #4]
 80205e6:	e7f9      	b.n	80205dc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

080205e8 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80205e8:	f7ff bfd4 	b.w	8020594 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

080205ec <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80205ec:	f7ff bfe5 	b.w	80205ba <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080205f0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80205f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80205f4:	461e      	mov	r6, r3
 80205f6:	f103 0804 	add.w	r8, r3, #4
 80205fa:	2300      	movs	r3, #0
 80205fc:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8020600:	460c      	mov	r4, r1
 8020602:	604a      	str	r2, [r1, #4]
 8020604:	700b      	strb	r3, [r1, #0]
 8020606:	b300      	cbz	r0, 802064a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8020608:	4296      	cmp	r6, r2
 802060a:	6091      	str	r1, [r2, #8]
 802060c:	d118      	bne.n	8020640 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 802060e:	6071      	str	r1, [r6, #4]
 8020610:	60f4      	str	r4, [r6, #12]
 8020612:	2701      	movs	r7, #1
 8020614:	f04f 0900 	mov.w	r9, #0
 8020618:	6873      	ldr	r3, [r6, #4]
 802061a:	42a3      	cmp	r3, r4
 802061c:	d03f      	beq.n	802069e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 802061e:	6860      	ldr	r0, [r4, #4]
 8020620:	7802      	ldrb	r2, [r0, #0]
 8020622:	2a00      	cmp	r2, #0
 8020624:	d13b      	bne.n	802069e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8020626:	6845      	ldr	r5, [r0, #4]
 8020628:	68ab      	ldr	r3, [r5, #8]
 802062a:	4298      	cmp	r0, r3
 802062c:	d123      	bne.n	8020676 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 802062e:	68eb      	ldr	r3, [r5, #12]
 8020630:	b183      	cbz	r3, 8020654 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8020632:	781a      	ldrb	r2, [r3, #0]
 8020634:	b972      	cbnz	r2, 8020654 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8020636:	7007      	strb	r7, [r0, #0]
 8020638:	701f      	strb	r7, [r3, #0]
 802063a:	702a      	strb	r2, [r5, #0]
 802063c:	462c      	mov	r4, r5
 802063e:	e7eb      	b.n	8020618 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8020640:	68b3      	ldr	r3, [r6, #8]
 8020642:	4293      	cmp	r3, r2
 8020644:	d1e5      	bne.n	8020612 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020646:	60b1      	str	r1, [r6, #8]
 8020648:	e7e3      	b.n	8020612 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 802064a:	60d1      	str	r1, [r2, #12]
 802064c:	68f3      	ldr	r3, [r6, #12]
 802064e:	4293      	cmp	r3, r2
 8020650:	d1df      	bne.n	8020612 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020652:	e7dd      	b.n	8020610 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8020654:	68c3      	ldr	r3, [r0, #12]
 8020656:	42a3      	cmp	r3, r4
 8020658:	d103      	bne.n	8020662 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 802065a:	4641      	mov	r1, r8
 802065c:	f7ff ff70 	bl	8020540 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8020660:	4604      	mov	r4, r0
 8020662:	6863      	ldr	r3, [r4, #4]
 8020664:	4641      	mov	r1, r8
 8020666:	701f      	strb	r7, [r3, #0]
 8020668:	4628      	mov	r0, r5
 802066a:	f885 9000 	strb.w	r9, [r5]
 802066e:	f7ff ff7c 	bl	802056a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8020672:	4625      	mov	r5, r4
 8020674:	e7e2      	b.n	802063c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8020676:	b113      	cbz	r3, 802067e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8020678:	781a      	ldrb	r2, [r3, #0]
 802067a:	2a00      	cmp	r2, #0
 802067c:	d0db      	beq.n	8020636 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 802067e:	6883      	ldr	r3, [r0, #8]
 8020680:	42a3      	cmp	r3, r4
 8020682:	d103      	bne.n	802068c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8020684:	4641      	mov	r1, r8
 8020686:	f7ff ff70 	bl	802056a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 802068a:	4604      	mov	r4, r0
 802068c:	6863      	ldr	r3, [r4, #4]
 802068e:	4641      	mov	r1, r8
 8020690:	701f      	strb	r7, [r3, #0]
 8020692:	4628      	mov	r0, r5
 8020694:	f885 9000 	strb.w	r9, [r5]
 8020698:	f7ff ff52 	bl	8020540 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 802069c:	e7e9      	b.n	8020672 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 802069e:	2201      	movs	r2, #1
 80206a0:	701a      	strb	r2, [r3, #0]
 80206a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080206a6 <_ZSt17__throw_bad_allocv>:
 80206a6:	b508      	push	{r3, lr}
 80206a8:	f000 f820 	bl	80206ec <abort>

080206ac <_ZSt20__throw_length_errorPKc>:
 80206ac:	b508      	push	{r3, lr}
 80206ae:	f000 f81d 	bl	80206ec <abort>

080206b2 <_ZSt25__throw_bad_function_callv>:
 80206b2:	b508      	push	{r3, lr}
 80206b4:	f000 f81a 	bl	80206ec <abort>

080206b8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80206b8:	b508      	push	{r3, lr}
 80206ba:	4780      	blx	r0
 80206bc:	f000 f816 	bl	80206ec <abort>

080206c0 <_ZSt13get_terminatev>:
 80206c0:	4b02      	ldr	r3, [pc, #8]	; (80206cc <_ZSt13get_terminatev+0xc>)
 80206c2:	6818      	ldr	r0, [r3, #0]
 80206c4:	f3bf 8f5b 	dmb	ish
 80206c8:	4770      	bx	lr
 80206ca:	bf00      	nop
 80206cc:	24000014 	.word	0x24000014

080206d0 <_ZSt9terminatev>:
 80206d0:	b508      	push	{r3, lr}
 80206d2:	f7ff fff5 	bl	80206c0 <_ZSt13get_terminatev>
 80206d6:	f7ff ffef 	bl	80206b8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080206dc <_ZSt15get_new_handlerv>:
 80206dc:	4b02      	ldr	r3, [pc, #8]	; (80206e8 <_ZSt15get_new_handlerv+0xc>)
 80206de:	6818      	ldr	r0, [r3, #0]
 80206e0:	f3bf 8f5b 	dmb	ish
 80206e4:	4770      	bx	lr
 80206e6:	bf00      	nop
 80206e8:	240015ac 	.word	0x240015ac

080206ec <abort>:
 80206ec:	b508      	push	{r3, lr}
 80206ee:	2006      	movs	r0, #6
 80206f0:	f000 f986 	bl	8020a00 <raise>
 80206f4:	2001      	movs	r0, #1
 80206f6:	f7f4 fcb1 	bl	801505c <_exit>
	...

080206fc <__errno>:
 80206fc:	4b01      	ldr	r3, [pc, #4]	; (8020704 <__errno+0x8>)
 80206fe:	6818      	ldr	r0, [r3, #0]
 8020700:	4770      	bx	lr
 8020702:	bf00      	nop
 8020704:	24000018 	.word	0x24000018

08020708 <__libc_init_array>:
 8020708:	b570      	push	{r4, r5, r6, lr}
 802070a:	4d0d      	ldr	r5, [pc, #52]	; (8020740 <__libc_init_array+0x38>)
 802070c:	4c0d      	ldr	r4, [pc, #52]	; (8020744 <__libc_init_array+0x3c>)
 802070e:	1b64      	subs	r4, r4, r5
 8020710:	10a4      	asrs	r4, r4, #2
 8020712:	2600      	movs	r6, #0
 8020714:	42a6      	cmp	r6, r4
 8020716:	d109      	bne.n	802072c <__libc_init_array+0x24>
 8020718:	4d0b      	ldr	r5, [pc, #44]	; (8020748 <__libc_init_array+0x40>)
 802071a:	4c0c      	ldr	r4, [pc, #48]	; (802074c <__libc_init_array+0x44>)
 802071c:	f000 f99a 	bl	8020a54 <_init>
 8020720:	1b64      	subs	r4, r4, r5
 8020722:	10a4      	asrs	r4, r4, #2
 8020724:	2600      	movs	r6, #0
 8020726:	42a6      	cmp	r6, r4
 8020728:	d105      	bne.n	8020736 <__libc_init_array+0x2e>
 802072a:	bd70      	pop	{r4, r5, r6, pc}
 802072c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020730:	4798      	blx	r3
 8020732:	3601      	adds	r6, #1
 8020734:	e7ee      	b.n	8020714 <__libc_init_array+0xc>
 8020736:	f855 3b04 	ldr.w	r3, [r5], #4
 802073a:	4798      	blx	r3
 802073c:	3601      	adds	r6, #1
 802073e:	e7f2      	b.n	8020726 <__libc_init_array+0x1e>
 8020740:	08020d00 	.word	0x08020d00
 8020744:	08020d00 	.word	0x08020d00
 8020748:	08020d00 	.word	0x08020d00
 802074c:	08020d30 	.word	0x08020d30

08020750 <malloc>:
 8020750:	4b02      	ldr	r3, [pc, #8]	; (802075c <malloc+0xc>)
 8020752:	4601      	mov	r1, r0
 8020754:	6818      	ldr	r0, [r3, #0]
 8020756:	f000 b8a7 	b.w	80208a8 <_malloc_r>
 802075a:	bf00      	nop
 802075c:	24000018 	.word	0x24000018

08020760 <free>:
 8020760:	4b02      	ldr	r3, [pc, #8]	; (802076c <free+0xc>)
 8020762:	4601      	mov	r1, r0
 8020764:	6818      	ldr	r0, [r3, #0]
 8020766:	f000 b833 	b.w	80207d0 <_free_r>
 802076a:	bf00      	nop
 802076c:	24000018 	.word	0x24000018

08020770 <memcpy>:
 8020770:	440a      	add	r2, r1
 8020772:	4291      	cmp	r1, r2
 8020774:	f100 33ff 	add.w	r3, r0, #4294967295
 8020778:	d100      	bne.n	802077c <memcpy+0xc>
 802077a:	4770      	bx	lr
 802077c:	b510      	push	{r4, lr}
 802077e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020786:	4291      	cmp	r1, r2
 8020788:	d1f9      	bne.n	802077e <memcpy+0xe>
 802078a:	bd10      	pop	{r4, pc}

0802078c <memmove>:
 802078c:	4288      	cmp	r0, r1
 802078e:	b510      	push	{r4, lr}
 8020790:	eb01 0402 	add.w	r4, r1, r2
 8020794:	d902      	bls.n	802079c <memmove+0x10>
 8020796:	4284      	cmp	r4, r0
 8020798:	4623      	mov	r3, r4
 802079a:	d807      	bhi.n	80207ac <memmove+0x20>
 802079c:	1e43      	subs	r3, r0, #1
 802079e:	42a1      	cmp	r1, r4
 80207a0:	d008      	beq.n	80207b4 <memmove+0x28>
 80207a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80207a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80207aa:	e7f8      	b.n	802079e <memmove+0x12>
 80207ac:	4402      	add	r2, r0
 80207ae:	4601      	mov	r1, r0
 80207b0:	428a      	cmp	r2, r1
 80207b2:	d100      	bne.n	80207b6 <memmove+0x2a>
 80207b4:	bd10      	pop	{r4, pc}
 80207b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80207ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80207be:	e7f7      	b.n	80207b0 <memmove+0x24>

080207c0 <memset>:
 80207c0:	4402      	add	r2, r0
 80207c2:	4603      	mov	r3, r0
 80207c4:	4293      	cmp	r3, r2
 80207c6:	d100      	bne.n	80207ca <memset+0xa>
 80207c8:	4770      	bx	lr
 80207ca:	f803 1b01 	strb.w	r1, [r3], #1
 80207ce:	e7f9      	b.n	80207c4 <memset+0x4>

080207d0 <_free_r>:
 80207d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80207d2:	2900      	cmp	r1, #0
 80207d4:	d044      	beq.n	8020860 <_free_r+0x90>
 80207d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80207da:	9001      	str	r0, [sp, #4]
 80207dc:	2b00      	cmp	r3, #0
 80207de:	f1a1 0404 	sub.w	r4, r1, #4
 80207e2:	bfb8      	it	lt
 80207e4:	18e4      	addlt	r4, r4, r3
 80207e6:	f000 f927 	bl	8020a38 <__malloc_lock>
 80207ea:	4a1e      	ldr	r2, [pc, #120]	; (8020864 <_free_r+0x94>)
 80207ec:	9801      	ldr	r0, [sp, #4]
 80207ee:	6813      	ldr	r3, [r2, #0]
 80207f0:	b933      	cbnz	r3, 8020800 <_free_r+0x30>
 80207f2:	6063      	str	r3, [r4, #4]
 80207f4:	6014      	str	r4, [r2, #0]
 80207f6:	b003      	add	sp, #12
 80207f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80207fc:	f000 b922 	b.w	8020a44 <__malloc_unlock>
 8020800:	42a3      	cmp	r3, r4
 8020802:	d908      	bls.n	8020816 <_free_r+0x46>
 8020804:	6825      	ldr	r5, [r4, #0]
 8020806:	1961      	adds	r1, r4, r5
 8020808:	428b      	cmp	r3, r1
 802080a:	bf01      	itttt	eq
 802080c:	6819      	ldreq	r1, [r3, #0]
 802080e:	685b      	ldreq	r3, [r3, #4]
 8020810:	1949      	addeq	r1, r1, r5
 8020812:	6021      	streq	r1, [r4, #0]
 8020814:	e7ed      	b.n	80207f2 <_free_r+0x22>
 8020816:	461a      	mov	r2, r3
 8020818:	685b      	ldr	r3, [r3, #4]
 802081a:	b10b      	cbz	r3, 8020820 <_free_r+0x50>
 802081c:	42a3      	cmp	r3, r4
 802081e:	d9fa      	bls.n	8020816 <_free_r+0x46>
 8020820:	6811      	ldr	r1, [r2, #0]
 8020822:	1855      	adds	r5, r2, r1
 8020824:	42a5      	cmp	r5, r4
 8020826:	d10b      	bne.n	8020840 <_free_r+0x70>
 8020828:	6824      	ldr	r4, [r4, #0]
 802082a:	4421      	add	r1, r4
 802082c:	1854      	adds	r4, r2, r1
 802082e:	42a3      	cmp	r3, r4
 8020830:	6011      	str	r1, [r2, #0]
 8020832:	d1e0      	bne.n	80207f6 <_free_r+0x26>
 8020834:	681c      	ldr	r4, [r3, #0]
 8020836:	685b      	ldr	r3, [r3, #4]
 8020838:	6053      	str	r3, [r2, #4]
 802083a:	4421      	add	r1, r4
 802083c:	6011      	str	r1, [r2, #0]
 802083e:	e7da      	b.n	80207f6 <_free_r+0x26>
 8020840:	d902      	bls.n	8020848 <_free_r+0x78>
 8020842:	230c      	movs	r3, #12
 8020844:	6003      	str	r3, [r0, #0]
 8020846:	e7d6      	b.n	80207f6 <_free_r+0x26>
 8020848:	6825      	ldr	r5, [r4, #0]
 802084a:	1961      	adds	r1, r4, r5
 802084c:	428b      	cmp	r3, r1
 802084e:	bf04      	itt	eq
 8020850:	6819      	ldreq	r1, [r3, #0]
 8020852:	685b      	ldreq	r3, [r3, #4]
 8020854:	6063      	str	r3, [r4, #4]
 8020856:	bf04      	itt	eq
 8020858:	1949      	addeq	r1, r1, r5
 802085a:	6021      	streq	r1, [r4, #0]
 802085c:	6054      	str	r4, [r2, #4]
 802085e:	e7ca      	b.n	80207f6 <_free_r+0x26>
 8020860:	b003      	add	sp, #12
 8020862:	bd30      	pop	{r4, r5, pc}
 8020864:	240015b0 	.word	0x240015b0

08020868 <sbrk_aligned>:
 8020868:	b570      	push	{r4, r5, r6, lr}
 802086a:	4e0e      	ldr	r6, [pc, #56]	; (80208a4 <sbrk_aligned+0x3c>)
 802086c:	460c      	mov	r4, r1
 802086e:	6831      	ldr	r1, [r6, #0]
 8020870:	4605      	mov	r5, r0
 8020872:	b911      	cbnz	r1, 802087a <sbrk_aligned+0x12>
 8020874:	f000 f88c 	bl	8020990 <_sbrk_r>
 8020878:	6030      	str	r0, [r6, #0]
 802087a:	4621      	mov	r1, r4
 802087c:	4628      	mov	r0, r5
 802087e:	f000 f887 	bl	8020990 <_sbrk_r>
 8020882:	1c43      	adds	r3, r0, #1
 8020884:	d00a      	beq.n	802089c <sbrk_aligned+0x34>
 8020886:	1cc4      	adds	r4, r0, #3
 8020888:	f024 0403 	bic.w	r4, r4, #3
 802088c:	42a0      	cmp	r0, r4
 802088e:	d007      	beq.n	80208a0 <sbrk_aligned+0x38>
 8020890:	1a21      	subs	r1, r4, r0
 8020892:	4628      	mov	r0, r5
 8020894:	f000 f87c 	bl	8020990 <_sbrk_r>
 8020898:	3001      	adds	r0, #1
 802089a:	d101      	bne.n	80208a0 <sbrk_aligned+0x38>
 802089c:	f04f 34ff 	mov.w	r4, #4294967295
 80208a0:	4620      	mov	r0, r4
 80208a2:	bd70      	pop	{r4, r5, r6, pc}
 80208a4:	240015b4 	.word	0x240015b4

080208a8 <_malloc_r>:
 80208a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208ac:	1ccd      	adds	r5, r1, #3
 80208ae:	f025 0503 	bic.w	r5, r5, #3
 80208b2:	3508      	adds	r5, #8
 80208b4:	2d0c      	cmp	r5, #12
 80208b6:	bf38      	it	cc
 80208b8:	250c      	movcc	r5, #12
 80208ba:	2d00      	cmp	r5, #0
 80208bc:	4607      	mov	r7, r0
 80208be:	db01      	blt.n	80208c4 <_malloc_r+0x1c>
 80208c0:	42a9      	cmp	r1, r5
 80208c2:	d905      	bls.n	80208d0 <_malloc_r+0x28>
 80208c4:	230c      	movs	r3, #12
 80208c6:	603b      	str	r3, [r7, #0]
 80208c8:	2600      	movs	r6, #0
 80208ca:	4630      	mov	r0, r6
 80208cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80208d0:	4e2e      	ldr	r6, [pc, #184]	; (802098c <_malloc_r+0xe4>)
 80208d2:	f000 f8b1 	bl	8020a38 <__malloc_lock>
 80208d6:	6833      	ldr	r3, [r6, #0]
 80208d8:	461c      	mov	r4, r3
 80208da:	bb34      	cbnz	r4, 802092a <_malloc_r+0x82>
 80208dc:	4629      	mov	r1, r5
 80208de:	4638      	mov	r0, r7
 80208e0:	f7ff ffc2 	bl	8020868 <sbrk_aligned>
 80208e4:	1c43      	adds	r3, r0, #1
 80208e6:	4604      	mov	r4, r0
 80208e8:	d14d      	bne.n	8020986 <_malloc_r+0xde>
 80208ea:	6834      	ldr	r4, [r6, #0]
 80208ec:	4626      	mov	r6, r4
 80208ee:	2e00      	cmp	r6, #0
 80208f0:	d140      	bne.n	8020974 <_malloc_r+0xcc>
 80208f2:	6823      	ldr	r3, [r4, #0]
 80208f4:	4631      	mov	r1, r6
 80208f6:	4638      	mov	r0, r7
 80208f8:	eb04 0803 	add.w	r8, r4, r3
 80208fc:	f000 f848 	bl	8020990 <_sbrk_r>
 8020900:	4580      	cmp	r8, r0
 8020902:	d13a      	bne.n	802097a <_malloc_r+0xd2>
 8020904:	6821      	ldr	r1, [r4, #0]
 8020906:	3503      	adds	r5, #3
 8020908:	1a6d      	subs	r5, r5, r1
 802090a:	f025 0503 	bic.w	r5, r5, #3
 802090e:	3508      	adds	r5, #8
 8020910:	2d0c      	cmp	r5, #12
 8020912:	bf38      	it	cc
 8020914:	250c      	movcc	r5, #12
 8020916:	4629      	mov	r1, r5
 8020918:	4638      	mov	r0, r7
 802091a:	f7ff ffa5 	bl	8020868 <sbrk_aligned>
 802091e:	3001      	adds	r0, #1
 8020920:	d02b      	beq.n	802097a <_malloc_r+0xd2>
 8020922:	6823      	ldr	r3, [r4, #0]
 8020924:	442b      	add	r3, r5
 8020926:	6023      	str	r3, [r4, #0]
 8020928:	e00e      	b.n	8020948 <_malloc_r+0xa0>
 802092a:	6822      	ldr	r2, [r4, #0]
 802092c:	1b52      	subs	r2, r2, r5
 802092e:	d41e      	bmi.n	802096e <_malloc_r+0xc6>
 8020930:	2a0b      	cmp	r2, #11
 8020932:	d916      	bls.n	8020962 <_malloc_r+0xba>
 8020934:	1961      	adds	r1, r4, r5
 8020936:	42a3      	cmp	r3, r4
 8020938:	6025      	str	r5, [r4, #0]
 802093a:	bf18      	it	ne
 802093c:	6059      	strne	r1, [r3, #4]
 802093e:	6863      	ldr	r3, [r4, #4]
 8020940:	bf08      	it	eq
 8020942:	6031      	streq	r1, [r6, #0]
 8020944:	5162      	str	r2, [r4, r5]
 8020946:	604b      	str	r3, [r1, #4]
 8020948:	4638      	mov	r0, r7
 802094a:	f104 060b 	add.w	r6, r4, #11
 802094e:	f000 f879 	bl	8020a44 <__malloc_unlock>
 8020952:	f026 0607 	bic.w	r6, r6, #7
 8020956:	1d23      	adds	r3, r4, #4
 8020958:	1af2      	subs	r2, r6, r3
 802095a:	d0b6      	beq.n	80208ca <_malloc_r+0x22>
 802095c:	1b9b      	subs	r3, r3, r6
 802095e:	50a3      	str	r3, [r4, r2]
 8020960:	e7b3      	b.n	80208ca <_malloc_r+0x22>
 8020962:	6862      	ldr	r2, [r4, #4]
 8020964:	42a3      	cmp	r3, r4
 8020966:	bf0c      	ite	eq
 8020968:	6032      	streq	r2, [r6, #0]
 802096a:	605a      	strne	r2, [r3, #4]
 802096c:	e7ec      	b.n	8020948 <_malloc_r+0xa0>
 802096e:	4623      	mov	r3, r4
 8020970:	6864      	ldr	r4, [r4, #4]
 8020972:	e7b2      	b.n	80208da <_malloc_r+0x32>
 8020974:	4634      	mov	r4, r6
 8020976:	6876      	ldr	r6, [r6, #4]
 8020978:	e7b9      	b.n	80208ee <_malloc_r+0x46>
 802097a:	230c      	movs	r3, #12
 802097c:	603b      	str	r3, [r7, #0]
 802097e:	4638      	mov	r0, r7
 8020980:	f000 f860 	bl	8020a44 <__malloc_unlock>
 8020984:	e7a1      	b.n	80208ca <_malloc_r+0x22>
 8020986:	6025      	str	r5, [r4, #0]
 8020988:	e7de      	b.n	8020948 <_malloc_r+0xa0>
 802098a:	bf00      	nop
 802098c:	240015b0 	.word	0x240015b0

08020990 <_sbrk_r>:
 8020990:	b538      	push	{r3, r4, r5, lr}
 8020992:	4d06      	ldr	r5, [pc, #24]	; (80209ac <_sbrk_r+0x1c>)
 8020994:	2300      	movs	r3, #0
 8020996:	4604      	mov	r4, r0
 8020998:	4608      	mov	r0, r1
 802099a:	602b      	str	r3, [r5, #0]
 802099c:	f7f4 fb68 	bl	8015070 <_sbrk>
 80209a0:	1c43      	adds	r3, r0, #1
 80209a2:	d102      	bne.n	80209aa <_sbrk_r+0x1a>
 80209a4:	682b      	ldr	r3, [r5, #0]
 80209a6:	b103      	cbz	r3, 80209aa <_sbrk_r+0x1a>
 80209a8:	6023      	str	r3, [r4, #0]
 80209aa:	bd38      	pop	{r3, r4, r5, pc}
 80209ac:	240015b8 	.word	0x240015b8

080209b0 <_raise_r>:
 80209b0:	291f      	cmp	r1, #31
 80209b2:	b538      	push	{r3, r4, r5, lr}
 80209b4:	4604      	mov	r4, r0
 80209b6:	460d      	mov	r5, r1
 80209b8:	d904      	bls.n	80209c4 <_raise_r+0x14>
 80209ba:	2316      	movs	r3, #22
 80209bc:	6003      	str	r3, [r0, #0]
 80209be:	f04f 30ff 	mov.w	r0, #4294967295
 80209c2:	bd38      	pop	{r3, r4, r5, pc}
 80209c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80209c6:	b112      	cbz	r2, 80209ce <_raise_r+0x1e>
 80209c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80209cc:	b94b      	cbnz	r3, 80209e2 <_raise_r+0x32>
 80209ce:	4620      	mov	r0, r4
 80209d0:	f000 f830 	bl	8020a34 <_getpid_r>
 80209d4:	462a      	mov	r2, r5
 80209d6:	4601      	mov	r1, r0
 80209d8:	4620      	mov	r0, r4
 80209da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80209de:	f000 b817 	b.w	8020a10 <_kill_r>
 80209e2:	2b01      	cmp	r3, #1
 80209e4:	d00a      	beq.n	80209fc <_raise_r+0x4c>
 80209e6:	1c59      	adds	r1, r3, #1
 80209e8:	d103      	bne.n	80209f2 <_raise_r+0x42>
 80209ea:	2316      	movs	r3, #22
 80209ec:	6003      	str	r3, [r0, #0]
 80209ee:	2001      	movs	r0, #1
 80209f0:	e7e7      	b.n	80209c2 <_raise_r+0x12>
 80209f2:	2400      	movs	r4, #0
 80209f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80209f8:	4628      	mov	r0, r5
 80209fa:	4798      	blx	r3
 80209fc:	2000      	movs	r0, #0
 80209fe:	e7e0      	b.n	80209c2 <_raise_r+0x12>

08020a00 <raise>:
 8020a00:	4b02      	ldr	r3, [pc, #8]	; (8020a0c <raise+0xc>)
 8020a02:	4601      	mov	r1, r0
 8020a04:	6818      	ldr	r0, [r3, #0]
 8020a06:	f7ff bfd3 	b.w	80209b0 <_raise_r>
 8020a0a:	bf00      	nop
 8020a0c:	24000018 	.word	0x24000018

08020a10 <_kill_r>:
 8020a10:	b538      	push	{r3, r4, r5, lr}
 8020a12:	4d07      	ldr	r5, [pc, #28]	; (8020a30 <_kill_r+0x20>)
 8020a14:	2300      	movs	r3, #0
 8020a16:	4604      	mov	r4, r0
 8020a18:	4608      	mov	r0, r1
 8020a1a:	4611      	mov	r1, r2
 8020a1c:	602b      	str	r3, [r5, #0]
 8020a1e:	f7f4 fb0d 	bl	801503c <_kill>
 8020a22:	1c43      	adds	r3, r0, #1
 8020a24:	d102      	bne.n	8020a2c <_kill_r+0x1c>
 8020a26:	682b      	ldr	r3, [r5, #0]
 8020a28:	b103      	cbz	r3, 8020a2c <_kill_r+0x1c>
 8020a2a:	6023      	str	r3, [r4, #0]
 8020a2c:	bd38      	pop	{r3, r4, r5, pc}
 8020a2e:	bf00      	nop
 8020a30:	240015b8 	.word	0x240015b8

08020a34 <_getpid_r>:
 8020a34:	f7f4 bafa 	b.w	801502c <_getpid>

08020a38 <__malloc_lock>:
 8020a38:	4801      	ldr	r0, [pc, #4]	; (8020a40 <__malloc_lock+0x8>)
 8020a3a:	f000 b809 	b.w	8020a50 <__retarget_lock_acquire_recursive>
 8020a3e:	bf00      	nop
 8020a40:	240015bc 	.word	0x240015bc

08020a44 <__malloc_unlock>:
 8020a44:	4801      	ldr	r0, [pc, #4]	; (8020a4c <__malloc_unlock+0x8>)
 8020a46:	f000 b804 	b.w	8020a52 <__retarget_lock_release_recursive>
 8020a4a:	bf00      	nop
 8020a4c:	240015bc 	.word	0x240015bc

08020a50 <__retarget_lock_acquire_recursive>:
 8020a50:	4770      	bx	lr

08020a52 <__retarget_lock_release_recursive>:
 8020a52:	4770      	bx	lr

08020a54 <_init>:
 8020a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a56:	bf00      	nop
 8020a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020a5a:	bc08      	pop	{r3}
 8020a5c:	469e      	mov	lr, r3
 8020a5e:	4770      	bx	lr

08020a60 <_fini>:
 8020a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a62:	bf00      	nop
 8020a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020a66:	bc08      	pop	{r3}
 8020a68:	469e      	mov	lr, r3
 8020a6a:	4770      	bx	lr
