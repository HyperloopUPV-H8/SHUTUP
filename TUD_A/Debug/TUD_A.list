
TUD_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009248  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08009518  08009518  00019518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  08009708  08009708  00019708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   0000000c  08009714  08009714  00019714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08009720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005bc  24000078  08009794  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  24000634  08009794  00020634  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002398a  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003439  00000000  00000000  00043a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001660  00000000  00000000  00046e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001558  00000000  00000000  000484c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037e1b  00000000  00000000  00049a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015aa8  00000000  00000000  0008183b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00161e26  00000000  00000000  000972e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001f9109  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000798c  00000000  00000000  001f915c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08009500 	.word	0x08009500

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	08009500 	.word	0x08009500

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f000 f869 	bl	8000418 <_ZNSaIP12InputCaptureED1Ev>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4618      	mov	r0, r3
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4618      	mov	r0, r3
 800035c:	f000 f84c 	bl	80003f8 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4618      	mov	r0, r3
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}

0800036a <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800036a:	b580      	push	{r7, lr}
 800036c:	b082      	sub	sp, #8
 800036e:	af00      	add	r7, sp, #0
 8000370:	6078      	str	r0, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ffeb 	bl	8000350 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4618      	mov	r0, r3
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <_ZN13MovingAverageILm100EiEC1Ev>:
		return old_value;
	}
};

template<uint32_t BUFFER_SIZE, class BUFFER_TYPE>
class MovingAverage{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f867 	bl	8000462 <_ZN10RingBufferILm100EiEC1Ev>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4618      	mov	r0, r3
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefm>:

// PRIVATE METHODS

vector<InputCapture*> InputCapture::input_captures;

InputCapture::InputCapture(TIM_HandleTypeDef* timer, uint32_t channel) : timer(timer), channel(channel) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ffe8 	bl	8000384 <_ZN13MovingAverageILm100EiEC1Ev>
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	2200      	movs	r2, #0
 80003b8:	f8a3 21d0 	strh.w	r2, [r3, #464]	; 0x1d0
 80003bc:	68f9      	ldr	r1, [r7, #12]
 80003be:	f04f 0200 	mov.w	r2, #0
 80003c2:	f04f 0300 	mov.w	r3, #0
 80003c6:	e9c1 2376 	strd	r2, r3, [r1, #472]	; 0x1d8
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	68ba      	ldr	r2, [r7, #8]
 80003ce:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
	InputCapture::input_captures.push_back(this);
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	4619      	mov	r1, r3
 80003e4:	4803      	ldr	r0, [pc, #12]	; (80003f4 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefm+0x54>)
 80003e6:	f000 f860 	bl	80004aa <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>
}
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	4618      	mov	r0, r3
 80003ee:	3718      	adds	r7, #24
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	24000094 	.word	0x24000094

080003f8 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f000 f863 	bl	80004cc <_ZNSaIP12InputCaptureEC1Ev>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f86b 	bl	80004e4 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4618      	mov	r0, r3
 8000412:	3708      	adds	r7, #8
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <_ZNSaIP12InputCaptureED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f000 f873 	bl	800050c <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureED1Ev>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4618      	mov	r0, r3
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	689a      	ldr	r2, [r3, #8]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	1ad3      	subs	r3, r2, r3
 8000446:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000448:	461a      	mov	r2, r3
 800044a:	6878      	ldr	r0, [r7, #4]
 800044c:	f000 f869 	bl	8000522 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      }
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff70 	bl	8000338 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4618      	mov	r0, r3
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <_ZN10RingBufferILm100EiEC1Ev>:
	RingBuffer(){
 8000462:	b480      	push	{r7}
 8000464:	b085      	sub	sp, #20
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	2b63      	cmp	r3, #99	; 0x63
 8000484:	dc0a      	bgt.n	800049c <_ZN10RingBufferILm100EiEC1Ev+0x3a>
			buffer[i] = 0;
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	3302      	adds	r3, #2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4413      	add	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	605a      	str	r2, [r3, #4]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3301      	adds	r3, #1
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	e7f1      	b.n	8000480 <_ZN10RingBufferILm100EiEC1Ev+0x1e>
	}
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4618      	mov	r0, r3
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80004b4:	6838      	ldr	r0, [r7, #0]
 80004b6:	f000 f847 	bl	8000548 <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>
 80004ba:	4603      	mov	r3, r0
 80004bc:	4619      	mov	r1, r3
 80004be:	6878      	ldr	r0, [r7, #4]
 80004c0:	f000 f84d 	bl	800055e <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <_ZNSaIP12InputCaptureEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f000 f870 	bl	80005ba <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4618      	mov	r0, r3
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
	{ }
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4618      	mov	r0, r3
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000522:	b580      	push	{r7, lr}
 8000524:	b084      	sub	sp, #16
 8000526:	af00      	add	r7, sp, #0
 8000528:	60f8      	str	r0, [r7, #12]
 800052a:	60b9      	str	r1, [r7, #8]
 800052c:	607a      	str	r2, [r7, #4]
	if (__p)
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d005      	beq.n	8000540 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	68b9      	ldr	r1, [r7, #8]
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f848 	bl	80005d0 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>
      }
 8000540:	bf00      	nop
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800055e:	b5b0      	push	{r4, r5, r7, lr}
 8000560:	b082      	sub	sp, #8
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	685a      	ldr	r2, [r3, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	429a      	cmp	r2, r3
 8000572:	d011      	beq.n	8000598 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000574:	687c      	ldr	r4, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	685d      	ldr	r5, [r3, #4]
 800057a:	6838      	ldr	r0, [r7, #0]
 800057c:	f000 f837 	bl	80005ee <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8000580:	4603      	mov	r3, r0
 8000582:	461a      	mov	r2, r3
 8000584:	4629      	mov	r1, r5
 8000586:	4620      	mov	r0, r4
 8000588:	f000 f83c 	bl	8000604 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	1d1a      	adds	r2, r3, #4
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8000596:	e00c      	b.n	80005b2 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 f846 	bl	800062a <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800059e:	4604      	mov	r4, r0
 80005a0:	6838      	ldr	r0, [r7, #0]
 80005a2:	f000 f824 	bl	80005ee <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	4621      	mov	r1, r4
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f000 f863 	bl	8000678 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bdb0      	pop	{r4, r5, r7, pc}

080005ba <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	68b9      	ldr	r1, [r7, #8]
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f000 f905 	bl	80007f0 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}

080005ee <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80005ee:	b480      	push	{r7}
 80005f0:	b083      	sub	sp, #12
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ffec 	bl	80005ee <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	68b9      	ldr	r1, [r7, #8]
 800061c:	68f8      	ldr	r0, [r7, #12]
 800061e:	f000 f8f7 	bl	8000810 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE9constructIS2_JS2_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800062a:	b580      	push	{r7, lr}
 800062c:	b084      	sub	sp, #16
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	1d1a      	adds	r2, r3, #4
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f8fd 	bl	800083c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4618      	mov	r0, r3
 8000646:	3710      	adds	r7, #16
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <_ZNSt6vectorIP12InputCaptureSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f805 	bl	8000662 <_ZNSt6vectorIP12InputCaptureSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8000658:	4603      	mov	r3, r0
      }
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <_ZNSt6vectorIP12InputCaptureSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800066a:	2301      	movs	r3, #1
      }
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8000678:	b5b0      	push	{r4, r5, r7, lr}
 800067a:	b08c      	sub	sp, #48	; 0x30
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8000684:	4a59      	ldr	r2, [pc, #356]	; (80007ec <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8000686:	2101      	movs	r1, #1
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f000 f8e7 	bl	800085c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>
 800068e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f000 f924 	bl	80008ea <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 80006a2:	4603      	mov	r3, r0
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	f107 0214 	add.w	r2, r7, #20
 80006aa:	f107 0308 	add.w	r3, r7, #8
 80006ae:	4611      	mov	r1, r2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f92a 	bl	800090a <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80006b6:	4603      	mov	r3, r0
 80006b8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f938 	bl	8000934 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>
 80006c4:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80006ca:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80006d0:	69ba      	ldr	r2, [r7, #24]
 80006d2:	18d5      	adds	r5, r2, r3
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff8a 	bl	80005ee <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	4620      	mov	r0, r4
 80006e2:	f7ff ff8f 	bl	8000604 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80006e6:	2300      	movs	r3, #0
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80006ea:	f7ff ffaf 	bl	800064c <_ZNSt6vectorIP12InputCaptureSaIS1_EE15_S_use_relocateEv>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d027      	beq.n	8000744 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 f943 	bl	8000984 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80006fe:	4603      	mov	r3, r0
 8000700:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f948 	bl	800099a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800070a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800070c:	69ba      	ldr	r2, [r7, #24]
 800070e:	4621      	mov	r1, r4
 8000710:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000712:	f000 f923 	bl	800095c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8000716:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800071a:	3304      	adds	r3, #4
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f92e 	bl	8000984 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8000728:	4603      	mov	r3, r0
 800072a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f933 	bl	800099a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8000734:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8000736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000738:	6a39      	ldr	r1, [r7, #32]
 800073a:	4620      	mov	r0, r4
 800073c:	f000 f90e 	bl	800095c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8000740:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000742:	e026      	b.n	8000792 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f91b 	bl	8000984 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800074e:	4603      	mov	r3, r0
 8000750:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f920 	bl	800099a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800075a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800075c:	69ba      	ldr	r2, [r7, #24]
 800075e:	4621      	mov	r1, r4
 8000760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000762:	f000 f925 	bl	80009b0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>
 8000766:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8000768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076a:	3304      	adds	r3, #4
 800076c:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f906 	bl	8000984 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8000778:	4603      	mov	r3, r0
 800077a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f90b 	bl	800099a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8000784:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8000786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000788:	6a39      	ldr	r1, [r7, #32]
 800078a:	4620      	mov	r0, r4
 800078c:	f000 f910 	bl	80009b0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>
 8000790:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8000792:	f7ff ff5b 	bl	800064c <_ZNSt6vectorIP12InputCaptureSaIS1_EE15_S_use_relocateEv>
 8000796:	4603      	mov	r3, r0
 8000798:	f083 0301 	eor.w	r3, r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d009      	beq.n	80007b6 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f8f8 	bl	800099a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 80007aa:	4603      	mov	r3, r0
 80007ac:	461a      	mov	r2, r3
 80007ae:	6a39      	ldr	r1, [r7, #32]
 80007b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80007b2:	f000 f916 	bl	80009e2 <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80007b6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	689a      	ldr	r2, [r3, #8]
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80007c2:	461a      	mov	r2, r3
 80007c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80007c6:	f7ff feac 	bl	8000522 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80007d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	69ba      	ldr	r2, [r7, #24]
 80007dc:	441a      	add	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	609a      	str	r2, [r3, #8]
    }
 80007e2:	bf00      	nop
 80007e4:	3730      	adds	r7, #48	; 0x30
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bdb0      	pop	{r4, r5, r7, pc}
 80007ea:	bf00      	nop
 80007ec:	08009518 	.word	0x08009518

080007f0 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4619      	mov	r1, r3
 8000802:	68b8      	ldr	r0, [r7, #8]
 8000804:	f008 fbbc 	bl	8008f80 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE9constructIS2_JS2_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff fee6 	bl	80005ee <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8000822:	4603      	mov	r3, r0
 8000824:	681c      	ldr	r4, [r3, #0]
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	4619      	mov	r1, r3
 800082a:	2004      	movs	r0, #4
 800082c:	f7ff fd78 	bl	8000320 <_ZnwjPv>
 8000830:	4603      	mov	r3, r0
 8000832:	601c      	str	r4, [r3, #0]
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bd90      	pop	{r4, r7, pc}

0800083c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b087      	sub	sp, #28
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8000868:	68f8      	ldr	r0, [r7, #12]
 800086a:	f000 f8c8 	bl	80009fe <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800086e:	4604      	mov	r4, r0
 8000870:	68f8      	ldr	r0, [r7, #12]
 8000872:	f000 f8d5 	bl	8000a20 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 8000876:	4603      	mov	r3, r0
 8000878:	1ae2      	subs	r2, r4, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	429a      	cmp	r2, r3
 800087e:	bf34      	ite	cc
 8000880:	2301      	movcc	r3, #1
 8000882:	2300      	movcs	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d002      	beq.n	8000890 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f008 fb93 	bl	8008fb6 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	f000 f8c5 	bl	8000a20 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 8000896:	4604      	mov	r4, r0
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f000 f8c1 	bl	8000a20 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800089e:	4603      	mov	r3, r0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	f107 0208 	add.w	r2, r7, #8
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f8c7 	bl	8000a40 <_ZSt3maxIjERKT_S2_S2_>
 80008b2:	4603      	mov	r3, r0
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4423      	add	r3, r4
 80008b8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f000 f8b0 	bl	8000a20 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 80008c0:	4602      	mov	r2, r0
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d306      	bcc.n	80008d6 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f000 f898 	bl	80009fe <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 80008ce:	4602      	mov	r2, r0
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d904      	bls.n	80008e0 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x84>
 80008d6:	68f8      	ldr	r0, [r7, #12]
 80008d8:	f000 f891 	bl	80009fe <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 80008dc:	4603      	mov	r3, r0
 80008de:	e000      	b.n	80008e2 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x86>
 80008e0:	697b      	ldr	r3, [r7, #20]
      }
 80008e2:	4618      	mov	r0, r3
 80008e4:	371c      	adds	r7, #28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}

080008ea <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b084      	sub	sp, #16
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4611      	mov	r1, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff9e 	bl	800083c <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800090a:	b590      	push	{r4, r7, lr}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
 8000912:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f000 f835 	bl	8000984 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800091a:	4603      	mov	r3, r0
 800091c:	681c      	ldr	r4, [r3, #0]
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	f000 f830 	bl	8000984 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8000924:	4603      	mov	r3, r0
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	1ae3      	subs	r3, r4, r3
 800092a:	109b      	asrs	r3, r3, #2
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bd90      	pop	{r4, r7, pc}

08000934 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d006      	beq.n	8000952 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x1e>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6839      	ldr	r1, [r7, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f000 f88d 	bl	8000a68 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>
 800094e:	4603      	mov	r3, r0
 8000950:	e000      	b.n	8000954 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x20>
 8000952:	2300      	movs	r3, #0
      }
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b087      	sub	sp, #28
 8000960:	af02      	add	r7, sp, #8
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800096a:	f88d 4000 	strb.w	r4, [sp]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	68b9      	ldr	r1, [r7, #8]
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f000 f886 	bl	8000a86 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800097a:	4603      	mov	r3, r0
      }
 800097c:	4618      	mov	r0, r3
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bd90      	pop	{r4, r7, pc}

08000984 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80009be:	68f8      	ldr	r0, [r7, #12]
 80009c0:	f000 f873 	bl	8000aaa <_ZSt32__make_move_if_noexcept_iteratorIP12InputCaptureSt13move_iteratorIPS1_EET0_PT_>
 80009c4:	4604      	mov	r4, r0
 80009c6:	68b8      	ldr	r0, [r7, #8]
 80009c8:	f000 f86f 	bl	8000aaa <_ZSt32__make_move_if_noexcept_iteratorIP12InputCaptureSt13move_iteratorIPS1_EET0_PT_>
 80009cc:	4601      	mov	r1, r0
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	4620      	mov	r0, r4
 80009d4:	f000 f878 	bl	8000ac8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12InputCaptureES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80009d8:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80009da:	4618      	mov	r0, r3
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd90      	pop	{r4, r7, pc}

080009e2 <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80009ee:	68b9      	ldr	r1, [r7, #8]
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f000 f87a 	bl	8000aea <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>
    }
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f895 	bl	8000b38 <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f877 	bl	8000b04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	109b      	asrs	r3, r3, #2
 8000a34:	4618      	mov	r0, r3
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d201      	bcs.n	8000a5a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	e000      	b.n	8000a5c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8000a5a:	687b      	ldr	r3, [r7, #4]
    }
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8000a72:	2200      	movs	r2, #0
 8000a74:	6839      	ldr	r1, [r7, #0]
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f869 	bl	8000b4e <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b084      	sub	sp, #16
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f000 f875 	bl	8000b8a <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>
 8000aa0:	4603      	mov	r3, r0
      }
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_ZSt32__make_move_if_noexcept_iteratorIP12InputCaptureSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b084      	sub	sp, #16
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f883 	bl	8000bc4 <_ZNSt13move_iteratorIPP12InputCaptureEC1ES2_>
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12InputCaptureES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f000 f884 	bl	8000be8 <_ZSt18uninitialized_copyISt13move_iteratorIPP12InputCaptureES3_ET0_T_S6_S5_>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8000af4:	6839      	ldr	r1, [r7, #0]
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f888 	bl	8000c0c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>
    }
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8000b0c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8000b10:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f885 	bl	8000c22 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8000b1c:	f107 0208 	add.w	r2, r7, #8
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f887 	bl	8000c3a <_ZSt3minIjERKT_S2_S2_>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	681b      	ldr	r3, [r3, #0]
      }
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f000 f881 	bl	8000c62 <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	4293      	cmp	r3, r2
 8000b66:	bf8c      	ite	hi
 8000b68:	2301      	movhi	r3, #1
 8000b6a:	2300      	movls	r3, #0
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8000b72:	f008 fa1a 	bl	8008faa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f008 fa02 	bl	8008f84 <_Znwj>
 8000b80:	4603      	mov	r3, r0
      }
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8000b8a:	b5b0      	push	{r4, r5, r7, lr}
 8000b8c:	b084      	sub	sp, #16
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f000 f86e 	bl	8000c7a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 8000b9e:	4604      	mov	r4, r0
 8000ba0:	68b8      	ldr	r0, [r7, #8]
 8000ba2:	f000 f86a 	bl	8000c7a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 8000ba6:	4605      	mov	r5, r0
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f000 f866 	bl	8000c7a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	4629      	mov	r1, r5
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f000 f86b 	bl	8000c90 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8000bba:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bdb0      	pop	{r4, r5, r7, pc}

08000bc4 <_ZNSt13move_iteratorIPP12InputCaptureEC1ES2_>:
      move_iterator(iterator_type __i)
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 f87b 	bl	8000ccc <_ZSt4moveIRPP12InputCaptureEONSt16remove_referenceIT_E4typeEOS5_>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZSt18uninitialized_copyISt13move_iteratorIPP12InputCaptureES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	68b9      	ldr	r1, [r7, #8]
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f000 f870 	bl	8000ce2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12InputCaptureES5_EET0_T_S8_S7_>
 8000c02:	4603      	mov	r3, r0
    }
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 f869 	bl	8000d02 <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE8max_sizeEv>
 8000c30:	4603      	mov	r3, r0
      }
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d201      	bcs.n	8000c54 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	e000      	b.n	8000c56 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8000c54:	687b      	ldr	r3, [r7, #4]
    }
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8000c6a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
 8000c9c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	109b      	asrs	r3, r3, #2
 8000ca6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	dd06      	ble.n	8000cbc <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68f9      	ldr	r1, [r7, #12]
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f008 fabe 	bl	8009238 <memmove>
      return __result + __count;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	4413      	add	r3, r2
    }
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <_ZSt4moveIRPP12InputCaptureEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12InputCaptureES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f000 f811 	bl	8000d1a <_ZSt4copyISt13move_iteratorIPP12InputCaptureES3_ET0_T_S6_S5_>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa9 	bl	8000c62 <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <_ZSt4copyISt13move_iteratorIPP12InputCaptureES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8000d1a:	b590      	push	{r4, r7, lr}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	60f8      	str	r0, [r7, #12]
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8000d26:	68f8      	ldr	r0, [r7, #12]
 8000d28:	f000 f80f 	bl	8000d4a <_ZSt12__miter_baseIPP12InputCaptureEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f000 f80b 	bl	8000d4a <_ZSt12__miter_baseIPP12InputCaptureEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8000d34:	4603      	mov	r3, r0
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f000 f816 	bl	8000d6c <_ZSt13__copy_move_aILb1EPP12InputCaptureS2_ET1_T0_S4_S3_>
 8000d40:	4603      	mov	r3, r0
    }
 8000d42:	4618      	mov	r0, r3
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}

08000d4a <_ZSt12__miter_baseIPP12InputCaptureEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 f82c 	bl	8000db2 <_ZNKSt13move_iteratorIPP12InputCaptureE4baseEv>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 f834 	bl	8000dca <_ZSt12__miter_baseIPP12InputCaptureET_S3_>
 8000d62:	4603      	mov	r3, r0
 8000d64:	4618      	mov	r0, r3
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_ZSt13__copy_move_aILb1EPP12InputCaptureS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8000d6c:	b5b0      	push	{r4, r5, r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f7ff ff7e 	bl	8000c7a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 8000d7e:	4604      	mov	r4, r0
 8000d80:	68b8      	ldr	r0, [r7, #8]
 8000d82:	f7ff ff7a 	bl	8000c7a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 8000d86:	4605      	mov	r5, r0
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff75 	bl	8000c7a <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	4629      	mov	r1, r5
 8000d96:	4620      	mov	r0, r4
 8000d98:	f000 f822 	bl	8000de0 <_ZSt14__copy_move_a1ILb1EPP12InputCaptureS2_ET1_T0_S4_S3_>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f82c 	bl	8000e00 <_ZSt12__niter_wrapIPP12InputCaptureET_RKS3_S3_>
 8000da8:	4603      	mov	r3, r0
    }
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bdb0      	pop	{r4, r5, r7, pc}

08000db2 <_ZNKSt13move_iteratorIPP12InputCaptureE4baseEv>:
      base() const
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_ZSt12__miter_baseIPP12InputCaptureET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_ZSt14__copy_move_a1ILb1EPP12InputCaptureS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f000 f811 	bl	8000e18 <_ZSt14__copy_move_a2ILb1EPP12InputCaptureS2_ET1_T0_S4_S3_>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <_ZSt12__niter_wrapIPP12InputCaptureET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
    { return __res; }
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <_ZSt14__copy_move_a2ILb1EPP12InputCaptureS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	68b9      	ldr	r1, [r7, #8]
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f000 f805 	bl	8000e38 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12InputCaptureEEPT_PKS5_S8_S6_>
 8000e2e:	4603      	mov	r3, r0
    }
 8000e30:	4618      	mov	r0, r3
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12InputCaptureEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	109b      	asrs	r3, r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12InputCaptureEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	68f9      	ldr	r1, [r7, #12]
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f008 f9eb 	bl	8009238 <memmove>
	  return __result + _Num;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
	}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <_Z41__static_initialization_and_destruction_0ii>:
	HAL_TIM_IC_Start_IT(timer, channel);
}

void InputCapture::stop(){
	HAL_TIM_IC_Stop_IT(timer, channel);
}
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d107      	bne.n	8000e94 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d102      	bne.n	8000e94 <_Z41__static_initialization_and_destruction_0ii+0x20>
vector<InputCapture*> InputCapture::input_captures;
 8000e8e:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000e90:	f7ff fa6b 	bl	800036a <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d107      	bne.n	8000eaa <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d102      	bne.n	8000eaa <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000ea6:	f000 f807 	bl	8000eb8 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	24000094 	.word	0x24000094

08000eb8 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681c      	ldr	r4, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fd65 	bl	800099a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8000ed0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4629      	mov	r1, r5
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f7ff fd83 	bl	80009e2 <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>
      }
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff faa6 	bl	8000430 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bdb0      	pop	{r4, r5, r7, pc}

08000eee <_GLOBAL__sub_I__ZN12InputCapture14input_capturesE>:
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f7ff ffbc 	bl	8000e74 <_Z41__static_initialization_and_destruction_0ii>
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_GLOBAL__sub_D__ZN12InputCapture14input_capturesE>:
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff ffb4 	bl	8000e74 <_Z41__static_initialization_and_destruction_0ii>
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <_ZNSt12_Vector_baseI6SensorSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f001 fcb1 	bl	800287e <_ZNSaI6SensorED1Ev>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_ZNSt12_Vector_baseI6SensorSaIS0_EEC1Ev>:
      _Vector_base() = default;
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fc94 	bl	800285e <_ZNSt12_Vector_baseI6SensorSaIS0_EE12_Vector_implC1Ev>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <_ZNSt6vectorI6SensorSaIS0_EEC1Ev>:
      vector() = default;
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ffeb 	bl	8000f26 <_ZNSt12_Vector_baseI6SensorSaIS0_EEC1Ev>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_ZN6SensorD1Ev>:

#define PMW_5V_COUNT 11

using namespace std;

struct Sensor {
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f008 f893 	bl	8009090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_ZN6SensorC1ERKS_>:
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	4611      	mov	r1, r2
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 f8b3 	bl	80090f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	699a      	ldr	r2, [r3, #24]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	619a      	str	r2, [r3, #24]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	69da      	ldr	r2, [r3, #28]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	61da      	str	r2, [r3, #28]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	6a1a      	ldr	r2, [r3, #32]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	621a      	str	r2, [r3, #32]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <_ZN8TUDTests5setupEv>:
vector<Sensor> sensors_3v;

class TUDTests{
public:

	static void setup(){
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 8000fb2:	af00      	add	r7, sp, #0

		sensors_3v = {
 8000fb4:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f007 fff4 	bl	8008fa6 <_ZNSaIcEC1Ev>
 8000fbe:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8000fc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc6:	49e1      	ldr	r1, [pc, #900]	; (800134c <_ZN8TUDTests5setupEv+0x3a0>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f008 f8c5 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000fce:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000fd2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000fd6:	4ade      	ldr	r2, [pc, #888]	; (8001350 <_ZN8TUDTests5setupEv+0x3a4>)
 8000fd8:	619a      	str	r2, [r3, #24]
 8000fda:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000fde:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000fe2:	2204      	movs	r2, #4
 8000fe4:	61da      	str	r2, [r3, #28]
				{ string("SENSOR 3V 01"), &htim23,	TIM_CHANNEL_2, &htim23.Instance->CCR2	},
 8000fe6:	4bda      	ldr	r3, [pc, #872]	; (8001350 <_ZN8TUDTests5setupEv+0x3a4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f103 0238 	add.w	r2, r3, #56	; 0x38
		sensors_3v = {
 8000fee:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8000ff2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8000ff6:	621a      	str	r2, [r3, #32]
 8000ff8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 ffd2 	bl	8008fa6 <_ZNSaIcEC1Ev>
 8001002:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8001006:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800100a:	3324      	adds	r3, #36	; 0x24
 800100c:	49d1      	ldr	r1, [pc, #836]	; (8001354 <_ZN8TUDTests5setupEv+0x3a8>)
 800100e:	4618      	mov	r0, r3
 8001010:	f008 f8a2 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001014:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001018:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800101c:	4acc      	ldr	r2, [pc, #816]	; (8001350 <_ZN8TUDTests5setupEv+0x3a4>)
 800101e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001020:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001024:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001028:	2200      	movs	r2, #0
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
				{ string("SENSOR 3V 02"), &htim23,	TIM_CHANNEL_1, &htim23.Instance->CCR1	},
 800102c:	4bc8      	ldr	r3, [pc, #800]	; (8001350 <_ZN8TUDTests5setupEv+0x3a4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f103 0234 	add.w	r2, r3, #52	; 0x34
		sensors_3v = {
 8001034:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001038:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
 800103e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001042:	4618      	mov	r0, r3
 8001044:	f007 ffaf 	bl	8008fa6 <_ZNSaIcEC1Ev>
 8001048:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 800104c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001050:	3348      	adds	r3, #72	; 0x48
 8001052:	49c1      	ldr	r1, [pc, #772]	; (8001358 <_ZN8TUDTests5setupEv+0x3ac>)
 8001054:	4618      	mov	r0, r3
 8001056:	f008 f87f 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800105a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800105e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001062:	4abe      	ldr	r2, [pc, #760]	; (800135c <_ZN8TUDTests5setupEv+0x3b0>)
 8001064:	661a      	str	r2, [r3, #96]	; 0x60
 8001066:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800106a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800106e:	2200      	movs	r2, #0
 8001070:	665a      	str	r2, [r3, #100]	; 0x64
				{ string("SENSOR 3V 03"), &htim2,	TIM_CHANNEL_1, &htim2.Instance->CCR1	},
 8001072:	4bba      	ldr	r3, [pc, #744]	; (800135c <_ZN8TUDTests5setupEv+0x3b0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f103 0234 	add.w	r2, r3, #52	; 0x34
		sensors_3v = {
 800107a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800107e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001082:	669a      	str	r2, [r3, #104]	; 0x68
 8001084:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001088:	4618      	mov	r0, r3
 800108a:	f007 ff8c 	bl	8008fa6 <_ZNSaIcEC1Ev>
 800108e:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8001092:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001096:	336c      	adds	r3, #108	; 0x6c
 8001098:	49b1      	ldr	r1, [pc, #708]	; (8001360 <_ZN8TUDTests5setupEv+0x3b4>)
 800109a:	4618      	mov	r0, r3
 800109c:	f008 f85c 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80010a0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80010a4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80010a8:	4aa9      	ldr	r2, [pc, #676]	; (8001350 <_ZN8TUDTests5setupEv+0x3a4>)
 80010aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80010ae:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80010b2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80010b6:	2208      	movs	r2, #8
 80010b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				{ string("SENSOR 3V 04"), &htim23,	TIM_CHANNEL_3, &htim23.Instance->CCR3 	},
 80010bc:	4ba4      	ldr	r3, [pc, #656]	; (8001350 <_ZN8TUDTests5setupEv+0x3a4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
		sensors_3v = {
 80010c4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80010c8:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80010cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80010d0:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80010d4:	4618      	mov	r0, r3
 80010d6:	f007 ff66 	bl	8008fa6 <_ZNSaIcEC1Ev>
 80010da:	f507 7221 	add.w	r2, r7, #644	; 0x284
 80010de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010e2:	3390      	adds	r3, #144	; 0x90
 80010e4:	499f      	ldr	r1, [pc, #636]	; (8001364 <_ZN8TUDTests5setupEv+0x3b8>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f008 f836 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80010ec:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80010f0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80010f4:	4a9c      	ldr	r2, [pc, #624]	; (8001368 <_ZN8TUDTests5setupEv+0x3bc>)
 80010f6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80010fa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80010fe:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001102:	220c      	movs	r2, #12
 8001104:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				{ string("SENSOR 3V 05"), &htim8,	TIM_CHANNEL_4, &htim8.Instance->CCR4	},
 8001108:	4b97      	ldr	r3, [pc, #604]	; (8001368 <_ZN8TUDTests5setupEv+0x3bc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f103 0240 	add.w	r2, r3, #64	; 0x40
		sensors_3v = {
 8001110:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001114:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001118:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800111c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001120:	4618      	mov	r0, r3
 8001122:	f007 ff40 	bl	8008fa6 <_ZNSaIcEC1Ev>
 8001126:	f507 7222 	add.w	r2, r7, #648	; 0x288
 800112a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800112e:	33b4      	adds	r3, #180	; 0xb4
 8001130:	498e      	ldr	r1, [pc, #568]	; (800136c <_ZN8TUDTests5setupEv+0x3c0>)
 8001132:	4618      	mov	r0, r3
 8001134:	f008 f810 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001138:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800113c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001140:	4a89      	ldr	r2, [pc, #548]	; (8001368 <_ZN8TUDTests5setupEv+0x3bc>)
 8001142:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8001146:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800114a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800114e:	2204      	movs	r2, #4
 8001150:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				{ string("SENSOR 3V 06"), &htim8, 	TIM_CHANNEL_2, &htim8.Instance->CCR2	},
 8001154:	4b84      	ldr	r3, [pc, #528]	; (8001368 <_ZN8TUDTests5setupEv+0x3bc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f103 0238 	add.w	r2, r3, #56	; 0x38
		sensors_3v = {
 800115c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001160:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001164:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001168:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800116c:	4618      	mov	r0, r3
 800116e:	f007 ff1a 	bl	8008fa6 <_ZNSaIcEC1Ev>
 8001172:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8001176:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800117a:	33d8      	adds	r3, #216	; 0xd8
 800117c:	497c      	ldr	r1, [pc, #496]	; (8001370 <_ZN8TUDTests5setupEv+0x3c4>)
 800117e:	4618      	mov	r0, r3
 8001180:	f007 ffea 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001184:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001188:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800118c:	4a73      	ldr	r2, [pc, #460]	; (800135c <_ZN8TUDTests5setupEv+0x3b0>)
 800118e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001192:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001196:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800119a:	2208      	movs	r2, #8
 800119c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
				{ string("SENSOR 3V 07"), &htim2,	TIM_CHANNEL_3, &htim2.Instance->CCR3	},
 80011a0:	4b6e      	ldr	r3, [pc, #440]	; (800135c <_ZN8TUDTests5setupEv+0x3b0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
		sensors_3v = {
 80011a8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80011ac:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80011b0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 80011b4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80011b8:	4618      	mov	r0, r3
 80011ba:	f007 fef4 	bl	8008fa6 <_ZNSaIcEC1Ev>
 80011be:	f507 7224 	add.w	r2, r7, #656	; 0x290
 80011c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011c6:	33fc      	adds	r3, #252	; 0xfc
 80011c8:	496a      	ldr	r1, [pc, #424]	; (8001374 <_ZN8TUDTests5setupEv+0x3c8>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f007 ffc4 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80011d0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80011d4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80011d8:	4a60      	ldr	r2, [pc, #384]	; (800135c <_ZN8TUDTests5setupEv+0x3b0>)
 80011da:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 80011de:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80011e2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80011e6:	220c      	movs	r2, #12
 80011e8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				{ string("SENSOR 3V 08"), &htim2,	TIM_CHANNEL_4, &htim2.Instance->CCR4	},
 80011ec:	4b5b      	ldr	r3, [pc, #364]	; (800135c <_ZN8TUDTests5setupEv+0x3b0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f103 0240 	add.w	r2, r3, #64	; 0x40
		sensors_3v = {
 80011f4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80011f8:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80011fc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8001200:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001204:	4618      	mov	r0, r3
 8001206:	f007 fece 	bl	8008fa6 <_ZNSaIcEC1Ev>
 800120a:	f507 7225 	add.w	r2, r7, #660	; 0x294
 800120e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001212:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8001216:	4958      	ldr	r1, [pc, #352]	; (8001378 <_ZN8TUDTests5setupEv+0x3cc>)
 8001218:	4618      	mov	r0, r3
 800121a:	f007 ff9d 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800121e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001222:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001226:	4a55      	ldr	r2, [pc, #340]	; (800137c <_ZN8TUDTests5setupEv+0x3d0>)
 8001228:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800122c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001230:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001234:	2208      	movs	r2, #8
 8001236:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
				{ string("SENSOR 3V 09"), &htim24,	TIM_CHANNEL_3, &htim24.Instance->CCR3	},
 800123a:	4b50      	ldr	r3, [pc, #320]	; (800137c <_ZN8TUDTests5setupEv+0x3d0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
		sensors_3v = {
 8001242:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001246:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800124a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800124e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001252:	4618      	mov	r0, r3
 8001254:	f007 fea7 	bl	8008fa6 <_ZNSaIcEC1Ev>
 8001258:	f507 7226 	add.w	r2, r7, #664	; 0x298
 800125c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001260:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8001264:	4946      	ldr	r1, [pc, #280]	; (8001380 <_ZN8TUDTests5setupEv+0x3d4>)
 8001266:	4618      	mov	r0, r3
 8001268:	f007 ff76 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800126c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001270:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001274:	4a41      	ldr	r2, [pc, #260]	; (800137c <_ZN8TUDTests5setupEv+0x3d0>)
 8001276:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 800127a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800127e:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001282:	2204      	movs	r2, #4
 8001284:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
				{ string("SENSOR 3V 10"), &htim24,	TIM_CHANNEL_2, &htim24.Instance->CCR2	},
 8001288:	4b3c      	ldr	r3, [pc, #240]	; (800137c <_ZN8TUDTests5setupEv+0x3d0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f103 0238 	add.w	r2, r3, #56	; 0x38
		sensors_3v = {
 8001290:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001294:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001298:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 800129c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80012a0:	4618      	mov	r0, r3
 80012a2:	f007 fe80 	bl	8008fa6 <_ZNSaIcEC1Ev>
 80012a6:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 80012aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012b2:	4934      	ldr	r1, [pc, #208]	; (8001384 <_ZN8TUDTests5setupEv+0x3d8>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f007 ff4f 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80012ba:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80012be:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80012c2:	4a29      	ldr	r2, [pc, #164]	; (8001368 <_ZN8TUDTests5setupEv+0x3bc>)
 80012c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 80012c8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80012cc:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80012d0:	2208      	movs	r2, #8
 80012d2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
				{ string("SENSOR 3V 11"), &htim8,	TIM_CHANNEL_3, &htim8.Instance->CCR3	},
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <_ZN8TUDTests5setupEv+0x3bc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f103 023c 	add.w	r2, r3, #60	; 0x3c
		sensors_3v = {
 80012de:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80012e2:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80012e6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
 80012ea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f007 fe59 	bl	8008fa6 <_ZNSaIcEC1Ev>
 80012f4:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 80012f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001300:	4921      	ldr	r1, [pc, #132]	; (8001388 <_ZN8TUDTests5setupEv+0x3dc>)
 8001302:	4618      	mov	r0, r3
 8001304:	f007 ff28 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001308:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800130c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001310:	4a1e      	ldr	r2, [pc, #120]	; (800138c <_ZN8TUDTests5setupEv+0x3e0>)
 8001312:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8001316:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800131a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800131e:	2200      	movs	r2, #0
 8001320:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
				{ string("SENSOR 3V 12"), &htim3,	TIM_CHANNEL_1, &htim3.Instance->CCR1	},
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <_ZN8TUDTests5setupEv+0x3e0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f103 0234 	add.w	r2, r3, #52	; 0x34
		sensors_3v = {
 800132c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001330:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001334:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8001338:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800133c:	4618      	mov	r0, r3
 800133e:	f007 fe32 	bl	8008fa6 <_ZNSaIcEC1Ev>
 8001342:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8001346:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800134a:	e021      	b.n	8001390 <_ZN8TUDTests5setupEv+0x3e4>
 800134c:	08009534 	.word	0x08009534
 8001350:	240004fc 	.word	0x240004fc
 8001354:	08009544 	.word	0x08009544
 8001358:	08009554 	.word	0x08009554
 800135c:	24000380 	.word	0x24000380
 8001360:	08009564 	.word	0x08009564
 8001364:	08009574 	.word	0x08009574
 8001368:	24000464 	.word	0x24000464
 800136c:	08009584 	.word	0x08009584
 8001370:	08009594 	.word	0x08009594
 8001374:	080095a4 	.word	0x080095a4
 8001378:	080095b4 	.word	0x080095b4
 800137c:	24000548 	.word	0x24000548
 8001380:	080095c4 	.word	0x080095c4
 8001384:	080095d4 	.word	0x080095d4
 8001388:	080095e4 	.word	0x080095e4
 800138c:	240003cc 	.word	0x240003cc
 8001390:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8001394:	49aa      	ldr	r1, [pc, #680]	; (8001640 <_ZN8TUDTests5setupEv+0x694>)
 8001396:	4618      	mov	r0, r3
 8001398:	f007 fede 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800139c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80013a0:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80013a4:	4aa7      	ldr	r2, [pc, #668]	; (8001644 <_ZN8TUDTests5setupEv+0x698>)
 80013a6:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 80013aa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80013ae:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80013b2:	2200      	movs	r2, #0
 80013b4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
				{ string("SENSOR 3V 13"), &htim12,	TIM_CHANNEL_1, &htim12.Instance->CCR1	},
 80013b8:	4ba2      	ldr	r3, [pc, #648]	; (8001644 <_ZN8TUDTests5setupEv+0x698>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
		sensors_3v = {
 80013c0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80013c4:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80013c8:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 80013cc:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80013d0:	4618      	mov	r0, r3
 80013d2:	f007 fde8 	bl	8008fa6 <_ZNSaIcEC1Ev>
 80013d6:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 80013da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013de:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 80013e2:	4999      	ldr	r1, [pc, #612]	; (8001648 <_ZN8TUDTests5setupEv+0x69c>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f007 feb7 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80013ea:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80013ee:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80013f2:	4a96      	ldr	r2, [pc, #600]	; (800164c <_ZN8TUDTests5setupEv+0x6a0>)
 80013f4:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 80013f8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80013fc:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001400:	220c      	movs	r2, #12
 8001402:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
				{ string("SENSOR 3V 14"), &htim24,	TIM_CHANNEL_4, &htim24.Instance->CCR4	},
 8001406:	4b91      	ldr	r3, [pc, #580]	; (800164c <_ZN8TUDTests5setupEv+0x6a0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f103 0240 	add.w	r2, r3, #64	; 0x40
		sensors_3v = {
 800140e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001412:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001416:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
 800141a:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800141e:	4618      	mov	r0, r3
 8001420:	f007 fdc1 	bl	8008fa6 <_ZNSaIcEC1Ev>
 8001424:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 8001428:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800142c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001430:	4987      	ldr	r1, [pc, #540]	; (8001650 <_ZN8TUDTests5setupEv+0x6a4>)
 8001432:	4618      	mov	r0, r3
 8001434:	f007 fe90 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001438:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800143c:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001440:	4a84      	ldr	r2, [pc, #528]	; (8001654 <_ZN8TUDTests5setupEv+0x6a8>)
 8001442:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8001446:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800144a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800144e:	220c      	movs	r2, #12
 8001450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				{ string("SENSOR 3V 15"), &htim23,	TIM_CHANNEL_4, &htim23.Instance->CCR4	},
 8001454:	4b7f      	ldr	r3, [pc, #508]	; (8001654 <_ZN8TUDTests5setupEv+0x6a8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f103 0240 	add.w	r2, r3, #64	; 0x40
		sensors_3v = {
 800145c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001460:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 8001464:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 8001468:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800146c:	4618      	mov	r0, r3
 800146e:	f007 fd9a 	bl	8008fa6 <_ZNSaIcEC1Ev>
 8001472:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8001476:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800147a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800147e:	4976      	ldr	r1, [pc, #472]	; (8001658 <_ZN8TUDTests5setupEv+0x6ac>)
 8001480:	4618      	mov	r0, r3
 8001482:	f007 fe69 	bl	8009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001486:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800148a:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800148e:	4a6f      	ldr	r2, [pc, #444]	; (800164c <_ZN8TUDTests5setupEv+0x6a0>)
 8001490:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 8001494:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001498:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 800149c:	2200      	movs	r2, #0
 800149e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
				{ string("SENSOR 3V 16"), &htim24,	TIM_CHANNEL_1, &htim24.Instance->CCR1	},
 80014a2:	4b6a      	ldr	r3, [pc, #424]	; (800164c <_ZN8TUDTests5setupEv+0x6a0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
		sensors_3v = {
 80014aa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80014ae:	f5a3 7321 	sub.w	r3, r3, #644	; 0x284
 80014b2:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
 80014b6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80014ba:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80014be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80014c8:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80014cc:	2210      	movs	r2, #16
 80014ce:	605a      	str	r2, [r3, #4]
		};
 80014d0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80014d4:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80014d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014dc:	485f      	ldr	r0, [pc, #380]	; (800165c <_ZN8TUDTests5setupEv+0x6b0>)
 80014de:	f001 f9f9 	bl	80028d4 <_ZNSt6vectorI6SensorSaIS0_EEaSESt16initializer_listIS0_E>
 80014e2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80014e6:	f504 7410 	add.w	r4, r4, #576	; 0x240
		sensors_3v = {
 80014ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ee:	429c      	cmp	r4, r3
 80014f0:	d004      	beq.n	80014fc <_ZN8TUDTests5setupEv+0x550>
		};
 80014f2:	3c24      	subs	r4, #36	; 0x24
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff fd30 	bl	8000f5a <_ZN6SensorD1Ev>
		sensors_3v = {
 80014fa:	e7f6      	b.n	80014ea <_ZN8TUDTests5setupEv+0x53e>
 80014fc:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001500:	4618      	mov	r0, r3
 8001502:	f007 fd51 	bl	8008fa8 <_ZNSaIcED1Ev>
 8001506:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 800150a:	4618      	mov	r0, r3
 800150c:	f007 fd4c 	bl	8008fa8 <_ZNSaIcED1Ev>
 8001510:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001514:	4618      	mov	r0, r3
 8001516:	f007 fd47 	bl	8008fa8 <_ZNSaIcED1Ev>
 800151a:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 800151e:	4618      	mov	r0, r3
 8001520:	f007 fd42 	bl	8008fa8 <_ZNSaIcED1Ev>
 8001524:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001528:	4618      	mov	r0, r3
 800152a:	f007 fd3d 	bl	8008fa8 <_ZNSaIcED1Ev>
 800152e:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8001532:	4618      	mov	r0, r3
 8001534:	f007 fd38 	bl	8008fa8 <_ZNSaIcED1Ev>
 8001538:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800153c:	4618      	mov	r0, r3
 800153e:	f007 fd33 	bl	8008fa8 <_ZNSaIcED1Ev>
 8001542:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001546:	4618      	mov	r0, r3
 8001548:	f007 fd2e 	bl	8008fa8 <_ZNSaIcED1Ev>
 800154c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001550:	4618      	mov	r0, r3
 8001552:	f007 fd29 	bl	8008fa8 <_ZNSaIcED1Ev>
 8001556:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 800155a:	4618      	mov	r0, r3
 800155c:	f007 fd24 	bl	8008fa8 <_ZNSaIcED1Ev>
 8001560:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001564:	4618      	mov	r0, r3
 8001566:	f007 fd1f 	bl	8008fa8 <_ZNSaIcED1Ev>
 800156a:	f507 7321 	add.w	r3, r7, #644	; 0x284
 800156e:	4618      	mov	r0, r3
 8001570:	f007 fd1a 	bl	8008fa8 <_ZNSaIcED1Ev>
 8001574:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001578:	4618      	mov	r0, r3
 800157a:	f007 fd15 	bl	8008fa8 <_ZNSaIcED1Ev>
 800157e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8001582:	4618      	mov	r0, r3
 8001584:	f007 fd10 	bl	8008fa8 <_ZNSaIcED1Ev>
 8001588:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800158c:	4618      	mov	r0, r3
 800158e:	f007 fd0b 	bl	8008fa8 <_ZNSaIcED1Ev>
 8001592:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8001596:	4618      	mov	r0, r3
 8001598:	f007 fd06 	bl	8008fa8 <_ZNSaIcED1Ev>

		for(auto sensor : sensors_3v)
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <_ZN8TUDTests5setupEv+0x6b0>)
 800159e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80015a2:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 80015a6:	f001 f9b0 	bl	800290a <_ZNSt6vectorI6SensorSaIS0_EE5beginEv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80015b0:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	f8d7 02b4 	ldr.w	r0, [r7, #692]	; 0x2b4
 80015ba:	f001 f9b6 	bl	800292a <_ZNSt6vectorI6SensorSaIS0_EE3endEv>
 80015be:	4602      	mov	r2, r0
 80015c0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80015c4:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80015ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 f9b9 	bl	800294c <_ZN9__gnu_cxxneIP6SensorSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d022      	beq.n	8001626 <_ZN8TUDTests5setupEv+0x67a>
 80015e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e4:	4618      	mov	r0, r3
 80015e6:	f001 f9da 	bl	800299e <_ZNK9__gnu_cxx17__normal_iteratorIP6SensorSt6vectorIS1_SaIS1_EEEdeEv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	463b      	mov	r3, r7
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fcbf 	bl	8000f74 <_ZN6SensorC1ERKS_>
			HAL_TIM_PWM_Start(sensor.tim, sensor.channel);
 80015f6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80015fa:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001604:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4619      	mov	r1, r3
 800160c:	4610      	mov	r0, r2
 800160e:	f005 fdab 	bl	8007168 <HAL_TIM_PWM_Start>
		for(auto sensor : sensors_3v)
 8001612:	463b      	mov	r3, r7
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fca0 	bl	8000f5a <_ZN6SensorD1Ev>
 800161a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161e:	4618      	mov	r0, r3
 8001620:	f001 f9ac 	bl	800297c <_ZN9__gnu_cxx17__normal_iteratorIP6SensorSt6vectorIS1_SaIS1_EEEppEv>
 8001624:	e7d1      	b.n	80015ca <_ZN8TUDTests5setupEv+0x61e>

		//input_capture_PB1.start();
		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001626:	2100      	movs	r1, #0
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <_ZN8TUDTests5setupEv+0x6b4>)
 800162a:	f005 ff1b 	bl	8007464 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 800162e:	2104      	movs	r1, #4
 8001630:	480b      	ldr	r0, [pc, #44]	; (8001660 <_ZN8TUDTests5setupEv+0x6b4>)
 8001632:	f005 ff17 	bl	8007464 <HAL_TIM_IC_Start_IT>
	}
 8001636:	bf00      	nop
 8001638:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	080095f4 	.word	0x080095f4
 8001644:	240004b0 	.word	0x240004b0
 8001648:	08009604 	.word	0x08009604
 800164c:	24000548 	.word	0x24000548
 8001650:	08009614 	.word	0x08009614
 8001654:	240004fc 	.word	0x240004fc
 8001658:	08009624 	.word	0x08009624
 800165c:	24000288 	.word	0x24000288
 8001660:	24000334 	.word	0x24000334

08001664 <_ZN8TUDTests4loopEv>:

	static void loop(){
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

	}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <_ZN13MovingAverageILm3EdEC1Ev>:
class MovingAverage{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4618      	mov	r0, r3
 800167e:	f001 f99a 	bl	80029b6 <_ZN10RingBufferILm3EdEC1Ev>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	0000      	movs	r0, r0
	...

08001690 <HAL_TIM_IC_CaptureCallback>:
MovingAverage<3, double> DutyAverage;
MovingAverage<3, double> FrequencyAverage;
uint32_t MonitoredFrequency;
uint32_t MonitredDuty;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* timer){
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	if (timer->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // If the interrupt is triggered by channel 1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7f1b      	ldrb	r3, [r3, #28]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d158      	bne.n	8001752 <HAL_TIM_IC_CaptureCallback+0xc2>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(timer, TIM_CHANNEL_2);
 80016a0:	2104      	movs	r1, #4
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f006 fc46 	bl	8007f34 <HAL_TIM_ReadCapturedValue>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a33      	ldr	r2, [pc, #204]	; (8001778 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80016ac:	6013      	str	r3, [r2, #0]
		if (ICValue != 0)
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d04d      	beq.n	8001752 <HAL_TIM_IC_CaptureCallback+0xc2>
		{
			DutyAverage.add_value((((double) HAL_TIM_ReadCapturedValue(timer, TIM_CHANNEL_1)) *100)/ICValue);
 80016b6:	2100      	movs	r1, #0
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f006 fc3b 	bl	8007f34 <HAL_TIM_ReadCapturedValue>
 80016be:	ee07 0a90 	vmov	s15, r0
 80016c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016c6:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8001760 <HAL_TIM_IC_CaptureCallback+0xd0>
 80016ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016ce:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016da:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80016de:	eeb0 0b45 	vmov.f64	d0, d5
 80016e2:	4826      	ldr	r0, [pc, #152]	; (800177c <HAL_TIM_IC_CaptureCallback+0xec>)
 80016e4:	f001 f98f 	bl	8002a06 <_ZN13MovingAverageILm3EdE9add_valueEd>
			Duty = DutyAverage.current_value;
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_TIM_IC_CaptureCallback+0xec>)
 80016ea:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80016ee:	4924      	ldr	r1, [pc, #144]	; (8001780 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80016f0:	e9c1 2300 	strd	r2, r3, [r1]

			FrequencyAverage.add_value( ((double) 277777777) / ICValue);
 80016f4:	4b20      	ldr	r3, [pc, #128]	; (8001778 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001700:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8001768 <HAL_TIM_IC_CaptureCallback+0xd8>
 8001704:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001708:	eeb0 0b46 	vmov.f64	d0, d6
 800170c:	481d      	ldr	r0, [pc, #116]	; (8001784 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800170e:	f001 f97a 	bl	8002a06 <_ZN13MovingAverageILm3EdE9add_valueEd>
			Frequency = FrequencyAverage.current_value;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001714:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001718:	491b      	ldr	r1, [pc, #108]	; (8001788 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800171a:	e9c1 2300 	strd	r2, r3, [r1]

			MonitoredFrequency  = (Frequency * 10000);
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001720:	ed93 7b00 	vldr	d7, [r3]
 8001724:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8001770 <HAL_TIM_IC_CaptureCallback+0xe0>
 8001728:	ee27 7b06 	vmul.f64	d7, d7, d6
 800172c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001730:	ee17 2a90 	vmov	r2, s15
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001736:	601a      	str	r2, [r3, #0]
			MonitredDuty		= (Duty * 10000);
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800173a:	ed93 7b00 	vldr	d7, [r3]
 800173e:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8001770 <HAL_TIM_IC_CaptureCallback+0xe0>
 8001742:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001746:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800174a:	ee17 2a90 	vmov	r2, s15
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <HAL_TIM_IC_CaptureCallback+0x100>)
 8001750:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	f3af 8000 	nop.w
 8001760:	00000000 	.word	0x00000000
 8001764:	40590000 	.word	0x40590000
 8001768:	71000000 	.word	0x71000000
 800176c:	41b08e8d 	.word	0x41b08e8d
 8001770:	00000000 	.word	0x00000000
 8001774:	40c38800 	.word	0x40c38800
 8001778:	240005a8 	.word	0x240005a8
 800177c:	240005b0 	.word	0x240005b0
 8001780:	240005a0 	.word	0x240005a0
 8001784:	240005e0 	.word	0x240005e0
 8001788:	24000598 	.word	0x24000598
 800178c:	24000610 	.word	0x24000610
 8001790:	24000614 	.word	0x24000614

08001794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001798:	f002 fb1e 	bl	8003dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800179c:	f000 f81a 	bl	80017d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a0:	f000 ff42 	bl	8002628 <_ZL12MX_GPIO_Initv>
  MX_TIM4_Init();
 80017a4:	f000 fba4 	bl	8001ef0 <_ZL12MX_TIM4_Initv>
  MX_TIM8_Init();
 80017a8:	f000 fc5c 	bl	8002064 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 80017ac:	f000 fd46 	bl	800223c <_ZL13MX_TIM12_Initv>
  MX_TIM23_Init();
 80017b0:	f000 fdba 	bl	8002328 <_ZL13MX_TIM23_Initv>
  MX_FDCAN1_Init();
 80017b4:	f000 f88c 	bl	80018d0 <_ZL14MX_FDCAN1_Initv>
  MX_TIM1_Init();
 80017b8:	f000 f8f4 	bl	80019a4 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80017bc:	f000 f9dc 	bl	8001b78 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80017c0:	f000 fab8 	bl	8001d34 <_ZL12MX_TIM3_Initv>
  MX_TIM24_Init();
 80017c4:	f000 fe70 	bl	80024a8 <_ZL13MX_TIM24_Initv>
  /* USER CODE BEGIN 2 */

  TUDTests::setup();
 80017c8:	f7ff fbf0 	bl	8000fac <_ZN8TUDTests5setupEv>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
		TUDTests::loop();
 80017cc:	f7ff ff4a 	bl	8001664 <_ZN8TUDTests4loopEv>
 80017d0:	e7fc      	b.n	80017cc <main+0x38>
	...

080017d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b09c      	sub	sp, #112	; 0x70
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017de:	224c      	movs	r2, #76	; 0x4c
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f007 fd42 	bl	800926c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2220      	movs	r2, #32
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f007 fd3c 	bl	800926c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017f4:	2002      	movs	r0, #2
 80017f6:	f003 f9b7 	bl	8004b68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4b33      	ldr	r3, [pc, #204]	; (80018cc <_Z18SystemClock_Configv+0xf8>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	4a32      	ldr	r2, [pc, #200]	; (80018cc <_Z18SystemClock_Configv+0xf8>)
 8001804:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001808:	6193      	str	r3, [r2, #24]
 800180a:	4b30      	ldr	r3, [pc, #192]	; (80018cc <_Z18SystemClock_Configv+0xf8>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <_Z18SystemClock_Configv+0xf8>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800181e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d000      	beq.n	8001830 <_Z18SystemClock_Configv+0x5c>
 800182e:	e7f2      	b.n	8001816 <_Z18SystemClock_Configv+0x42>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001830:	2301      	movs	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001834:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001838:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183a:	2302      	movs	r3, #2
 800183c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183e:	2302      	movs	r3, #2
 8001840:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001842:	2304      	movs	r3, #4
 8001844:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8001846:	f240 1313 	movw	r3, #275	; 0x113
 800184a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800184c:	2301      	movs	r3, #1
 800184e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001850:	2304      	movs	r3, #4
 8001852:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001854:	2302      	movs	r3, #2
 8001856:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001858:	2304      	movs	r3, #4
 800185a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800185c:	2300      	movs	r3, #0
 800185e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001868:	4618      	mov	r0, r3
 800186a:	f003 f9b7 	bl	8004bdc <HAL_RCC_OscConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf14      	ite	ne
 8001874:	2301      	movne	r3, #1
 8001876:	2300      	moveq	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800187e:	f000 ffe9 	bl	8002854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	233f      	movs	r3, #63	; 0x3f
 8001884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001886:	2303      	movs	r3, #3
 8001888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800188e:	2308      	movs	r3, #8
 8001890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001892:	2340      	movs	r3, #64	; 0x40
 8001894:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001896:	2340      	movs	r3, #64	; 0x40
 8001898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800189a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800189e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018a0:	2340      	movs	r3, #64	; 0x40
 80018a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2103      	movs	r1, #3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fd71 	bl	8005390 <HAL_RCC_ClockConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 80018be:	f000 ffc9 	bl	8002854 <Error_Handler>
  }
}
 80018c2:	bf00      	nop
 80018c4:	3770      	adds	r7, #112	; 0x70
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	58024800 	.word	0x58024800

080018d0 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80018d4:	4b31      	ldr	r3, [pc, #196]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018d6:	4a32      	ldr	r2, [pc, #200]	; (80019a0 <_ZL14MX_FDCAN1_Initv+0xd0>)
 80018d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 80018fa:	2210      	movs	r2, #16
 80018fc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80018fe:	4b27      	ldr	r3, [pc, #156]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001900:	2201      	movs	r2, #1
 8001902:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001906:	2202      	movs	r2, #2
 8001908:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800190c:	2202      	movs	r2, #2
 800190e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001910:	4b22      	ldr	r3, [pc, #136]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001912:	2201      	movs	r2, #1
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001918:	2201      	movs	r2, #1
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800191e:	2201      	movs	r2, #1
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001924:	2201      	movs	r2, #1
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800192a:	2200      	movs	r2, #0
 800192c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800192e:	4b1b      	ldr	r3, [pc, #108]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001930:	2200      	movs	r2, #0
 8001932:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001936:	2200      	movs	r2, #0
 8001938:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800193c:	2200      	movs	r2, #0
 800193e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001942:	2204      	movs	r2, #4
 8001944:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001948:	2200      	movs	r2, #0
 800194a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800194e:	2204      	movs	r2, #4
 8001950:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001954:	2200      	movs	r2, #0
 8001956:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800195a:	2204      	movs	r2, #4
 800195c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001960:	2200      	movs	r2, #0
 8001962:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001966:	2200      	movs	r2, #0
 8001968:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800196c:	2200      	movs	r2, #0
 800196e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001970:	4b0a      	ldr	r3, [pc, #40]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001972:	2200      	movs	r2, #0
 8001974:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 8001978:	2204      	movs	r2, #4
 800197a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800197c:	4807      	ldr	r0, [pc, #28]	; (800199c <_ZL14MX_FDCAN1_Initv+0xcc>)
 800197e:	f002 fbcd 	bl	800411c <HAL_FDCAN_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	bf14      	ite	ne
 8001988:	2301      	movne	r3, #1
 800198a:	2300      	moveq	r3, #0
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <_ZL14MX_FDCAN1_Initv+0xc6>
  {
    Error_Handler();
 8001992:	f000 ff5f 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	24000294 	.word	0x24000294
 80019a0:	4000a000 	.word	0x4000a000

080019a4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	; 0x40
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019d2:	463b      	mov	r3, r7
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019e0:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 80019e2:	4a64      	ldr	r2, [pc, #400]	; (8001b74 <_ZL12MX_TIM1_Initv+0x1d0>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e6:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f2:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 80019f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a00:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a06:	4b5a      	ldr	r3, [pc, #360]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a0c:	4858      	ldr	r0, [pc, #352]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001a0e:	f005 faf3 	bl	8006ff8 <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <_ZL12MX_TIM1_Initv+0x82>
  {
    Error_Handler();
 8001a22:	f000 ff17 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a30:	4619      	mov	r1, r3
 8001a32:	484f      	ldr	r0, [pc, #316]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001a34:	f006 f944 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	bf14      	ite	ne
 8001a3e:	2301      	movne	r3, #1
 8001a40:	2300      	moveq	r3, #0
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <_ZL12MX_TIM1_Initv+0xa8>
  {
    Error_Handler();
 8001a48:	f000 ff04 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001a4c:	4848      	ldr	r0, [pc, #288]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001a4e:	f005 fca7 	bl	80073a0 <HAL_TIM_IC_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf14      	ite	ne
 8001a58:	2301      	movne	r3, #1
 8001a5a:	2300      	moveq	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 8001a62:	f000 fef7 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a76:	4619      	mov	r1, r3
 8001a78:	483d      	ldr	r0, [pc, #244]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001a7a:	f007 f927 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <_ZL12MX_TIM1_Initv+0xee>
  {
    Error_Handler();
 8001a8e:	f000 fee1 	bl	8002854 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a96:	2301      	movs	r3, #1
 8001a98:	61bb      	str	r3, [r7, #24]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICFilter = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001aa2:	f107 0314 	add.w	r3, r7, #20
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4831      	ldr	r0, [pc, #196]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001aac:	f005 ff57 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf14      	ite	ne
 8001ab6:	2301      	movne	r3, #1
 8001ab8:	2300      	moveq	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <_ZL12MX_TIM1_Initv+0x120>
  {
    Error_Handler();
 8001ac0:	f000 fec8 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	220c      	movs	r2, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	4828      	ldr	r0, [pc, #160]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001ace:	f005 ff46 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <_ZL12MX_TIM1_Initv+0x142>
  {
    Error_Handler();
 8001ae2:	f000 feb7 	bl	8002854 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	603b      	str	r3, [r7, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001aea:	2360      	movs	r3, #96	; 0x60
 8001aec:	607b      	str	r3, [r7, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001aee:	2302      	movs	r3, #2
 8001af0:	60bb      	str	r3, [r7, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.TriggerFilter = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001afa:	463b      	mov	r3, r7
 8001afc:	4619      	mov	r1, r3
 8001afe:	481c      	ldr	r0, [pc, #112]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001b00:	f006 f9d6 	bl	8007eb0 <HAL_TIM_SlaveConfigSynchro>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <_ZL12MX_TIM1_Initv+0x174>
  {
    Error_Handler();
 8001b14:	f000 fe9e 	bl	8002854 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	4619      	mov	r1, r3
 8001b24:	4812      	ldr	r0, [pc, #72]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001b26:	f005 ff1a 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <_ZL12MX_TIM1_Initv+0x19a>
  {
    Error_Handler();
 8001b3a:	f000 fe8b 	bl	8002854 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	617b      	str	r3, [r7, #20]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4808      	ldr	r0, [pc, #32]	; (8001b70 <_ZL12MX_TIM1_Initv+0x1cc>)
 8001b50:	f005 ff05 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bf14      	ite	ne
 8001b5a:	2301      	movne	r3, #1
 8001b5c:	2300      	moveq	r3, #0
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <_ZL12MX_TIM1_Initv+0x1c4>
  {
    Error_Handler();
 8001b64:	f000 fe76 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3740      	adds	r7, #64	; 0x40
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	24000334 	.word	0x24000334
 8001b74:	40010000 	.word	0x40010000

08001b78 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b092      	sub	sp, #72	; 0x48
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
 8001ba8:	615a      	str	r2, [r3, #20]
 8001baa:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bac:	463b      	mov	r3, r7
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bb8:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 275 - 1;
 8001bc0:	4b5b      	ldr	r3, [pc, #364]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001bc2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001bc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100 - 1;
 8001bce:	4b58      	ldr	r3, [pc, #352]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001bd0:	2263      	movs	r2, #99	; 0x63
 8001bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd4:	4b56      	ldr	r3, [pc, #344]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b55      	ldr	r3, [pc, #340]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001be0:	4853      	ldr	r0, [pc, #332]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001be2:	f005 fa09 	bl	8006ff8 <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf14      	ite	ne
 8001bec:	2301      	movne	r3, #1
 8001bee:	2300      	moveq	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 8001bf6:	f000 fe2d 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c04:	4619      	mov	r1, r3
 8001c06:	484a      	ldr	r0, [pc, #296]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001c08:	f006 f85a 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	bf14      	ite	ne
 8001c12:	2301      	movne	r3, #1
 8001c14:	2300      	moveq	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 8001c1c:	f000 fe1a 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c20:	4843      	ldr	r0, [pc, #268]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001c22:	f005 fa40 	bl	80070a6 <HAL_TIM_PWM_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <_ZL12MX_TIM2_Initv+0xc2>
  {
    Error_Handler();
 8001c36:	f000 fe0d 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001c3a:	483d      	ldr	r0, [pc, #244]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001c3c:	f005 fbb0 	bl	80073a0 <HAL_TIM_IC_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf14      	ite	ne
 8001c46:	2301      	movne	r3, #1
 8001c48:	2300      	moveq	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001c50:	f000 fe00 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c60:	4619      	mov	r1, r3
 8001c62:	4833      	ldr	r0, [pc, #204]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001c64:	f007 f832 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bf14      	ite	ne
 8001c6e:	2301      	movne	r3, #1
 8001c70:	2300      	moveq	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <_ZL12MX_TIM2_Initv+0x104>
  {
    Error_Handler();
 8001c78:	f000 fdec 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c7c:	2360      	movs	r3, #96	; 0x60
 8001c7e:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	2200      	movs	r2, #0
 8001c92:	4619      	mov	r1, r3
 8001c94:	4826      	ldr	r0, [pc, #152]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001c96:	f005 feff 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	bf14      	ite	ne
 8001ca0:	2301      	movne	r3, #1
 8001ca2:	2300      	moveq	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <_ZL12MX_TIM2_Initv+0x136>
  {
    Error_Handler();
 8001caa:	f000 fdd3 	bl	8002854 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481a      	ldr	r0, [pc, #104]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001cc6:	f005 fe4a 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <_ZL12MX_TIM2_Initv+0x166>
  {
    Error_Handler();
 8001cda:	f000 fdbb 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4812      	ldr	r0, [pc, #72]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001ce8:	f005 fed6 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bf14      	ite	ne
 8001cf2:	2301      	movne	r3, #1
 8001cf4:	2300      	moveq	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <_ZL12MX_TIM2_Initv+0x188>
  {
    Error_Handler();
 8001cfc:	f000 fdaa 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	220c      	movs	r2, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	4809      	ldr	r0, [pc, #36]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001d0a:	f005 fec5 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <_ZL12MX_TIM2_Initv+0x1aa>
  {
    Error_Handler();
 8001d1e:	f000 fd99 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d22:	4803      	ldr	r0, [pc, #12]	; (8001d30 <_ZL12MX_TIM2_Initv+0x1b8>)
 8001d24:	f001 fdfe 	bl	8003924 <HAL_TIM_MspPostInit>

}
 8001d28:	bf00      	nop
 8001d2a:	3748      	adds	r7, #72	; 0x48
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	24000380 	.word	0x24000380

08001d34 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b092      	sub	sp, #72	; 0x48
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
 8001d64:	615a      	str	r2, [r3, #20]
 8001d66:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d68:	463b      	mov	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d74:	4b5c      	ldr	r3, [pc, #368]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001d76:	4a5d      	ldr	r2, [pc, #372]	; (8001eec <_ZL12MX_TIM3_Initv+0x1b8>)
 8001d78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 275 -1;
 8001d7a:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001d7c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001d80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d82:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001d88:	4b57      	ldr	r3, [pc, #348]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001d8a:	2264      	movs	r2, #100	; 0x64
 8001d8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8e:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d94:	4b54      	ldr	r3, [pc, #336]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d9a:	4853      	ldr	r0, [pc, #332]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001d9c:	f005 f92c 	bl	8006ff8 <HAL_TIM_Base_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <_ZL12MX_TIM3_Initv+0x80>
  {
    Error_Handler();
 8001db0:	f000 fd50 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4849      	ldr	r0, [pc, #292]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001dc2:	f005 ff7d 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <_ZL12MX_TIM3_Initv+0xa6>
  {
    Error_Handler();
 8001dd6:	f000 fd3d 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dda:	4843      	ldr	r0, [pc, #268]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001ddc:	f005 f963 	bl	80070a6 <HAL_TIM_PWM_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf14      	ite	ne
 8001de6:	2301      	movne	r3, #1
 8001de8:	2300      	moveq	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <_ZL12MX_TIM3_Initv+0xc0>
  {
    Error_Handler();
 8001df0:	f000 fd30 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001df4:	483c      	ldr	r0, [pc, #240]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001df6:	f005 fad3 	bl	80073a0 <HAL_TIM_IC_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001e0a:	f000 fd23 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4832      	ldr	r0, [pc, #200]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001e1e:	f006 ff55 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <_ZL12MX_TIM3_Initv+0x102>
  {
    Error_Handler();
 8001e32:	f000 fd0f 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e36:	2360      	movs	r3, #96	; 0x60
 8001e38:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4826      	ldr	r0, [pc, #152]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001e50:	f005 fe22 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf14      	ite	ne
 8001e5a:	2301      	movne	r3, #1
 8001e5c:	2300      	moveq	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <_ZL12MX_TIM3_Initv+0x134>
  {
    Error_Handler();
 8001e64:	f000 fcf6 	bl	8002854 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e78:	463b      	mov	r3, r7
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	481a      	ldr	r0, [pc, #104]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001e80:	f005 fd6d 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <_ZL12MX_TIM3_Initv+0x164>
  {
    Error_Handler();
 8001e94:	f000 fcde 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001ea0:	f005 fd5d 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bf14      	ite	ne
 8001eaa:	2301      	movne	r3, #1
 8001eac:	2300      	moveq	r3, #0
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <_ZL12MX_TIM3_Initv+0x184>
  {
    Error_Handler();
 8001eb4:	f000 fcce 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001ec0:	f005 fd4d 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	bf14      	ite	ne
 8001eca:	2301      	movne	r3, #1
 8001ecc:	2300      	moveq	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <_ZL12MX_TIM3_Initv+0x1a4>
  {
    Error_Handler();
 8001ed4:	f000 fcbe 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ed8:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <_ZL12MX_TIM3_Initv+0x1b4>)
 8001eda:	f001 fd23 	bl	8003924 <HAL_TIM_MspPostInit>

}
 8001ede:	bf00      	nop
 8001ee0:	3748      	adds	r7, #72	; 0x48
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	240003cc 	.word	0x240003cc
 8001eec:	40000400 	.word	0x40000400

08001ef0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	; 0x30
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]
 8001f00:	609a      	str	r2, [r3, #8]
 8001f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001f1e:	4a50      	ldr	r2, [pc, #320]	; (8002060 <_ZL12MX_TIM4_Initv+0x170>)
 8001f20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 275;
 8001f22:	4b4e      	ldr	r3, [pc, #312]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001f24:	f240 1213 	movw	r2, #275	; 0x113
 8001f28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2a:	4b4c      	ldr	r3, [pc, #304]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8001f30:	4b4a      	ldr	r3, [pc, #296]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001f32:	2264      	movs	r2, #100	; 0x64
 8001f34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f36:	4b49      	ldr	r3, [pc, #292]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f3c:	4b47      	ldr	r3, [pc, #284]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f42:	4846      	ldr	r0, [pc, #280]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001f44:	f005 f858 	bl	8006ff8 <HAL_TIM_Base_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <_ZL12MX_TIM4_Initv+0x6c>
  {
    Error_Handler();
 8001f58:	f000 fc7c 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f60:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f62:	f107 0320 	add.w	r3, r7, #32
 8001f66:	4619      	mov	r1, r3
 8001f68:	483c      	ldr	r0, [pc, #240]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001f6a:	f005 fea9 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <_ZL12MX_TIM4_Initv+0x92>
  {
    Error_Handler();
 8001f7e:	f000 fc69 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001f82:	4836      	ldr	r0, [pc, #216]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001f84:	f005 fa0c 	bl	80073a0 <HAL_TIM_IC_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8001f98:	f000 fc5c 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	482c      	ldr	r0, [pc, #176]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001fac:	f006 fe8e 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <_ZL12MX_TIM4_Initv+0xd4>
  {
    Error_Handler();
 8001fc0:	f000 fc48 	bl	8002854 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4820      	ldr	r0, [pc, #128]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001fdc:	f005 fcbf 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf14      	ite	ne
 8001fe6:	2301      	movne	r3, #1
 8001fe8:	2300      	moveq	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <_ZL12MX_TIM4_Initv+0x104>
  {
    Error_Handler();
 8001ff0:	f000 fc30 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4818      	ldr	r0, [pc, #96]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 8001ffc:	f005 fcaf 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <_ZL12MX_TIM4_Initv+0x124>
  {
    Error_Handler();
 8002010:	f000 fc20 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2208      	movs	r2, #8
 8002018:	4619      	mov	r1, r3
 800201a:	4810      	ldr	r0, [pc, #64]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 800201c:	f005 fc9f 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf14      	ite	ne
 8002026:	2301      	movne	r3, #1
 8002028:	2300      	moveq	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <_ZL12MX_TIM4_Initv+0x144>
  {
    Error_Handler();
 8002030:	f000 fc10 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	220c      	movs	r2, #12
 8002038:	4619      	mov	r1, r3
 800203a:	4808      	ldr	r0, [pc, #32]	; (800205c <_ZL12MX_TIM4_Initv+0x16c>)
 800203c:	f005 fc8f 	bl	800795e <HAL_TIM_IC_ConfigChannel>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	bf14      	ite	ne
 8002046:	2301      	movne	r3, #1
 8002048:	2300      	moveq	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <_ZL12MX_TIM4_Initv+0x164>
  {
    Error_Handler();
 8002050:	f000 fc00 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002054:	bf00      	nop
 8002056:	3730      	adds	r7, #48	; 0x30
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	24000418 	.word	0x24000418
 8002060:	40000800 	.word	0x40000800

08002064 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b09c      	sub	sp, #112	; 0x70
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002078:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002084:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
 8002094:	615a      	str	r2, [r3, #20]
 8002096:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2234      	movs	r2, #52	; 0x34
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f007 f8e4 	bl	800926c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020a4:	4b63      	ldr	r3, [pc, #396]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 80020a6:	4a64      	ldr	r2, [pc, #400]	; (8002238 <_ZL12MX_TIM8_Initv+0x1d4>)
 80020a8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 275;
 80020aa:	4b62      	ldr	r3, [pc, #392]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 80020ac:	f240 1213 	movw	r2, #275	; 0x113
 80020b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b2:	4b60      	ldr	r3, [pc, #384]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 80020b8:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 80020ba:	2264      	movs	r2, #100	; 0x64
 80020bc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020c4:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ca:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020d0:	4858      	ldr	r0, [pc, #352]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 80020d2:	f004 ff91 	bl	8006ff8 <HAL_TIM_Base_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 80020e6:	f000 fbb5 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ee:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020f4:	4619      	mov	r1, r3
 80020f6:	484f      	ldr	r0, [pc, #316]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 80020f8:	f005 fde2 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 800210c:	f000 fba2 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002110:	4848      	ldr	r0, [pc, #288]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 8002112:	f004 ffc8 	bl	80070a6 <HAL_TIM_PWM_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 8002126:	f000 fb95 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002136:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800213a:	4619      	mov	r1, r3
 800213c:	483d      	ldr	r0, [pc, #244]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 800213e:	f006 fdc5 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf14      	ite	ne
 8002148:	2301      	movne	r3, #1
 800214a:	2300      	moveq	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 8002152:	f000 fb7f 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002156:	2360      	movs	r3, #96	; 0x60
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215e:	2300      	movs	r3, #0
 8002160:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002162:	2300      	movs	r3, #0
 8002164:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002172:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002176:	2204      	movs	r2, #4
 8002178:	4619      	mov	r1, r3
 800217a:	482e      	ldr	r0, [pc, #184]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 800217c:	f005 fc8c 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	bf14      	ite	ne
 8002186:	2301      	movne	r3, #1
 8002188:	2300      	moveq	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 8002190:	f000 fb60 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002194:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002198:	2208      	movs	r2, #8
 800219a:	4619      	mov	r1, r3
 800219c:	4825      	ldr	r0, [pc, #148]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 800219e:	f005 fc7b 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf14      	ite	ne
 80021a8:	2301      	movne	r3, #1
 80021aa:	2300      	moveq	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <_ZL12MX_TIM8_Initv+0x152>
  {
    Error_Handler();
 80021b2:	f000 fb4f 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021ba:	220c      	movs	r2, #12
 80021bc:	4619      	mov	r1, r3
 80021be:	481d      	ldr	r0, [pc, #116]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 80021c0:	f005 fc6a 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <_ZL12MX_TIM8_Initv+0x174>
  {
    Error_Handler();
 80021d4:	f000 fb3e 	bl	8002854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	4619      	mov	r1, r3
 800220c:	4809      	ldr	r0, [pc, #36]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 800220e:	f006 fdf9 	bl	8008e04 <HAL_TIMEx_ConfigBreakDeadTime>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf14      	ite	ne
 8002218:	2301      	movne	r3, #1
 800221a:	2300      	moveq	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <_ZL12MX_TIM8_Initv+0x1c2>
  {
    Error_Handler();
 8002222:	f000 fb17 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002226:	4803      	ldr	r0, [pc, #12]	; (8002234 <_ZL12MX_TIM8_Initv+0x1d0>)
 8002228:	f001 fb7c 	bl	8003924 <HAL_TIM_MspPostInit>

}
 800222c:	bf00      	nop
 800222e:	3770      	adds	r7, #112	; 0x70
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	24000464 	.word	0x24000464
 8002238:	40010400 	.word	0x40010400

0800223c <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	; 0x30
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002242:	f107 0320 	add.w	r3, r7, #32
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	611a      	str	r2, [r3, #16]
 800225e:	615a      	str	r2, [r3, #20]
 8002260:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 8002264:	4a2f      	ldr	r2, [pc, #188]	; (8002324 <_ZL13MX_TIM12_Initv+0xe8>)
 8002266:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 275;
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 800226a:	f240 1213 	movw	r2, #275	; 0x113
 800226e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 100;
 8002276:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 8002278:	2264      	movs	r2, #100	; 0x64
 800227a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002282:	4b27      	ldr	r3, [pc, #156]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002288:	4825      	ldr	r0, [pc, #148]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 800228a:	f004 feb5 	bl	8006ff8 <HAL_TIM_Base_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <_ZL13MX_TIM12_Initv+0x66>
  {
    Error_Handler();
 800229e:	f000 fad9 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80022a8:	f107 0320 	add.w	r3, r7, #32
 80022ac:	4619      	mov	r1, r3
 80022ae:	481c      	ldr	r0, [pc, #112]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 80022b0:	f005 fd06 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bf14      	ite	ne
 80022ba:	2301      	movne	r3, #1
 80022bc:	2300      	moveq	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <_ZL13MX_TIM12_Initv+0x8c>
  {
    Error_Handler();
 80022c4:	f000 fac6 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80022c8:	4815      	ldr	r0, [pc, #84]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 80022ca:	f004 feec 	bl	80070a6 <HAL_TIM_PWM_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <_ZL13MX_TIM12_Initv+0xa6>
  {
    Error_Handler();
 80022de:	f000 fab9 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022e2:	2360      	movs	r3, #96	; 0x60
 80022e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	2200      	movs	r2, #0
 80022f6:	4619      	mov	r1, r3
 80022f8:	4809      	ldr	r0, [pc, #36]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 80022fa:	f005 fbcd 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <_ZL13MX_TIM12_Initv+0xd6>
  {
    Error_Handler();
 800230e:	f000 faa1 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002312:	4803      	ldr	r0, [pc, #12]	; (8002320 <_ZL13MX_TIM12_Initv+0xe4>)
 8002314:	f001 fb06 	bl	8003924 <HAL_TIM_MspPostInit>

}
 8002318:	bf00      	nop
 800231a:	3730      	adds	r7, #48	; 0x30
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	240004b0 	.word	0x240004b0
 8002324:	40001800 	.word	0x40001800

08002328 <_ZL13MX_TIM23_Initv>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	; 0x38
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002348:	463b      	mov	r3, r7
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	611a      	str	r2, [r3, #16]
 8002356:	615a      	str	r2, [r3, #20]
 8002358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800235a:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 800235c:	4a51      	ldr	r2, [pc, #324]	; (80024a4 <_ZL13MX_TIM23_Initv+0x17c>)
 800235e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275;
 8002360:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 8002362:	f240 1213 	movw	r2, #275	; 0x113
 8002366:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002368:	4b4d      	ldr	r3, [pc, #308]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 100;
 800236e:	4b4c      	ldr	r3, [pc, #304]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 8002370:	2264      	movs	r2, #100	; 0x64
 8002372:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002374:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237a:	4b49      	ldr	r3, [pc, #292]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8002380:	4847      	ldr	r0, [pc, #284]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 8002382:	f004 fe39 	bl	8006ff8 <HAL_TIM_Base_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf14      	ite	ne
 800238c:	2301      	movne	r3, #1
 800238e:	2300      	moveq	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <_ZL13MX_TIM23_Initv+0x72>
  {
    Error_Handler();
 8002396:	f000 fa5d 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800239a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80023a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023a4:	4619      	mov	r1, r3
 80023a6:	483e      	ldr	r0, [pc, #248]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 80023a8:	f005 fc8a 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2301      	movne	r3, #1
 80023b4:	2300      	moveq	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <_ZL13MX_TIM23_Initv+0x98>
  {
    Error_Handler();
 80023bc:	f000 fa4a 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 80023c0:	4837      	ldr	r0, [pc, #220]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 80023c2:	f004 fe70 	bl	80070a6 <HAL_TIM_PWM_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf14      	ite	ne
 80023cc:	2301      	movne	r3, #1
 80023ce:	2300      	moveq	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <_ZL13MX_TIM23_Initv+0xb2>
  {
    Error_Handler();
 80023d6:	f000 fa3d 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	482d      	ldr	r0, [pc, #180]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 80023ea:	f006 fc6f 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf14      	ite	ne
 80023f4:	2301      	movne	r3, #1
 80023f6:	2300      	moveq	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <_ZL13MX_TIM23_Initv+0xda>
  {
    Error_Handler();
 80023fe:	f000 fa29 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002402:	2360      	movs	r3, #96	; 0x60
 8002404:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002412:	463b      	mov	r3, r7
 8002414:	2200      	movs	r2, #0
 8002416:	4619      	mov	r1, r3
 8002418:	4821      	ldr	r0, [pc, #132]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 800241a:	f005 fb3d 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf14      	ite	ne
 8002424:	2301      	movne	r3, #1
 8002426:	2300      	moveq	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <_ZL13MX_TIM23_Initv+0x10a>
  {
    Error_Handler();
 800242e:	f000 fa11 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002432:	463b      	mov	r3, r7
 8002434:	2204      	movs	r2, #4
 8002436:	4619      	mov	r1, r3
 8002438:	4819      	ldr	r0, [pc, #100]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 800243a:	f005 fb2d 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <_ZL13MX_TIM23_Initv+0x12a>
  {
    Error_Handler();
 800244e:	f000 fa01 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002452:	463b      	mov	r3, r7
 8002454:	2208      	movs	r2, #8
 8002456:	4619      	mov	r1, r3
 8002458:	4811      	ldr	r0, [pc, #68]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 800245a:	f005 fb1d 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <_ZL13MX_TIM23_Initv+0x14a>
  {
    Error_Handler();
 800246e:	f000 f9f1 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002472:	463b      	mov	r3, r7
 8002474:	220c      	movs	r2, #12
 8002476:	4619      	mov	r1, r3
 8002478:	4809      	ldr	r0, [pc, #36]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 800247a:	f005 fb0d 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf14      	ite	ne
 8002484:	2301      	movne	r3, #1
 8002486:	2300      	moveq	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <_ZL13MX_TIM23_Initv+0x16a>
  {
    Error_Handler();
 800248e:	f000 f9e1 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8002492:	4803      	ldr	r0, [pc, #12]	; (80024a0 <_ZL13MX_TIM23_Initv+0x178>)
 8002494:	f001 fa46 	bl	8003924 <HAL_TIM_MspPostInit>

}
 8002498:	bf00      	nop
 800249a:	3738      	adds	r7, #56	; 0x38
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	240004fc 	.word	0x240004fc
 80024a4:	4000e000 	.word	0x4000e000

080024a8 <_ZL13MX_TIM24_Initv>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08e      	sub	sp, #56	; 0x38
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c8:	463b      	mov	r3, r7
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	611a      	str	r2, [r3, #16]
 80024d6:	615a      	str	r2, [r3, #20]
 80024d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 80024dc:	4a51      	ldr	r2, [pc, #324]	; (8002624 <_ZL13MX_TIM24_Initv+0x17c>)
 80024de:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275;
 80024e0:	4b4f      	ldr	r3, [pc, #316]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 80024e2:	f240 1213 	movw	r2, #275	; 0x113
 80024e6:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e8:	4b4d      	ldr	r3, [pc, #308]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 100;
 80024ee:	4b4c      	ldr	r3, [pc, #304]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 80024f0:	2264      	movs	r2, #100	; 0x64
 80024f2:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f4:	4b4a      	ldr	r3, [pc, #296]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fa:	4b49      	ldr	r3, [pc, #292]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8002500:	4847      	ldr	r0, [pc, #284]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 8002502:	f004 fd79 	bl	8006ff8 <HAL_TIM_Base_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <_ZL13MX_TIM24_Initv+0x72>
  {
    Error_Handler();
 8002516:	f000 f99d 	bl	8002854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8002520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002524:	4619      	mov	r1, r3
 8002526:	483e      	ldr	r0, [pc, #248]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 8002528:	f005 fbca 	bl	8007cc0 <HAL_TIM_ConfigClockSource>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <_ZL13MX_TIM24_Initv+0x98>
  {
    Error_Handler();
 800253c:	f000 f98a 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
 8002540:	4837      	ldr	r0, [pc, #220]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 8002542:	f004 fdb0 	bl	80070a6 <HAL_TIM_PWM_Init>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <_ZL13MX_TIM24_Initv+0xb2>
  {
    Error_Handler();
 8002556:	f000 f97d 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	482d      	ldr	r0, [pc, #180]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 800256a:	f006 fbaf 	bl	8008ccc <HAL_TIMEx_MasterConfigSynchronization>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <_ZL13MX_TIM24_Initv+0xda>
  {
    Error_Handler();
 800257e:	f000 f969 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002582:	2360      	movs	r3, #96	; 0x60
 8002584:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002592:	463b      	mov	r3, r7
 8002594:	2200      	movs	r2, #0
 8002596:	4619      	mov	r1, r3
 8002598:	4821      	ldr	r0, [pc, #132]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 800259a:	f005 fa7d 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <_ZL13MX_TIM24_Initv+0x10a>
  {
    Error_Handler();
 80025ae:	f000 f951 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025b2:	463b      	mov	r3, r7
 80025b4:	2204      	movs	r2, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	4819      	ldr	r0, [pc, #100]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 80025ba:	f005 fa6d 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <_ZL13MX_TIM24_Initv+0x12a>
  {
    Error_Handler();
 80025ce:	f000 f941 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025d2:	463b      	mov	r3, r7
 80025d4:	2208      	movs	r2, #8
 80025d6:	4619      	mov	r1, r3
 80025d8:	4811      	ldr	r0, [pc, #68]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 80025da:	f005 fa5d 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <_ZL13MX_TIM24_Initv+0x14a>
  {
    Error_Handler();
 80025ee:	f000 f931 	bl	8002854 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025f2:	463b      	mov	r3, r7
 80025f4:	220c      	movs	r2, #12
 80025f6:	4619      	mov	r1, r3
 80025f8:	4809      	ldr	r0, [pc, #36]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 80025fa:	f005 fa4d 	bl	8007a98 <HAL_TIM_PWM_ConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <_ZL13MX_TIM24_Initv+0x16a>
  {
    Error_Handler();
 800260e:	f000 f921 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);
 8002612:	4803      	ldr	r0, [pc, #12]	; (8002620 <_ZL13MX_TIM24_Initv+0x178>)
 8002614:	f001 f986 	bl	8003924 <HAL_TIM_MspPostInit>

}
 8002618:	bf00      	nop
 800261a:	3738      	adds	r7, #56	; 0x38
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	24000548 	.word	0x24000548
 8002624:	4000e400 	.word	0x4000e400

08002628 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	60da      	str	r2, [r3, #12]
 800263c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800263e:	4b7e      	ldr	r3, [pc, #504]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 8002640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002644:	4a7c      	ldr	r2, [pc, #496]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 8002646:	f043 0304 	orr.w	r3, r3, #4
 800264a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800264e:	4b7a      	ldr	r3, [pc, #488]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 8002650:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800265c:	4b76      	ldr	r3, [pc, #472]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 800265e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002662:	4a75      	ldr	r2, [pc, #468]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 8002664:	f043 0320 	orr.w	r3, r3, #32
 8002668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800266c:	4b72      	ldr	r3, [pc, #456]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 800266e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800267a:	4b6f      	ldr	r3, [pc, #444]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 800267c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002680:	4a6d      	ldr	r2, [pc, #436]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 8002682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800268a:	4b6b      	ldr	r3, [pc, #428]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 800268c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002698:	4b67      	ldr	r3, [pc, #412]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 800269a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269e:	4a66      	ldr	r2, [pc, #408]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026a8:	4b63      	ldr	r3, [pc, #396]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 80026aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	4b60      	ldr	r3, [pc, #384]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 80026b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026bc:	4a5e      	ldr	r2, [pc, #376]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c6:	4b5c      	ldr	r3, [pc, #368]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 80026c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d4:	4b58      	ldr	r3, [pc, #352]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 80026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026da:	4a57      	ldr	r2, [pc, #348]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 80026dc:	f043 0310 	orr.w	r3, r3, #16
 80026e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e4:	4b54      	ldr	r3, [pc, #336]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 80026e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026f2:	4b51      	ldr	r3, [pc, #324]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 80026f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f8:	4a4f      	ldr	r2, [pc, #316]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 80026fa:	f043 0308 	orr.w	r3, r3, #8
 80026fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002702:	4b4d      	ldr	r3, [pc, #308]	; (8002838 <_ZL12MX_GPIO_Initv+0x210>)
 8002704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 8002710:	2200      	movs	r2, #0
 8002712:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002716:	4849      	ldr	r0, [pc, #292]	; (800283c <_ZL12MX_GPIO_Initv+0x214>)
 8002718:	f002 fa0c 	bl	8004b34 <HAL_GPIO_WritePin>
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SENSOR_OPEN_COLLECTOR_4_Pin|SENSOR_OPEN_COLLECTOR_5_Pin, GPIO_PIN_RESET);
 800271c:	2200      	movs	r2, #0
 800271e:	21c0      	movs	r1, #192	; 0xc0
 8002720:	4847      	ldr	r0, [pc, #284]	; (8002840 <_ZL12MX_GPIO_Initv+0x218>)
 8002722:	f002 fa07 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_SLNT_GPIO_Port, FDCAN1_SLNT_Pin, GPIO_PIN_RESET);
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 7180 	mov.w	r1, #256	; 0x100
 800272c:	4845      	ldr	r0, [pc, #276]	; (8002844 <_ZL12MX_GPIO_Initv+0x21c>)
 800272e:	f002 fa01 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_OPEN_COLLECTOR_6_GPIO_Port, SENSOR_OPEN_COLLECTOR_6_Pin, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
 8002734:	2180      	movs	r1, #128	; 0x80
 8002736:	4844      	ldr	r0, [pc, #272]	; (8002848 <_ZL12MX_GPIO_Initv+0x220>)
 8002738:	f002 f9fc 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002742:	4841      	ldr	r0, [pc, #260]	; (8002848 <_ZL12MX_GPIO_Initv+0x220>)
 8002744:	f002 f9f6 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	2102      	movs	r1, #2
 800274c:	483f      	ldr	r0, [pc, #252]	; (800284c <_ZL12MX_GPIO_Initv+0x224>)
 800274e:	f002 f9f1 	bl	8004b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_1_Pin SENSOR_OPEN_COLLECTOR_2_Pin SENSOR_OPEN_COLLECTOR_3_Pin SENSOR_OPEN_COLLECTOR_7_Pin
                           SENSOR_OPEN_COLLECTOR_8_Pin SENSOR_OPEN_COLLECTOR_9_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 8002752:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002756:	61fb      	str	r3, [r7, #28]
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002758:	2301      	movs	r3, #1
 800275a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	4834      	ldr	r0, [pc, #208]	; (800283c <_ZL12MX_GPIO_Initv+0x214>)
 800276c:	f002 f83a 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_4_Pin SENSOR_OPEN_COLLECTOR_5_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_4_Pin|SENSOR_OPEN_COLLECTOR_5_Pin;
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002774:	2301      	movs	r3, #1
 8002776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	4619      	mov	r1, r3
 8002786:	482e      	ldr	r0, [pc, #184]	; (8002840 <_ZL12MX_GPIO_Initv+0x218>)
 8002788:	f002 f82c 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACTUATOR_24V_1_Pin ACTUATOR_24V_3_Pin ACTUATOR_24V_2_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_24V_1_Pin|ACTUATOR_24V_3_Pin|ACTUATOR_24V_2_Pin;
 800278c:	230e      	movs	r3, #14
 800278e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	4619      	mov	r1, r3
 800279e:	4827      	ldr	r0, [pc, #156]	; (800283c <_ZL12MX_GPIO_Initv+0x214>)
 80027a0:	f002 f820 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACTUATOR_24V_5_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_24V_5_Pin;
 80027a4:	2320      	movs	r3, #32
 80027a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ACTUATOR_24V_5_GPIO_Port, &GPIO_InitStruct);
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	4826      	ldr	r0, [pc, #152]	; (8002850 <_ZL12MX_GPIO_Initv+0x228>)
 80027b8:	f002 f814 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACTUATOR_24V_4_Pin ACTUATOR_24V_6_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_24V_4_Pin|ACTUATOR_24V_6_Pin;
 80027bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4619      	mov	r1, r3
 80027d0:	481d      	ldr	r0, [pc, #116]	; (8002848 <_ZL12MX_GPIO_Initv+0x220>)
 80027d2:	f002 f807 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FDCAN1_SLNT_Pin */
  GPIO_InitStruct.Pin = FDCAN1_SLNT_Pin;
 80027d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027dc:	2301      	movs	r3, #1
 80027de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FDCAN1_SLNT_GPIO_Port, &GPIO_InitStruct);
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	4815      	ldr	r0, [pc, #84]	; (8002844 <_ZL12MX_GPIO_Initv+0x21c>)
 80027f0:	f001 fff8 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_6_Pin OE_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_6_Pin|OE_Pin;
 80027f4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80027f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	480e      	ldr	r0, [pc, #56]	; (8002848 <_ZL12MX_GPIO_Initv+0x220>)
 800280e:	f001 ffe9 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8002812:	2302      	movs	r3, #2
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8002822:	f107 031c 	add.w	r3, r7, #28
 8002826:	4619      	mov	r1, r3
 8002828:	4808      	ldr	r0, [pc, #32]	; (800284c <_ZL12MX_GPIO_Initv+0x224>)
 800282a:	f001 ffdb 	bl	80047e4 <HAL_GPIO_Init>

}
 800282e:	bf00      	nop
 8002830:	3730      	adds	r7, #48	; 0x30
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	58024400 	.word	0x58024400
 800283c:	58020800 	.word	0x58020800
 8002840:	58021400 	.word	0x58021400
 8002844:	58020c00 	.word	0x58020c00
 8002848:	58020400 	.word	0x58020400
 800284c:	58021000 	.word	0x58021000
 8002850:	58020000 	.word	0x58020000

08002854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002858:	b672      	cpsid	i
}
 800285a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800285c:	e7fe      	b.n	800285c <Error_Handler+0x8>

0800285e <_ZNSt12_Vector_baseI6SensorSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f901 	bl	8002a6e <_ZNSaI6SensorEC1Ev>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f909 	bl	8002a86 <_ZNSt12_Vector_baseI6SensorSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <_ZNSaI6SensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f911 	bl	8002aae <_ZN9__gnu_cxx13new_allocatorI6SensorED1Ev>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <_ZNSt12_Vector_baseI6SensorSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	109b      	asrs	r3, r3, #2
 80028b0:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <_ZNSt12_Vector_baseI6SensorSaIS0_EED1Ev+0x38>)
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 80028b6:	461a      	mov	r2, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f903 	bl	8002ac4 <_ZNSt12_Vector_baseI6SensorSaIS0_EE13_M_deallocateEPS0_j>
      }
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fb24 	bl	8000f0e <_ZNSt12_Vector_baseI6SensorSaIS0_EE12_Vector_implD1Ev>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	38e38e39 	.word	0x38e38e39

080028d4 <_ZNSt6vectorI6SensorSaIS0_EEaSESt16initializer_listIS0_E>:
      operator=(initializer_list<value_type> __l)
 80028d4:	b5b0      	push	{r4, r5, r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	e883 0006 	stmia.w	r3, {r1, r2}
	this->_M_assign_aux(__l.begin(), __l.end(),
 80028e2:	1d3b      	adds	r3, r7, #4
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 f900 	bl	8002aea <_ZNKSt16initializer_listI6SensorE5beginEv>
 80028ea:	4604      	mov	r4, r0
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f907 	bl	8002b02 <_ZNKSt16initializer_listI6SensorE3endEv>
 80028f4:	4602      	mov	r2, r0
 80028f6:	462b      	mov	r3, r5
 80028f8:	4621      	mov	r1, r4
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f916 	bl	8002b2c <_ZNSt6vectorI6SensorSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>
	return *this;
 8002900:	68fb      	ldr	r3, [r7, #12]
      }
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bdb0      	pop	{r4, r5, r7, pc}

0800290a <_ZNSt6vectorI6SensorSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800290a:	b580      	push	{r7, lr}
 800290c:	b084      	sub	sp, #16
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f9a8 	bl	8002c70 <_ZN9__gnu_cxx17__normal_iteratorIP6SensorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <_ZNSt6vectorI6SensorSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	1d1a      	adds	r2, r3, #4
 8002936:	f107 030c 	add.w	r3, r7, #12
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f997 	bl	8002c70 <_ZN9__gnu_cxx17__normal_iteratorIP6SensorSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <_ZN9__gnu_cxxneIP6SensorSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f99a 	bl	8002c90 <_ZNK9__gnu_cxx17__normal_iteratorIP6SensorSt6vectorIS1_SaIS1_EEE4baseEv>
 800295c:	4603      	mov	r3, r0
 800295e:	681c      	ldr	r4, [r3, #0]
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	f000 f995 	bl	8002c90 <_ZNK9__gnu_cxx17__normal_iteratorIP6SensorSt6vectorIS1_SaIS1_EEE4baseEv>
 8002966:	4603      	mov	r3, r0
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	429c      	cmp	r4, r3
 800296c:	bf14      	ite	ne
 800296e:	2301      	movne	r3, #1
 8002970:	2300      	moveq	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}

0800297c <_ZN9__gnu_cxx17__normal_iteratorIP6SensorSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
	return *this;
 8002990:	687b      	ldr	r3, [r7, #4]
      }
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <_ZNK9__gnu_cxx17__normal_iteratorIP6SensorSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_ZN10RingBufferILm3EdEC1Ev>:
	RingBuffer(){
 80029b6:	b480      	push	{r7}
 80029b8:	b085      	sub	sp, #20
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	dc0e      	bgt.n	80029f8 <_ZN10RingBufferILm3EdEC1Ev+0x42>
			buffer[i] = 0;
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3302      	adds	r3, #2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	18d1      	adds	r1, r2, r3
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3301      	adds	r3, #1
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e7ed      	b.n	80029d4 <_ZN10RingBufferILm3EdEC1Ev+0x1e>
	}
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <_ZN13MovingAverageILm3EdE9add_valueEd>:
	RingBuffer<BUFFER_SIZE, BUFFER_TYPE> ring;

public:
	double current_value;

	double add_value(BUFFER_TYPE value){
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b086      	sub	sp, #24
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	60f8      	str	r0, [r7, #12]
 8002a0e:	ed87 0b00 	vstr	d0, [r7]
		BUFFER_TYPE old_value = ring.add_new_value(value);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	ed97 0b00 	vldr	d0, [r7]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f944 	bl	8002ca6 <_ZN10RingBufferILm3EdE13add_new_valueEd>
 8002a1e:	ed87 0b04 	vstr	d0, [r7, #16]
		current_value -= ((double) old_value) / BUFFER_SIZE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8002a28:	ed97 5b04 	vldr	d5, [r7, #16]
 8002a2c:	eeb0 4b08 	vmov.f64	d4, #8	; 0x40400000  3.0
 8002a30:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002a34:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		current_value += ((double) value) / BUFFER_SIZE;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8002a44:	ed97 5b00 	vldr	d5, [r7]
 8002a48:	eeb0 4b08 	vmov.f64	d4, #8	; 0x40400000  3.0
 8002a4c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002a50:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		return current_value;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a60:	ec43 2b17 	vmov	d7, r2, r3
	}
 8002a64:	eeb0 0b47 	vmov.f64	d0, d7
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_ZNSaI6SensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f938 	bl	8002cec <_ZN9__gnu_cxx13new_allocatorI6SensorEC1Ev>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_ZNSt12_Vector_baseI6SensorSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
	{ }
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <_ZN9__gnu_cxx13new_allocatorI6SensorED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <_ZNSt12_Vector_baseI6SensorSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	if (__p)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <_ZNSt12_Vector_baseI6SensorSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 f910 	bl	8002d02 <_ZNSt16allocator_traitsISaI6SensorEE10deallocateERS1_PS0_j>
      }
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <_ZNKSt16initializer_listI6SensorE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_ZNKSt16initializer_listI6SensorE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8002b02:	b590      	push	{r4, r7, lr}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ffed 	bl	8002aea <_ZNKSt16initializer_listI6SensorE5beginEv>
 8002b10:	4604      	mov	r4, r0
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f904 	bl	8002d20 <_ZNKSt16initializer_listI6SensorE4sizeEv>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4423      	add	r3, r4
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}

08002b2c <_ZNSt6vectorI6SensorSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag>:
      vector<_Tp, _Alloc>::
 8002b2c:	b5b0      	push	{r4, r5, r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	703b      	strb	r3, [r7, #0]
	const size_type __len = std::distance(__first, __last);
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68b8      	ldr	r0, [r7, #8]
 8002b3e:	f000 f8fb 	bl	8002d38 <_ZSt8distanceIPK6SensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8002b42:	4603      	mov	r3, r0
 8002b44:	61fb      	str	r3, [r7, #28]
	if (__len > capacity())
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f90a 	bl	8002d60 <_ZNKSt6vectorI6SensorSaIS0_EE8capacityEv>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4293      	cmp	r3, r2
 8002b52:	bf8c      	ite	hi
 8002b54:	2301      	movhi	r3, #1
 8002b56:	2300      	movls	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d03e      	beq.n	8002bdc <_ZNSt6vectorI6SensorSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0xb0>
	    _S_check_init_len(__len, _M_get_Tp_allocator());
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 f93b 	bl	8002ddc <_ZNSt12_Vector_baseI6SensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4619      	mov	r1, r3
 8002b6a:	69f8      	ldr	r0, [r7, #28]
 8002b6c:	f000 f90e 	bl	8002d8c <_ZNSt6vectorI6SensorSaIS0_EE17_S_check_init_lenEjRKS1_>
	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	69f9      	ldr	r1, [r7, #28]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f93b 	bl	8002df2 <_ZNSt6vectorI6SensorSaIS0_EE20_M_allocate_and_copyIPKS0_EEPS0_jT_S7_>
 8002b7c:	6178      	str	r0, [r7, #20]
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681c      	ldr	r4, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685d      	ldr	r5, [r3, #4]
			  _M_get_Tp_allocator());
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f927 	bl	8002ddc <_ZNSt12_Vector_baseI6SensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8002b8e:	4603      	mov	r3, r0
	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002b90:	461a      	mov	r2, r3
 8002b92:	4629      	mov	r1, r5
 8002b94:	4620      	mov	r0, r4
 8002b96:	f000 f948 	bl	8002e2a <_ZSt8_DestroyIP6SensorS0_EvT_S2_RSaIT0_E>
	    _M_deallocate(this->_M_impl._M_start,
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6819      	ldr	r1, [r3, #0]
			  this->_M_impl._M_end_of_storage
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689a      	ldr	r2, [r3, #8]
			  - this->_M_impl._M_start);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	109b      	asrs	r3, r3, #2
 8002bac:	4a2f      	ldr	r2, [pc, #188]	; (8002c6c <_ZNSt6vectorI6SensorSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x140>)
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
	    _M_deallocate(this->_M_impl._M_start,
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f7ff ff86 	bl	8002ac4 <_ZNSt12_Vector_baseI6SensorSaIS0_EE13_M_deallocateEPS0_j>
	    this->_M_impl._M_start = __tmp;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6819      	ldr	r1, [r3, #0]
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	18ca      	adds	r2, r1, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	605a      	str	r2, [r3, #4]
	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	609a      	str	r2, [r3, #8]
      }
 8002bda:	e042      	b.n	8002c62 <_ZNSt6vectorI6SensorSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x136>
	else if (size() >= __len)
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f933 	bl	8002e48 <_ZNKSt6vectorI6SensorSaIS0_EE4sizeEv>
 8002be2:	4602      	mov	r2, r0
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	4293      	cmp	r3, r2
 8002be8:	bf94      	ite	ls
 8002bea:	2301      	movls	r3, #1
 8002bec:	2300      	movhi	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00c      	beq.n	8002c0e <_ZNSt6vectorI6SensorSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0xe2>
	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	68b8      	ldr	r0, [r7, #8]
 8002bfe:	f000 f95f 	bl	8002ec0 <_ZSt4copyIPK6SensorPS0_ET0_T_S5_S4_>
 8002c02:	4603      	mov	r3, r0
 8002c04:	4619      	mov	r1, r3
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f934 	bl	8002e74 <_ZNSt6vectorI6SensorSaIS0_EE15_M_erase_at_endEPS0_>
      }
 8002c0c:	e029      	b.n	8002c62 <_ZNSt6vectorI6SensorSaIS0_EE13_M_assign_auxIPKS0_EEvT_S6_St20forward_iterator_tag+0x136>
	    _ForwardIterator __mid = __first;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	613b      	str	r3, [r7, #16]
	    std::advance(__mid, size());
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f918 	bl	8002e48 <_ZNKSt6vectorI6SensorSaIS0_EE4sizeEv>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f965 	bl	8002ef0 <_ZSt7advanceIPK6SensorjEvRT_T0_>
	    std::copy(__first, __mid, this->_M_impl._M_start);
 8002c26:	6939      	ldr	r1, [r7, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68b8      	ldr	r0, [r7, #8]
 8002c30:	f000 f946 	bl	8002ec0 <_ZSt4copyIPK6SensorPS0_ET0_T_S5_S4_>
	    const size_type __attribute__((__unused__)) __n = __len - size();
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f907 	bl	8002e48 <_ZNKSt6vectorI6SensorSaIS0_EE4sizeEv>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
	      std::__uninitialized_copy_a(__mid, __last,
 8002c42:	693c      	ldr	r4, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685d      	ldr	r5, [r3, #4]
					  _M_get_Tp_allocator());
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f8c6 	bl	8002ddc <_ZNSt12_Vector_baseI6SensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8002c50:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__mid, __last,
 8002c52:	462a      	mov	r2, r5
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4620      	mov	r0, r4
 8002c58:	f000 f95d 	bl	8002f16 <_ZSt22__uninitialized_copy_aIPK6SensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8002c5c:	4602      	mov	r2, r0
	    this->_M_impl._M_finish =
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	605a      	str	r2, [r3, #4]
      }
 8002c62:	bf00      	nop
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdb0      	pop	{r4, r5, r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	38e38e39 	.word	0x38e38e39

08002c70 <_ZN9__gnu_cxx17__normal_iteratorIP6SensorSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_ZNK9__gnu_cxx17__normal_iteratorIP6SensorSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_ZN10RingBufferILm3EdE13add_new_valueEd>:
	BUFFER_TYPE add_new_value(BUFFER_TYPE value){
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	ed87 0b00 	vstr	d0, [r7]
		BUFFER_TYPE old_value = 0;
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9c7 2304 	strd	r2, r3, [r7, #16]
	    if(count == BUFFER_SIZE){
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d104      	bne.n	8002cd0 <_ZN10RingBufferILm3EdE13add_new_valueEd+0x2a>
	        old_value = pop_value();
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f936 	bl	8002f38 <_ZN10RingBufferILm3EdE9pop_valueEv>
 8002ccc:	ed87 0b04 	vstr	d0, [r7, #16]
		push_value(value);
 8002cd0:	ed97 0b00 	vldr	d0, [r7]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f96b 	bl	8002fb0 <_ZN10RingBufferILm3EdE10push_valueEd>
		return old_value;
 8002cda:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cde:	ec43 2b17 	vmov	d7, r2, r3
	}
 8002ce2:	eeb0 0b47 	vmov.f64	d0, d7
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZN9__gnu_cxx13new_allocatorI6SensorEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <_ZNSt16allocator_traitsISaI6SensorEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f980 	bl	8003018 <_ZN9__gnu_cxx13new_allocatorI6SensorE10deallocateEPS1_j>
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <_ZNKSt16initializer_listI6SensorE4sizeEv>:
      size() const noexcept { return _M_len; }
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <_ZSt8distanceIPK6SensorENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8002d38:	b5b0      	push	{r4, r5, r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8002d42:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8002d44:	1d3b      	adds	r3, r7, #4
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f979 	bl	800303e <_ZSt19__iterator_categoryIPK6SensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 8002d4c:	462a      	mov	r2, r5
 8002d4e:	6839      	ldr	r1, [r7, #0]
 8002d50:	4620      	mov	r0, r4
 8002d52:	f000 f97f 	bl	8003054 <_ZSt10__distanceIPK6SensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 8002d56:	4603      	mov	r3, r0
    }
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bdb0      	pop	{r4, r5, r7, pc}

08002d60 <_ZNKSt6vectorI6SensorSaIS0_EE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	109b      	asrs	r3, r3, #2
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <_ZNKSt6vectorI6SensorSaIS0_EE8capacityEv+0x28>)
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	38e38e39 	.word	0x38e38e39

08002d8c <_ZNSt6vectorI6SensorSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8002d96:	f107 030c 	add.w	r3, r7, #12
 8002d9a:	6839      	ldr	r1, [r7, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 f98b 	bl	80030b8 <_ZNSaI6SensorEC1ERKS0_>
 8002da2:	f107 030c 	add.w	r3, r7, #12
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f96a 	bl	8003080 <_ZNSt6vectorI6SensorSaIS0_EE11_S_max_sizeERKS1_>
 8002dac:	4602      	mov	r2, r0
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4293      	cmp	r3, r2
 8002db2:	bf8c      	ite	hi
 8002db4:	2301      	movhi	r3, #1
 8002db6:	2300      	movls	r3, #0
 8002db8:	b2dc      	uxtb	r4, r3
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fd5d 	bl	800287e <_ZNSaI6SensorED1Ev>
 8002dc4:	2c00      	cmp	r4, #0
 8002dc6:	d002      	beq.n	8002dce <_ZNSt6vectorI6SensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8002dc8:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <_ZNSt6vectorI6SensorSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8002dca:	f006 f8f4 	bl	8008fb6 <_ZSt20__throw_length_errorPKc>
	return __n;
 8002dce:	687b      	ldr	r3, [r7, #4]
      }
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	08009634 	.word	0x08009634

08002ddc <_ZNSt12_Vector_baseI6SensorSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_ZNSt6vectorI6SensorSaIS0_EE20_M_allocate_and_copyIPKS0_EEPS0_jT_S7_>:
	_M_allocate_and_copy(size_type __n,
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f965 	bl	80030d4 <_ZNSt12_Vector_baseI6SensorSaIS0_EE11_M_allocateEj>
 8002e0a:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ffe4 	bl	8002ddc <_ZNSt12_Vector_baseI6SensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8002e14:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	6839      	ldr	r1, [r7, #0]
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f87b 	bl	8002f16 <_ZSt22__uninitialized_copy_aIPK6SensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>
	      return __result;
 8002e20:	697b      	ldr	r3, [r7, #20]
	}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <_ZSt8_DestroyIP6SensorS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f95f 	bl	80030fc <_ZSt8_DestroyIP6SensorEvT_S2_>
    }
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <_ZNKSt6vectorI6SensorSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	109b      	asrs	r3, r3, #2
 8002e5c:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <_ZNKSt6vectorI6SensorSaIS0_EE4sizeEv+0x28>)
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	38e38e39 	.word	0x38e38e39

08002e74 <_ZNSt6vectorI6SensorSaIS0_EE15_M_erase_at_endEPS0_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	109b      	asrs	r3, r3, #2
 8002e88:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <_ZNSt6vectorI6SensorSaIS0_EE15_M_erase_at_endEPS0_+0x48>)
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00e      	beq.n	8002eb4 <_ZNSt6vectorI6SensorSaIS0_EE15_M_erase_at_endEPS0_+0x40>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff9d 	bl	8002ddc <_ZNSt12_Vector_baseI6SensorSaIS0_EE19_M_get_Tp_allocatorEv>
 8002ea2:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	6838      	ldr	r0, [r7, #0]
 8002eaa:	f7ff ffbe 	bl	8002e2a <_ZSt8_DestroyIP6SensorS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd90      	pop	{r4, r7, pc}
 8002ebc:	38e38e39 	.word	0x38e38e39

08002ec0 <_ZSt4copyIPK6SensorPS0_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f922 	bl	8003116 <_ZSt12__miter_baseIPK6SensorET_S3_>
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	68b8      	ldr	r0, [r7, #8]
 8002ed6:	f000 f91e 	bl	8003116 <_ZSt12__miter_baseIPK6SensorET_S3_>
 8002eda:	4603      	mov	r3, r0
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f000 f923 	bl	800312c <_ZSt13__copy_move_aILb0EPK6SensorPS0_ET1_T0_S5_S4_>
 8002ee6:	4603      	mov	r3, r0
    }
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}

08002ef0 <_ZSt7advanceIPK6SensorjEvRT_T0_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator, typename _Distance>
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	60fb      	str	r3, [r7, #12]
      std::__advance(__i, __d, std::__iterator_category(__i));
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f89d 	bl	800303e <_ZSt19__iterator_categoryIPK6SensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
 8002f04:	4622      	mov	r2, r4
 8002f06:	68f9      	ldr	r1, [r7, #12]
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f932 	bl	8003172 <_ZSt9__advanceIPK6SensoriEvRT_T0_St26random_access_iterator_tag>
    }
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd90      	pop	{r4, r7, pc}

08002f16 <_ZSt22__uninitialized_copy_aIPK6SensorPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 f938 	bl	800319e <_ZSt18uninitialized_copyIPK6SensorPS0_ET0_T_S5_S4_>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <_ZN10RingBufferILm3EdE9pop_valueEv>:
	BUFFER_TYPE pop_value(){
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
		if(count == 0)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d104      	bne.n	8002f52 <_ZN10RingBufferILm3EdE9pop_valueEv+0x1a>
			return 0;				// Trying to pop with buffer empty
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	f04f 0300 	mov.w	r3, #0
 8002f50:	e022      	b.n	8002f98 <_ZN10RingBufferILm3EdE9pop_valueEv+0x60>
		BUFFER_TYPE value = buffer[initial_pointer];
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	3302      	adds	r3, #2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	e9c7 2302 	strd	r2, r3, [r7, #8]
		initial_pointer ++;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	601a      	str	r2, [r3, #0]
		initial_pointer %= BUFFER_SIZE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <_ZN10RingBufferILm3EdE9pop_valueEv+0x74>)
 8002f78:	fba3 2301 	umull	r2, r3, r3, r1
 8002f7c:	085a      	lsrs	r2, r3, #1
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	1aca      	subs	r2, r1, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	601a      	str	r2, [r3, #0]
		count --;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	1e5a      	subs	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	609a      	str	r2, [r3, #8]
		return value;
 8002f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
	}
 8002f98:	ec43 2b17 	vmov	d7, r2, r3
 8002f9c:	eeb0 0b47 	vmov.f64	d0, d7
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	aaaaaaab 	.word	0xaaaaaaab

08002fb0 <_ZN10RingBufferILm3EdE10push_valueEd>:
	void push_value(BUFFER_TYPE value){
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	ed87 0b00 	vstr	d0, [r7]
		if(count == BUFFER_SIZE)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d021      	beq.n	8003008 <_ZN10RingBufferILm3EdE10push_valueEd+0x58>
		buffer[end_pointer] = value;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	3302      	adds	r3, #2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	18d1      	adds	r1, r2, r3
 8002fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd4:	e9c1 2300 	strd	r2, r3, [r1]
		end_pointer ++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	605a      	str	r2, [r3, #4]
    	end_pointer %= BUFFER_SIZE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <_ZN10RingBufferILm3EdE10push_valueEd+0x64>)
 8002fea:	fba3 2301 	umull	r2, r3, r3, r1
 8002fee:	085a      	lsrs	r2, r3, #1
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	1aca      	subs	r2, r1, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	605a      	str	r2, [r3, #4]
		count ++;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	e000      	b.n	800300a <_ZN10RingBufferILm3EdE10push_valueEd+0x5a>
			return;					// Trying to push with buffer full
 8003008:	bf00      	nop
	}
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	aaaaaaab 	.word	0xaaaaaaab

08003018 <_ZN9__gnu_cxx13new_allocatorI6SensorE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4619      	mov	r1, r3
 8003030:	68b8      	ldr	r0, [r7, #8]
 8003032:	f005 ffa5 	bl	8008f80 <_ZdlPvj>
      }
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <_ZSt19__iterator_categoryIPK6SensorENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8003046:	bf00      	nop
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <_ZSt10__distanceIPK6SensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	109b      	asrs	r3, r3, #2
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <_ZSt10__distanceIPK6SensorENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag+0x28>)
 800306a:	fb02 f303 	mul.w	r3, r2, r3
    }
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	38e38e39 	.word	0x38e38e39

08003080 <_ZNSt6vectorI6SensorSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <_ZNSt6vectorI6SensorSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 800308a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f898 	bl	80031c2 <_ZNSt16allocator_traitsISaI6SensorEE8max_sizeERKS1_>
 8003092:	4603      	mov	r3, r0
 8003094:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003096:	f107 0208 	add.w	r2, r7, #8
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7fd fdca 	bl	8000c3a <_ZSt3minIjERKT_S2_S2_>
 80030a6:	4603      	mov	r3, r0
 80030a8:	681b      	ldr	r3, [r3, #0]
      }
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	038e38e3 	.word	0x038e38e3

080030b8 <_ZNSaI6SensorEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80030c2:	6839      	ldr	r1, [r7, #0]
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f888 	bl	80031da <_ZN9__gnu_cxx13new_allocatorI6SensorEC1ERKS2_>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_ZNSt12_Vector_baseI6SensorSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <_ZNSt12_Vector_baseI6SensorSaIS0_EE11_M_allocateEj+0x1e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6839      	ldr	r1, [r7, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f882 	bl	80031f2 <_ZNSt16allocator_traitsISaI6SensorEE8allocateERS1_j>
 80030ee:	4603      	mov	r3, r0
 80030f0:	e000      	b.n	80030f4 <_ZNSt12_Vector_baseI6SensorSaIS0_EE11_M_allocateEj+0x20>
 80030f2:	2300      	movs	r3, #0
      }
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_ZSt8_DestroyIP6SensorEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8003106:	6839      	ldr	r1, [r7, #0]
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f881 	bl	8003210 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6SensorEEvT_S4_>
    }
 800310e:	bf00      	nop
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <_ZSt12__miter_baseIPK6SensorET_S3_>:
    __miter_base(_Iterator __it)
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <_ZSt13__copy_move_aILb0EPK6SensorPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800312c:	b5b0      	push	{r4, r5, r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f881 	bl	8003240 <_ZSt12__niter_baseIPK6SensorET_S3_>
 800313e:	4604      	mov	r4, r0
 8003140:	68b8      	ldr	r0, [r7, #8]
 8003142:	f000 f87d 	bl	8003240 <_ZSt12__niter_baseIPK6SensorET_S3_>
 8003146:	4605      	mov	r5, r0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4618      	mov	r0, r3
 800314c:	f000 f883 	bl	8003256 <_ZSt12__niter_baseIP6SensorET_S2_>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	4629      	mov	r1, r5
 8003156:	4620      	mov	r0, r4
 8003158:	f000 f888 	bl	800326c <_ZSt14__copy_move_a1ILb0EPK6SensorPS0_ET1_T0_S5_S4_>
 800315c:	4602      	mov	r2, r0
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f892 	bl	800328c <_ZSt12__niter_wrapIP6SensorET_RKS2_S2_>
 8003168:	4603      	mov	r3, r0
    }
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bdb0      	pop	{r4, r5, r7, pc}

08003172 <_ZSt9__advanceIPK6SensoriEvRT_T0_St26random_access_iterator_tag>:
    __advance(_RandomAccessIterator& __i, _Distance __n,
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	713a      	strb	r2, [r7, #4]
	__i += __n;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	18ca      	adds	r2, r1, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	601a      	str	r2, [r3, #0]
    }
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <_ZSt18uninitialized_copyIPK6SensorPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 f876 	bl	80032a4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6SensorPS2_EET0_T_S7_S6_>
 80031b8:	4603      	mov	r3, r0
    }
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <_ZNSt16allocator_traitsISaI6SensorEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f88a 	bl	80032e4 <_ZNK9__gnu_cxx13new_allocatorI6SensorE8max_sizeEv>
 80031d0:	4603      	mov	r3, r0
      }
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <_ZN9__gnu_cxx13new_allocatorI6SensorEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <_ZNSt16allocator_traitsISaI6SensorEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80031fc:	2200      	movs	r2, #0
 80031fe:	6839      	ldr	r1, [r7, #0]
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f87b 	bl	80032fc <_ZN9__gnu_cxx13new_allocatorI6SensorE8allocateEjPKv>
 8003206:	4603      	mov	r3, r0
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6SensorEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d00a      	beq.n	8003238 <_ZNSt12_Destroy_auxILb0EE9__destroyIP6SensorEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f88b 	bl	800333e <_ZSt11__addressofI6SensorEPT_RS1_>
 8003228:	4603      	mov	r3, r0
 800322a:	4618      	mov	r0, r3
 800322c:	f000 f892 	bl	8003354 <_ZSt8_DestroyI6SensorEvPT_>
	  for (; __first != __last; ++__first)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3324      	adds	r3, #36	; 0x24
 8003234:	607b      	str	r3, [r7, #4]
 8003236:	e7f0      	b.n	800321a <_ZNSt12_Destroy_auxILb0EE9__destroyIP6SensorEEvT_S4_+0xa>
	}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <_ZSt12__niter_baseIPK6SensorET_S3_>:
    __niter_base(_Iterator __it)
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <_ZSt12__niter_baseIP6SensorET_S2_>:
    __niter_base(_Iterator __it)
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_ZSt14__copy_move_a1ILb0EPK6SensorPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68b9      	ldr	r1, [r7, #8]
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f874 	bl	800336a <_ZSt14__copy_move_a2ILb0EPK6SensorPS0_ET1_T0_S5_S4_>
 8003282:	4603      	mov	r3, r0
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <_ZSt12__niter_wrapIP6SensorET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6SensorPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d00e      	beq.n	80032da <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6SensorPS2_EET0_T_S7_S6_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 80032bc:	6978      	ldr	r0, [r7, #20]
 80032be:	f000 f83e 	bl	800333e <_ZSt11__addressofI6SensorEPT_RS1_>
 80032c2:	4603      	mov	r3, r0
 80032c4:	68f9      	ldr	r1, [r7, #12]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f85f 	bl	800338a <_ZSt10_ConstructI6SensorJRKS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3324      	adds	r3, #36	; 0x24
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	3324      	adds	r3, #36	; 0x24
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	e7ec      	b.n	80032b4 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPK6SensorPS2_EET0_T_S7_S6_+0x10>
	      return __cur;
 80032da:	697b      	ldr	r3, [r7, #20]
	}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <_ZNK9__gnu_cxx13new_allocatorI6SensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f863 	bl	80033b8 <_ZNK9__gnu_cxx13new_allocatorI6SensorE11_M_max_sizeEv>
 80032f2:	4603      	mov	r3, r0
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <_ZN9__gnu_cxx13new_allocatorI6SensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f855 	bl	80033b8 <_ZNK9__gnu_cxx13new_allocatorI6SensorE11_M_max_sizeEv>
 800330e:	4602      	mov	r2, r0
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4293      	cmp	r3, r2
 8003314:	bf8c      	ite	hi
 8003316:	2301      	movhi	r3, #1
 8003318:	2300      	movls	r3, #0
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <_ZN9__gnu_cxx13new_allocatorI6SensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003320:	f005 fe43 	bl	8008faa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4618      	mov	r0, r3
 8003330:	f005 fe28 	bl	8008f84 <_Znwj>
 8003334:	4603      	mov	r3, r0
      }
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <_ZSt11__addressofI6SensorEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <_ZSt8_DestroyI6SensorEvPT_>:
    _Destroy(_Tp* __pointer)
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
      __pointer->~_Tp();
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7fd fdfc 	bl	8000f5a <_ZN6SensorD1Ev>
    }
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <_ZSt14__copy_move_a2ILb0EPK6SensorPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f846 	bl	800340c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK6SensorPS3_EET0_T_S8_S7_>
 8003380:	4603      	mov	r3, r0
    }
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <_ZSt10_ConstructI6SensorJRKS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 800338a:	b590      	push	{r4, r7, lr}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8003394:	6838      	ldr	r0, [r7, #0]
 8003396:	f000 f85f 	bl	8003458 <_ZSt7forwardIRK6SensorEOT_RNSt16remove_referenceIS3_E4typeE>
 800339a:	4604      	mov	r4, r0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4619      	mov	r1, r3
 80033a0:	2024      	movs	r0, #36	; 0x24
 80033a2:	f7fc ffbd 	bl	8000320 <_ZnwjPv>
 80033a6:	4603      	mov	r3, r0
 80033a8:	4621      	mov	r1, r4
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd fde2 	bl	8000f74 <_ZN6SensorC1ERKS_>
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd90      	pop	{r4, r7, pc}

080033b8 <_ZNK9__gnu_cxx13new_allocatorI6SensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <_ZNK9__gnu_cxx13new_allocatorI6SensorE11_M_max_sizeEv+0x18>)
      }
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	038e38e3 	.word	0x038e38e3

080033d4 <_ZN6SensoraSERKS_>:
struct Sensor {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f005 fe59 	bl	800909c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	619a      	str	r2, [r3, #24]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	61da      	str	r2, [r3, #28]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6a1a      	ldr	r2, [r3, #32]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	621a      	str	r2, [r3, #32]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK6SensorPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	109b      	asrs	r3, r3, #2
 8003420:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK6SensorPS3_EET0_T_S8_S7_+0x48>)
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2b00      	cmp	r3, #0
 800342c:	dd0d      	ble.n	800344a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK6SensorPS3_EET0_T_S8_S7_+0x3e>
	      *__result = *__first;
 800342e:	68f9      	ldr	r1, [r7, #12]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff ffcf 	bl	80033d4 <_ZN6SensoraSERKS_>
	      ++__first;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3324      	adds	r3, #36	; 0x24
 800343a:	60fb      	str	r3, [r7, #12]
	      ++__result;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3324      	adds	r3, #36	; 0x24
 8003440:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	3b01      	subs	r3, #1
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e7ee      	b.n	8003428 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK6SensorPS3_EET0_T_S8_S7_+0x1c>
	  return __result;
 800344a:	687b      	ldr	r3, [r7, #4]
	}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	38e38e39 	.word	0x38e38e39

08003458 <_ZSt7forwardIRK6SensorEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d112      	bne.n	80034a6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003486:	4293      	cmp	r3, r2
 8003488:	d10d      	bne.n	80034a6 <_Z41__static_initialization_and_destruction_0ii+0x36>
extern TIM_HandleTypeDef htim23;
extern TIM_HandleTypeDef htim24;

#include "InputCapture.hpp"

InputCapture input_capture_PB1(&htim1, TIM_CHANNEL_3);
 800348a:	2208      	movs	r2, #8
 800348c:	490d      	ldr	r1, [pc, #52]	; (80034c4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800348e:	480e      	ldr	r0, [pc, #56]	; (80034c8 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003490:	f7fc ff86 	bl	80003a0 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefm>
vector<Sensor> sensors_3v;
 8003494:	480d      	ldr	r0, [pc, #52]	; (80034cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003496:	f7fd fd53 	bl	8000f40 <_ZNSt6vectorI6SensorSaIS0_EEC1Ev>
MovingAverage<3, double> DutyAverage;
 800349a:	480d      	ldr	r0, [pc, #52]	; (80034d0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800349c:	f7fe f8e9 	bl	8001672 <_ZN13MovingAverageILm3EdEC1Ev>
MovingAverage<3, double> FrequencyAverage;
 80034a0:	480c      	ldr	r0, [pc, #48]	; (80034d4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80034a2:	f7fe f8e6 	bl	8001672 <_ZN13MovingAverageILm3EdEC1Ev>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <_Z41__static_initialization_and_destruction_0ii+0x4c>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d102      	bne.n	80034bc <_Z41__static_initialization_and_destruction_0ii+0x4c>
 80034b6:	4805      	ldr	r0, [pc, #20]	; (80034cc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80034b8:	f000 f80e 	bl	80034d8 <_ZNSt6vectorI6SensorSaIS0_EED1Ev>
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	24000334 	.word	0x24000334
 80034c8:	240000a0 	.word	0x240000a0
 80034cc:	24000288 	.word	0x24000288
 80034d0:	240005b0 	.word	0x240005b0
 80034d4:	240005e0 	.word	0x240005e0

080034d8 <_ZNSt6vectorI6SensorSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80034d8:	b5b0      	push	{r4, r5, r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681c      	ldr	r4, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fc76 	bl	8002ddc <_ZNSt12_Vector_baseI6SensorSaIS0_EE19_M_get_Tp_allocatorEv>
 80034f0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80034f2:	461a      	mov	r2, r3
 80034f4:	4629      	mov	r1, r5
 80034f6:	4620      	mov	r0, r4
 80034f8:	f7ff fc97 	bl	8002e2a <_ZSt8_DestroyIP6SensorS0_EvT_S2_RSaIT0_E>
      }
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f9ca 	bl	8002898 <_ZNSt12_Vector_baseI6SensorSaIS0_EED1Ev>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bdb0      	pop	{r4, r5, r7, pc}

0800350e <_GLOBAL__sub_I_input_capture_PB1>:
 800350e:	b580      	push	{r7, lr}
 8003510:	af00      	add	r7, sp, #0
 8003512:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003516:	2001      	movs	r0, #1
 8003518:	f7ff ffaa 	bl	8003470 <_Z41__static_initialization_and_destruction_0ii>
 800351c:	bd80      	pop	{r7, pc}

0800351e <_GLOBAL__sub_D_input_capture_PB1>:
 800351e:	b580      	push	{r7, lr}
 8003520:	af00      	add	r7, sp, #0
 8003522:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003526:	2000      	movs	r0, #0
 8003528:	f7ff ffa2 	bl	8003470 <_Z41__static_initialization_and_destruction_0ii>
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_MspInit+0x30>)
 8003538:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800353c:	4a08      	ldr	r2, [pc, #32]	; (8003560 <HAL_MspInit+0x30>)
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003546:	4b06      	ldr	r3, [pc, #24]	; (8003560 <HAL_MspInit+0x30>)
 8003548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	58024400 	.word	0x58024400

08003564 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b0b8      	sub	sp, #224	; 0xe0
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800357c:	f107 0310 	add.w	r3, r7, #16
 8003580:	22b8      	movs	r2, #184	; 0xb8
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f005 fe71 	bl	800926c <memset>
  if(hfdcan->Instance==FDCAN1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a27      	ldr	r2, [pc, #156]	; (800362c <HAL_FDCAN_MspInit+0xc8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d146      	bne.n	8003622 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003594:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80035a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035a6:	f107 0310 	add.w	r3, r7, #16
 80035aa:	4618      	mov	r0, r3
 80035ac:	f002 fa20 	bl	80059f0 <HAL_RCCEx_PeriphCLKConfig>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80035b6:	f7ff f94d 	bl	8002854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HAL_FDCAN_MspInit+0xcc>)
 80035bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035c0:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_FDCAN_MspInit+0xcc>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80035ca:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_FDCAN_MspInit+0xcc>)
 80035cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_FDCAN_MspInit+0xcc>)
 80035da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035de:	4a14      	ldr	r2, [pc, #80]	; (8003630 <HAL_FDCAN_MspInit+0xcc>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035e8:	4b11      	ldr	r3, [pc, #68]	; (8003630 <HAL_FDCAN_MspInit+0xcc>)
 80035ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
 80035f4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80035f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80035fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	2300      	movs	r3, #0
 800360c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003610:	2309      	movs	r3, #9
 8003612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003616:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800361a:	4619      	mov	r1, r3
 800361c:	4805      	ldr	r0, [pc, #20]	; (8003634 <HAL_FDCAN_MspInit+0xd0>)
 800361e:	f001 f8e1 	bl	80047e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003622:	bf00      	nop
 8003624:	37e0      	adds	r7, #224	; 0xe0
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	4000a000 	.word	0x4000a000
 8003630:	58024400 	.word	0x58024400
 8003634:	58020000 	.word	0x58020000

08003638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b094      	sub	sp, #80	; 0x50
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003640:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	60da      	str	r2, [r3, #12]
 800364e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4aa7      	ldr	r2, [pc, #668]	; (80038f4 <HAL_TIM_Base_MspInit+0x2bc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d14f      	bne.n	80036fa <HAL_TIM_Base_MspInit+0xc2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800365a:	4ba7      	ldr	r3, [pc, #668]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800365c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003660:	4aa5      	ldr	r2, [pc, #660]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800366a:	4ba3      	ldr	r3, [pc, #652]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800366c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	63bb      	str	r3, [r7, #56]	; 0x38
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003678:	4b9f      	ldr	r3, [pc, #636]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800367a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800367e:	4a9e      	ldr	r2, [pc, #632]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003680:	f043 0310 	orr.w	r3, r3, #16
 8003684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003688:	4b9b      	ldr	r3, [pc, #620]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800368a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
 8003694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|PWM_5V_8_Pin|PWM_5V_7_Pin;
 8003696:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800369a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036b0:	4619      	mov	r1, r3
 80036b2:	4892      	ldr	r0, [pc, #584]	; (80038fc <HAL_TIM_Base_MspInit+0x2c4>)
 80036b4:	f001 f896 	bl	80047e4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	2100      	movs	r1, #0
 80036bc:	2018      	movs	r0, #24
 80036be:	f000 fcf8 	bl	80040b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80036c2:	2018      	movs	r0, #24
 80036c4:	f000 fd0f 	bl	80040e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80036c8:	2200      	movs	r2, #0
 80036ca:	2100      	movs	r1, #0
 80036cc:	2019      	movs	r0, #25
 80036ce:	f000 fcf0 	bl	80040b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80036d2:	2019      	movs	r0, #25
 80036d4:	f000 fd07 	bl	80040e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80036d8:	2200      	movs	r2, #0
 80036da:	2100      	movs	r1, #0
 80036dc:	201a      	movs	r0, #26
 80036de:	f000 fce8 	bl	80040b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80036e2:	201a      	movs	r0, #26
 80036e4:	f000 fcff 	bl	80040e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80036e8:	2200      	movs	r2, #0
 80036ea:	2100      	movs	r1, #0
 80036ec:	201b      	movs	r0, #27
 80036ee:	f000 fce0 	bl	80040b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80036f2:	201b      	movs	r0, #27
 80036f4:	f000 fcf7 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80036f8:	e0f7      	b.n	80038ea <HAL_TIM_Base_MspInit+0x2b2>
  else if(htim_base->Instance==TIM2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003702:	d12e      	bne.n	8003762 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003704:	4b7c      	ldr	r3, [pc, #496]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003706:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800370a:	4a7b      	ldr	r2, [pc, #492]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003714:	4b78      	ldr	r3, [pc, #480]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003716:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003722:	4b75      	ldr	r3, [pc, #468]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003728:	4a73      	ldr	r2, [pc, #460]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003732:	4b71      	ldr	r3, [pc, #452]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = PWM_5V_1_Pin;
 8003740:	2302      	movs	r3, #2
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003744:	2302      	movs	r3, #2
 8003746:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374c:	2300      	movs	r3, #0
 800374e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003750:	2301      	movs	r3, #1
 8003752:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(PWM_5V_1_GPIO_Port, &GPIO_InitStruct);
 8003754:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003758:	4619      	mov	r1, r3
 800375a:	4869      	ldr	r0, [pc, #420]	; (8003900 <HAL_TIM_Base_MspInit+0x2c8>)
 800375c:	f001 f842 	bl	80047e4 <HAL_GPIO_Init>
}
 8003760:	e0c3      	b.n	80038ea <HAL_TIM_Base_MspInit+0x2b2>
  else if(htim_base->Instance==TIM3)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a67      	ldr	r2, [pc, #412]	; (8003904 <HAL_TIM_Base_MspInit+0x2cc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d12e      	bne.n	80037ca <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800376c:	4b62      	ldr	r3, [pc, #392]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800376e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003772:	4a61      	ldr	r2, [pc, #388]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003774:	f043 0302 	orr.w	r3, r3, #2
 8003778:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800377c:	4b5e      	ldr	r3, [pc, #376]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800377e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
 8003788:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800378a:	4b5b      	ldr	r3, [pc, #364]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800378c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003790:	4a59      	ldr	r2, [pc, #356]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003792:	f043 0302 	orr.w	r3, r3, #2
 8003796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800379a:	4b57      	ldr	r3, [pc, #348]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800379c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = PWM_5V_2_Pin|PWM_5V_9_Pin|PWM_5V_4_Pin;
 80037a8:	2323      	movs	r3, #35	; 0x23
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2302      	movs	r3, #2
 80037ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b4:	2300      	movs	r3, #0
 80037b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037b8:	2302      	movs	r3, #2
 80037ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037c0:	4619      	mov	r1, r3
 80037c2:	4851      	ldr	r0, [pc, #324]	; (8003908 <HAL_TIM_Base_MspInit+0x2d0>)
 80037c4:	f001 f80e 	bl	80047e4 <HAL_GPIO_Init>
}
 80037c8:	e08f      	b.n	80038ea <HAL_TIM_Base_MspInit+0x2b2>
  else if(htim_base->Instance==TIM4)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a4f      	ldr	r2, [pc, #316]	; (800390c <HAL_TIM_Base_MspInit+0x2d4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d137      	bne.n	8003844 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037d4:	4b48      	ldr	r3, [pc, #288]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80037d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037da:	4a47      	ldr	r2, [pc, #284]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037e4:	4b44      	ldr	r3, [pc, #272]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80037e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037f2:	4b41      	ldr	r3, [pc, #260]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80037f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037f8:	4a3f      	ldr	r2, [pc, #252]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80037fa:	f043 0308 	orr.w	r3, r3, #8
 80037fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_5V_6_Pin|PWM_5V_5_Pin|PWM_5V_10_Pin|PWM_5V_11_Pin;
 8003810:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003814:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003816:	2302      	movs	r3, #2
 8003818:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381a:	2300      	movs	r3, #0
 800381c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381e:	2300      	movs	r3, #0
 8003820:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003822:	2302      	movs	r3, #2
 8003824:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003826:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800382a:	4619      	mov	r1, r3
 800382c:	4838      	ldr	r0, [pc, #224]	; (8003910 <HAL_TIM_Base_MspInit+0x2d8>)
 800382e:	f000 ffd9 	bl	80047e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003832:	2200      	movs	r2, #0
 8003834:	2100      	movs	r1, #0
 8003836:	201e      	movs	r0, #30
 8003838:	f000 fc3b 	bl	80040b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800383c:	201e      	movs	r0, #30
 800383e:	f000 fc52 	bl	80040e6 <HAL_NVIC_EnableIRQ>
}
 8003842:	e052      	b.n	80038ea <HAL_TIM_Base_MspInit+0x2b2>
  else if(htim_base->Instance==TIM8)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a32      	ldr	r2, [pc, #200]	; (8003914 <HAL_TIM_Base_MspInit+0x2dc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10f      	bne.n	800386e <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800384e:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003854:	4a28      	ldr	r2, [pc, #160]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003856:	f043 0302 	orr.w	r3, r3, #2
 800385a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800385e:	4b26      	ldr	r3, [pc, #152]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	61bb      	str	r3, [r7, #24]
 800386a:	69bb      	ldr	r3, [r7, #24]
}
 800386c:	e03d      	b.n	80038ea <HAL_TIM_Base_MspInit+0x2b2>
  else if(htim_base->Instance==TIM12)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a29      	ldr	r2, [pc, #164]	; (8003918 <HAL_TIM_Base_MspInit+0x2e0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d10f      	bne.n	8003898 <HAL_TIM_Base_MspInit+0x260>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003878:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800387a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800387e:	4a1e      	ldr	r2, [pc, #120]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 8003880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003884:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 800388a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697b      	ldr	r3, [r7, #20]
}
 8003896:	e028      	b.n	80038ea <HAL_TIM_Base_MspInit+0x2b2>
  else if(htim_base->Instance==TIM23)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a1f      	ldr	r2, [pc, #124]	; (800391c <HAL_TIM_Base_MspInit+0x2e4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10f      	bne.n	80038c2 <HAL_TIM_Base_MspInit+0x28a>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80038a4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80038a8:	4a13      	ldr	r2, [pc, #76]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80038aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ae:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80038b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80038b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038bc:	613b      	str	r3, [r7, #16]
 80038be:	693b      	ldr	r3, [r7, #16]
}
 80038c0:	e013      	b.n	80038ea <HAL_TIM_Base_MspInit+0x2b2>
  else if(htim_base->Instance==TIM24)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a16      	ldr	r2, [pc, #88]	; (8003920 <HAL_TIM_Base_MspInit+0x2e8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10e      	bne.n	80038ea <HAL_TIM_Base_MspInit+0x2b2>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80038ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80038d2:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80038d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038d8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_TIM_Base_MspInit+0x2c0>)
 80038de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
}
 80038ea:	bf00      	nop
 80038ec:	3750      	adds	r7, #80	; 0x50
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40010000 	.word	0x40010000
 80038f8:	58024400 	.word	0x58024400
 80038fc:	58021000 	.word	0x58021000
 8003900:	58020000 	.word	0x58020000
 8003904:	40000400 	.word	0x40000400
 8003908:	58020400 	.word	0x58020400
 800390c:	40000800 	.word	0x40000800
 8003910:	58020c00 	.word	0x58020c00
 8003914:	40010400 	.word	0x40010400
 8003918:	40001800 	.word	0x40001800
 800391c:	4000e000 	.word	0x4000e000
 8003920:	4000e400 	.word	0x4000e400

08003924 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08e      	sub	sp, #56	; 0x38
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	60da      	str	r2, [r3, #12]
 800393a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d11f      	bne.n	8003986 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003946:	4b6f      	ldr	r3, [pc, #444]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800394c:	4a6d      	ldr	r2, [pc, #436]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003956:	4b6b      	ldr	r3, [pc, #428]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SENSOR_3V_1A0_Pin|SENSOR_3V_5_Pin|SENSOR_3V_8_Pin;
 8003964:	230d      	movs	r3, #13
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	2300      	movs	r3, #0
 8003972:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003974:	2301      	movs	r3, #1
 8003976:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800397c:	4619      	mov	r1, r3
 800397e:	4862      	ldr	r0, [pc, #392]	; (8003b08 <HAL_TIM_MspPostInit+0x1e4>)
 8003980:	f000 ff30 	bl	80047e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspPostInit 1 */

  /* USER CODE END TIM24_MspPostInit 1 */
  }

}
 8003984:	e0ba      	b.n	8003afc <HAL_TIM_MspPostInit+0x1d8>
  else if(htim->Instance==TIM3)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a60      	ldr	r2, [pc, #384]	; (8003b0c <HAL_TIM_MspPostInit+0x1e8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d11f      	bne.n	80039d0 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003990:	4b5c      	ldr	r3, [pc, #368]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003996:	4a5b      	ldr	r2, [pc, #364]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003998:	f043 0304 	orr.w	r3, r3, #4
 800399c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039a0:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 80039a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = SENSOR_3V_12_Pin;
 80039ae:	2340      	movs	r3, #64	; 0x40
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b2:	2302      	movs	r3, #2
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ba:	2300      	movs	r3, #0
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80039be:	2302      	movs	r3, #2
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SENSOR_3V_12_GPIO_Port, &GPIO_InitStruct);
 80039c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c6:	4619      	mov	r1, r3
 80039c8:	4851      	ldr	r0, [pc, #324]	; (8003b10 <HAL_TIM_MspPostInit+0x1ec>)
 80039ca:	f000 ff0b 	bl	80047e4 <HAL_GPIO_Init>
}
 80039ce:	e095      	b.n	8003afc <HAL_TIM_MspPostInit+0x1d8>
  else if(htim->Instance==TIM8)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a4f      	ldr	r2, [pc, #316]	; (8003b14 <HAL_TIM_MspPostInit+0x1f0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d120      	bne.n	8003a1c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039da:	4b4a      	ldr	r3, [pc, #296]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 80039dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e0:	4a48      	ldr	r2, [pc, #288]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ea:	4b46      	ldr	r3, [pc, #280]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 80039ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = SENSOR_3V_6_Pin|SENSOR_3V_11_Pin|SENSOR_3V_5C9_Pin;
 80039f8:	f44f 7360 	mov.w	r3, #896	; 0x380
 80039fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fe:	2302      	movs	r3, #2
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a06:	2300      	movs	r3, #0
 8003a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a12:	4619      	mov	r1, r3
 8003a14:	483e      	ldr	r0, [pc, #248]	; (8003b10 <HAL_TIM_MspPostInit+0x1ec>)
 8003a16:	f000 fee5 	bl	80047e4 <HAL_GPIO_Init>
}
 8003a1a:	e06f      	b.n	8003afc <HAL_TIM_MspPostInit+0x1d8>
  else if(htim->Instance==TIM12)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a3d      	ldr	r2, [pc, #244]	; (8003b18 <HAL_TIM_MspPostInit+0x1f4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d120      	bne.n	8003a68 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a26:	4b37      	ldr	r3, [pc, #220]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a2c:	4a35      	ldr	r2, [pc, #212]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003a2e:	f043 0302 	orr.w	r3, r3, #2
 8003a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a36:	4b33      	ldr	r3, [pc, #204]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	617b      	str	r3, [r7, #20]
 8003a42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SENSOR_3V_14B14_Pin;
 8003a44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8003a56:	2302      	movs	r3, #2
 8003a58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SENSOR_3V_14B14_GPIO_Port, &GPIO_InitStruct);
 8003a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5e:	4619      	mov	r1, r3
 8003a60:	482e      	ldr	r0, [pc, #184]	; (8003b1c <HAL_TIM_MspPostInit+0x1f8>)
 8003a62:	f000 febf 	bl	80047e4 <HAL_GPIO_Init>
}
 8003a66:	e049      	b.n	8003afc <HAL_TIM_MspPostInit+0x1d8>
  else if(htim->Instance==TIM23)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a2c      	ldr	r2, [pc, #176]	; (8003b20 <HAL_TIM_MspPostInit+0x1fc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d11f      	bne.n	8003ab2 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a72:	4b24      	ldr	r3, [pc, #144]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a78:	4a22      	ldr	r2, [pc, #136]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003a7a:	f043 0320 	orr.w	r3, r3, #32
 8003a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SENSOR_3V_2_Pin|SENSOR_3V_1_Pin|SENSOR_3V_3_Pin|SENSOR_3V_15_Pin;
 8003a90:	230f      	movs	r3, #15
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8003aa0:	230d      	movs	r3, #13
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	481e      	ldr	r0, [pc, #120]	; (8003b24 <HAL_TIM_MspPostInit+0x200>)
 8003aac:	f000 fe9a 	bl	80047e4 <HAL_GPIO_Init>
}
 8003ab0:	e024      	b.n	8003afc <HAL_TIM_MspPostInit+0x1d8>
  else if(htim->Instance==TIM24)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <HAL_TIM_MspPostInit+0x204>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d11f      	bne.n	8003afc <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac2:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003ac4:	f043 0320 	orr.w	r3, r3, #32
 8003ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003acc:	4b0d      	ldr	r3, [pc, #52]	; (8003b04 <HAL_TIM_MspPostInit+0x1e0>)
 8003ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_3V_16_Pin|SENSOR_3V_10_Pin|SENSOR_3V_9_Pin|SENSOR_3V_14_Pin;
 8003ada:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8003ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8003aec:	230e      	movs	r3, #14
 8003aee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003af4:	4619      	mov	r1, r3
 8003af6:	480b      	ldr	r0, [pc, #44]	; (8003b24 <HAL_TIM_MspPostInit+0x200>)
 8003af8:	f000 fe74 	bl	80047e4 <HAL_GPIO_Init>
}
 8003afc:	bf00      	nop
 8003afe:	3738      	adds	r7, #56	; 0x38
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	58024400 	.word	0x58024400
 8003b08:	58020000 	.word	0x58020000
 8003b0c:	40000400 	.word	0x40000400
 8003b10:	58020800 	.word	0x58020800
 8003b14:	40010400 	.word	0x40010400
 8003b18:	40001800 	.word	0x40001800
 8003b1c:	58020400 	.word	0x58020400
 8003b20:	4000e000 	.word	0x4000e000
 8003b24:	58021400 	.word	0x58021400
 8003b28:	4000e400 	.word	0x4000e400

08003b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <NMI_Handler+0x4>

08003b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b36:	e7fe      	b.n	8003b36 <HardFault_Handler+0x4>

08003b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <MemManage_Handler+0x4>

08003b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b42:	e7fe      	b.n	8003b42 <BusFault_Handler+0x4>

08003b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <UsageFault_Handler+0x4>

08003b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b66:	b480      	push	{r7}
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b78:	f000 f9a0 	bl	8003ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b84:	4802      	ldr	r0, [pc, #8]	; (8003b90 <TIM1_BRK_IRQHandler+0x10>)
 8003b86:	f003 fdcb 	bl	8007720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	24000334 	.word	0x24000334

08003b94 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b98:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <TIM1_UP_IRQHandler+0x10>)
 8003b9a:	f003 fdc1 	bl	8007720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003b9e:	bf00      	nop
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	24000334 	.word	0x24000334

08003ba8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bac:	4802      	ldr	r0, [pc, #8]	; (8003bb8 <TIM1_TRG_COM_IRQHandler+0x10>)
 8003bae:	f003 fdb7 	bl	8007720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	24000334 	.word	0x24000334

08003bbc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <TIM1_CC_IRQHandler+0x10>)
 8003bc2:	f003 fdad 	bl	8007720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	24000334 	.word	0x24000334

08003bd0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003bd4:	4802      	ldr	r0, [pc, #8]	; (8003be0 <TIM4_IRQHandler+0x10>)
 8003bd6:	f003 fda3 	bl	8007720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	24000418 	.word	0x24000418

08003be4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return 1;
 8003be8:	2301      	movs	r3, #1
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <_kill>:

int _kill(int pid, int sig)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bfe:	f005 fad3 	bl	80091a8 <__errno>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2216      	movs	r2, #22
 8003c06:	601a      	str	r2, [r3, #0]
  return -1;
 8003c08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_exit>:

void _exit (int status)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff ffe7 	bl	8003bf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c26:	e7fe      	b.n	8003c26 <_exit+0x12>

08003c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c30:	4a14      	ldr	r2, [pc, #80]	; (8003c84 <_sbrk+0x5c>)
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <_sbrk+0x60>)
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c3c:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <_sbrk+0x64>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c44:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <_sbrk+0x64>)
 8003c46:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <_sbrk+0x68>)
 8003c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c4a:	4b10      	ldr	r3, [pc, #64]	; (8003c8c <_sbrk+0x64>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d207      	bcs.n	8003c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c58:	f005 faa6 	bl	80091a8 <__errno>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	220c      	movs	r2, #12
 8003c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	e009      	b.n	8003c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c68:	4b08      	ldr	r3, [pc, #32]	; (8003c8c <_sbrk+0x64>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c6e:	4b07      	ldr	r3, [pc, #28]	; (8003c8c <_sbrk+0x64>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <_sbrk+0x64>)
 8003c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	24050000 	.word	0x24050000
 8003c88:	00000400 	.word	0x00000400
 8003c8c:	24000618 	.word	0x24000618
 8003c90:	24000638 	.word	0x24000638

08003c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c98:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <SystemInit+0xd0>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	4a31      	ldr	r2, [pc, #196]	; (8003d64 <SystemInit+0xd0>)
 8003ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ca8:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <SystemInit+0xd4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	2b06      	cmp	r3, #6
 8003cb2:	d807      	bhi.n	8003cc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cb4:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <SystemInit+0xd4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 030f 	bic.w	r3, r3, #15
 8003cbc:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <SystemInit+0xd4>)
 8003cbe:	f043 0307 	orr.w	r3, r3, #7
 8003cc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003cc4:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <SystemInit+0xd8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a28      	ldr	r2, [pc, #160]	; (8003d6c <SystemInit+0xd8>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003cd0:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <SystemInit+0xd8>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <SystemInit+0xd8>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4924      	ldr	r1, [pc, #144]	; (8003d6c <SystemInit+0xd8>)
 8003cdc:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <SystemInit+0xdc>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ce2:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <SystemInit+0xd4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cee:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <SystemInit+0xd4>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f023 030f 	bic.w	r3, r3, #15
 8003cf6:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <SystemInit+0xd4>)
 8003cf8:	f043 0307 	orr.w	r3, r3, #7
 8003cfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003cfe:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <SystemInit+0xd8>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003d04:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <SystemInit+0xd8>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003d0a:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <SystemInit+0xd8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003d10:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <SystemInit+0xd8>)
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <SystemInit+0xe0>)
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003d16:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <SystemInit+0xd8>)
 8003d18:	4a17      	ldr	r2, [pc, #92]	; (8003d78 <SystemInit+0xe4>)
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <SystemInit+0xd8>)
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <SystemInit+0xe8>)
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <SystemInit+0xd8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <SystemInit+0xd8>)
 8003d2a:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <SystemInit+0xe8>)
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <SystemInit+0xd8>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <SystemInit+0xd8>)
 8003d36:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <SystemInit+0xe8>)
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <SystemInit+0xd8>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <SystemInit+0xd8>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <SystemInit+0xd8>)
 8003d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <SystemInit+0xd8>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <SystemInit+0xec>)
 8003d54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d5a:	bf00      	nop
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	52002000 	.word	0x52002000
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d74:	02020200 	.word	0x02020200
 8003d78:	01ff0000 	.word	0x01ff0000
 8003d7c:	01010280 	.word	0x01010280
 8003d80:	52004000 	.word	0x52004000

08003d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d88:	f7ff ff84 	bl	8003c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d8c:	480c      	ldr	r0, [pc, #48]	; (8003dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d8e:	490d      	ldr	r1, [pc, #52]	; (8003dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d90:	4a0d      	ldr	r2, [pc, #52]	; (8003dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d94:	e002      	b.n	8003d9c <LoopCopyDataInit>

08003d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d9a:	3304      	adds	r3, #4

08003d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da0:	d3f9      	bcc.n	8003d96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003da2:	4a0a      	ldr	r2, [pc, #40]	; (8003dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003da4:	4c0a      	ldr	r4, [pc, #40]	; (8003dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003da8:	e001      	b.n	8003dae <LoopFillZerobss>

08003daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003dac:	3204      	adds	r2, #4

08003dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db0:	d3fb      	bcc.n	8003daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003db2:	f005 f9ff 	bl	80091b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003db6:	f7fd fced 	bl	8001794 <main>
  bx  lr
 8003dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003dbc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003dc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003dc4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8003dc8:	08009720 	.word	0x08009720
  ldr r2, =_sbss
 8003dcc:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8003dd0:	24000634 	.word	0x24000634

08003dd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dd4:	e7fe      	b.n	8003dd4 <ADC3_IRQHandler>
	...

08003dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dde:	2003      	movs	r0, #3
 8003de0:	f000 f95c 	bl	800409c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003de4:	f001 fc8a 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <HAL_Init+0x68>)
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	4913      	ldr	r1, [pc, #76]	; (8003e44 <HAL_Init+0x6c>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003e00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_Init+0x68>)
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <HAL_Init+0x6c>)
 8003e0c:	5cd3      	ldrb	r3, [r2, r3]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
 8003e18:	4a0b      	ldr	r2, [pc, #44]	; (8003e48 <HAL_Init+0x70>)
 8003e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e1c:	4a0b      	ldr	r2, [pc, #44]	; (8003e4c <HAL_Init+0x74>)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e22:	2000      	movs	r0, #0
 8003e24:	f000 f814 	bl	8003e50 <HAL_InitTick>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e002      	b.n	8003e38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e32:	f7ff fb7d 	bl	8003530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	58024400 	.word	0x58024400
 8003e44:	080096b4 	.word	0x080096b4
 8003e48:	24000004 	.word	0x24000004
 8003e4c:	24000000 	.word	0x24000000

08003e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e58:	4b15      	ldr	r3, [pc, #84]	; (8003eb0 <HAL_InitTick+0x60>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e021      	b.n	8003ea8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e64:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <HAL_InitTick+0x64>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <HAL_InitTick+0x60>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f941 	bl	8004102 <HAL_SYSTICK_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e00e      	b.n	8003ea8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b0f      	cmp	r3, #15
 8003e8e:	d80a      	bhi.n	8003ea6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e90:	2200      	movs	r2, #0
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	f000 f90b 	bl	80040b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e9c:	4a06      	ldr	r2, [pc, #24]	; (8003eb8 <HAL_InitTick+0x68>)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e000      	b.n	8003ea8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	2400000c 	.word	0x2400000c
 8003eb4:	24000000 	.word	0x24000000
 8003eb8:	24000008 	.word	0x24000008

08003ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_IncTick+0x20>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_IncTick+0x24>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4413      	add	r3, r2
 8003ecc:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <HAL_IncTick+0x24>)
 8003ece:	6013      	str	r3, [r2, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	2400000c 	.word	0x2400000c
 8003ee0:	2400061c 	.word	0x2400061c

08003ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <HAL_GetTick+0x14>)
 8003eea:	681b      	ldr	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	2400061c 	.word	0x2400061c

08003efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <__NVIC_SetPriorityGrouping+0x40>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <__NVIC_SetPriorityGrouping+0x44>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f2a:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <__NVIC_SetPriorityGrouping+0x40>)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	60d3      	str	r3, [r2, #12]
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000ed00 	.word	0xe000ed00
 8003f40:	05fa0000 	.word	0x05fa0000

08003f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <__NVIC_GetPriorityGrouping+0x18>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	0a1b      	lsrs	r3, r3, #8
 8003f4e:	f003 0307 	and.w	r3, r3, #7
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000ed00 	.word	0xe000ed00

08003f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	db0b      	blt.n	8003f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	f003 021f 	and.w	r2, r3, #31
 8003f78:	4907      	ldr	r1, [pc, #28]	; (8003f98 <__NVIC_EnableIRQ+0x38>)
 8003f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	2001      	movs	r0, #1
 8003f82:	fa00 f202 	lsl.w	r2, r0, r2
 8003f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	e000e100 	.word	0xe000e100

08003f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	6039      	str	r1, [r7, #0]
 8003fa6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	db0a      	blt.n	8003fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	490c      	ldr	r1, [pc, #48]	; (8003fe8 <__NVIC_SetPriority+0x4c>)
 8003fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fba:	0112      	lsls	r2, r2, #4
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fc4:	e00a      	b.n	8003fdc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4908      	ldr	r1, [pc, #32]	; (8003fec <__NVIC_SetPriority+0x50>)
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	0112      	lsls	r2, r2, #4
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	440b      	add	r3, r1
 8003fda:	761a      	strb	r2, [r3, #24]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000e100 	.word	0xe000e100
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b089      	sub	sp, #36	; 0x24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f1c3 0307 	rsb	r3, r3, #7
 800400a:	2b04      	cmp	r3, #4
 800400c:	bf28      	it	cs
 800400e:	2304      	movcs	r3, #4
 8004010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3304      	adds	r3, #4
 8004016:	2b06      	cmp	r3, #6
 8004018:	d902      	bls.n	8004020 <NVIC_EncodePriority+0x30>
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	3b03      	subs	r3, #3
 800401e:	e000      	b.n	8004022 <NVIC_EncodePriority+0x32>
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43da      	mvns	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	401a      	ands	r2, r3
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004038:	f04f 31ff 	mov.w	r1, #4294967295
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	fa01 f303 	lsl.w	r3, r1, r3
 8004042:	43d9      	mvns	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004048:	4313      	orrs	r3, r2
         );
}
 800404a:	4618      	mov	r0, r3
 800404c:	3724      	adds	r7, #36	; 0x24
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3b01      	subs	r3, #1
 8004064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004068:	d301      	bcc.n	800406e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800406a:	2301      	movs	r3, #1
 800406c:	e00f      	b.n	800408e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <SysTick_Config+0x40>)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3b01      	subs	r3, #1
 8004074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004076:	210f      	movs	r1, #15
 8004078:	f04f 30ff 	mov.w	r0, #4294967295
 800407c:	f7ff ff8e 	bl	8003f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <SysTick_Config+0x40>)
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004086:	4b04      	ldr	r3, [pc, #16]	; (8004098 <SysTick_Config+0x40>)
 8004088:	2207      	movs	r2, #7
 800408a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	e000e010 	.word	0xe000e010

0800409c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ff29 	bl	8003efc <__NVIC_SetPriorityGrouping>
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	4603      	mov	r3, r0
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
 80040be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040c0:	f7ff ff40 	bl	8003f44 <__NVIC_GetPriorityGrouping>
 80040c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	6978      	ldr	r0, [r7, #20]
 80040cc:	f7ff ff90 	bl	8003ff0 <NVIC_EncodePriority>
 80040d0:	4602      	mov	r2, r0
 80040d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff5f 	bl	8003f9c <__NVIC_SetPriority>
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	4603      	mov	r3, r0
 80040ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff ff33 	bl	8003f60 <__NVIC_EnableIRQ>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ffa4 	bl	8004058 <SysTick_Config>
 8004110:	4603      	mov	r3, r0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b098      	sub	sp, #96	; 0x60
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004124:	4a84      	ldr	r2, [pc, #528]	; (8004338 <HAL_FDCAN_Init+0x21c>)
 8004126:	f107 030c 	add.w	r3, r7, #12
 800412a:	4611      	mov	r1, r2
 800412c:	224c      	movs	r2, #76	; 0x4c
 800412e:	4618      	mov	r0, r3
 8004130:	f005 f874 	bl	800921c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e1c6      	b.n	80044cc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a7e      	ldr	r2, [pc, #504]	; (800433c <HAL_FDCAN_Init+0x220>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d106      	bne.n	8004156 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004150:	461a      	mov	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d106      	bne.n	8004170 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff f9fa 	bl	8003564 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0210 	bic.w	r2, r2, #16
 800417e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004180:	f7ff feb0 	bl	8003ee4 <HAL_GetTick>
 8004184:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004186:	e014      	b.n	80041b2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004188:	f7ff feac 	bl	8003ee4 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b0a      	cmp	r3, #10
 8004194:	d90d      	bls.n	80041b2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800419c:	f043 0201 	orr.w	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2203      	movs	r2, #3
 80041aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e18c      	b.n	80044cc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d0e3      	beq.n	8004188 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041d0:	f7ff fe88 	bl	8003ee4 <HAL_GetTick>
 80041d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041d6:	e014      	b.n	8004202 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041d8:	f7ff fe84 	bl	8003ee4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b0a      	cmp	r3, #10
 80041e4:	d90d      	bls.n	8004202 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ec:	f043 0201 	orr.w	r2, r3, #1
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2203      	movs	r2, #3
 80041fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e164      	b.n	80044cc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0e3      	beq.n	80041d8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0202 	orr.w	r2, r2, #2
 800421e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	7c1b      	ldrb	r3, [r3, #16]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d108      	bne.n	800423a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699a      	ldr	r2, [r3, #24]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004236:	619a      	str	r2, [r3, #24]
 8004238:	e007      	b.n	800424a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004248:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7c5b      	ldrb	r3, [r3, #17]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d108      	bne.n	8004264 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004260:	619a      	str	r2, [r3, #24]
 8004262:	e007      	b.n	8004274 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004272:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7c9b      	ldrb	r3, [r3, #18]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d108      	bne.n	800428e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800428a:	619a      	str	r2, [r3, #24]
 800428c:	e007      	b.n	800429e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800429c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80042c2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0210 	bic.w	r2, r2, #16
 80042d2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d108      	bne.n	80042ee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0204 	orr.w	r2, r2, #4
 80042ea:	619a      	str	r2, [r3, #24]
 80042ec:	e030      	b.n	8004350 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d02c      	beq.n	8004350 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d020      	beq.n	8004340 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800430c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f042 0210 	orr.w	r2, r2, #16
 800431c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b03      	cmp	r3, #3
 8004324:	d114      	bne.n	8004350 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699a      	ldr	r2, [r3, #24]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f042 0220 	orr.w	r2, r2, #32
 8004334:	619a      	str	r2, [r3, #24]
 8004336:	e00b      	b.n	8004350 <HAL_FDCAN_Init+0x234>
 8004338:	08009668 	.word	0x08009668
 800433c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0220 	orr.w	r2, r2, #32
 800434e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	3b01      	subs	r3, #1
 8004356:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	3b01      	subs	r3, #1
 800435e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004360:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004368:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	3b01      	subs	r3, #1
 8004372:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004378:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800437a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004384:	d115      	bne.n	80043b2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	3b01      	subs	r3, #1
 8004392:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004394:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	3b01      	subs	r3, #1
 800439c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800439e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	3b01      	subs	r3, #1
 80043a8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80043ae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80043b0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d8:	4413      	add	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d011      	beq.n	8004402 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80043e6:	f023 0107 	bic.w	r1, r3, #7
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	3360      	adds	r3, #96	; 0x60
 80043f2:	443b      	add	r3, r7
 80043f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d011      	beq.n	800442e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004412:	f023 0107 	bic.w	r1, r3, #7
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	3360      	adds	r3, #96	; 0x60
 800441e:	443b      	add	r3, r7
 8004420:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004432:	2b00      	cmp	r3, #0
 8004434:	d012      	beq.n	800445c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800443e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	3360      	adds	r3, #96	; 0x60
 800444a:	443b      	add	r3, r7
 800444c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004450:	011a      	lsls	r2, r3, #4
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	2b00      	cmp	r3, #0
 8004462:	d012      	beq.n	800448a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800446c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	3360      	adds	r3, #96	; 0x60
 8004478:	443b      	add	r3, r7
 800447a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a11      	ldr	r2, [pc, #68]	; (80044d4 <HAL_FDCAN_Init+0x3b8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d107      	bne.n	80044a4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f022 0203 	bic.w	r2, r2, #3
 80044a2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f80b 	bl	80044d8 <FDCAN_CalcultateRamBlockAddresses>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80044c8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3760      	adds	r7, #96	; 0x60
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	4000a000 	.word	0x4000a000

080044d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80044ee:	4ba7      	ldr	r3, [pc, #668]	; (800478c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	0091      	lsls	r1, r2, #2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	430b      	orrs	r3, r1
 80044fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004508:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	041a      	lsls	r2, r3, #16
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	4413      	add	r3, r2
 8004524:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800452e:	4b97      	ldr	r3, [pc, #604]	; (800478c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004530:	4013      	ands	r3, r2
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0091      	lsls	r1, r2, #2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	430b      	orrs	r3, r1
 800453c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	041a      	lsls	r2, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	4413      	add	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004570:	4b86      	ldr	r3, [pc, #536]	; (800478c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004572:	4013      	ands	r3, r2
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	0091      	lsls	r1, r2, #2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6812      	ldr	r2, [r2, #0]
 800457c:	430b      	orrs	r3, r1
 800457e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800458a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	041a      	lsls	r2, r3, #16
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	4413      	add	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80045b8:	4b74      	ldr	r3, [pc, #464]	; (800478c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	0091      	lsls	r1, r2, #2
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	430b      	orrs	r3, r1
 80045c6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045d2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045da:	041a      	lsls	r2, r3, #16
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	4413      	add	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004600:	4b62      	ldr	r3, [pc, #392]	; (800478c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004602:	4013      	ands	r3, r2
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	0091      	lsls	r1, r2, #2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	430b      	orrs	r3, r1
 800460e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4413      	add	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800462c:	4b57      	ldr	r3, [pc, #348]	; (800478c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800462e:	4013      	ands	r3, r2
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	0091      	lsls	r1, r2, #2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	430b      	orrs	r3, r1
 800463a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004646:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	041a      	lsls	r2, r3, #16
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	4413      	add	r3, r2
 8004664:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800466e:	4b47      	ldr	r3, [pc, #284]	; (800478c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004670:	4013      	ands	r3, r2
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	0091      	lsls	r1, r2, #2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	430b      	orrs	r3, r1
 800467c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004688:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	041a      	lsls	r2, r3, #16
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80046a4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ac:	061a      	lsls	r2, r3, #24
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046bc:	4b34      	ldr	r3, [pc, #208]	; (8004790 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80046be:	4413      	add	r3, r2
 80046c0:	009a      	lsls	r2, r3, #2
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	441a      	add	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80046f2:	fb01 f303 	mul.w	r3, r1, r3
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800470a:	fb01 f303 	mul.w	r3, r1, r3
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	441a      	add	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8004722:	fb01 f303 	mul.w	r3, r1, r3
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	441a      	add	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8004752:	fb01 f303 	mul.w	r3, r1, r3
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	4a04      	ldr	r2, [pc, #16]	; (8004794 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d915      	bls.n	80047b4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004788:	e006      	b.n	8004798 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800478a:	bf00      	nop
 800478c:	ffff0003 	.word	0xffff0003
 8004790:	10002b00 	.word	0x10002b00
 8004794:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800479e:	f043 0220 	orr.w	r2, r3, #32
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2203      	movs	r2, #3
 80047ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e010      	b.n	80047d6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e005      	b.n	80047c8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3304      	adds	r3, #4
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d3f3      	bcc.n	80047bc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop

080047e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b089      	sub	sp, #36	; 0x24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047f2:	4b86      	ldr	r3, [pc, #536]	; (8004a0c <HAL_GPIO_Init+0x228>)
 80047f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047f6:	e18c      	b.n	8004b12 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	4013      	ands	r3, r2
 8004806:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 817e 	beq.w	8004b0c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d005      	beq.n	8004828 <HAL_GPIO_Init+0x44>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d130      	bne.n	800488a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4313      	orrs	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800485e:	2201      	movs	r2, #1
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0201 	and.w	r2, r3, #1
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4313      	orrs	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b03      	cmp	r3, #3
 8004894:	d017      	beq.n	80048c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	2203      	movs	r2, #3
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	4013      	ands	r3, r2
 80048ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d123      	bne.n	800491a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	08da      	lsrs	r2, r3, #3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3208      	adds	r2, #8
 80048da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	08da      	lsrs	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3208      	adds	r2, #8
 8004914:	69b9      	ldr	r1, [r7, #24]
 8004916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	2203      	movs	r2, #3
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4313      	orrs	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 80d8 	beq.w	8004b0c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800495c:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <HAL_GPIO_Init+0x22c>)
 800495e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004962:	4a2b      	ldr	r2, [pc, #172]	; (8004a10 <HAL_GPIO_Init+0x22c>)
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800496c:	4b28      	ldr	r3, [pc, #160]	; (8004a10 <HAL_GPIO_Init+0x22c>)
 800496e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800497a:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <HAL_GPIO_Init+0x230>)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	220f      	movs	r2, #15
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1d      	ldr	r2, [pc, #116]	; (8004a18 <HAL_GPIO_Init+0x234>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d04a      	beq.n	8004a3c <HAL_GPIO_Init+0x258>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <HAL_GPIO_Init+0x238>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d02b      	beq.n	8004a06 <HAL_GPIO_Init+0x222>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <HAL_GPIO_Init+0x23c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d025      	beq.n	8004a02 <HAL_GPIO_Init+0x21e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <HAL_GPIO_Init+0x240>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d01f      	beq.n	80049fe <HAL_GPIO_Init+0x21a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_GPIO_Init+0x244>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d019      	beq.n	80049fa <HAL_GPIO_Init+0x216>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_GPIO_Init+0x248>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <HAL_GPIO_Init+0x212>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a17      	ldr	r2, [pc, #92]	; (8004a30 <HAL_GPIO_Init+0x24c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00d      	beq.n	80049f2 <HAL_GPIO_Init+0x20e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a16      	ldr	r2, [pc, #88]	; (8004a34 <HAL_GPIO_Init+0x250>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d007      	beq.n	80049ee <HAL_GPIO_Init+0x20a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <HAL_GPIO_Init+0x254>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <HAL_GPIO_Init+0x206>
 80049e6:	2309      	movs	r3, #9
 80049e8:	e029      	b.n	8004a3e <HAL_GPIO_Init+0x25a>
 80049ea:	230a      	movs	r3, #10
 80049ec:	e027      	b.n	8004a3e <HAL_GPIO_Init+0x25a>
 80049ee:	2307      	movs	r3, #7
 80049f0:	e025      	b.n	8004a3e <HAL_GPIO_Init+0x25a>
 80049f2:	2306      	movs	r3, #6
 80049f4:	e023      	b.n	8004a3e <HAL_GPIO_Init+0x25a>
 80049f6:	2305      	movs	r3, #5
 80049f8:	e021      	b.n	8004a3e <HAL_GPIO_Init+0x25a>
 80049fa:	2304      	movs	r3, #4
 80049fc:	e01f      	b.n	8004a3e <HAL_GPIO_Init+0x25a>
 80049fe:	2303      	movs	r3, #3
 8004a00:	e01d      	b.n	8004a3e <HAL_GPIO_Init+0x25a>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e01b      	b.n	8004a3e <HAL_GPIO_Init+0x25a>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e019      	b.n	8004a3e <HAL_GPIO_Init+0x25a>
 8004a0a:	bf00      	nop
 8004a0c:	58000080 	.word	0x58000080
 8004a10:	58024400 	.word	0x58024400
 8004a14:	58000400 	.word	0x58000400
 8004a18:	58020000 	.word	0x58020000
 8004a1c:	58020400 	.word	0x58020400
 8004a20:	58020800 	.word	0x58020800
 8004a24:	58020c00 	.word	0x58020c00
 8004a28:	58021000 	.word	0x58021000
 8004a2c:	58021400 	.word	0x58021400
 8004a30:	58021800 	.word	0x58021800
 8004a34:	58021c00 	.word	0x58021c00
 8004a38:	58022400 	.word	0x58022400
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	69fa      	ldr	r2, [r7, #28]
 8004a40:	f002 0203 	and.w	r2, r2, #3
 8004a44:	0092      	lsls	r2, r2, #2
 8004a46:	4093      	lsls	r3, r2
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a4e:	4938      	ldr	r1, [pc, #224]	; (8004b30 <HAL_GPIO_Init+0x34c>)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	089b      	lsrs	r3, r3, #2
 8004a54:	3302      	adds	r3, #2
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	43db      	mvns	r3, r3
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d003      	beq.n	8004adc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	43db      	mvns	r3, r3
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4013      	ands	r3, r2
 8004af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f47f ae6b 	bne.w	80047f8 <HAL_GPIO_Init+0x14>
  }
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	3724      	adds	r7, #36	; 0x24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	58000400 	.word	0x58000400

08004b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	807b      	strh	r3, [r7, #2]
 8004b40:	4613      	mov	r3, r2
 8004b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b44:	787b      	ldrb	r3, [r7, #1]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b50:	e003      	b.n	8004b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b52:	887b      	ldrh	r3, [r7, #2]
 8004b54:	041a      	lsls	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	619a      	str	r2, [r3, #24]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004b70:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d00a      	beq.n	8004b92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004b7c:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d001      	beq.n	8004b8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e01f      	b.n	8004bce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e01d      	b.n	8004bce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004b92:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f023 0207 	bic.w	r2, r3, #7
 8004b9a:	490f      	ldr	r1, [pc, #60]	; (8004bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ba2:	f7ff f99f 	bl	8003ee4 <HAL_GetTick>
 8004ba6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ba8:	e009      	b.n	8004bbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004baa:	f7ff f99b 	bl	8003ee4 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb8:	d901      	bls.n	8004bbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e007      	b.n	8004bce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004bbe:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bca:	d1ee      	bne.n	8004baa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	58024800 	.word	0x58024800

08004bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	; 0x30
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e3c8      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8087 	beq.w	8004d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bfc:	4b88      	ldr	r3, [pc, #544]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c06:	4b86      	ldr	r3, [pc, #536]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	2b10      	cmp	r3, #16
 8004c10:	d007      	beq.n	8004c22 <HAL_RCC_OscConfig+0x46>
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	2b18      	cmp	r3, #24
 8004c16:	d110      	bne.n	8004c3a <HAL_RCC_OscConfig+0x5e>
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d10b      	bne.n	8004c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c22:	4b7f      	ldr	r3, [pc, #508]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d06c      	beq.n	8004d08 <HAL_RCC_OscConfig+0x12c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d168      	bne.n	8004d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e3a2      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c42:	d106      	bne.n	8004c52 <HAL_RCC_OscConfig+0x76>
 8004c44:	4b76      	ldr	r3, [pc, #472]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a75      	ldr	r2, [pc, #468]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e02e      	b.n	8004cb0 <HAL_RCC_OscConfig+0xd4>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x98>
 8004c5a:	4b71      	ldr	r3, [pc, #452]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a70      	ldr	r2, [pc, #448]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4b6e      	ldr	r3, [pc, #440]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a6d      	ldr	r2, [pc, #436]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e01d      	b.n	8004cb0 <HAL_RCC_OscConfig+0xd4>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0xbc>
 8004c7e:	4b68      	ldr	r3, [pc, #416]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a67      	ldr	r2, [pc, #412]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4b65      	ldr	r3, [pc, #404]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a64      	ldr	r2, [pc, #400]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	e00b      	b.n	8004cb0 <HAL_RCC_OscConfig+0xd4>
 8004c98:	4b61      	ldr	r3, [pc, #388]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a60      	ldr	r2, [pc, #384]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	4b5e      	ldr	r3, [pc, #376]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a5d      	ldr	r2, [pc, #372]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d013      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7ff f914 	bl	8003ee4 <HAL_GetTick>
 8004cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc0:	f7ff f910 	bl	8003ee4 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b64      	cmp	r3, #100	; 0x64
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e356      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004cd2:	4b53      	ldr	r3, [pc, #332]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0xe4>
 8004cde:	e014      	b.n	8004d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7ff f900 	bl	8003ee4 <HAL_GetTick>
 8004ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7ff f8fc 	bl	8003ee4 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b64      	cmp	r3, #100	; 0x64
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e342      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004cfa:	4b49      	ldr	r3, [pc, #292]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x10c>
 8004d06:	e000      	b.n	8004d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 808c 	beq.w	8004e30 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d18:	4b41      	ldr	r3, [pc, #260]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004d22:	4b3f      	ldr	r3, [pc, #252]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <HAL_RCC_OscConfig+0x162>
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	2b18      	cmp	r3, #24
 8004d32:	d137      	bne.n	8004da4 <HAL_RCC_OscConfig+0x1c8>
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d132      	bne.n	8004da4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d3e:	4b38      	ldr	r3, [pc, #224]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_RCC_OscConfig+0x17a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e314      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d56:	4b32      	ldr	r3, [pc, #200]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 0219 	bic.w	r2, r3, #25
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	492f      	ldr	r1, [pc, #188]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7ff f8bc 	bl	8003ee4 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d70:	f7ff f8b8 	bl	8003ee4 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e2fe      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d82:	4b27      	ldr	r3, [pc, #156]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f0      	beq.n	8004d70 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	061b      	lsls	r3, r3, #24
 8004d9c:	4920      	ldr	r1, [pc, #128]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004da2:	e045      	b.n	8004e30 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d026      	beq.n	8004dfa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004dac:	4b1c      	ldr	r3, [pc, #112]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f023 0219 	bic.w	r2, r3, #25
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4919      	ldr	r1, [pc, #100]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7ff f891 	bl	8003ee4 <HAL_GetTick>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc6:	f7ff f88d 	bl	8003ee4 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e2d3      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dd8:	4b11      	ldr	r3, [pc, #68]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f0      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de4:	4b0e      	ldr	r3, [pc, #56]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	061b      	lsls	r3, r3, #24
 8004df2:	490b      	ldr	r1, [pc, #44]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	604b      	str	r3, [r1, #4]
 8004df8:	e01a      	b.n	8004e30 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dfa:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a08      	ldr	r2, [pc, #32]	; (8004e20 <HAL_RCC_OscConfig+0x244>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e06:	f7ff f86d 	bl	8003ee4 <HAL_GetTick>
 8004e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0e:	f7ff f869 	bl	8003ee4 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d903      	bls.n	8004e24 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e2af      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
 8004e20:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e24:	4b96      	ldr	r3, [pc, #600]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ee      	bne.n	8004e0e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0310 	and.w	r3, r3, #16
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d06a      	beq.n	8004f12 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e3c:	4b90      	ldr	r3, [pc, #576]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e44:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e46:	4b8e      	ldr	r3, [pc, #568]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d007      	beq.n	8004e62 <HAL_RCC_OscConfig+0x286>
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b18      	cmp	r3, #24
 8004e56:	d11b      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2b4>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d116      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e62:	4b87      	ldr	r3, [pc, #540]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_RCC_OscConfig+0x29e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d001      	beq.n	8004e7a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e282      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004e7a:	4b81      	ldr	r3, [pc, #516]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	061b      	lsls	r3, r3, #24
 8004e88:	497d      	ldr	r1, [pc, #500]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e8e:	e040      	b.n	8004f12 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d023      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004e98:	4b79      	ldr	r3, [pc, #484]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a78      	ldr	r2, [pc, #480]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7ff f81e 	bl	8003ee4 <HAL_GetTick>
 8004ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004eac:	f7ff f81a 	bl	8003ee4 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e260      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ebe:	4b70      	ldr	r3, [pc, #448]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004eca:	4b6d      	ldr	r3, [pc, #436]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	061b      	lsls	r3, r3, #24
 8004ed8:	4969      	ldr	r1, [pc, #420]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60cb      	str	r3, [r1, #12]
 8004ede:	e018      	b.n	8004f12 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ee0:	4b67      	ldr	r3, [pc, #412]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a66      	ldr	r2, [pc, #408]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fe fffa 	bl	8003ee4 <HAL_GetTick>
 8004ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ef4:	f7fe fff6 	bl	8003ee4 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e23c      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f06:	4b5e      	ldr	r3, [pc, #376]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d036      	beq.n	8004f8c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d019      	beq.n	8004f5a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f26:	4b56      	ldr	r3, [pc, #344]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2a:	4a55      	ldr	r2, [pc, #340]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f32:	f7fe ffd7 	bl	8003ee4 <HAL_GetTick>
 8004f36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f3a:	f7fe ffd3 	bl	8003ee4 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e219      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f4c:	4b4c      	ldr	r3, [pc, #304]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <HAL_RCC_OscConfig+0x35e>
 8004f58:	e018      	b.n	8004f8c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f5a:	4b49      	ldr	r3, [pc, #292]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f5e:	4a48      	ldr	r2, [pc, #288]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f66:	f7fe ffbd 	bl	8003ee4 <HAL_GetTick>
 8004f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7fe ffb9 	bl	8003ee4 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e1ff      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f80:	4b3f      	ldr	r3, [pc, #252]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d036      	beq.n	8005006 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d019      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fa0:	4b37      	ldr	r3, [pc, #220]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a36      	ldr	r2, [pc, #216]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004fa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004faa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fac:	f7fe ff9a 	bl	8003ee4 <HAL_GetTick>
 8004fb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fb4:	f7fe ff96 	bl	8003ee4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e1dc      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x3d8>
 8004fd2:	e018      	b.n	8005006 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fd4:	4b2a      	ldr	r3, [pc, #168]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a29      	ldr	r2, [pc, #164]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004fe0:	f7fe ff80 	bl	8003ee4 <HAL_GetTick>
 8004fe4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fe8:	f7fe ff7c 	bl	8003ee4 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e1c2      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ffa:	4b21      	ldr	r3, [pc, #132]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8086 	beq.w	8005120 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <HAL_RCC_OscConfig+0x4a8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <HAL_RCC_OscConfig+0x4a8>)
 800501a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005020:	f7fe ff60 	bl	8003ee4 <HAL_GetTick>
 8005024:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005028:	f7fe ff5c 	bl	8003ee4 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e1a2      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800503a:	4b12      	ldr	r3, [pc, #72]	; (8005084 <HAL_RCC_OscConfig+0x4a8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d106      	bne.n	800505c <HAL_RCC_OscConfig+0x480>
 800504e:	4b0c      	ldr	r3, [pc, #48]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8005050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005052:	4a0b      	ldr	r2, [pc, #44]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	6713      	str	r3, [r2, #112]	; 0x70
 800505a:	e032      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d111      	bne.n	8005088 <HAL_RCC_OscConfig+0x4ac>
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8005066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005068:	4a05      	ldr	r2, [pc, #20]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 800506a:	f023 0301 	bic.w	r3, r3, #1
 800506e:	6713      	str	r3, [r2, #112]	; 0x70
 8005070:	4b03      	ldr	r3, [pc, #12]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005074:	4a02      	ldr	r2, [pc, #8]	; (8005080 <HAL_RCC_OscConfig+0x4a4>)
 8005076:	f023 0304 	bic.w	r3, r3, #4
 800507a:	6713      	str	r3, [r2, #112]	; 0x70
 800507c:	e021      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e6>
 800507e:	bf00      	nop
 8005080:	58024400 	.word	0x58024400
 8005084:	58024800 	.word	0x58024800
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b05      	cmp	r3, #5
 800508e:	d10c      	bne.n	80050aa <HAL_RCC_OscConfig+0x4ce>
 8005090:	4b83      	ldr	r3, [pc, #524]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	4a82      	ldr	r2, [pc, #520]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005096:	f043 0304 	orr.w	r3, r3, #4
 800509a:	6713      	str	r3, [r2, #112]	; 0x70
 800509c:	4b80      	ldr	r3, [pc, #512]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800509e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a0:	4a7f      	ldr	r2, [pc, #508]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6713      	str	r3, [r2, #112]	; 0x70
 80050a8:	e00b      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e6>
 80050aa:	4b7d      	ldr	r3, [pc, #500]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	4a7c      	ldr	r2, [pc, #496]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	6713      	str	r3, [r2, #112]	; 0x70
 80050b6:	4b7a      	ldr	r3, [pc, #488]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	4a79      	ldr	r2, [pc, #484]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050bc:	f023 0304 	bic.w	r3, r3, #4
 80050c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d015      	beq.n	80050f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fe ff0b 	bl	8003ee4 <HAL_GetTick>
 80050ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050d0:	e00a      	b.n	80050e8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d2:	f7fe ff07 	bl	8003ee4 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e14b      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050e8:	4b6d      	ldr	r3, [pc, #436]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0ee      	beq.n	80050d2 <HAL_RCC_OscConfig+0x4f6>
 80050f4:	e014      	b.n	8005120 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f6:	f7fe fef5 	bl	8003ee4 <HAL_GetTick>
 80050fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050fc:	e00a      	b.n	8005114 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050fe:	f7fe fef1 	bl	8003ee4 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e135      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005114:	4b62      	ldr	r3, [pc, #392]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1ee      	bne.n	80050fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 812a 	beq.w	800537e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800512a:	4b5d      	ldr	r3, [pc, #372]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005132:	2b18      	cmp	r3, #24
 8005134:	f000 80ba 	beq.w	80052ac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	2b02      	cmp	r3, #2
 800513e:	f040 8095 	bne.w	800526c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b57      	ldr	r3, [pc, #348]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a56      	ldr	r2, [pc, #344]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005148:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800514c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fe fec9 	bl	8003ee4 <HAL_GetTick>
 8005152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005156:	f7fe fec5 	bl	8003ee4 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e10b      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005168:	4b4d      	ldr	r3, [pc, #308]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005174:	4b4a      	ldr	r3, [pc, #296]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005176:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005178:	4b4a      	ldr	r3, [pc, #296]	; (80052a4 <HAL_RCC_OscConfig+0x6c8>)
 800517a:	4013      	ands	r3, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	430a      	orrs	r2, r1
 8005188:	4945      	ldr	r1, [pc, #276]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	628b      	str	r3, [r1, #40]	; 0x28
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	3b01      	subs	r3, #1
 8005194:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	3b01      	subs	r3, #1
 800519e:	025b      	lsls	r3, r3, #9
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	3b01      	subs	r3, #1
 80051aa:	041b      	lsls	r3, r3, #16
 80051ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	3b01      	subs	r3, #1
 80051b8:	061b      	lsls	r3, r3, #24
 80051ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80051be:	4938      	ldr	r1, [pc, #224]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80051c4:	4b36      	ldr	r3, [pc, #216]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	4a35      	ldr	r2, [pc, #212]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051ca:	f023 0301 	bic.w	r3, r3, #1
 80051ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051d0:	4b33      	ldr	r3, [pc, #204]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051d4:	4b34      	ldr	r3, [pc, #208]	; (80052a8 <HAL_RCC_OscConfig+0x6cc>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80051dc:	00d2      	lsls	r2, r2, #3
 80051de:	4930      	ldr	r1, [pc, #192]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80051e4:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	f023 020c 	bic.w	r2, r3, #12
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	492b      	ldr	r1, [pc, #172]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80051f6:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 80051f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fa:	f023 0202 	bic.w	r2, r3, #2
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	4927      	ldr	r1, [pc, #156]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005204:	4313      	orrs	r3, r2
 8005206:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005208:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	4a24      	ldr	r2, [pc, #144]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800520e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005212:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005214:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	4a21      	ldr	r2, [pc, #132]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800521a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800521e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005220:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	4a1e      	ldr	r2, [pc, #120]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005226:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800522a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4a1b      	ldr	r2, [pc, #108]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005238:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800523e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fe fe4e 	bl	8003ee4 <HAL_GetTick>
 8005248:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fe fe4a 	bl	8003ee4 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e090      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800525e:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0f0      	beq.n	800524c <HAL_RCC_OscConfig+0x670>
 800526a:	e088      	b.n	800537e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fe fe34 	bl	8003ee4 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fe fe30 	bl	8003ee4 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e076      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005292:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <HAL_RCC_OscConfig+0x6c4>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x6a4>
 800529e:	e06e      	b.n	800537e <HAL_RCC_OscConfig+0x7a2>
 80052a0:	58024400 	.word	0x58024400
 80052a4:	fffffc0c 	.word	0xfffffc0c
 80052a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80052ac:	4b36      	ldr	r3, [pc, #216]	; (8005388 <HAL_RCC_OscConfig+0x7ac>)
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80052b2:	4b35      	ldr	r3, [pc, #212]	; (8005388 <HAL_RCC_OscConfig+0x7ac>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d031      	beq.n	8005324 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f003 0203 	and.w	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d12a      	bne.n	8005324 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d122      	bne.n	8005324 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d11a      	bne.n	8005324 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	0a5b      	lsrs	r3, r3, #9
 80052f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d111      	bne.n	8005324 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	0c1b      	lsrs	r3, r3, #16
 8005304:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d108      	bne.n	8005324 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	0e1b      	lsrs	r3, r3, #24
 8005316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e02b      	b.n	8005380 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005328:	4b17      	ldr	r3, [pc, #92]	; (8005388 <HAL_RCC_OscConfig+0x7ac>)
 800532a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005332:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	429a      	cmp	r2, r3
 800533c:	d01f      	beq.n	800537e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_RCC_OscConfig+0x7ac>)
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	4a11      	ldr	r2, [pc, #68]	; (8005388 <HAL_RCC_OscConfig+0x7ac>)
 8005344:	f023 0301 	bic.w	r3, r3, #1
 8005348:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800534a:	f7fe fdcb 	bl	8003ee4 <HAL_GetTick>
 800534e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005350:	bf00      	nop
 8005352:	f7fe fdc7 	bl	8003ee4 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535a:	4293      	cmp	r3, r2
 800535c:	d0f9      	beq.n	8005352 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800535e:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <HAL_RCC_OscConfig+0x7ac>)
 8005360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <HAL_RCC_OscConfig+0x7b0>)
 8005364:	4013      	ands	r3, r2
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800536a:	00d2      	lsls	r2, r2, #3
 800536c:	4906      	ldr	r1, [pc, #24]	; (8005388 <HAL_RCC_OscConfig+0x7ac>)
 800536e:	4313      	orrs	r3, r2
 8005370:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005372:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_RCC_OscConfig+0x7ac>)
 8005374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005376:	4a04      	ldr	r2, [pc, #16]	; (8005388 <HAL_RCC_OscConfig+0x7ac>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3730      	adds	r7, #48	; 0x30
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	58024400 	.word	0x58024400
 800538c:	ffff0007 	.word	0xffff0007

08005390 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e19c      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053a4:	4b8a      	ldr	r3, [pc, #552]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d910      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b2:	4b87      	ldr	r3, [pc, #540]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 020f 	bic.w	r2, r3, #15
 80053ba:	4985      	ldr	r1, [pc, #532]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	4313      	orrs	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b83      	ldr	r3, [pc, #524]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e184      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d010      	beq.n	8005402 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	4b7b      	ldr	r3, [pc, #492]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d908      	bls.n	8005402 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053f0:	4b78      	ldr	r3, [pc, #480]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	4975      	ldr	r1, [pc, #468]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d010      	beq.n	8005430 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	4b70      	ldr	r3, [pc, #448]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800541a:	429a      	cmp	r2, r3
 800541c:	d908      	bls.n	8005430 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800541e:	4b6d      	ldr	r3, [pc, #436]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	496a      	ldr	r1, [pc, #424]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800542c:	4313      	orrs	r3, r2
 800542e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	d010      	beq.n	800545e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699a      	ldr	r2, [r3, #24]
 8005440:	4b64      	ldr	r3, [pc, #400]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005448:	429a      	cmp	r2, r3
 800544a:	d908      	bls.n	800545e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800544c:	4b61      	ldr	r3, [pc, #388]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	495e      	ldr	r1, [pc, #376]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800545a:	4313      	orrs	r3, r2
 800545c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	d010      	beq.n	800548c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005476:	429a      	cmp	r2, r3
 8005478:	d908      	bls.n	800548c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800547a:	4b56      	ldr	r3, [pc, #344]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	4953      	ldr	r1, [pc, #332]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005488:	4313      	orrs	r3, r2
 800548a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d010      	beq.n	80054ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	4b4d      	ldr	r3, [pc, #308]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d908      	bls.n	80054ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b4a      	ldr	r3, [pc, #296]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f023 020f 	bic.w	r2, r3, #15
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4947      	ldr	r1, [pc, #284]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d055      	beq.n	8005572 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80054c6:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	4940      	ldr	r1, [pc, #256]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d107      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054e0:	4b3c      	ldr	r3, [pc, #240]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d121      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0f6      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d107      	bne.n	8005508 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054f8:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d115      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e0ea      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d107      	bne.n	8005520 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005510:	4b30      	ldr	r3, [pc, #192]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0de      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005520:	4b2c      	ldr	r3, [pc, #176]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0d6      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005530:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	f023 0207 	bic.w	r2, r3, #7
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	4925      	ldr	r1, [pc, #148]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800553e:	4313      	orrs	r3, r2
 8005540:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005542:	f7fe fccf 	bl	8003ee4 <HAL_GetTick>
 8005546:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005548:	e00a      	b.n	8005560 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554a:	f7fe fccb 	bl	8003ee4 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	f241 3288 	movw	r2, #5000	; 0x1388
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e0be      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005560:	4b1c      	ldr	r3, [pc, #112]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	429a      	cmp	r2, r3
 8005570:	d1eb      	bne.n	800554a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d010      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	429a      	cmp	r2, r3
 800558c:	d208      	bcs.n	80055a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800558e:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	f023 020f 	bic.w	r2, r3, #15
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	490e      	ldr	r1, [pc, #56]	; (80055d4 <HAL_RCC_ClockConfig+0x244>)
 800559c:	4313      	orrs	r3, r2
 800559e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 030f 	and.w	r3, r3, #15
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d214      	bcs.n	80055d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ae:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f023 020f 	bic.w	r2, r3, #15
 80055b6:	4906      	ldr	r1, [pc, #24]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055be:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <HAL_RCC_ClockConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d005      	beq.n	80055d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e086      	b.n	80056de <HAL_RCC_ClockConfig+0x34e>
 80055d0:	52002000 	.word	0x52002000
 80055d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d010      	beq.n	8005606 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	4b3f      	ldr	r3, [pc, #252]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d208      	bcs.n	8005606 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80055f4:	4b3c      	ldr	r3, [pc, #240]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	4939      	ldr	r1, [pc, #228]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005602:	4313      	orrs	r3, r2
 8005604:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d010      	beq.n	8005634 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	695a      	ldr	r2, [r3, #20]
 8005616:	4b34      	ldr	r3, [pc, #208]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800561e:	429a      	cmp	r2, r3
 8005620:	d208      	bcs.n	8005634 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005622:	4b31      	ldr	r3, [pc, #196]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	492e      	ldr	r1, [pc, #184]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005630:	4313      	orrs	r3, r2
 8005632:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0310 	and.w	r3, r3, #16
 800563c:	2b00      	cmp	r3, #0
 800563e:	d010      	beq.n	8005662 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	4b28      	ldr	r3, [pc, #160]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800564c:	429a      	cmp	r2, r3
 800564e:	d208      	bcs.n	8005662 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005650:	4b25      	ldr	r3, [pc, #148]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005652:	69db      	ldr	r3, [r3, #28]
 8005654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	4922      	ldr	r1, [pc, #136]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 800565e:	4313      	orrs	r3, r2
 8005660:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d010      	beq.n	8005690 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800567a:	429a      	cmp	r2, r3
 800567c:	d208      	bcs.n	8005690 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	4917      	ldr	r1, [pc, #92]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 800568c:	4313      	orrs	r3, r2
 800568e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005690:	f000 f834 	bl	80056fc <HAL_RCC_GetSysClockFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	0a1b      	lsrs	r3, r3, #8
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	4912      	ldr	r1, [pc, #72]	; (80056ec <HAL_RCC_ClockConfig+0x35c>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
 80056ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <HAL_RCC_ClockConfig+0x358>)
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	4a0d      	ldr	r2, [pc, #52]	; (80056ec <HAL_RCC_ClockConfig+0x35c>)
 80056b8:	5cd3      	ldrb	r3, [r2, r3]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
 80056c4:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <HAL_RCC_ClockConfig+0x360>)
 80056c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056c8:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <HAL_RCC_ClockConfig+0x364>)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80056ce:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <HAL_RCC_ClockConfig+0x368>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fe fbbc 	bl	8003e50 <HAL_InitTick>
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	58024400 	.word	0x58024400
 80056ec:	080096b4 	.word	0x080096b4
 80056f0:	24000004 	.word	0x24000004
 80056f4:	24000000 	.word	0x24000000
 80056f8:	24000008 	.word	0x24000008

080056fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b089      	sub	sp, #36	; 0x24
 8005700:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005702:	4bb3      	ldr	r3, [pc, #716]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800570a:	2b18      	cmp	r3, #24
 800570c:	f200 8155 	bhi.w	80059ba <HAL_RCC_GetSysClockFreq+0x2be>
 8005710:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	0800577d 	.word	0x0800577d
 800571c:	080059bb 	.word	0x080059bb
 8005720:	080059bb 	.word	0x080059bb
 8005724:	080059bb 	.word	0x080059bb
 8005728:	080059bb 	.word	0x080059bb
 800572c:	080059bb 	.word	0x080059bb
 8005730:	080059bb 	.word	0x080059bb
 8005734:	080059bb 	.word	0x080059bb
 8005738:	080057a3 	.word	0x080057a3
 800573c:	080059bb 	.word	0x080059bb
 8005740:	080059bb 	.word	0x080059bb
 8005744:	080059bb 	.word	0x080059bb
 8005748:	080059bb 	.word	0x080059bb
 800574c:	080059bb 	.word	0x080059bb
 8005750:	080059bb 	.word	0x080059bb
 8005754:	080059bb 	.word	0x080059bb
 8005758:	080057a9 	.word	0x080057a9
 800575c:	080059bb 	.word	0x080059bb
 8005760:	080059bb 	.word	0x080059bb
 8005764:	080059bb 	.word	0x080059bb
 8005768:	080059bb 	.word	0x080059bb
 800576c:	080059bb 	.word	0x080059bb
 8005770:	080059bb 	.word	0x080059bb
 8005774:	080059bb 	.word	0x080059bb
 8005778:	080057af 	.word	0x080057af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800577c:	4b94      	ldr	r3, [pc, #592]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b00      	cmp	r3, #0
 8005786:	d009      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005788:	4b91      	ldr	r3, [pc, #580]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	08db      	lsrs	r3, r3, #3
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	4a90      	ldr	r2, [pc, #576]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
 8005798:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800579a:	e111      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800579c:	4b8d      	ldr	r3, [pc, #564]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800579e:	61bb      	str	r3, [r7, #24]
      break;
 80057a0:	e10e      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80057a2:	4b8d      	ldr	r3, [pc, #564]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057a4:	61bb      	str	r3, [r7, #24]
      break;
 80057a6:	e10b      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80057a8:	4b8c      	ldr	r3, [pc, #560]	; (80059dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057aa:	61bb      	str	r3, [r7, #24]
      break;
 80057ac:	e108      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80057ae:	4b88      	ldr	r3, [pc, #544]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80057b8:	4b85      	ldr	r3, [pc, #532]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	091b      	lsrs	r3, r3, #4
 80057be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80057c4:	4b82      	ldr	r3, [pc, #520]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80057ce:	4b80      	ldr	r3, [pc, #512]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	08db      	lsrs	r3, r3, #3
 80057d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80e1 	beq.w	80059b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	f000 8083 	beq.w	8005900 <HAL_RCC_GetSysClockFreq+0x204>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	f200 80a1 	bhi.w	8005944 <HAL_RCC_GetSysClockFreq+0x248>
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d003      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x114>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d056      	beq.n	80058bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800580e:	e099      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005810:	4b6f      	ldr	r3, [pc, #444]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b00      	cmp	r3, #0
 800581a:	d02d      	beq.n	8005878 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800581c:	4b6c      	ldr	r3, [pc, #432]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	08db      	lsrs	r3, r3, #3
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	4a6b      	ldr	r2, [pc, #428]	; (80059d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
 800582c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	ee07 3a90 	vmov	s15, r3
 8005834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005846:	4b62      	ldr	r3, [pc, #392]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584e:	ee07 3a90 	vmov	s15, r3
 8005852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005856:	ed97 6a02 	vldr	s12, [r7, #8]
 800585a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800585e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800586a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800586e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005872:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005876:	e087      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005882:	eddf 6a58 	vldr	s13, [pc, #352]	; 80059e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588a:	4b51      	ldr	r3, [pc, #324]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005892:	ee07 3a90 	vmov	s15, r3
 8005896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800589a:	ed97 6a02 	vldr	s12, [r7, #8]
 800589e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058ba:	e065      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80059e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80058ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ce:	4b40      	ldr	r3, [pc, #256]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058de:	ed97 6a02 	vldr	s12, [r7, #8]
 80058e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80058fe:	e043      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80059ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005912:	4b2f      	ldr	r3, [pc, #188]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005922:	ed97 6a02 	vldr	s12, [r7, #8]
 8005926:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800592a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800592e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800593e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005942:	e021      	b.n	8005988 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	ee07 3a90 	vmov	s15, r3
 800594a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80059e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005956:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005966:	ed97 6a02 	vldr	s12, [r7, #8]
 800596a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80059e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800596e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005976:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800597e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005986:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005988:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800598a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598c:	0a5b      	lsrs	r3, r3, #9
 800598e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005992:	3301      	adds	r3, #1
 8005994:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ac:	ee17 3a90 	vmov	r3, s15
 80059b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80059b2:	e005      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
      break;
 80059b8:	e002      	b.n	80059c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80059ba:	4b07      	ldr	r3, [pc, #28]	; (80059d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80059bc:	61bb      	str	r3, [r7, #24]
      break;
 80059be:	bf00      	nop
  }

  return sysclockfreq;
 80059c0:	69bb      	ldr	r3, [r7, #24]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3724      	adds	r7, #36	; 0x24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	58024400 	.word	0x58024400
 80059d4:	03d09000 	.word	0x03d09000
 80059d8:	003d0900 	.word	0x003d0900
 80059dc:	007a1200 	.word	0x007a1200
 80059e0:	46000000 	.word	0x46000000
 80059e4:	4c742400 	.word	0x4c742400
 80059e8:	4a742400 	.word	0x4a742400
 80059ec:	4af42400 	.word	0x4af42400

080059f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059f4:	b0c6      	sub	sp, #280	; 0x118
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059fc:	2300      	movs	r3, #0
 80059fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a02:	2300      	movs	r3, #0
 8005a04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005a14:	2500      	movs	r5, #0
 8005a16:	ea54 0305 	orrs.w	r3, r4, r5
 8005a1a:	d049      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a26:	d02f      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005a28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a2c:	d828      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a32:	d01a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a38:	d822      	bhi.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a42:	d007      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a44:	e01c      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a46:	4bab      	ldr	r3, [pc, #684]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	4aaa      	ldr	r2, [pc, #680]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a52:	e01a      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a58:	3308      	adds	r3, #8
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f001 f967 	bl	8006d30 <RCCEx_PLL2_Config>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a68:	e00f      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a6e:	3328      	adds	r3, #40	; 0x28
 8005a70:	2102      	movs	r1, #2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fa0e 	bl	8006e94 <RCCEx_PLL3_Config>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005a7e:	e004      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005a86:	e000      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005a88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005a92:	4b98      	ldr	r3, [pc, #608]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a96:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa0:	4a94      	ldr	r2, [pc, #592]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	6513      	str	r3, [r2, #80]	; 0x50
 8005aa6:	e003      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005aac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005abc:	f04f 0900 	mov.w	r9, #0
 8005ac0:	ea58 0309 	orrs.w	r3, r8, r9
 8005ac4:	d047      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d82a      	bhi.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005aed 	.word	0x08005aed
 8005adc:	08005afb 	.word	0x08005afb
 8005ae0:	08005b11 	.word	0x08005b11
 8005ae4:	08005b2f 	.word	0x08005b2f
 8005ae8:	08005b2f 	.word	0x08005b2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aec:	4b81      	ldr	r3, [pc, #516]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4a80      	ldr	r2, [pc, #512]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005af8:	e01a      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afe:	3308      	adds	r3, #8
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 f914 	bl	8006d30 <RCCEx_PLL2_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b0e:	e00f      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b14:	3328      	adds	r3, #40	; 0x28
 8005b16:	2100      	movs	r1, #0
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f001 f9bb 	bl	8006e94 <RCCEx_PLL3_Config>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b24:	e004      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b2c:	e000      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b38:	4b6e      	ldr	r3, [pc, #440]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3c:	f023 0107 	bic.w	r1, r3, #7
 8005b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b46:	4a6b      	ldr	r2, [pc, #428]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	6513      	str	r3, [r2, #80]	; 0x50
 8005b4c:	e003      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005b62:	f04f 0b00 	mov.w	fp, #0
 8005b66:	ea5a 030b 	orrs.w	r3, sl, fp
 8005b6a:	d05b      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b74:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005b78:	d03b      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005b7a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005b7e:	d834      	bhi.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005b80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b84:	d037      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005b86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b8a:	d82e      	bhi.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005b8c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b90:	d033      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005b92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005b96:	d828      	bhi.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b9c:	d01a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ba2:	d822      	bhi.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005ba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bac:	d007      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005bae:	e01c      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bb0:	4b50      	ldr	r3, [pc, #320]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	4a4f      	ldr	r2, [pc, #316]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bbc:	e01e      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f8b2 	bl	8006d30 <RCCEx_PLL2_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005bd2:	e013      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bd8:	3328      	adds	r3, #40	; 0x28
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 f959 	bl	8006e94 <RCCEx_PLL3_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005be8:	e008      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005bf0:	e004      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005bf2:	bf00      	nop
 8005bf4:	e002      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005bf6:	bf00      	nop
 8005bf8:	e000      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10b      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005c04:	4b3b      	ldr	r3, [pc, #236]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c14:	4a37      	ldr	r2, [pc, #220]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c16:	430b      	orrs	r3, r1
 8005c18:	6593      	str	r3, [r2, #88]	; 0x58
 8005c1a:	e003      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005c3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4313      	orrs	r3, r2
 8005c42:	d05d      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005c4c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005c50:	d03b      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005c52:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005c56:	d834      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c5c:	d037      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c62:	d82e      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005c64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c68:	d033      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005c6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c6e:	d828      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c74:	d01a      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005c76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c7a:	d822      	bhi.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c84:	d007      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005c86:	e01c      	b.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	4a19      	ldr	r2, [pc, #100]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c94:	e01e      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 f846 	bl	8006d30 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005caa:	e013      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb0:	3328      	adds	r3, #40	; 0x28
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 f8ed 	bl	8006e94 <RCCEx_PLL3_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cc8:	e004      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005cca:	bf00      	nop
 8005ccc:	e002      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005cce:	bf00      	nop
 8005cd0:	e000      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10d      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ce8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005cec:	4a01      	ldr	r2, [pc, #4]	; (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8005cf2:	e005      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cfc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d08:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005d0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005d10:	2300      	movs	r3, #0
 8005d12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d16:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	d03a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d26:	2b30      	cmp	r3, #48	; 0x30
 8005d28:	d01f      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005d2a:	2b30      	cmp	r3, #48	; 0x30
 8005d2c:	d819      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d00c      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	d815      	bhi.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d019      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d111      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d3e:	4baa      	ldr	r3, [pc, #680]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	4aa9      	ldr	r2, [pc, #676]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005d4a:	e011      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d50:	3308      	adds	r3, #8
 8005d52:	2102      	movs	r1, #2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 ffeb 	bl	8006d30 <RCCEx_PLL2_Config>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005d60:	e006      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d68:	e002      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005d6a:	bf00      	nop
 8005d6c:	e000      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005d78:	4b9b      	ldr	r3, [pc, #620]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d86:	4a98      	ldr	r2, [pc, #608]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d8c:	e003      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005da2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005da6:	2300      	movs	r3, #0
 8005da8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dac:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005db0:	460b      	mov	r3, r1
 8005db2:	4313      	orrs	r3, r2
 8005db4:	d051      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc0:	d035      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dc6:	d82e      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005dc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005dcc:	d031      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005dce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005dd2:	d828      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd8:	d01a      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dde:	d822      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d003      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de8:	d007      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005dea:	e01c      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dec:	4b7e      	ldr	r3, [pc, #504]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	4a7d      	ldr	r2, [pc, #500]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005df8:	e01c      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	3308      	adds	r3, #8
 8005e00:	2100      	movs	r1, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 ff94 	bl	8006d30 <RCCEx_PLL2_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e0e:	e011      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e14:	3328      	adds	r3, #40	; 0x28
 8005e16:	2100      	movs	r1, #0
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 f83b 	bl	8006e94 <RCCEx_PLL3_Config>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005e24:	e006      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e2c:	e002      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e3c:	4b6a      	ldr	r3, [pc, #424]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e40:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4a:	4a67      	ldr	r2, [pc, #412]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	6513      	str	r3, [r2, #80]	; 0x50
 8005e50:	e003      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e56:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005e66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e70:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4313      	orrs	r3, r2
 8005e78:	d053      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e84:	d033      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e8a:	d82c      	bhi.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005e8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e90:	d02f      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005e92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e96:	d826      	bhi.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005e98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e9c:	d02b      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005e9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ea2:	d820      	bhi.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ea8:	d012      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eae:	d81a      	bhi.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d022      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb8:	d115      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ebe:	3308      	adds	r3, #8
 8005ec0:	2101      	movs	r1, #1
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 ff34 	bl	8006d30 <RCCEx_PLL2_Config>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ece:	e015      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed4:	3328      	adds	r3, #40	; 0x28
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 ffdb 	bl	8006e94 <RCCEx_PLL3_Config>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ee4:	e00a      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005eec:	e006      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005eee:	bf00      	nop
 8005ef0:	e004      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ef2:	bf00      	nop
 8005ef4:	e002      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ef6:	bf00      	nop
 8005ef8:	e000      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005efc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f04:	4b38      	ldr	r3, [pc, #224]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f08:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f12:	4a35      	ldr	r2, [pc, #212]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6513      	str	r3, [r2, #80]	; 0x50
 8005f18:	e003      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f1e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005f2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f32:	2300      	movs	r3, #0
 8005f34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f38:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	d058      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f4e:	d033      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f54:	d82c      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5a:	d02f      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f60:	d826      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005f62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f66:	d02b      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005f68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f6c:	d820      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f72:	d012      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f78:	d81a      	bhi.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d022      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f82:	d115      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f88:	3308      	adds	r3, #8
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fecf 	bl	8006d30 <RCCEx_PLL2_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f98:	e015      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9e:	3328      	adds	r3, #40	; 0x28
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 ff76 	bl	8006e94 <RCCEx_PLL3_Config>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005fae:	e00a      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005fb6:	e006      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005fb8:	bf00      	nop
 8005fba:	e004      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005fbc:	bf00      	nop
 8005fbe:	e002      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005fc0:	bf00      	nop
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10e      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005fce:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fde:	4a02      	ldr	r2, [pc, #8]	; (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8005fe4:	e006      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005fe6:	bf00      	nop
 8005fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ff0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006004:	2300      	movs	r3, #0
 8006006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800600a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800600e:	460b      	mov	r3, r1
 8006010:	4313      	orrs	r3, r2
 8006012:	d037      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601e:	d00e      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006024:	d816      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d018      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800602a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800602e:	d111      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006030:	4bc4      	ldr	r3, [pc, #784]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	4ac3      	ldr	r2, [pc, #780]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800603a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800603c:	e00f      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800603e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006042:	3308      	adds	r3, #8
 8006044:	2101      	movs	r1, #1
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fe72 	bl	8006d30 <RCCEx_PLL2_Config>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006052:	e004      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800605a:	e000      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800605c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800605e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006066:	4bb7      	ldr	r3, [pc, #732]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800606e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006074:	4ab3      	ldr	r2, [pc, #716]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006076:	430b      	orrs	r3, r1
 8006078:	6513      	str	r3, [r2, #80]	; 0x50
 800607a:	e003      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006080:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006094:	2300      	movs	r3, #0
 8006096:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800609a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800609e:	460b      	mov	r3, r1
 80060a0:	4313      	orrs	r3, r2
 80060a2:	d039      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80060a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d81c      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80060ae:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	080060f1 	.word	0x080060f1
 80060b8:	080060c5 	.word	0x080060c5
 80060bc:	080060d3 	.word	0x080060d3
 80060c0:	080060f1 	.word	0x080060f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060c4:	4b9f      	ldr	r3, [pc, #636]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c8:	4a9e      	ldr	r2, [pc, #632]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060d0:	e00f      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d6:	3308      	adds	r3, #8
 80060d8:	2102      	movs	r1, #2
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 fe28 	bl	8006d30 <RCCEx_PLL2_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060e6:	e004      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80060ee:	e000      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80060f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80060fa:	4b92      	ldr	r3, [pc, #584]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fe:	f023 0103 	bic.w	r1, r3, #3
 8006102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006108:	4a8e      	ldr	r2, [pc, #568]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800610a:	430b      	orrs	r3, r1
 800610c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800610e:	e003      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006110:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006114:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006124:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006128:	2300      	movs	r3, #0
 800612a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800612e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	f000 8099 	beq.w	800626c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800613a:	4b83      	ldr	r3, [pc, #524]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a82      	ldr	r2, [pc, #520]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006144:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006146:	f7fd fecd 	bl	8003ee4 <HAL_GetTick>
 800614a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800614e:	e00b      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006150:	f7fd fec8 	bl	8003ee4 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b64      	cmp	r3, #100	; 0x64
 800615e:	d903      	bls.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006166:	e005      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006168:	4b77      	ldr	r3, [pc, #476]	; (8006348 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0ed      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006174:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006178:	2b00      	cmp	r3, #0
 800617a:	d173      	bne.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800617c:	4b71      	ldr	r3, [pc, #452]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800617e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006188:	4053      	eors	r3, r2
 800618a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618e:	2b00      	cmp	r3, #0
 8006190:	d015      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006192:	4b6c      	ldr	r3, [pc, #432]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800619e:	4b69      	ldr	r3, [pc, #420]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	4a68      	ldr	r2, [pc, #416]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061aa:	4b66      	ldr	r3, [pc, #408]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ae:	4a65      	ldr	r2, [pc, #404]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061b4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061b6:	4a63      	ldr	r2, [pc, #396]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ca:	d118      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fd fe8a 	bl	8003ee4 <HAL_GetTick>
 80061d0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061d4:	e00d      	b.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d6:	f7fd fe85 	bl	8003ee4 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061e0:	1ad2      	subs	r2, r2, r3
 80061e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d903      	bls.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80061f0:	e005      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061f2:	4b54      	ldr	r3, [pc, #336]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	f003 0302 	and.w	r3, r3, #2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d0eb      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80061fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006202:	2b00      	cmp	r3, #0
 8006204:	d129      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800620e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006216:	d10e      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006218:	4b4a      	ldr	r3, [pc, #296]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006224:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006228:	091a      	lsrs	r2, r3, #4
 800622a:	4b48      	ldr	r3, [pc, #288]	; (800634c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800622c:	4013      	ands	r3, r2
 800622e:	4a45      	ldr	r2, [pc, #276]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006230:	430b      	orrs	r3, r1
 8006232:	6113      	str	r3, [r2, #16]
 8006234:	e005      	b.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006236:	4b43      	ldr	r3, [pc, #268]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	4a42      	ldr	r2, [pc, #264]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800623c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006240:	6113      	str	r3, [r2, #16]
 8006242:	4b40      	ldr	r3, [pc, #256]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006244:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800624e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006252:	4a3c      	ldr	r2, [pc, #240]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006254:	430b      	orrs	r3, r1
 8006256:	6713      	str	r3, [r2, #112]	; 0x70
 8006258:	e008      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800625a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800625e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006262:	e003      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006264:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006268:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f002 0301 	and.w	r3, r2, #1
 8006278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800627c:	2300      	movs	r3, #0
 800627e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006282:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006286:	460b      	mov	r3, r1
 8006288:	4313      	orrs	r3, r2
 800628a:	f000 808f 	beq.w	80063ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800628e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006294:	2b28      	cmp	r3, #40	; 0x28
 8006296:	d871      	bhi.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006298:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	08006385 	.word	0x08006385
 80062a4:	0800637d 	.word	0x0800637d
 80062a8:	0800637d 	.word	0x0800637d
 80062ac:	0800637d 	.word	0x0800637d
 80062b0:	0800637d 	.word	0x0800637d
 80062b4:	0800637d 	.word	0x0800637d
 80062b8:	0800637d 	.word	0x0800637d
 80062bc:	0800637d 	.word	0x0800637d
 80062c0:	08006351 	.word	0x08006351
 80062c4:	0800637d 	.word	0x0800637d
 80062c8:	0800637d 	.word	0x0800637d
 80062cc:	0800637d 	.word	0x0800637d
 80062d0:	0800637d 	.word	0x0800637d
 80062d4:	0800637d 	.word	0x0800637d
 80062d8:	0800637d 	.word	0x0800637d
 80062dc:	0800637d 	.word	0x0800637d
 80062e0:	08006367 	.word	0x08006367
 80062e4:	0800637d 	.word	0x0800637d
 80062e8:	0800637d 	.word	0x0800637d
 80062ec:	0800637d 	.word	0x0800637d
 80062f0:	0800637d 	.word	0x0800637d
 80062f4:	0800637d 	.word	0x0800637d
 80062f8:	0800637d 	.word	0x0800637d
 80062fc:	0800637d 	.word	0x0800637d
 8006300:	08006385 	.word	0x08006385
 8006304:	0800637d 	.word	0x0800637d
 8006308:	0800637d 	.word	0x0800637d
 800630c:	0800637d 	.word	0x0800637d
 8006310:	0800637d 	.word	0x0800637d
 8006314:	0800637d 	.word	0x0800637d
 8006318:	0800637d 	.word	0x0800637d
 800631c:	0800637d 	.word	0x0800637d
 8006320:	08006385 	.word	0x08006385
 8006324:	0800637d 	.word	0x0800637d
 8006328:	0800637d 	.word	0x0800637d
 800632c:	0800637d 	.word	0x0800637d
 8006330:	0800637d 	.word	0x0800637d
 8006334:	0800637d 	.word	0x0800637d
 8006338:	0800637d 	.word	0x0800637d
 800633c:	0800637d 	.word	0x0800637d
 8006340:	08006385 	.word	0x08006385
 8006344:	58024400 	.word	0x58024400
 8006348:	58024800 	.word	0x58024800
 800634c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006354:	3308      	adds	r3, #8
 8006356:	2101      	movs	r1, #1
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fce9 	bl	8006d30 <RCCEx_PLL2_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006364:	e00f      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636a:	3328      	adds	r3, #40	; 0x28
 800636c:	2101      	movs	r1, #1
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fd90 	bl	8006e94 <RCCEx_PLL3_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800637a:	e004      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006382:	e000      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006386:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10a      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800638e:	4bbf      	ldr	r3, [pc, #764]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006392:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800639c:	4abb      	ldr	r2, [pc, #748]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800639e:	430b      	orrs	r3, r1
 80063a0:	6553      	str	r3, [r2, #84]	; 0x54
 80063a2:	e003      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	f002 0302 	and.w	r3, r2, #2
 80063b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063bc:	2300      	movs	r3, #0
 80063be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4313      	orrs	r3, r2
 80063ca:	d041      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d824      	bhi.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80063d6:	a201      	add	r2, pc, #4	; (adr r2, 80063dc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	08006429 	.word	0x08006429
 80063e0:	080063f5 	.word	0x080063f5
 80063e4:	0800640b 	.word	0x0800640b
 80063e8:	08006429 	.word	0x08006429
 80063ec:	08006429 	.word	0x08006429
 80063f0:	08006429 	.word	0x08006429
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f8:	3308      	adds	r3, #8
 80063fa:	2101      	movs	r1, #1
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fc97 	bl	8006d30 <RCCEx_PLL2_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006408:	e00f      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640e:	3328      	adds	r3, #40	; 0x28
 8006410:	2101      	movs	r1, #1
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fd3e 	bl	8006e94 <RCCEx_PLL3_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800641e:	e004      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006426:	e000      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006432:	4b96      	ldr	r3, [pc, #600]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006436:	f023 0107 	bic.w	r1, r3, #7
 800643a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006440:	4a92      	ldr	r2, [pc, #584]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006442:	430b      	orrs	r3, r1
 8006444:	6553      	str	r3, [r2, #84]	; 0x54
 8006446:	e003      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800644c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f002 0304 	and.w	r3, r2, #4
 800645c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006460:	2300      	movs	r3, #0
 8006462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006466:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800646a:	460b      	mov	r3, r1
 800646c:	4313      	orrs	r3, r2
 800646e:	d044      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006470:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006478:	2b05      	cmp	r3, #5
 800647a:	d825      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800647c:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	080064d1 	.word	0x080064d1
 8006488:	0800649d 	.word	0x0800649d
 800648c:	080064b3 	.word	0x080064b3
 8006490:	080064d1 	.word	0x080064d1
 8006494:	080064d1 	.word	0x080064d1
 8006498:	080064d1 	.word	0x080064d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a0:	3308      	adds	r3, #8
 80064a2:	2101      	movs	r1, #1
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fc43 	bl	8006d30 <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064b0:	e00f      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b6:	3328      	adds	r3, #40	; 0x28
 80064b8:	2101      	movs	r1, #1
 80064ba:	4618      	mov	r0, r3
 80064bc:	f000 fcea 	bl	8006e94 <RCCEx_PLL3_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064c6:	e004      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064ce:	e000      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80064d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064da:	4b6c      	ldr	r3, [pc, #432]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064de:	f023 0107 	bic.w	r1, r3, #7
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ea:	4a68      	ldr	r2, [pc, #416]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80064ec:	430b      	orrs	r3, r1
 80064ee:	6593      	str	r3, [r2, #88]	; 0x58
 80064f0:	e003      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f002 0320 	and.w	r3, r2, #32
 8006506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800650a:	2300      	movs	r3, #0
 800650c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006510:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006514:	460b      	mov	r3, r1
 8006516:	4313      	orrs	r3, r2
 8006518:	d055      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800651a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006526:	d033      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800652c:	d82c      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006532:	d02f      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d826      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800653a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800653e:	d02b      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006540:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006544:	d820      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800654a:	d012      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800654c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006550:	d81a      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d022      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800655a:	d115      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006560:	3308      	adds	r3, #8
 8006562:	2100      	movs	r1, #0
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fbe3 	bl	8006d30 <RCCEx_PLL2_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006570:	e015      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006576:	3328      	adds	r3, #40	; 0x28
 8006578:	2102      	movs	r1, #2
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fc8a 	bl	8006e94 <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006586:	e00a      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800658e:	e006      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006590:	bf00      	nop
 8006592:	e004      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006594:	bf00      	nop
 8006596:	e002      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006598:	bf00      	nop
 800659a:	e000      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800659c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800659e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10b      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065a6:	4b39      	ldr	r3, [pc, #228]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065aa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80065ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b6:	4a35      	ldr	r2, [pc, #212]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80065b8:	430b      	orrs	r3, r1
 80065ba:	6553      	str	r3, [r2, #84]	; 0x54
 80065bc:	e003      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80065d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065d6:	2300      	movs	r3, #0
 80065d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065dc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80065e0:	460b      	mov	r3, r1
 80065e2:	4313      	orrs	r3, r2
 80065e4:	d058      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065f2:	d033      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80065f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065f8:	d82c      	bhi.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80065fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fe:	d02f      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006604:	d826      	bhi.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006606:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800660a:	d02b      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800660c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006610:	d820      	bhi.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006612:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006616:	d012      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661c:	d81a      	bhi.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d022      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006626:	d115      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662c:	3308      	adds	r3, #8
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fb7d 	bl	8006d30 <RCCEx_PLL2_Config>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800663c:	e015      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800663e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006642:	3328      	adds	r3, #40	; 0x28
 8006644:	2102      	movs	r1, #2
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fc24 	bl	8006e94 <RCCEx_PLL3_Config>
 800664c:	4603      	mov	r3, r0
 800664e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006652:	e00a      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800665a:	e006      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800665c:	bf00      	nop
 800665e:	e004      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006660:	bf00      	nop
 8006662:	e002      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006664:	bf00      	nop
 8006666:	e000      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800666a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10e      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006676:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006682:	4a02      	ldr	r2, [pc, #8]	; (800668c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006684:	430b      	orrs	r3, r1
 8006686:	6593      	str	r3, [r2, #88]	; 0x58
 8006688:	e006      	b.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800668a:	bf00      	nop
 800668c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006690:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006694:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80066a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066a8:	2300      	movs	r3, #0
 80066aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80066ae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80066b2:	460b      	mov	r3, r1
 80066b4:	4313      	orrs	r3, r2
 80066b6:	d055      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80066b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80066c4:	d033      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80066c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80066ca:	d82c      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80066cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d0:	d02f      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80066d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d6:	d826      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80066d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80066dc:	d02b      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80066de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80066e2:	d820      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80066e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066e8:	d012      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80066ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066ee:	d81a      	bhi.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d022      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80066f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f8:	d115      	bne.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066fe:	3308      	adds	r3, #8
 8006700:	2100      	movs	r1, #0
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fb14 	bl	8006d30 <RCCEx_PLL2_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800670e:	e015      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006714:	3328      	adds	r3, #40	; 0x28
 8006716:	2102      	movs	r1, #2
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fbbb 	bl	8006e94 <RCCEx_PLL3_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006724:	e00a      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800672c:	e006      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800672e:	bf00      	nop
 8006730:	e004      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800673a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10b      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006744:	4ba0      	ldr	r3, [pc, #640]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006748:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006750:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006754:	4a9c      	ldr	r2, [pc, #624]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006756:	430b      	orrs	r3, r1
 8006758:	6593      	str	r3, [r2, #88]	; 0x58
 800675a:	e003      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006760:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f002 0308 	and.w	r3, r2, #8
 8006770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006774:	2300      	movs	r3, #0
 8006776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800677a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800677e:	460b      	mov	r3, r1
 8006780:	4313      	orrs	r3, r2
 8006782:	d01e      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800678c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006790:	d10c      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006796:	3328      	adds	r3, #40	; 0x28
 8006798:	2102      	movs	r1, #2
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fb7a 	bl	8006e94 <RCCEx_PLL3_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80067ac:	4b86      	ldr	r3, [pc, #536]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067bc:	4a82      	ldr	r2, [pc, #520]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067be:	430b      	orrs	r3, r1
 80067c0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ca:	f002 0310 	and.w	r3, r2, #16
 80067ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067d2:	2300      	movs	r3, #0
 80067d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067d8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80067dc:	460b      	mov	r3, r1
 80067de:	4313      	orrs	r3, r2
 80067e0:	d01e      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80067e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ee:	d10c      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f4:	3328      	adds	r3, #40	; 0x28
 80067f6:	2102      	movs	r1, #2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 fb4b 	bl	8006e94 <RCCEx_PLL3_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d002      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800680a:	4b6f      	ldr	r3, [pc, #444]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800680c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800681a:	4a6b      	ldr	r2, [pc, #428]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800681c:	430b      	orrs	r3, r1
 800681e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800682c:	67bb      	str	r3, [r7, #120]	; 0x78
 800682e:	2300      	movs	r3, #0
 8006830:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006832:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006836:	460b      	mov	r3, r1
 8006838:	4313      	orrs	r3, r2
 800683a:	d03e      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006840:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006848:	d022      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800684a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800684e:	d81b      	bhi.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006858:	d00b      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800685a:	e015      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006860:	3308      	adds	r3, #8
 8006862:	2100      	movs	r1, #0
 8006864:	4618      	mov	r0, r3
 8006866:	f000 fa63 	bl	8006d30 <RCCEx_PLL2_Config>
 800686a:	4603      	mov	r3, r0
 800686c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006870:	e00f      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006876:	3328      	adds	r3, #40	; 0x28
 8006878:	2102      	movs	r1, #2
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fb0a 	bl	8006e94 <RCCEx_PLL3_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006886:	e004      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800688e:	e000      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006892:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10b      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800689a:	4b4b      	ldr	r3, [pc, #300]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800689c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80068a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80068aa:	4a47      	ldr	r2, [pc, #284]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6593      	str	r3, [r2, #88]	; 0x58
 80068b0:	e003      	b.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80068c6:	673b      	str	r3, [r7, #112]	; 0x70
 80068c8:	2300      	movs	r3, #0
 80068ca:	677b      	str	r3, [r7, #116]	; 0x74
 80068cc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80068d0:	460b      	mov	r3, r1
 80068d2:	4313      	orrs	r3, r2
 80068d4:	d03b      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80068d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068e2:	d01f      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80068e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80068e8:	d818      	bhi.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80068ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ee:	d003      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80068f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068f4:	d007      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80068f6:	e011      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f8:	4b33      	ldr	r3, [pc, #204]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	4a32      	ldr	r2, [pc, #200]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80068fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006902:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006904:	e00f      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800690a:	3328      	adds	r3, #40	; 0x28
 800690c:	2101      	movs	r1, #1
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fac0 	bl	8006e94 <RCCEx_PLL3_Config>
 8006914:	4603      	mov	r3, r0
 8006916:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800691a:	e004      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006922:	e000      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006926:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10b      	bne.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800692e:	4b26      	ldr	r3, [pc, #152]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006932:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800693e:	4a22      	ldr	r2, [pc, #136]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006940:	430b      	orrs	r3, r1
 8006942:	6553      	str	r3, [r2, #84]	; 0x54
 8006944:	e003      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006946:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800694a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800694e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800695a:	66bb      	str	r3, [r7, #104]	; 0x68
 800695c:	2300      	movs	r3, #0
 800695e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006960:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006964:	460b      	mov	r3, r1
 8006966:	4313      	orrs	r3, r2
 8006968:	d034      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800696a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006978:	d007      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800697a:	e011      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800697c:	4b12      	ldr	r3, [pc, #72]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	4a11      	ldr	r2, [pc, #68]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006988:	e00e      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698e:	3308      	adds	r3, #8
 8006990:	2102      	movs	r1, #2
 8006992:	4618      	mov	r0, r3
 8006994:	f000 f9cc 	bl	8006d30 <RCCEx_PLL2_Config>
 8006998:	4603      	mov	r3, r0
 800699a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800699e:	e003      	b.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10d      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069b0:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069be:	4a02      	ldr	r2, [pc, #8]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80069c0:	430b      	orrs	r3, r1
 80069c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069c4:	e006      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80069c6:	bf00      	nop
 80069c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80069e0:	663b      	str	r3, [r7, #96]	; 0x60
 80069e2:	2300      	movs	r3, #0
 80069e4:	667b      	str	r3, [r7, #100]	; 0x64
 80069e6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80069ea:	460b      	mov	r3, r1
 80069ec:	4313      	orrs	r3, r2
 80069ee:	d00c      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f4:	3328      	adds	r3, #40	; 0x28
 80069f6:	2102      	movs	r1, #2
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fa4b 	bl	8006e94 <RCCEx_PLL3_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006a16:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a18:	2300      	movs	r3, #0
 8006a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a1c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006a20:	460b      	mov	r3, r1
 8006a22:	4313      	orrs	r3, r2
 8006a24:	d036      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a30:	d018      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a36:	d811      	bhi.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006a38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a3c:	d014      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a42:	d80b      	bhi.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d011      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a4c:	d106      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a4e:	4bb7      	ldr	r3, [pc, #732]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	4ab6      	ldr	r2, [pc, #728]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006a5a:	e008      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a62:	e004      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006a64:	bf00      	nop
 8006a66:	e002      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006a68:	bf00      	nop
 8006a6a:	e000      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10a      	bne.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a76:	4bad      	ldr	r3, [pc, #692]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a84:	4aa9      	ldr	r2, [pc, #676]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a86:	430b      	orrs	r3, r1
 8006a88:	6553      	str	r3, [r2, #84]	; 0x54
 8006a8a:	e003      	b.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006aa0:	653b      	str	r3, [r7, #80]	; 0x50
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	657b      	str	r3, [r7, #84]	; 0x54
 8006aa6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4313      	orrs	r3, r2
 8006aae:	d009      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ab0:	4b9e      	ldr	r3, [pc, #632]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abe:	4a9b      	ldr	r2, [pc, #620]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006ad0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006ada:	460b      	mov	r3, r1
 8006adc:	4313      	orrs	r3, r2
 8006ade:	d009      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ae0:	4b92      	ldr	r3, [pc, #584]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aee:	4a8f      	ldr	r2, [pc, #572]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006af0:	430b      	orrs	r3, r1
 8006af2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006b00:	643b      	str	r3, [r7, #64]	; 0x40
 8006b02:	2300      	movs	r3, #0
 8006b04:	647b      	str	r3, [r7, #68]	; 0x44
 8006b06:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	d00e      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b10:	4b86      	ldr	r3, [pc, #536]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	4a85      	ldr	r2, [pc, #532]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b1a:	6113      	str	r3, [r2, #16]
 8006b1c:	4b83      	ldr	r3, [pc, #524]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b1e:	6919      	ldr	r1, [r3, #16]
 8006b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b28:	4a80      	ldr	r2, [pc, #512]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b40:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006b44:	460b      	mov	r3, r1
 8006b46:	4313      	orrs	r3, r2
 8006b48:	d009      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b4a:	4b78      	ldr	r3, [pc, #480]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b58:	4a74      	ldr	r2, [pc, #464]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b66:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b70:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006b74:	460b      	mov	r3, r1
 8006b76:	4313      	orrs	r3, r2
 8006b78:	d00a      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b7a:	4b6c      	ldr	r3, [pc, #432]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8a:	4a68      	ldr	r2, [pc, #416]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	2100      	movs	r1, #0
 8006b9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	d011      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f8bb 	bl	8006d30 <RCCEx_PLL2_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bcc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	2100      	movs	r1, #0
 8006bda:	6239      	str	r1, [r7, #32]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
 8006be2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006be6:	460b      	mov	r3, r1
 8006be8:	4313      	orrs	r3, r2
 8006bea:	d011      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 f89b 	bl	8006d30 <RCCEx_PLL2_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006c00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	2100      	movs	r1, #0
 8006c1a:	61b9      	str	r1, [r7, #24]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c26:	460b      	mov	r3, r1
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	d011      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c30:	3308      	adds	r3, #8
 8006c32:	2102      	movs	r1, #2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 f87b 	bl	8006d30 <RCCEx_PLL2_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006c40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	2100      	movs	r1, #0
 8006c5a:	6139      	str	r1, [r7, #16]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c66:	460b      	mov	r3, r1
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	d011      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c70:	3328      	adds	r3, #40	; 0x28
 8006c72:	2100      	movs	r1, #0
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 f90d 	bl	8006e94 <RCCEx_PLL3_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006c80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	2100      	movs	r1, #0
 8006c9a:	60b9      	str	r1, [r7, #8]
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	d011      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb0:	3328      	adds	r3, #40	; 0x28
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 f8ed 	bl	8006e94 <RCCEx_PLL3_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d003      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ccc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6039      	str	r1, [r7, #0]
 8006cdc:	f003 0320 	and.w	r3, r3, #32
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	d011      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf0:	3328      	adds	r3, #40	; 0x28
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 f8cd 	bl	8006e94 <RCCEx_PLL3_Config>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006d00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006d10:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006d24:	46bd      	mov	sp, r7
 8006d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d2a:	bf00      	nop
 8006d2c:	58024400 	.word	0x58024400

08006d30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d3e:	4b53      	ldr	r3, [pc, #332]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d42:	f003 0303 	and.w	r3, r3, #3
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d101      	bne.n	8006d4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e099      	b.n	8006e82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d4e:	4b4f      	ldr	r3, [pc, #316]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a4e      	ldr	r2, [pc, #312]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006d54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d5a:	f7fd f8c3 	bl	8003ee4 <HAL_GetTick>
 8006d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d60:	e008      	b.n	8006d74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d62:	f7fd f8bf 	bl	8003ee4 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d901      	bls.n	8006d74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e086      	b.n	8006e82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d74:	4b45      	ldr	r3, [pc, #276]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f0      	bne.n	8006d62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d80:	4b42      	ldr	r3, [pc, #264]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	031b      	lsls	r3, r3, #12
 8006d8e:	493f      	ldr	r1, [pc, #252]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	628b      	str	r3, [r1, #40]	; 0x28
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	025b      	lsls	r3, r3, #9
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	041b      	lsls	r3, r3, #16
 8006db2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006db6:	431a      	orrs	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	061b      	lsls	r3, r3, #24
 8006dc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006dc4:	4931      	ldr	r1, [pc, #196]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006dca:	4b30      	ldr	r3, [pc, #192]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	492d      	ldr	r1, [pc, #180]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ddc:	4b2b      	ldr	r3, [pc, #172]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	f023 0220 	bic.w	r2, r3, #32
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	4928      	ldr	r1, [pc, #160]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006dee:	4b27      	ldr	r3, [pc, #156]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	4a26      	ldr	r2, [pc, #152]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006df4:	f023 0310 	bic.w	r3, r3, #16
 8006df8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dfa:	4b24      	ldr	r3, [pc, #144]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dfe:	4b24      	ldr	r3, [pc, #144]	; (8006e90 <RCCEx_PLL2_Config+0x160>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	69d2      	ldr	r2, [r2, #28]
 8006e06:	00d2      	lsls	r2, r2, #3
 8006e08:	4920      	ldr	r1, [pc, #128]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e0e:	4b1f      	ldr	r3, [pc, #124]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e12:	4a1e      	ldr	r2, [pc, #120]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e14:	f043 0310 	orr.w	r3, r3, #16
 8006e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d106      	bne.n	8006e2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e20:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4a19      	ldr	r2, [pc, #100]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e2c:	e00f      	b.n	8006e4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d106      	bne.n	8006e42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e34:	4b15      	ldr	r3, [pc, #84]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	4a14      	ldr	r2, [pc, #80]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e40:	e005      	b.n	8006e4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e42:	4b12      	ldr	r3, [pc, #72]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	4a11      	ldr	r2, [pc, #68]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e4e:	4b0f      	ldr	r3, [pc, #60]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a0e      	ldr	r2, [pc, #56]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5a:	f7fd f843 	bl	8003ee4 <HAL_GetTick>
 8006e5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e60:	e008      	b.n	8006e74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e62:	f7fd f83f 	bl	8003ee4 <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d901      	bls.n	8006e74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e006      	b.n	8006e82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e74:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <RCCEx_PLL2_Config+0x15c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0f0      	beq.n	8006e62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	58024400 	.word	0x58024400
 8006e90:	ffff0007 	.word	0xffff0007

08006e94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ea2:	4b53      	ldr	r3, [pc, #332]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d101      	bne.n	8006eb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e099      	b.n	8006fe6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006eb2:	4b4f      	ldr	r3, [pc, #316]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a4e      	ldr	r2, [pc, #312]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ebe:	f7fd f811 	bl	8003ee4 <HAL_GetTick>
 8006ec2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ec4:	e008      	b.n	8006ed8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ec6:	f7fd f80d 	bl	8003ee4 <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e086      	b.n	8006fe6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ed8:	4b45      	ldr	r3, [pc, #276]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f0      	bne.n	8006ec6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ee4:	4b42      	ldr	r3, [pc, #264]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	051b      	lsls	r3, r3, #20
 8006ef2:	493f      	ldr	r1, [pc, #252]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	025b      	lsls	r3, r3, #9
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	041b      	lsls	r3, r3, #16
 8006f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	061b      	lsls	r3, r3, #24
 8006f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f28:	4931      	ldr	r1, [pc, #196]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f2e:	4b30      	ldr	r3, [pc, #192]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	492d      	ldr	r1, [pc, #180]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f40:	4b2b      	ldr	r3, [pc, #172]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	4928      	ldr	r1, [pc, #160]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f52:	4b27      	ldr	r3, [pc, #156]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f56:	4a26      	ldr	r2, [pc, #152]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f5e:	4b24      	ldr	r3, [pc, #144]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f62:	4b24      	ldr	r3, [pc, #144]	; (8006ff4 <RCCEx_PLL3_Config+0x160>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	69d2      	ldr	r2, [r2, #28]
 8006f6a:	00d2      	lsls	r2, r2, #3
 8006f6c:	4920      	ldr	r1, [pc, #128]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f72:	4b1f      	ldr	r3, [pc, #124]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	4a1e      	ldr	r2, [pc, #120]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d106      	bne.n	8006f92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f84:	4b1a      	ldr	r3, [pc, #104]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f88:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f90:	e00f      	b.n	8006fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d106      	bne.n	8006fa6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f98:	4b15      	ldr	r3, [pc, #84]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9c:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006fa4:	e005      	b.n	8006fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006fa6:	4b12      	ldr	r3, [pc, #72]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	4a11      	ldr	r2, [pc, #68]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006fb2:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a0e      	ldr	r2, [pc, #56]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fbe:	f7fc ff91 	bl	8003ee4 <HAL_GetTick>
 8006fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fc4:	e008      	b.n	8006fd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fc6:	f7fc ff8d 	bl	8003ee4 <HAL_GetTick>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	1ad3      	subs	r3, r2, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d901      	bls.n	8006fd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e006      	b.n	8006fe6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <RCCEx_PLL3_Config+0x15c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d0f0      	beq.n	8006fc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	58024400 	.word	0x58024400
 8006ff4:	ffff0007 	.word	0xffff0007

08006ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e049      	b.n	800709e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d106      	bne.n	8007024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7fc fb0a 	bl	8003638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	4610      	mov	r0, r2
 8007038:	f000 ffe8 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e049      	b.n	800714c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d106      	bne.n	80070d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f841 	bl	8007154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	3304      	adds	r3, #4
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f000 ff91 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d109      	bne.n	800718c <HAL_TIM_PWM_Start+0x24>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b01      	cmp	r3, #1
 8007182:	bf14      	ite	ne
 8007184:	2301      	movne	r3, #1
 8007186:	2300      	moveq	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	e03c      	b.n	8007206 <HAL_TIM_PWM_Start+0x9e>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b04      	cmp	r3, #4
 8007190:	d109      	bne.n	80071a6 <HAL_TIM_PWM_Start+0x3e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b01      	cmp	r3, #1
 800719c:	bf14      	ite	ne
 800719e:	2301      	movne	r3, #1
 80071a0:	2300      	moveq	r3, #0
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	e02f      	b.n	8007206 <HAL_TIM_PWM_Start+0x9e>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d109      	bne.n	80071c0 <HAL_TIM_PWM_Start+0x58>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	bf14      	ite	ne
 80071b8:	2301      	movne	r3, #1
 80071ba:	2300      	moveq	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	e022      	b.n	8007206 <HAL_TIM_PWM_Start+0x9e>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b0c      	cmp	r3, #12
 80071c4:	d109      	bne.n	80071da <HAL_TIM_PWM_Start+0x72>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	bf14      	ite	ne
 80071d2:	2301      	movne	r3, #1
 80071d4:	2300      	moveq	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	e015      	b.n	8007206 <HAL_TIM_PWM_Start+0x9e>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b10      	cmp	r3, #16
 80071de:	d109      	bne.n	80071f4 <HAL_TIM_PWM_Start+0x8c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	bf14      	ite	ne
 80071ec:	2301      	movne	r3, #1
 80071ee:	2300      	moveq	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	e008      	b.n	8007206 <HAL_TIM_PWM_Start+0x9e>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	bf14      	ite	ne
 8007200:	2301      	movne	r3, #1
 8007202:	2300      	moveq	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e0ab      	b.n	8007366 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <HAL_TIM_PWM_Start+0xb6>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800721c:	e023      	b.n	8007266 <HAL_TIM_PWM_Start+0xfe>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b04      	cmp	r3, #4
 8007222:	d104      	bne.n	800722e <HAL_TIM_PWM_Start+0xc6>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800722c:	e01b      	b.n	8007266 <HAL_TIM_PWM_Start+0xfe>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b08      	cmp	r3, #8
 8007232:	d104      	bne.n	800723e <HAL_TIM_PWM_Start+0xd6>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800723c:	e013      	b.n	8007266 <HAL_TIM_PWM_Start+0xfe>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b0c      	cmp	r3, #12
 8007242:	d104      	bne.n	800724e <HAL_TIM_PWM_Start+0xe6>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2202      	movs	r2, #2
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800724c:	e00b      	b.n	8007266 <HAL_TIM_PWM_Start+0xfe>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	2b10      	cmp	r3, #16
 8007252:	d104      	bne.n	800725e <HAL_TIM_PWM_Start+0xf6>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800725c:	e003      	b.n	8007266 <HAL_TIM_PWM_Start+0xfe>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2202      	movs	r2, #2
 8007262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2201      	movs	r2, #1
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	4618      	mov	r0, r3
 8007270:	f001 fd06 	bl	8008c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a3d      	ldr	r2, [pc, #244]	; (8007370 <HAL_TIM_PWM_Start+0x208>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d013      	beq.n	80072a6 <HAL_TIM_PWM_Start+0x13e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a3c      	ldr	r2, [pc, #240]	; (8007374 <HAL_TIM_PWM_Start+0x20c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00e      	beq.n	80072a6 <HAL_TIM_PWM_Start+0x13e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a3a      	ldr	r2, [pc, #232]	; (8007378 <HAL_TIM_PWM_Start+0x210>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d009      	beq.n	80072a6 <HAL_TIM_PWM_Start+0x13e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a39      	ldr	r2, [pc, #228]	; (800737c <HAL_TIM_PWM_Start+0x214>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d004      	beq.n	80072a6 <HAL_TIM_PWM_Start+0x13e>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a37      	ldr	r2, [pc, #220]	; (8007380 <HAL_TIM_PWM_Start+0x218>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d101      	bne.n	80072aa <HAL_TIM_PWM_Start+0x142>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <HAL_TIM_PWM_Start+0x144>
 80072aa:	2300      	movs	r3, #0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d007      	beq.n	80072c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a2a      	ldr	r2, [pc, #168]	; (8007370 <HAL_TIM_PWM_Start+0x208>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d02c      	beq.n	8007324 <HAL_TIM_PWM_Start+0x1bc>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d2:	d027      	beq.n	8007324 <HAL_TIM_PWM_Start+0x1bc>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <HAL_TIM_PWM_Start+0x21c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d022      	beq.n	8007324 <HAL_TIM_PWM_Start+0x1bc>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a29      	ldr	r2, [pc, #164]	; (8007388 <HAL_TIM_PWM_Start+0x220>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d01d      	beq.n	8007324 <HAL_TIM_PWM_Start+0x1bc>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a27      	ldr	r2, [pc, #156]	; (800738c <HAL_TIM_PWM_Start+0x224>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d018      	beq.n	8007324 <HAL_TIM_PWM_Start+0x1bc>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a1f      	ldr	r2, [pc, #124]	; (8007374 <HAL_TIM_PWM_Start+0x20c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d013      	beq.n	8007324 <HAL_TIM_PWM_Start+0x1bc>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a23      	ldr	r2, [pc, #140]	; (8007390 <HAL_TIM_PWM_Start+0x228>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d00e      	beq.n	8007324 <HAL_TIM_PWM_Start+0x1bc>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1b      	ldr	r2, [pc, #108]	; (8007378 <HAL_TIM_PWM_Start+0x210>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d009      	beq.n	8007324 <HAL_TIM_PWM_Start+0x1bc>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1f      	ldr	r2, [pc, #124]	; (8007394 <HAL_TIM_PWM_Start+0x22c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d004      	beq.n	8007324 <HAL_TIM_PWM_Start+0x1bc>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a1e      	ldr	r2, [pc, #120]	; (8007398 <HAL_TIM_PWM_Start+0x230>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d115      	bne.n	8007350 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	4b1c      	ldr	r3, [pc, #112]	; (800739c <HAL_TIM_PWM_Start+0x234>)
 800732c:	4013      	ands	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2b06      	cmp	r3, #6
 8007334:	d015      	beq.n	8007362 <HAL_TIM_PWM_Start+0x1fa>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800733c:	d011      	beq.n	8007362 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0201 	orr.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734e:	e008      	b.n	8007362 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0201 	orr.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	e000      	b.n	8007364 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007362:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	40010000 	.word	0x40010000
 8007374:	40010400 	.word	0x40010400
 8007378:	40014000 	.word	0x40014000
 800737c:	40014400 	.word	0x40014400
 8007380:	40014800 	.word	0x40014800
 8007384:	40000400 	.word	0x40000400
 8007388:	40000800 	.word	0x40000800
 800738c:	40000c00 	.word	0x40000c00
 8007390:	40001800 	.word	0x40001800
 8007394:	4000e000 	.word	0x4000e000
 8007398:	4000e400 	.word	0x4000e400
 800739c:	00010007 	.word	0x00010007

080073a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e049      	b.n	8007446 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d106      	bne.n	80073cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f841 	bl	800744e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	3304      	adds	r3, #4
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f000 fe14 	bl	800800c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
	...

08007464 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <HAL_TIM_IC_Start_IT+0x1e>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800747e:	b2db      	uxtb	r3, r3
 8007480:	e023      	b.n	80074ca <HAL_TIM_IC_Start_IT+0x66>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b04      	cmp	r3, #4
 8007486:	d104      	bne.n	8007492 <HAL_TIM_IC_Start_IT+0x2e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800748e:	b2db      	uxtb	r3, r3
 8007490:	e01b      	b.n	80074ca <HAL_TIM_IC_Start_IT+0x66>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b08      	cmp	r3, #8
 8007496:	d104      	bne.n	80074a2 <HAL_TIM_IC_Start_IT+0x3e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	e013      	b.n	80074ca <HAL_TIM_IC_Start_IT+0x66>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b0c      	cmp	r3, #12
 80074a6:	d104      	bne.n	80074b2 <HAL_TIM_IC_Start_IT+0x4e>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	e00b      	b.n	80074ca <HAL_TIM_IC_Start_IT+0x66>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b10      	cmp	r3, #16
 80074b6:	d104      	bne.n	80074c2 <HAL_TIM_IC_Start_IT+0x5e>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	e003      	b.n	80074ca <HAL_TIM_IC_Start_IT+0x66>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d104      	bne.n	80074dc <HAL_TIM_IC_Start_IT+0x78>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	e013      	b.n	8007504 <HAL_TIM_IC_Start_IT+0xa0>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d104      	bne.n	80074ec <HAL_TIM_IC_Start_IT+0x88>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	e00b      	b.n	8007504 <HAL_TIM_IC_Start_IT+0xa0>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2b08      	cmp	r3, #8
 80074f0:	d104      	bne.n	80074fc <HAL_TIM_IC_Start_IT+0x98>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	e003      	b.n	8007504 <HAL_TIM_IC_Start_IT+0xa0>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007502:	b2db      	uxtb	r3, r3
 8007504:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007506:	7bbb      	ldrb	r3, [r7, #14]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d102      	bne.n	8007512 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800750c:	7b7b      	ldrb	r3, [r7, #13]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d001      	beq.n	8007516 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e0ec      	b.n	80076f0 <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <HAL_TIM_IC_Start_IT+0xc2>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2202      	movs	r2, #2
 8007520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007524:	e023      	b.n	800756e <HAL_TIM_IC_Start_IT+0x10a>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	2b04      	cmp	r3, #4
 800752a:	d104      	bne.n	8007536 <HAL_TIM_IC_Start_IT+0xd2>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2202      	movs	r2, #2
 8007530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007534:	e01b      	b.n	800756e <HAL_TIM_IC_Start_IT+0x10a>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b08      	cmp	r3, #8
 800753a:	d104      	bne.n	8007546 <HAL_TIM_IC_Start_IT+0xe2>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007544:	e013      	b.n	800756e <HAL_TIM_IC_Start_IT+0x10a>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b0c      	cmp	r3, #12
 800754a:	d104      	bne.n	8007556 <HAL_TIM_IC_Start_IT+0xf2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007554:	e00b      	b.n	800756e <HAL_TIM_IC_Start_IT+0x10a>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b10      	cmp	r3, #16
 800755a:	d104      	bne.n	8007566 <HAL_TIM_IC_Start_IT+0x102>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007564:	e003      	b.n	800756e <HAL_TIM_IC_Start_IT+0x10a>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d104      	bne.n	800757e <HAL_TIM_IC_Start_IT+0x11a>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800757c:	e013      	b.n	80075a6 <HAL_TIM_IC_Start_IT+0x142>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b04      	cmp	r3, #4
 8007582:	d104      	bne.n	800758e <HAL_TIM_IC_Start_IT+0x12a>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800758c:	e00b      	b.n	80075a6 <HAL_TIM_IC_Start_IT+0x142>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d104      	bne.n	800759e <HAL_TIM_IC_Start_IT+0x13a>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2202      	movs	r2, #2
 8007598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800759c:	e003      	b.n	80075a6 <HAL_TIM_IC_Start_IT+0x142>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b0c      	cmp	r3, #12
 80075aa:	d841      	bhi.n	8007630 <HAL_TIM_IC_Start_IT+0x1cc>
 80075ac:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <HAL_TIM_IC_Start_IT+0x150>)
 80075ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b2:	bf00      	nop
 80075b4:	080075e9 	.word	0x080075e9
 80075b8:	08007631 	.word	0x08007631
 80075bc:	08007631 	.word	0x08007631
 80075c0:	08007631 	.word	0x08007631
 80075c4:	080075fb 	.word	0x080075fb
 80075c8:	08007631 	.word	0x08007631
 80075cc:	08007631 	.word	0x08007631
 80075d0:	08007631 	.word	0x08007631
 80075d4:	0800760d 	.word	0x0800760d
 80075d8:	08007631 	.word	0x08007631
 80075dc:	08007631 	.word	0x08007631
 80075e0:	08007631 	.word	0x08007631
 80075e4:	0800761f 	.word	0x0800761f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0202 	orr.w	r2, r2, #2
 80075f6:	60da      	str	r2, [r3, #12]
      break;
 80075f8:	e01d      	b.n	8007636 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0204 	orr.w	r2, r2, #4
 8007608:	60da      	str	r2, [r3, #12]
      break;
 800760a:	e014      	b.n	8007636 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0208 	orr.w	r2, r2, #8
 800761a:	60da      	str	r2, [r3, #12]
      break;
 800761c:	e00b      	b.n	8007636 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	68da      	ldr	r2, [r3, #12]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0210 	orr.w	r2, r2, #16
 800762c:	60da      	str	r2, [r3, #12]
      break;
 800762e:	e002      	b.n	8007636 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	73fb      	strb	r3, [r7, #15]
      break;
 8007634:	bf00      	nop
  }

  if (status == HAL_OK)
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d158      	bne.n	80076ee <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2201      	movs	r2, #1
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	4618      	mov	r0, r3
 8007646:	f001 fb1b 	bl	8008c80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a2a      	ldr	r2, [pc, #168]	; (80076f8 <HAL_TIM_IC_Start_IT+0x294>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d02c      	beq.n	80076ae <HAL_TIM_IC_Start_IT+0x24a>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765c:	d027      	beq.n	80076ae <HAL_TIM_IC_Start_IT+0x24a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a26      	ldr	r2, [pc, #152]	; (80076fc <HAL_TIM_IC_Start_IT+0x298>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d022      	beq.n	80076ae <HAL_TIM_IC_Start_IT+0x24a>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a24      	ldr	r2, [pc, #144]	; (8007700 <HAL_TIM_IC_Start_IT+0x29c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d01d      	beq.n	80076ae <HAL_TIM_IC_Start_IT+0x24a>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a23      	ldr	r2, [pc, #140]	; (8007704 <HAL_TIM_IC_Start_IT+0x2a0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d018      	beq.n	80076ae <HAL_TIM_IC_Start_IT+0x24a>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a21      	ldr	r2, [pc, #132]	; (8007708 <HAL_TIM_IC_Start_IT+0x2a4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d013      	beq.n	80076ae <HAL_TIM_IC_Start_IT+0x24a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a20      	ldr	r2, [pc, #128]	; (800770c <HAL_TIM_IC_Start_IT+0x2a8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00e      	beq.n	80076ae <HAL_TIM_IC_Start_IT+0x24a>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a1e      	ldr	r2, [pc, #120]	; (8007710 <HAL_TIM_IC_Start_IT+0x2ac>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d009      	beq.n	80076ae <HAL_TIM_IC_Start_IT+0x24a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1d      	ldr	r2, [pc, #116]	; (8007714 <HAL_TIM_IC_Start_IT+0x2b0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d004      	beq.n	80076ae <HAL_TIM_IC_Start_IT+0x24a>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a1b      	ldr	r2, [pc, #108]	; (8007718 <HAL_TIM_IC_Start_IT+0x2b4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d115      	bne.n	80076da <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	4b19      	ldr	r3, [pc, #100]	; (800771c <HAL_TIM_IC_Start_IT+0x2b8>)
 80076b6:	4013      	ands	r3, r2
 80076b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b06      	cmp	r3, #6
 80076be:	d015      	beq.n	80076ec <HAL_TIM_IC_Start_IT+0x288>
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c6:	d011      	beq.n	80076ec <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0201 	orr.w	r2, r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d8:	e008      	b.n	80076ec <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0201 	orr.w	r2, r2, #1
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	e000      	b.n	80076ee <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	40010000 	.word	0x40010000
 80076fc:	40000400 	.word	0x40000400
 8007700:	40000800 	.word	0x40000800
 8007704:	40000c00 	.word	0x40000c00
 8007708:	40010400 	.word	0x40010400
 800770c:	40001800 	.word	0x40001800
 8007710:	40014000 	.word	0x40014000
 8007714:	4000e000 	.word	0x4000e000
 8007718:	4000e400 	.word	0x4000e400
 800771c:	00010007 	.word	0x00010007

08007720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b02      	cmp	r3, #2
 8007734:	d122      	bne.n	800777c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b02      	cmp	r3, #2
 8007742:	d11b      	bne.n	800777c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0202 	mvn.w	r2, #2
 800774c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7f9 ff94 	bl	8001690 <HAL_TIM_IC_CaptureCallback>
 8007768:	e005      	b.n	8007776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fc30 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fc37 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0304 	and.w	r3, r3, #4
 8007786:	2b04      	cmp	r3, #4
 8007788:	d122      	bne.n	80077d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0304 	and.w	r3, r3, #4
 8007794:	2b04      	cmp	r3, #4
 8007796:	d11b      	bne.n	80077d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f06f 0204 	mvn.w	r2, #4
 80077a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2202      	movs	r2, #2
 80077a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d003      	beq.n	80077be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7f9 ff6a 	bl	8001690 <HAL_TIM_IC_CaptureCallback>
 80077bc:	e005      	b.n	80077ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fc06 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fc0d 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	f003 0308 	and.w	r3, r3, #8
 80077da:	2b08      	cmp	r3, #8
 80077dc:	d122      	bne.n	8007824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d11b      	bne.n	8007824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f06f 0208 	mvn.w	r2, #8
 80077f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2204      	movs	r2, #4
 80077fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	f003 0303 	and.w	r3, r3, #3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7f9 ff40 	bl	8001690 <HAL_TIM_IC_CaptureCallback>
 8007810:	e005      	b.n	800781e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fbdc 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fbe3 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	2b10      	cmp	r3, #16
 8007830:	d122      	bne.n	8007878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f003 0310 	and.w	r3, r3, #16
 800783c:	2b10      	cmp	r3, #16
 800783e:	d11b      	bne.n	8007878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f06f 0210 	mvn.w	r2, #16
 8007848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2208      	movs	r2, #8
 800784e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785a:	2b00      	cmp	r3, #0
 800785c:	d003      	beq.n	8007866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7f9 ff16 	bl	8001690 <HAL_TIM_IC_CaptureCallback>
 8007864:	e005      	b.n	8007872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fbb2 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fbb9 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b01      	cmp	r3, #1
 8007884:	d10e      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b01      	cmp	r3, #1
 8007892:	d107      	bne.n	80078a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0201 	mvn.w	r2, #1
 800789c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fb8c 	bl	8007fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ae:	2b80      	cmp	r3, #128	; 0x80
 80078b0:	d10e      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078bc:	2b80      	cmp	r3, #128	; 0x80
 80078be:	d107      	bne.n	80078d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 fb44 	bl	8008f58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078de:	d10e      	bne.n	80078fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ea:	2b80      	cmp	r3, #128	; 0x80
 80078ec:	d107      	bne.n	80078fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80078f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 fb37 	bl	8008f6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007908:	2b40      	cmp	r3, #64	; 0x40
 800790a:	d10e      	bne.n	800792a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007916:	2b40      	cmp	r3, #64	; 0x40
 8007918:	d107      	bne.n	800792a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fb67 	bl	8007ff8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b20      	cmp	r3, #32
 8007936:	d10e      	bne.n	8007956 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	f003 0320 	and.w	r3, r3, #32
 8007942:	2b20      	cmp	r3, #32
 8007944:	d107      	bne.n	8007956 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f06f 0220 	mvn.w	r2, #32
 800794e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 faf7 	bl	8008f44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b086      	sub	sp, #24
 8007962:	af00      	add	r7, sp, #0
 8007964:	60f8      	str	r0, [r7, #12]
 8007966:	60b9      	str	r1, [r7, #8]
 8007968:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007974:	2b01      	cmp	r3, #1
 8007976:	d101      	bne.n	800797c <HAL_TIM_IC_ConfigChannel+0x1e>
 8007978:	2302      	movs	r3, #2
 800797a:	e088      	b.n	8007a8e <HAL_TIM_IC_ConfigChannel+0x130>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d11b      	bne.n	80079c2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	6819      	ldr	r1, [r3, #0]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	f000 ff9d 	bl	80088d8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699a      	ldr	r2, [r3, #24]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 020c 	bic.w	r2, r2, #12
 80079ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6999      	ldr	r1, [r3, #24]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	619a      	str	r2, [r3, #24]
 80079c0:	e060      	b.n	8007a84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d11c      	bne.n	8007a02 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6819      	ldr	r1, [r3, #0]
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f001 f82d 	bl	8008a36 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699a      	ldr	r2, [r3, #24]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80079ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6999      	ldr	r1, [r3, #24]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	021a      	lsls	r2, r3, #8
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	619a      	str	r2, [r3, #24]
 8007a00:	e040      	b.n	8007a84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d11b      	bne.n	8007a40 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6818      	ldr	r0, [r3, #0]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	f001 f87a 	bl	8008b10 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	69da      	ldr	r2, [r3, #28]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 020c 	bic.w	r2, r2, #12
 8007a2a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	69d9      	ldr	r1, [r3, #28]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	61da      	str	r2, [r3, #28]
 8007a3e:	e021      	b.n	8007a84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b0c      	cmp	r3, #12
 8007a44:	d11c      	bne.n	8007a80 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6818      	ldr	r0, [r3, #0]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	6819      	ldr	r1, [r3, #0]
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f001 f897 	bl	8008b88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007a68:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69d9      	ldr	r1, [r3, #28]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	021a      	lsls	r2, r3, #8
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	61da      	str	r2, [r3, #28]
 8007a7e:	e001      	b.n	8007a84 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3718      	adds	r7, #24
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e0ff      	b.n	8007cb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b14      	cmp	r3, #20
 8007ac2:	f200 80f0 	bhi.w	8007ca6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ac6:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007ca7 	.word	0x08007ca7
 8007ad4:	08007ca7 	.word	0x08007ca7
 8007ad8:	08007ca7 	.word	0x08007ca7
 8007adc:	08007b61 	.word	0x08007b61
 8007ae0:	08007ca7 	.word	0x08007ca7
 8007ae4:	08007ca7 	.word	0x08007ca7
 8007ae8:	08007ca7 	.word	0x08007ca7
 8007aec:	08007ba3 	.word	0x08007ba3
 8007af0:	08007ca7 	.word	0x08007ca7
 8007af4:	08007ca7 	.word	0x08007ca7
 8007af8:	08007ca7 	.word	0x08007ca7
 8007afc:	08007be3 	.word	0x08007be3
 8007b00:	08007ca7 	.word	0x08007ca7
 8007b04:	08007ca7 	.word	0x08007ca7
 8007b08:	08007ca7 	.word	0x08007ca7
 8007b0c:	08007c25 	.word	0x08007c25
 8007b10:	08007ca7 	.word	0x08007ca7
 8007b14:	08007ca7 	.word	0x08007ca7
 8007b18:	08007ca7 	.word	0x08007ca7
 8007b1c:	08007c65 	.word	0x08007c65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68b9      	ldr	r1, [r7, #8]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fb16 	bl	8008158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	699a      	ldr	r2, [r3, #24]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0208 	orr.w	r2, r2, #8
 8007b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699a      	ldr	r2, [r3, #24]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0204 	bic.w	r2, r2, #4
 8007b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6999      	ldr	r1, [r3, #24]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	619a      	str	r2, [r3, #24]
      break;
 8007b5e:	e0a5      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68b9      	ldr	r1, [r7, #8]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 fb86 	bl	8008278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	699a      	ldr	r2, [r3, #24]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	699a      	ldr	r2, [r3, #24]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6999      	ldr	r1, [r3, #24]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	021a      	lsls	r2, r3, #8
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	619a      	str	r2, [r3, #24]
      break;
 8007ba0:	e084      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f000 fbef 	bl	800838c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69da      	ldr	r2, [r3, #28]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f042 0208 	orr.w	r2, r2, #8
 8007bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69da      	ldr	r2, [r3, #28]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0204 	bic.w	r2, r2, #4
 8007bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69d9      	ldr	r1, [r3, #28]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	691a      	ldr	r2, [r3, #16]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	61da      	str	r2, [r3, #28]
      break;
 8007be0:	e064      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 fc57 	bl	800849c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	69da      	ldr	r2, [r3, #28]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69da      	ldr	r2, [r3, #28]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69d9      	ldr	r1, [r3, #28]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	021a      	lsls	r2, r3, #8
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	61da      	str	r2, [r3, #28]
      break;
 8007c22:	e043      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fca0 	bl	8008570 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0208 	orr.w	r2, r2, #8
 8007c3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0204 	bic.w	r2, r2, #4
 8007c4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	691a      	ldr	r2, [r3, #16]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c62:	e023      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fce4 	bl	8008638 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	021a      	lsls	r2, r3, #8
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007ca4:	e002      	b.n	8007cac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8007caa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop

08007cc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_TIM_ConfigClockSource+0x1c>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e0dc      	b.n	8007e96 <HAL_TIM_ConfigClockSource+0x1d6>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	4b6a      	ldr	r3, [pc, #424]	; (8007ea0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68ba      	ldr	r2, [r7, #8]
 8007d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a64      	ldr	r2, [pc, #400]	; (8007ea4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	f000 80a9 	beq.w	8007e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007d18:	4a62      	ldr	r2, [pc, #392]	; (8007ea4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	f200 80ae 	bhi.w	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d20:	4a61      	ldr	r2, [pc, #388]	; (8007ea8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	f000 80a1 	beq.w	8007e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007d28:	4a5f      	ldr	r2, [pc, #380]	; (8007ea8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	f200 80a6 	bhi.w	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d30:	4a5e      	ldr	r2, [pc, #376]	; (8007eac <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	f000 8099 	beq.w	8007e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007d38:	4a5c      	ldr	r2, [pc, #368]	; (8007eac <HAL_TIM_ConfigClockSource+0x1ec>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	f200 809e 	bhi.w	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d44:	f000 8091 	beq.w	8007e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007d48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007d4c:	f200 8096 	bhi.w	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d54:	f000 8089 	beq.w	8007e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d5c:	f200 808e 	bhi.w	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d64:	d03e      	beq.n	8007de4 <HAL_TIM_ConfigClockSource+0x124>
 8007d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d6a:	f200 8087 	bhi.w	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d72:	f000 8086 	beq.w	8007e82 <HAL_TIM_ConfigClockSource+0x1c2>
 8007d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7a:	d87f      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d7c:	2b70      	cmp	r3, #112	; 0x70
 8007d7e:	d01a      	beq.n	8007db6 <HAL_TIM_ConfigClockSource+0xf6>
 8007d80:	2b70      	cmp	r3, #112	; 0x70
 8007d82:	d87b      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d84:	2b60      	cmp	r3, #96	; 0x60
 8007d86:	d050      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x16a>
 8007d88:	2b60      	cmp	r3, #96	; 0x60
 8007d8a:	d877      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d8c:	2b50      	cmp	r3, #80	; 0x50
 8007d8e:	d03c      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x14a>
 8007d90:	2b50      	cmp	r3, #80	; 0x50
 8007d92:	d873      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d94:	2b40      	cmp	r3, #64	; 0x40
 8007d96:	d058      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x18a>
 8007d98:	2b40      	cmp	r3, #64	; 0x40
 8007d9a:	d86f      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007d9c:	2b30      	cmp	r3, #48	; 0x30
 8007d9e:	d064      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007da0:	2b30      	cmp	r3, #48	; 0x30
 8007da2:	d86b      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	d060      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007da8:	2b20      	cmp	r3, #32
 8007daa:	d867      	bhi.n	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d05c      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007db0:	2b10      	cmp	r3, #16
 8007db2:	d05a      	beq.n	8007e6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007db4:	e062      	b.n	8007e7c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6818      	ldr	r0, [r3, #0]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	6899      	ldr	r1, [r3, #8]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f000 ff3b 	bl	8008c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	609a      	str	r2, [r3, #8]
      break;
 8007de2:	e04f      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6818      	ldr	r0, [r3, #0]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	6899      	ldr	r1, [r3, #8]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f000 ff24 	bl	8008c40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e06:	609a      	str	r2, [r3, #8]
      break;
 8007e08:	e03c      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f000 fdde 	bl	80089d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2150      	movs	r1, #80	; 0x50
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 feee 	bl	8008c04 <TIM_ITRx_SetConfig>
      break;
 8007e28:	e02c      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	6859      	ldr	r1, [r3, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	461a      	mov	r2, r3
 8007e38:	f000 fe3a 	bl	8008ab0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2160      	movs	r1, #96	; 0x60
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fede 	bl	8008c04 <TIM_ITRx_SetConfig>
      break;
 8007e48:	e01c      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	6859      	ldr	r1, [r3, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	461a      	mov	r2, r3
 8007e58:	f000 fdbe 	bl	80089d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2140      	movs	r1, #64	; 0x40
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fece 	bl	8008c04 <TIM_ITRx_SetConfig>
      break;
 8007e68:	e00c      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4619      	mov	r1, r3
 8007e74:	4610      	mov	r0, r2
 8007e76:	f000 fec5 	bl	8008c04 <TIM_ITRx_SetConfig>
      break;
 8007e7a:	e003      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e80:	e000      	b.n	8007e84 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	ffceff88 	.word	0xffceff88
 8007ea4:	00100040 	.word	0x00100040
 8007ea8:	00100030 	.word	0x00100030
 8007eac:	00100020 	.word	0x00100020

08007eb0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e031      	b.n	8007f2c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fc12 	bl	8008704 <TIM_SlaveTimer_SetConfig>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e018      	b.n	8007f2c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f08:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007f18:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3708      	adds	r7, #8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b0c      	cmp	r3, #12
 8007f46:	d831      	bhi.n	8007fac <HAL_TIM_ReadCapturedValue+0x78>
 8007f48:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4e:	bf00      	nop
 8007f50:	08007f85 	.word	0x08007f85
 8007f54:	08007fad 	.word	0x08007fad
 8007f58:	08007fad 	.word	0x08007fad
 8007f5c:	08007fad 	.word	0x08007fad
 8007f60:	08007f8f 	.word	0x08007f8f
 8007f64:	08007fad 	.word	0x08007fad
 8007f68:	08007fad 	.word	0x08007fad
 8007f6c:	08007fad 	.word	0x08007fad
 8007f70:	08007f99 	.word	0x08007f99
 8007f74:	08007fad 	.word	0x08007fad
 8007f78:	08007fad 	.word	0x08007fad
 8007f7c:	08007fad 	.word	0x08007fad
 8007f80:	08007fa3 	.word	0x08007fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8a:	60fb      	str	r3, [r7, #12]

      break;
 8007f8c:	e00f      	b.n	8007fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f94:	60fb      	str	r3, [r7, #12]

      break;
 8007f96:	e00a      	b.n	8007fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9e:	60fb      	str	r3, [r7, #12]

      break;
 8007fa0:	e005      	b.n	8007fae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	60fb      	str	r3, [r7, #12]

      break;
 8007faa:	e000      	b.n	8007fae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007fac:	bf00      	nop
  }

  return tmpreg;
 8007fae:	68fb      	ldr	r3, [r7, #12]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a44      	ldr	r2, [pc, #272]	; (8008130 <TIM_Base_SetConfig+0x124>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d013      	beq.n	800804c <TIM_Base_SetConfig+0x40>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800802a:	d00f      	beq.n	800804c <TIM_Base_SetConfig+0x40>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a41      	ldr	r2, [pc, #260]	; (8008134 <TIM_Base_SetConfig+0x128>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00b      	beq.n	800804c <TIM_Base_SetConfig+0x40>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a40      	ldr	r2, [pc, #256]	; (8008138 <TIM_Base_SetConfig+0x12c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d007      	beq.n	800804c <TIM_Base_SetConfig+0x40>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a3f      	ldr	r2, [pc, #252]	; (800813c <TIM_Base_SetConfig+0x130>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d003      	beq.n	800804c <TIM_Base_SetConfig+0x40>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a3e      	ldr	r2, [pc, #248]	; (8008140 <TIM_Base_SetConfig+0x134>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d108      	bne.n	800805e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a33      	ldr	r2, [pc, #204]	; (8008130 <TIM_Base_SetConfig+0x124>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d027      	beq.n	80080b6 <TIM_Base_SetConfig+0xaa>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806c:	d023      	beq.n	80080b6 <TIM_Base_SetConfig+0xaa>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a30      	ldr	r2, [pc, #192]	; (8008134 <TIM_Base_SetConfig+0x128>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d01f      	beq.n	80080b6 <TIM_Base_SetConfig+0xaa>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a2f      	ldr	r2, [pc, #188]	; (8008138 <TIM_Base_SetConfig+0x12c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d01b      	beq.n	80080b6 <TIM_Base_SetConfig+0xaa>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a2e      	ldr	r2, [pc, #184]	; (800813c <TIM_Base_SetConfig+0x130>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d017      	beq.n	80080b6 <TIM_Base_SetConfig+0xaa>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a2d      	ldr	r2, [pc, #180]	; (8008140 <TIM_Base_SetConfig+0x134>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d013      	beq.n	80080b6 <TIM_Base_SetConfig+0xaa>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a2c      	ldr	r2, [pc, #176]	; (8008144 <TIM_Base_SetConfig+0x138>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00f      	beq.n	80080b6 <TIM_Base_SetConfig+0xaa>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a2b      	ldr	r2, [pc, #172]	; (8008148 <TIM_Base_SetConfig+0x13c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00b      	beq.n	80080b6 <TIM_Base_SetConfig+0xaa>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a2a      	ldr	r2, [pc, #168]	; (800814c <TIM_Base_SetConfig+0x140>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d007      	beq.n	80080b6 <TIM_Base_SetConfig+0xaa>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a29      	ldr	r2, [pc, #164]	; (8008150 <TIM_Base_SetConfig+0x144>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d003      	beq.n	80080b6 <TIM_Base_SetConfig+0xaa>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a28      	ldr	r2, [pc, #160]	; (8008154 <TIM_Base_SetConfig+0x148>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d108      	bne.n	80080c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a10      	ldr	r2, [pc, #64]	; (8008130 <TIM_Base_SetConfig+0x124>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00f      	beq.n	8008114 <TIM_Base_SetConfig+0x108>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a12      	ldr	r2, [pc, #72]	; (8008140 <TIM_Base_SetConfig+0x134>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d00b      	beq.n	8008114 <TIM_Base_SetConfig+0x108>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a11      	ldr	r2, [pc, #68]	; (8008144 <TIM_Base_SetConfig+0x138>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d007      	beq.n	8008114 <TIM_Base_SetConfig+0x108>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a10      	ldr	r2, [pc, #64]	; (8008148 <TIM_Base_SetConfig+0x13c>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d003      	beq.n	8008114 <TIM_Base_SetConfig+0x108>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a0f      	ldr	r2, [pc, #60]	; (800814c <TIM_Base_SetConfig+0x140>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d103      	bne.n	800811c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	615a      	str	r2, [r3, #20]
}
 8008122:	bf00      	nop
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	40010000 	.word	0x40010000
 8008134:	40000400 	.word	0x40000400
 8008138:	40000800 	.word	0x40000800
 800813c:	40000c00 	.word	0x40000c00
 8008140:	40010400 	.word	0x40010400
 8008144:	40014000 	.word	0x40014000
 8008148:	40014400 	.word	0x40014400
 800814c:	40014800 	.word	0x40014800
 8008150:	4000e000 	.word	0x4000e000
 8008154:	4000e400 	.word	0x4000e400

08008158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	f023 0201 	bic.w	r2, r3, #1
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4b37      	ldr	r3, [pc, #220]	; (8008260 <TIM_OC1_SetConfig+0x108>)
 8008184:	4013      	ands	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 0303 	bic.w	r3, r3, #3
 800818e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f023 0302 	bic.w	r3, r3, #2
 80081a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a2d      	ldr	r2, [pc, #180]	; (8008264 <TIM_OC1_SetConfig+0x10c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00f      	beq.n	80081d4 <TIM_OC1_SetConfig+0x7c>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a2c      	ldr	r2, [pc, #176]	; (8008268 <TIM_OC1_SetConfig+0x110>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d00b      	beq.n	80081d4 <TIM_OC1_SetConfig+0x7c>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	4a2b      	ldr	r2, [pc, #172]	; (800826c <TIM_OC1_SetConfig+0x114>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d007      	beq.n	80081d4 <TIM_OC1_SetConfig+0x7c>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a2a      	ldr	r2, [pc, #168]	; (8008270 <TIM_OC1_SetConfig+0x118>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d003      	beq.n	80081d4 <TIM_OC1_SetConfig+0x7c>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a29      	ldr	r2, [pc, #164]	; (8008274 <TIM_OC1_SetConfig+0x11c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d10c      	bne.n	80081ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f023 0308 	bic.w	r3, r3, #8
 80081da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f023 0304 	bic.w	r3, r3, #4
 80081ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	4a1c      	ldr	r2, [pc, #112]	; (8008264 <TIM_OC1_SetConfig+0x10c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d00f      	beq.n	8008216 <TIM_OC1_SetConfig+0xbe>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a1b      	ldr	r2, [pc, #108]	; (8008268 <TIM_OC1_SetConfig+0x110>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d00b      	beq.n	8008216 <TIM_OC1_SetConfig+0xbe>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a1a      	ldr	r2, [pc, #104]	; (800826c <TIM_OC1_SetConfig+0x114>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d007      	beq.n	8008216 <TIM_OC1_SetConfig+0xbe>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a19      	ldr	r2, [pc, #100]	; (8008270 <TIM_OC1_SetConfig+0x118>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d003      	beq.n	8008216 <TIM_OC1_SetConfig+0xbe>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a18      	ldr	r2, [pc, #96]	; (8008274 <TIM_OC1_SetConfig+0x11c>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d111      	bne.n	800823a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800821c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	4313      	orrs	r3, r2
 800822e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	4313      	orrs	r3, r2
 8008238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	621a      	str	r2, [r3, #32]
}
 8008254:	bf00      	nop
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	fffeff8f 	.word	0xfffeff8f
 8008264:	40010000 	.word	0x40010000
 8008268:	40010400 	.word	0x40010400
 800826c:	40014000 	.word	0x40014000
 8008270:	40014400 	.word	0x40014400
 8008274:	40014800 	.word	0x40014800

08008278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	f023 0210 	bic.w	r2, r3, #16
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4b34      	ldr	r3, [pc, #208]	; (8008374 <TIM_OC2_SetConfig+0xfc>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f023 0320 	bic.w	r3, r3, #32
 80082c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	011b      	lsls	r3, r3, #4
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a29      	ldr	r2, [pc, #164]	; (8008378 <TIM_OC2_SetConfig+0x100>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d003      	beq.n	80082e0 <TIM_OC2_SetConfig+0x68>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a28      	ldr	r2, [pc, #160]	; (800837c <TIM_OC2_SetConfig+0x104>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d10d      	bne.n	80082fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a1e      	ldr	r2, [pc, #120]	; (8008378 <TIM_OC2_SetConfig+0x100>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00f      	beq.n	8008324 <TIM_OC2_SetConfig+0xac>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a1d      	ldr	r2, [pc, #116]	; (800837c <TIM_OC2_SetConfig+0x104>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00b      	beq.n	8008324 <TIM_OC2_SetConfig+0xac>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a1c      	ldr	r2, [pc, #112]	; (8008380 <TIM_OC2_SetConfig+0x108>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d007      	beq.n	8008324 <TIM_OC2_SetConfig+0xac>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a1b      	ldr	r2, [pc, #108]	; (8008384 <TIM_OC2_SetConfig+0x10c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d003      	beq.n	8008324 <TIM_OC2_SetConfig+0xac>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a1a      	ldr	r2, [pc, #104]	; (8008388 <TIM_OC2_SetConfig+0x110>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d113      	bne.n	800834c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800832a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	4313      	orrs	r3, r2
 800834a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	621a      	str	r2, [r3, #32]
}
 8008366:	bf00      	nop
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	feff8fff 	.word	0xfeff8fff
 8008378:	40010000 	.word	0x40010000
 800837c:	40010400 	.word	0x40010400
 8008380:	40014000 	.word	0x40014000
 8008384:	40014400 	.word	0x40014400
 8008388:	40014800 	.word	0x40014800

0800838c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4b33      	ldr	r3, [pc, #204]	; (8008484 <TIM_OC3_SetConfig+0xf8>)
 80083b8:	4013      	ands	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	021b      	lsls	r3, r3, #8
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a28      	ldr	r2, [pc, #160]	; (8008488 <TIM_OC3_SetConfig+0xfc>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d003      	beq.n	80083f2 <TIM_OC3_SetConfig+0x66>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a27      	ldr	r2, [pc, #156]	; (800848c <TIM_OC3_SetConfig+0x100>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d10d      	bne.n	800840e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	021b      	lsls	r3, r3, #8
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800840c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a1d      	ldr	r2, [pc, #116]	; (8008488 <TIM_OC3_SetConfig+0xfc>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00f      	beq.n	8008436 <TIM_OC3_SetConfig+0xaa>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a1c      	ldr	r2, [pc, #112]	; (800848c <TIM_OC3_SetConfig+0x100>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d00b      	beq.n	8008436 <TIM_OC3_SetConfig+0xaa>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <TIM_OC3_SetConfig+0x104>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d007      	beq.n	8008436 <TIM_OC3_SetConfig+0xaa>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a1a      	ldr	r2, [pc, #104]	; (8008494 <TIM_OC3_SetConfig+0x108>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d003      	beq.n	8008436 <TIM_OC3_SetConfig+0xaa>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a19      	ldr	r2, [pc, #100]	; (8008498 <TIM_OC3_SetConfig+0x10c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d113      	bne.n	800845e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800843c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	4313      	orrs	r3, r2
 8008450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	011b      	lsls	r3, r3, #4
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	621a      	str	r2, [r3, #32]
}
 8008478:	bf00      	nop
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	fffeff8f 	.word	0xfffeff8f
 8008488:	40010000 	.word	0x40010000
 800848c:	40010400 	.word	0x40010400
 8008490:	40014000 	.word	0x40014000
 8008494:	40014400 	.word	0x40014400
 8008498:	40014800 	.word	0x40014800

0800849c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4b24      	ldr	r3, [pc, #144]	; (8008558 <TIM_OC4_SetConfig+0xbc>)
 80084c8:	4013      	ands	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	021b      	lsls	r3, r3, #8
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4313      	orrs	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	031b      	lsls	r3, r3, #12
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a19      	ldr	r2, [pc, #100]	; (800855c <TIM_OC4_SetConfig+0xc0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d00f      	beq.n	800851c <TIM_OC4_SetConfig+0x80>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a18      	ldr	r2, [pc, #96]	; (8008560 <TIM_OC4_SetConfig+0xc4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d00b      	beq.n	800851c <TIM_OC4_SetConfig+0x80>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a17      	ldr	r2, [pc, #92]	; (8008564 <TIM_OC4_SetConfig+0xc8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d007      	beq.n	800851c <TIM_OC4_SetConfig+0x80>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a16      	ldr	r2, [pc, #88]	; (8008568 <TIM_OC4_SetConfig+0xcc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d003      	beq.n	800851c <TIM_OC4_SetConfig+0x80>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a15      	ldr	r2, [pc, #84]	; (800856c <TIM_OC4_SetConfig+0xd0>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d109      	bne.n	8008530 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	695b      	ldr	r3, [r3, #20]
 8008528:	019b      	lsls	r3, r3, #6
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	4313      	orrs	r3, r2
 800852e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	621a      	str	r2, [r3, #32]
}
 800854a:	bf00      	nop
 800854c:	371c      	adds	r7, #28
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	feff8fff 	.word	0xfeff8fff
 800855c:	40010000 	.word	0x40010000
 8008560:	40010400 	.word	0x40010400
 8008564:	40014000 	.word	0x40014000
 8008568:	40014400 	.word	0x40014400
 800856c:	40014800 	.word	0x40014800

08008570 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4b21      	ldr	r3, [pc, #132]	; (8008620 <TIM_OC5_SetConfig+0xb0>)
 800859c:	4013      	ands	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80085b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a18      	ldr	r2, [pc, #96]	; (8008624 <TIM_OC5_SetConfig+0xb4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00f      	beq.n	80085e6 <TIM_OC5_SetConfig+0x76>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a17      	ldr	r2, [pc, #92]	; (8008628 <TIM_OC5_SetConfig+0xb8>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00b      	beq.n	80085e6 <TIM_OC5_SetConfig+0x76>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a16      	ldr	r2, [pc, #88]	; (800862c <TIM_OC5_SetConfig+0xbc>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d007      	beq.n	80085e6 <TIM_OC5_SetConfig+0x76>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a15      	ldr	r2, [pc, #84]	; (8008630 <TIM_OC5_SetConfig+0xc0>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d003      	beq.n	80085e6 <TIM_OC5_SetConfig+0x76>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a14      	ldr	r2, [pc, #80]	; (8008634 <TIM_OC5_SetConfig+0xc4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d109      	bne.n	80085fa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	021b      	lsls	r3, r3, #8
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	621a      	str	r2, [r3, #32]
}
 8008614:	bf00      	nop
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	fffeff8f 	.word	0xfffeff8f
 8008624:	40010000 	.word	0x40010000
 8008628:	40010400 	.word	0x40010400
 800862c:	40014000 	.word	0x40014000
 8008630:	40014400 	.word	0x40014400
 8008634:	40014800 	.word	0x40014800

08008638 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4b22      	ldr	r3, [pc, #136]	; (80086ec <TIM_OC6_SetConfig+0xb4>)
 8008664:	4013      	ands	r3, r2
 8008666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4313      	orrs	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800867a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	051b      	lsls	r3, r3, #20
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	4313      	orrs	r3, r2
 8008686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a19      	ldr	r2, [pc, #100]	; (80086f0 <TIM_OC6_SetConfig+0xb8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00f      	beq.n	80086b0 <TIM_OC6_SetConfig+0x78>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a18      	ldr	r2, [pc, #96]	; (80086f4 <TIM_OC6_SetConfig+0xbc>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d00b      	beq.n	80086b0 <TIM_OC6_SetConfig+0x78>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a17      	ldr	r2, [pc, #92]	; (80086f8 <TIM_OC6_SetConfig+0xc0>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d007      	beq.n	80086b0 <TIM_OC6_SetConfig+0x78>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a16      	ldr	r2, [pc, #88]	; (80086fc <TIM_OC6_SetConfig+0xc4>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d003      	beq.n	80086b0 <TIM_OC6_SetConfig+0x78>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a15      	ldr	r2, [pc, #84]	; (8008700 <TIM_OC6_SetConfig+0xc8>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d109      	bne.n	80086c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	029b      	lsls	r3, r3, #10
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68fa      	ldr	r2, [r7, #12]
 80086ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	621a      	str	r2, [r3, #32]
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	feff8fff 	.word	0xfeff8fff
 80086f0:	40010000 	.word	0x40010000
 80086f4:	40010400 	.word	0x40010400
 80086f8:	40014000 	.word	0x40014000
 80086fc:	40014400 	.word	0x40014400
 8008700:	40014800 	.word	0x40014800

08008704 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4b65      	ldr	r3, [pc, #404]	; (80088b4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800871e:	4013      	ands	r3, r2
 8008720:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	4313      	orrs	r3, r2
 800872a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4b62      	ldr	r3, [pc, #392]	; (80088b8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008730:	4013      	ands	r3, r2
 8008732:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	4a5c      	ldr	r2, [pc, #368]	; (80088bc <TIM_SlaveTimer_SetConfig+0x1b8>)
 800874c:	4293      	cmp	r3, r2
 800874e:	f000 80ab 	beq.w	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008752:	4a5a      	ldr	r2, [pc, #360]	; (80088bc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	f200 80a4 	bhi.w	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 800875a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800875e:	f000 80a3 	beq.w	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008766:	f200 809c 	bhi.w	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 800876a:	4a55      	ldr	r2, [pc, #340]	; (80088c0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800876c:	4293      	cmp	r3, r2
 800876e:	f000 809b 	beq.w	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008772:	4a53      	ldr	r2, [pc, #332]	; (80088c0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008774:	4293      	cmp	r3, r2
 8008776:	f200 8094 	bhi.w	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 800877a:	4a52      	ldr	r2, [pc, #328]	; (80088c4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	f000 8093 	beq.w	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008782:	4a50      	ldr	r2, [pc, #320]	; (80088c4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008784:	4293      	cmp	r3, r2
 8008786:	f200 808c 	bhi.w	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 800878a:	4a4f      	ldr	r2, [pc, #316]	; (80088c8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	f000 808b 	beq.w	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008792:	4a4d      	ldr	r2, [pc, #308]	; (80088c8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8008794:	4293      	cmp	r3, r2
 8008796:	f200 8084 	bhi.w	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 800879a:	4a4c      	ldr	r2, [pc, #304]	; (80088cc <TIM_SlaveTimer_SetConfig+0x1c8>)
 800879c:	4293      	cmp	r3, r2
 800879e:	f000 8083 	beq.w	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087a2:	4a4a      	ldr	r2, [pc, #296]	; (80088cc <TIM_SlaveTimer_SetConfig+0x1c8>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d87c      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80087a8:	4a49      	ldr	r2, [pc, #292]	; (80088d0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d07c      	beq.n	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087ae:	4a48      	ldr	r2, [pc, #288]	; (80088d0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d876      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80087b4:	4a47      	ldr	r2, [pc, #284]	; (80088d4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d076      	beq.n	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087ba:	4a46      	ldr	r2, [pc, #280]	; (80088d4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d870      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80087c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087c4:	d070      	beq.n	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087c6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087ca:	d86a      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80087cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087d0:	d06a      	beq.n	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087d6:	d864      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80087d8:	2b70      	cmp	r3, #112	; 0x70
 80087da:	d01a      	beq.n	8008812 <TIM_SlaveTimer_SetConfig+0x10e>
 80087dc:	2b70      	cmp	r3, #112	; 0x70
 80087de:	d860      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80087e0:	2b60      	cmp	r3, #96	; 0x60
 80087e2:	d054      	beq.n	800888e <TIM_SlaveTimer_SetConfig+0x18a>
 80087e4:	2b60      	cmp	r3, #96	; 0x60
 80087e6:	d85c      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80087e8:	2b50      	cmp	r3, #80	; 0x50
 80087ea:	d046      	beq.n	800887a <TIM_SlaveTimer_SetConfig+0x176>
 80087ec:	2b50      	cmp	r3, #80	; 0x50
 80087ee:	d858      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80087f0:	2b40      	cmp	r3, #64	; 0x40
 80087f2:	d019      	beq.n	8008828 <TIM_SlaveTimer_SetConfig+0x124>
 80087f4:	2b40      	cmp	r3, #64	; 0x40
 80087f6:	d854      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 80087f8:	2b30      	cmp	r3, #48	; 0x30
 80087fa:	d055      	beq.n	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087fc:	2b30      	cmp	r3, #48	; 0x30
 80087fe:	d850      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008800:	2b20      	cmp	r3, #32
 8008802:	d051      	beq.n	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008804:	2b20      	cmp	r3, #32
 8008806:	d84c      	bhi.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d04d      	beq.n	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800880c:	2b10      	cmp	r3, #16
 800880e:	d04b      	beq.n	80088a8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008810:	e047      	b.n	80088a2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6818      	ldr	r0, [r3, #0]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68d9      	ldr	r1, [r3, #12]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	f000 fa0d 	bl	8008c40 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008826:	e040      	b.n	80088aa <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b05      	cmp	r3, #5
 800882e:	d101      	bne.n	8008834 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e03b      	b.n	80088ac <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6a1a      	ldr	r2, [r3, #32]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0201 	bic.w	r2, r2, #1
 800884a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800885a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	011b      	lsls	r3, r3, #4
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	4313      	orrs	r3, r2
 8008866:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	621a      	str	r2, [r3, #32]
      break;
 8008878:	e017      	b.n	80088aa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6818      	ldr	r0, [r3, #0]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	6899      	ldr	r1, [r3, #8]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	461a      	mov	r2, r3
 8008888:	f000 f8a6 	bl	80089d8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800888c:	e00d      	b.n	80088aa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	6899      	ldr	r1, [r3, #8]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	461a      	mov	r2, r3
 800889c:	f000 f908 	bl	8008ab0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80088a0:	e003      	b.n	80088aa <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	75fb      	strb	r3, [r7, #23]
      break;
 80088a6:	e000      	b.n	80088aa <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80088a8:	bf00      	nop
  }

  return status;
 80088aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	ffcfff8f 	.word	0xffcfff8f
 80088b8:	fffefff8 	.word	0xfffefff8
 80088bc:	00200010 	.word	0x00200010
 80088c0:	00100070 	.word	0x00100070
 80088c4:	00100060 	.word	0x00100060
 80088c8:	00100050 	.word	0x00100050
 80088cc:	00100040 	.word	0x00100040
 80088d0:	00100030 	.word	0x00100030
 80088d4:	00100020 	.word	0x00100020

080088d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]
 80088e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	f023 0201 	bic.w	r2, r3, #1
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4a2c      	ldr	r2, [pc, #176]	; (80089b4 <TIM_TI1_SetConfig+0xdc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d023      	beq.n	800894e <TIM_TI1_SetConfig+0x76>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800890c:	d01f      	beq.n	800894e <TIM_TI1_SetConfig+0x76>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4a29      	ldr	r2, [pc, #164]	; (80089b8 <TIM_TI1_SetConfig+0xe0>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d01b      	beq.n	800894e <TIM_TI1_SetConfig+0x76>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4a28      	ldr	r2, [pc, #160]	; (80089bc <TIM_TI1_SetConfig+0xe4>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d017      	beq.n	800894e <TIM_TI1_SetConfig+0x76>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	4a27      	ldr	r2, [pc, #156]	; (80089c0 <TIM_TI1_SetConfig+0xe8>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <TIM_TI1_SetConfig+0x76>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4a26      	ldr	r2, [pc, #152]	; (80089c4 <TIM_TI1_SetConfig+0xec>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00f      	beq.n	800894e <TIM_TI1_SetConfig+0x76>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	4a25      	ldr	r2, [pc, #148]	; (80089c8 <TIM_TI1_SetConfig+0xf0>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00b      	beq.n	800894e <TIM_TI1_SetConfig+0x76>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4a24      	ldr	r2, [pc, #144]	; (80089cc <TIM_TI1_SetConfig+0xf4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d007      	beq.n	800894e <TIM_TI1_SetConfig+0x76>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4a23      	ldr	r2, [pc, #140]	; (80089d0 <TIM_TI1_SetConfig+0xf8>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d003      	beq.n	800894e <TIM_TI1_SetConfig+0x76>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4a22      	ldr	r2, [pc, #136]	; (80089d4 <TIM_TI1_SetConfig+0xfc>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d101      	bne.n	8008952 <TIM_TI1_SetConfig+0x7a>
 800894e:	2301      	movs	r3, #1
 8008950:	e000      	b.n	8008954 <TIM_TI1_SetConfig+0x7c>
 8008952:	2300      	movs	r3, #0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d008      	beq.n	800896a <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f023 0303 	bic.w	r3, r3, #3
 800895e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4313      	orrs	r3, r2
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e003      	b.n	8008972 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f043 0301 	orr.w	r3, r3, #1
 8008970:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	b2db      	uxtb	r3, r3
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f023 030a 	bic.w	r3, r3, #10
 800898c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f003 030a 	and.w	r3, r3, #10
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4313      	orrs	r3, r2
 8008998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	621a      	str	r2, [r3, #32]
}
 80089a6:	bf00      	nop
 80089a8:	371c      	adds	r7, #28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	40010000 	.word	0x40010000
 80089b8:	40000400 	.word	0x40000400
 80089bc:	40000800 	.word	0x40000800
 80089c0:	40000c00 	.word	0x40000c00
 80089c4:	40010400 	.word	0x40010400
 80089c8:	40001800 	.word	0x40001800
 80089cc:	40014000 	.word	0x40014000
 80089d0:	4000e000 	.word	0x4000e000
 80089d4:	4000e400 	.word	0x4000e400

080089d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f023 0201 	bic.w	r2, r3, #1
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f023 030a 	bic.w	r3, r3, #10
 8008a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	621a      	str	r2, [r3, #32]
}
 8008a2a:	bf00      	nop
 8008a2c:	371c      	adds	r7, #28
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b087      	sub	sp, #28
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	f023 0210 	bic.w	r2, r3, #16
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	021b      	lsls	r3, r3, #8
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	031b      	lsls	r3, r3, #12
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	621a      	str	r2, [r3, #32]
}
 8008aa4:	bf00      	nop
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	f023 0210 	bic.w	r2, r3, #16
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ada:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	031b      	lsls	r3, r3, #12
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008aec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	621a      	str	r2, [r3, #32]
}
 8008b04:	bf00      	nop
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
 8008b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f023 0303 	bic.w	r3, r3, #3
 8008b3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008b60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	621a      	str	r2, [r3, #32]
}
 8008b7c:	bf00      	nop
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	031b      	lsls	r3, r3, #12
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008bda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	031b      	lsls	r3, r3, #12
 8008be0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	621a      	str	r2, [r3, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	4b09      	ldr	r3, [pc, #36]	; (8008c3c <TIM_ITRx_SetConfig+0x38>)
 8008c18:	4013      	ands	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	f043 0307 	orr.w	r3, r3, #7
 8008c26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	609a      	str	r2, [r3, #8]
}
 8008c2e:	bf00      	nop
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	ffcfff8f 	.word	0xffcfff8f

08008c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b087      	sub	sp, #28
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
 8008c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	021a      	lsls	r2, r3, #8
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	609a      	str	r2, [r3, #8]
}
 8008c74:	bf00      	nop
 8008c76:	371c      	adds	r7, #28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f003 031f 	and.w	r3, r3, #31
 8008c92:	2201      	movs	r2, #1
 8008c94:	fa02 f303 	lsl.w	r3, r2, r3
 8008c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a1a      	ldr	r2, [r3, #32]
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	401a      	ands	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	6a1a      	ldr	r2, [r3, #32]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f003 031f 	and.w	r3, r3, #31
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	621a      	str	r2, [r3, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	e077      	b.n	8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a35      	ldr	r2, [pc, #212]	; (8008de0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d004      	beq.n	8008d18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a34      	ldr	r2, [pc, #208]	; (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d108      	bne.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008d1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a25      	ldr	r2, [pc, #148]	; (8008de0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d02c      	beq.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d56:	d027      	beq.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a22      	ldr	r2, [pc, #136]	; (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d022      	beq.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a21      	ldr	r2, [pc, #132]	; (8008dec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d01d      	beq.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a1f      	ldr	r2, [pc, #124]	; (8008df0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d018      	beq.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a1a      	ldr	r2, [pc, #104]	; (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d013      	beq.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a1b      	ldr	r2, [pc, #108]	; (8008df4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d00e      	beq.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a1a      	ldr	r2, [pc, #104]	; (8008df8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d009      	beq.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d004      	beq.n	8008da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d10c      	bne.n	8008dc2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr
 8008de0:	40010000 	.word	0x40010000
 8008de4:	40010400 	.word	0x40010400
 8008de8:	40000400 	.word	0x40000400
 8008dec:	40000800 	.word	0x40000800
 8008df0:	40000c00 	.word	0x40000c00
 8008df4:	40001800 	.word	0x40001800
 8008df8:	40014000 	.word	0x40014000
 8008dfc:	4000e000 	.word	0x4000e000
 8008e00:	4000e400 	.word	0x4000e400

08008e04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e087      	b.n	8008f30 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	041b      	lsls	r3, r3, #16
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a27      	ldr	r2, [pc, #156]	; (8008f3c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d004      	beq.n	8008eae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a25      	ldr	r2, [pc, #148]	; (8008f40 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d106      	bne.n	8008ebc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a1e      	ldr	r2, [pc, #120]	; (8008f3c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d004      	beq.n	8008ed0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a1d      	ldr	r2, [pc, #116]	; (8008f40 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d126      	bne.n	8008f1e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eda:	051b      	lsls	r3, r3, #20
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	6a1b      	ldr	r3, [r3, #32]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a0e      	ldr	r2, [pc, #56]	; (8008f3c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d004      	beq.n	8008f10 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a0d      	ldr	r2, [pc, #52]	; (8008f40 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d106      	bne.n	8008f1e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	40010000 	.word	0x40010000
 8008f40:	40010400 	.word	0x40010400

08008f44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f4c:	bf00      	nop
 8008f4e:	370c      	adds	r7, #12
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <_ZdlPvj>:
 8008f80:	f000 b8ff 	b.w	8009182 <_ZdlPv>

08008f84 <_Znwj>:
 8008f84:	2801      	cmp	r0, #1
 8008f86:	bf38      	it	cc
 8008f88:	2001      	movcc	r0, #1
 8008f8a:	b510      	push	{r4, lr}
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 f934 	bl	80091fc <malloc>
 8008f94:	b930      	cbnz	r0, 8008fa4 <_Znwj+0x20>
 8008f96:	f000 f8f7 	bl	8009188 <_ZSt15get_new_handlerv>
 8008f9a:	b908      	cbnz	r0, 8008fa0 <_Znwj+0x1c>
 8008f9c:	f000 f8fc 	bl	8009198 <abort>
 8008fa0:	4780      	blx	r0
 8008fa2:	e7f4      	b.n	8008f8e <_Znwj+0xa>
 8008fa4:	bd10      	pop	{r4, pc}

08008fa6 <_ZNSaIcEC1Ev>:
 8008fa6:	4770      	bx	lr

08008fa8 <_ZNSaIcED1Ev>:
 8008fa8:	4770      	bx	lr

08008faa <_ZSt17__throw_bad_allocv>:
 8008faa:	b508      	push	{r3, lr}
 8008fac:	f000 f8f4 	bl	8009198 <abort>

08008fb0 <_ZSt19__throw_logic_errorPKc>:
 8008fb0:	b508      	push	{r3, lr}
 8008fb2:	f000 f8f1 	bl	8009198 <abort>

08008fb6 <_ZSt20__throw_length_errorPKc>:
 8008fb6:	b508      	push	{r3, lr}
 8008fb8:	f000 f8ee 	bl	8009198 <abort>

08008fbc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8008fbc:	b10a      	cbz	r2, 8008fc2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8008fbe:	f000 b92d 	b.w	800921c <memcpy>
 8008fc2:	4770      	bx	lr

08008fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008fc4:	b508      	push	{r3, lr}
 8008fc6:	680b      	ldr	r3, [r1, #0]
 8008fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fcc:	d302      	bcc.n	8008fd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8008fce:	480d      	ldr	r0, [pc, #52]	; (8009004 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008fd0:	f7ff fff1 	bl	8008fb6 <_ZSt20__throw_length_errorPKc>
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d90b      	bls.n	8008ff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008fd8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8008fdc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008fe0:	d206      	bcs.n	8008ff0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008fe2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008fe6:	bf2a      	itet	cs
 8008fe8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8008fec:	6008      	strcc	r0, [r1, #0]
 8008fee:	600b      	strcs	r3, [r1, #0]
 8008ff0:	6808      	ldr	r0, [r1, #0]
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d501      	bpl.n	8008ffa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8008ff6:	f7ff ffd8 	bl	8008faa <_ZSt17__throw_bad_allocv>
 8008ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ffe:	f7ff bfc1 	b.w	8008f84 <_Znwj>
 8009002:	bf00      	nop
 8009004:	080096c4 	.word	0x080096c4

08009008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009008:	f850 3b08 	ldr.w	r3, [r0], #8
 800900c:	4283      	cmp	r3, r0
 800900e:	d002      	beq.n	8009016 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009010:	4618      	mov	r0, r3
 8009012:	f000 b8b6 	b.w	8009182 <_ZdlPv>
 8009016:	4770      	bx	lr

08009018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009018:	2a01      	cmp	r2, #1
 800901a:	b410      	push	{r4}
 800901c:	d104      	bne.n	8009028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800901e:	780a      	ldrb	r2, [r1, #0]
 8009020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009024:	7002      	strb	r2, [r0, #0]
 8009026:	4770      	bx	lr
 8009028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800902c:	f7ff bfc6 	b.w	8008fbc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08009030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8009030:	b508      	push	{r3, lr}
 8009032:	1a52      	subs	r2, r2, r1
 8009034:	f7ff fff0 	bl	8009018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009038:	bd08      	pop	{r3, pc}

0800903a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800903a:	b508      	push	{r3, lr}
 800903c:	1a52      	subs	r2, r2, r1
 800903e:	f7ff ffeb 	bl	8009018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009042:	bd08      	pop	{r3, pc}

08009044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8009044:	4288      	cmp	r0, r1
 8009046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009048:	4604      	mov	r4, r0
 800904a:	460e      	mov	r6, r1
 800904c:	d01e      	beq.n	800908c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 800904e:	4603      	mov	r3, r0
 8009050:	684d      	ldr	r5, [r1, #4]
 8009052:	f853 2b08 	ldr.w	r2, [r3], #8
 8009056:	429a      	cmp	r2, r3
 8009058:	bf14      	ite	ne
 800905a:	6882      	ldrne	r2, [r0, #8]
 800905c:	220f      	moveq	r2, #15
 800905e:	42aa      	cmp	r2, r5
 8009060:	d20a      	bcs.n	8009078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8009062:	a901      	add	r1, sp, #4
 8009064:	9501      	str	r5, [sp, #4]
 8009066:	f7ff ffad 	bl	8008fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800906a:	4607      	mov	r7, r0
 800906c:	4620      	mov	r0, r4
 800906e:	f7ff ffcb 	bl	8009008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009072:	9b01      	ldr	r3, [sp, #4]
 8009074:	6027      	str	r7, [r4, #0]
 8009076:	60a3      	str	r3, [r4, #8]
 8009078:	b125      	cbz	r5, 8009084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 800907a:	6831      	ldr	r1, [r6, #0]
 800907c:	6820      	ldr	r0, [r4, #0]
 800907e:	462a      	mov	r2, r5
 8009080:	f7ff ffca 	bl	8009018 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	6065      	str	r5, [r4, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	555a      	strb	r2, [r3, r5]
 800908c:	b003      	add	sp, #12
 800908e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009090:	b510      	push	{r4, lr}
 8009092:	4604      	mov	r4, r0
 8009094:	f7ff ffb8 	bl	8009008 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009098:	4620      	mov	r0, r4
 800909a:	bd10      	pop	{r4, pc}

0800909c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800909c:	b510      	push	{r4, lr}
 800909e:	4604      	mov	r4, r0
 80090a0:	f7ff ffd0 	bl	8009044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80090a4:	4620      	mov	r0, r4
 80090a6:	bd10      	pop	{r4, pc}

080090a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 80090a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090aa:	4604      	mov	r4, r0
 80090ac:	4616      	mov	r6, r2
 80090ae:	460d      	mov	r5, r1
 80090b0:	b919      	cbnz	r1, 80090ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80090b2:	b112      	cbz	r2, 80090ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 80090b4:	480d      	ldr	r0, [pc, #52]	; (80090ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 80090b6:	f7ff ff7b 	bl	8008fb0 <_ZSt19__throw_logic_errorPKc>
 80090ba:	1b73      	subs	r3, r6, r5
 80090bc:	2b0f      	cmp	r3, #15
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	d907      	bls.n	80090d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 80090c2:	2200      	movs	r2, #0
 80090c4:	a901      	add	r1, sp, #4
 80090c6:	4620      	mov	r0, r4
 80090c8:	f7ff ff7c 	bl	8008fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80090cc:	9b01      	ldr	r3, [sp, #4]
 80090ce:	6020      	str	r0, [r4, #0]
 80090d0:	60a3      	str	r3, [r4, #8]
 80090d2:	4632      	mov	r2, r6
 80090d4:	4629      	mov	r1, r5
 80090d6:	6820      	ldr	r0, [r4, #0]
 80090d8:	f7ff ffaa 	bl	8009030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80090dc:	9b01      	ldr	r3, [sp, #4]
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	6063      	str	r3, [r4, #4]
 80090e2:	2100      	movs	r1, #0
 80090e4:	54d1      	strb	r1, [r2, r3]
 80090e6:	b002      	add	sp, #8
 80090e8:	bd70      	pop	{r4, r5, r6, pc}
 80090ea:	bf00      	nop
 80090ec:	080096dc 	.word	0x080096dc

080090f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	f100 0308 	add.w	r3, r0, #8
 80090f6:	6003      	str	r3, [r0, #0]
 80090f8:	e9d1 5200 	ldrd	r5, r2, [r1]
 80090fc:	4604      	mov	r4, r0
 80090fe:	f04f 0300 	mov.w	r3, #0
 8009102:	442a      	add	r2, r5
 8009104:	4629      	mov	r1, r5
 8009106:	f7ff ffcf 	bl	80090a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800910a:	4620      	mov	r0, r4
 800910c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009110:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009112:	4604      	mov	r4, r0
 8009114:	4616      	mov	r6, r2
 8009116:	460d      	mov	r5, r1
 8009118:	b919      	cbnz	r1, 8009122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800911a:	b112      	cbz	r2, 8009122 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800911c:	480d      	ldr	r0, [pc, #52]	; (8009154 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800911e:	f7ff ff47 	bl	8008fb0 <_ZSt19__throw_logic_errorPKc>
 8009122:	1b73      	subs	r3, r6, r5
 8009124:	2b0f      	cmp	r3, #15
 8009126:	9301      	str	r3, [sp, #4]
 8009128:	d907      	bls.n	800913a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800912a:	2200      	movs	r2, #0
 800912c:	a901      	add	r1, sp, #4
 800912e:	4620      	mov	r0, r4
 8009130:	f7ff ff48 	bl	8008fc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009134:	9b01      	ldr	r3, [sp, #4]
 8009136:	6020      	str	r0, [r4, #0]
 8009138:	60a3      	str	r3, [r4, #8]
 800913a:	4632      	mov	r2, r6
 800913c:	4629      	mov	r1, r5
 800913e:	6820      	ldr	r0, [r4, #0]
 8009140:	f7ff ff7b 	bl	800903a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	6822      	ldr	r2, [r4, #0]
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	2100      	movs	r1, #0
 800914c:	54d1      	strb	r1, [r2, r3]
 800914e:	b002      	add	sp, #8
 8009150:	bd70      	pop	{r4, r5, r6, pc}
 8009152:	bf00      	nop
 8009154:	080096dc 	.word	0x080096dc

08009158 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	f100 0308 	add.w	r3, r0, #8
 800915e:	4604      	mov	r4, r0
 8009160:	6003      	str	r3, [r0, #0]
 8009162:	460d      	mov	r5, r1
 8009164:	b159      	cbz	r1, 800917e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 8009166:	4608      	mov	r0, r1
 8009168:	f7f7 f8d2 	bl	8000310 <strlen>
 800916c:	182a      	adds	r2, r5, r0
 800916e:	4620      	mov	r0, r4
 8009170:	f04f 0300 	mov.w	r3, #0
 8009174:	4629      	mov	r1, r5
 8009176:	f7ff ffcb 	bl	8009110 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800917a:	4620      	mov	r0, r4
 800917c:	bd38      	pop	{r3, r4, r5, pc}
 800917e:	2201      	movs	r2, #1
 8009180:	e7f5      	b.n	800916e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08009182 <_ZdlPv>:
 8009182:	f000 b843 	b.w	800920c <free>
	...

08009188 <_ZSt15get_new_handlerv>:
 8009188:	4b02      	ldr	r3, [pc, #8]	; (8009194 <_ZSt15get_new_handlerv+0xc>)
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	f3bf 8f5b 	dmb	ish
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	24000620 	.word	0x24000620

08009198 <abort>:
 8009198:	b508      	push	{r3, lr}
 800919a:	2006      	movs	r0, #6
 800919c:	f000 f986 	bl	80094ac <raise>
 80091a0:	2001      	movs	r0, #1
 80091a2:	f7fa fd37 	bl	8003c14 <_exit>
	...

080091a8 <__errno>:
 80091a8:	4b01      	ldr	r3, [pc, #4]	; (80091b0 <__errno+0x8>)
 80091aa:	6818      	ldr	r0, [r3, #0]
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	24000010 	.word	0x24000010

080091b4 <__libc_init_array>:
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	4d0d      	ldr	r5, [pc, #52]	; (80091ec <__libc_init_array+0x38>)
 80091b8:	4c0d      	ldr	r4, [pc, #52]	; (80091f0 <__libc_init_array+0x3c>)
 80091ba:	1b64      	subs	r4, r4, r5
 80091bc:	10a4      	asrs	r4, r4, #2
 80091be:	2600      	movs	r6, #0
 80091c0:	42a6      	cmp	r6, r4
 80091c2:	d109      	bne.n	80091d8 <__libc_init_array+0x24>
 80091c4:	4d0b      	ldr	r5, [pc, #44]	; (80091f4 <__libc_init_array+0x40>)
 80091c6:	4c0c      	ldr	r4, [pc, #48]	; (80091f8 <__libc_init_array+0x44>)
 80091c8:	f000 f99a 	bl	8009500 <_init>
 80091cc:	1b64      	subs	r4, r4, r5
 80091ce:	10a4      	asrs	r4, r4, #2
 80091d0:	2600      	movs	r6, #0
 80091d2:	42a6      	cmp	r6, r4
 80091d4:	d105      	bne.n	80091e2 <__libc_init_array+0x2e>
 80091d6:	bd70      	pop	{r4, r5, r6, pc}
 80091d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091dc:	4798      	blx	r3
 80091de:	3601      	adds	r6, #1
 80091e0:	e7ee      	b.n	80091c0 <__libc_init_array+0xc>
 80091e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091e6:	4798      	blx	r3
 80091e8:	3601      	adds	r6, #1
 80091ea:	e7f2      	b.n	80091d2 <__libc_init_array+0x1e>
 80091ec:	08009708 	.word	0x08009708
 80091f0:	08009708 	.word	0x08009708
 80091f4:	08009708 	.word	0x08009708
 80091f8:	08009714 	.word	0x08009714

080091fc <malloc>:
 80091fc:	4b02      	ldr	r3, [pc, #8]	; (8009208 <malloc+0xc>)
 80091fe:	4601      	mov	r1, r0
 8009200:	6818      	ldr	r0, [r3, #0]
 8009202:	f000 b8a7 	b.w	8009354 <_malloc_r>
 8009206:	bf00      	nop
 8009208:	24000010 	.word	0x24000010

0800920c <free>:
 800920c:	4b02      	ldr	r3, [pc, #8]	; (8009218 <free+0xc>)
 800920e:	4601      	mov	r1, r0
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	f000 b833 	b.w	800927c <_free_r>
 8009216:	bf00      	nop
 8009218:	24000010 	.word	0x24000010

0800921c <memcpy>:
 800921c:	440a      	add	r2, r1
 800921e:	4291      	cmp	r1, r2
 8009220:	f100 33ff 	add.w	r3, r0, #4294967295
 8009224:	d100      	bne.n	8009228 <memcpy+0xc>
 8009226:	4770      	bx	lr
 8009228:	b510      	push	{r4, lr}
 800922a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800922e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009232:	4291      	cmp	r1, r2
 8009234:	d1f9      	bne.n	800922a <memcpy+0xe>
 8009236:	bd10      	pop	{r4, pc}

08009238 <memmove>:
 8009238:	4288      	cmp	r0, r1
 800923a:	b510      	push	{r4, lr}
 800923c:	eb01 0402 	add.w	r4, r1, r2
 8009240:	d902      	bls.n	8009248 <memmove+0x10>
 8009242:	4284      	cmp	r4, r0
 8009244:	4623      	mov	r3, r4
 8009246:	d807      	bhi.n	8009258 <memmove+0x20>
 8009248:	1e43      	subs	r3, r0, #1
 800924a:	42a1      	cmp	r1, r4
 800924c:	d008      	beq.n	8009260 <memmove+0x28>
 800924e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009256:	e7f8      	b.n	800924a <memmove+0x12>
 8009258:	4402      	add	r2, r0
 800925a:	4601      	mov	r1, r0
 800925c:	428a      	cmp	r2, r1
 800925e:	d100      	bne.n	8009262 <memmove+0x2a>
 8009260:	bd10      	pop	{r4, pc}
 8009262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800926a:	e7f7      	b.n	800925c <memmove+0x24>

0800926c <memset>:
 800926c:	4402      	add	r2, r0
 800926e:	4603      	mov	r3, r0
 8009270:	4293      	cmp	r3, r2
 8009272:	d100      	bne.n	8009276 <memset+0xa>
 8009274:	4770      	bx	lr
 8009276:	f803 1b01 	strb.w	r1, [r3], #1
 800927a:	e7f9      	b.n	8009270 <memset+0x4>

0800927c <_free_r>:
 800927c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800927e:	2900      	cmp	r1, #0
 8009280:	d044      	beq.n	800930c <_free_r+0x90>
 8009282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009286:	9001      	str	r0, [sp, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	f1a1 0404 	sub.w	r4, r1, #4
 800928e:	bfb8      	it	lt
 8009290:	18e4      	addlt	r4, r4, r3
 8009292:	f000 f927 	bl	80094e4 <__malloc_lock>
 8009296:	4a1e      	ldr	r2, [pc, #120]	; (8009310 <_free_r+0x94>)
 8009298:	9801      	ldr	r0, [sp, #4]
 800929a:	6813      	ldr	r3, [r2, #0]
 800929c:	b933      	cbnz	r3, 80092ac <_free_r+0x30>
 800929e:	6063      	str	r3, [r4, #4]
 80092a0:	6014      	str	r4, [r2, #0]
 80092a2:	b003      	add	sp, #12
 80092a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092a8:	f000 b922 	b.w	80094f0 <__malloc_unlock>
 80092ac:	42a3      	cmp	r3, r4
 80092ae:	d908      	bls.n	80092c2 <_free_r+0x46>
 80092b0:	6825      	ldr	r5, [r4, #0]
 80092b2:	1961      	adds	r1, r4, r5
 80092b4:	428b      	cmp	r3, r1
 80092b6:	bf01      	itttt	eq
 80092b8:	6819      	ldreq	r1, [r3, #0]
 80092ba:	685b      	ldreq	r3, [r3, #4]
 80092bc:	1949      	addeq	r1, r1, r5
 80092be:	6021      	streq	r1, [r4, #0]
 80092c0:	e7ed      	b.n	800929e <_free_r+0x22>
 80092c2:	461a      	mov	r2, r3
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	b10b      	cbz	r3, 80092cc <_free_r+0x50>
 80092c8:	42a3      	cmp	r3, r4
 80092ca:	d9fa      	bls.n	80092c2 <_free_r+0x46>
 80092cc:	6811      	ldr	r1, [r2, #0]
 80092ce:	1855      	adds	r5, r2, r1
 80092d0:	42a5      	cmp	r5, r4
 80092d2:	d10b      	bne.n	80092ec <_free_r+0x70>
 80092d4:	6824      	ldr	r4, [r4, #0]
 80092d6:	4421      	add	r1, r4
 80092d8:	1854      	adds	r4, r2, r1
 80092da:	42a3      	cmp	r3, r4
 80092dc:	6011      	str	r1, [r2, #0]
 80092de:	d1e0      	bne.n	80092a2 <_free_r+0x26>
 80092e0:	681c      	ldr	r4, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	6053      	str	r3, [r2, #4]
 80092e6:	4421      	add	r1, r4
 80092e8:	6011      	str	r1, [r2, #0]
 80092ea:	e7da      	b.n	80092a2 <_free_r+0x26>
 80092ec:	d902      	bls.n	80092f4 <_free_r+0x78>
 80092ee:	230c      	movs	r3, #12
 80092f0:	6003      	str	r3, [r0, #0]
 80092f2:	e7d6      	b.n	80092a2 <_free_r+0x26>
 80092f4:	6825      	ldr	r5, [r4, #0]
 80092f6:	1961      	adds	r1, r4, r5
 80092f8:	428b      	cmp	r3, r1
 80092fa:	bf04      	itt	eq
 80092fc:	6819      	ldreq	r1, [r3, #0]
 80092fe:	685b      	ldreq	r3, [r3, #4]
 8009300:	6063      	str	r3, [r4, #4]
 8009302:	bf04      	itt	eq
 8009304:	1949      	addeq	r1, r1, r5
 8009306:	6021      	streq	r1, [r4, #0]
 8009308:	6054      	str	r4, [r2, #4]
 800930a:	e7ca      	b.n	80092a2 <_free_r+0x26>
 800930c:	b003      	add	sp, #12
 800930e:	bd30      	pop	{r4, r5, pc}
 8009310:	24000624 	.word	0x24000624

08009314 <sbrk_aligned>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	4e0e      	ldr	r6, [pc, #56]	; (8009350 <sbrk_aligned+0x3c>)
 8009318:	460c      	mov	r4, r1
 800931a:	6831      	ldr	r1, [r6, #0]
 800931c:	4605      	mov	r5, r0
 800931e:	b911      	cbnz	r1, 8009326 <sbrk_aligned+0x12>
 8009320:	f000 f88c 	bl	800943c <_sbrk_r>
 8009324:	6030      	str	r0, [r6, #0]
 8009326:	4621      	mov	r1, r4
 8009328:	4628      	mov	r0, r5
 800932a:	f000 f887 	bl	800943c <_sbrk_r>
 800932e:	1c43      	adds	r3, r0, #1
 8009330:	d00a      	beq.n	8009348 <sbrk_aligned+0x34>
 8009332:	1cc4      	adds	r4, r0, #3
 8009334:	f024 0403 	bic.w	r4, r4, #3
 8009338:	42a0      	cmp	r0, r4
 800933a:	d007      	beq.n	800934c <sbrk_aligned+0x38>
 800933c:	1a21      	subs	r1, r4, r0
 800933e:	4628      	mov	r0, r5
 8009340:	f000 f87c 	bl	800943c <_sbrk_r>
 8009344:	3001      	adds	r0, #1
 8009346:	d101      	bne.n	800934c <sbrk_aligned+0x38>
 8009348:	f04f 34ff 	mov.w	r4, #4294967295
 800934c:	4620      	mov	r0, r4
 800934e:	bd70      	pop	{r4, r5, r6, pc}
 8009350:	24000628 	.word	0x24000628

08009354 <_malloc_r>:
 8009354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009358:	1ccd      	adds	r5, r1, #3
 800935a:	f025 0503 	bic.w	r5, r5, #3
 800935e:	3508      	adds	r5, #8
 8009360:	2d0c      	cmp	r5, #12
 8009362:	bf38      	it	cc
 8009364:	250c      	movcc	r5, #12
 8009366:	2d00      	cmp	r5, #0
 8009368:	4607      	mov	r7, r0
 800936a:	db01      	blt.n	8009370 <_malloc_r+0x1c>
 800936c:	42a9      	cmp	r1, r5
 800936e:	d905      	bls.n	800937c <_malloc_r+0x28>
 8009370:	230c      	movs	r3, #12
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	2600      	movs	r6, #0
 8009376:	4630      	mov	r0, r6
 8009378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800937c:	4e2e      	ldr	r6, [pc, #184]	; (8009438 <_malloc_r+0xe4>)
 800937e:	f000 f8b1 	bl	80094e4 <__malloc_lock>
 8009382:	6833      	ldr	r3, [r6, #0]
 8009384:	461c      	mov	r4, r3
 8009386:	bb34      	cbnz	r4, 80093d6 <_malloc_r+0x82>
 8009388:	4629      	mov	r1, r5
 800938a:	4638      	mov	r0, r7
 800938c:	f7ff ffc2 	bl	8009314 <sbrk_aligned>
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	4604      	mov	r4, r0
 8009394:	d14d      	bne.n	8009432 <_malloc_r+0xde>
 8009396:	6834      	ldr	r4, [r6, #0]
 8009398:	4626      	mov	r6, r4
 800939a:	2e00      	cmp	r6, #0
 800939c:	d140      	bne.n	8009420 <_malloc_r+0xcc>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	4631      	mov	r1, r6
 80093a2:	4638      	mov	r0, r7
 80093a4:	eb04 0803 	add.w	r8, r4, r3
 80093a8:	f000 f848 	bl	800943c <_sbrk_r>
 80093ac:	4580      	cmp	r8, r0
 80093ae:	d13a      	bne.n	8009426 <_malloc_r+0xd2>
 80093b0:	6821      	ldr	r1, [r4, #0]
 80093b2:	3503      	adds	r5, #3
 80093b4:	1a6d      	subs	r5, r5, r1
 80093b6:	f025 0503 	bic.w	r5, r5, #3
 80093ba:	3508      	adds	r5, #8
 80093bc:	2d0c      	cmp	r5, #12
 80093be:	bf38      	it	cc
 80093c0:	250c      	movcc	r5, #12
 80093c2:	4629      	mov	r1, r5
 80093c4:	4638      	mov	r0, r7
 80093c6:	f7ff ffa5 	bl	8009314 <sbrk_aligned>
 80093ca:	3001      	adds	r0, #1
 80093cc:	d02b      	beq.n	8009426 <_malloc_r+0xd2>
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	442b      	add	r3, r5
 80093d2:	6023      	str	r3, [r4, #0]
 80093d4:	e00e      	b.n	80093f4 <_malloc_r+0xa0>
 80093d6:	6822      	ldr	r2, [r4, #0]
 80093d8:	1b52      	subs	r2, r2, r5
 80093da:	d41e      	bmi.n	800941a <_malloc_r+0xc6>
 80093dc:	2a0b      	cmp	r2, #11
 80093de:	d916      	bls.n	800940e <_malloc_r+0xba>
 80093e0:	1961      	adds	r1, r4, r5
 80093e2:	42a3      	cmp	r3, r4
 80093e4:	6025      	str	r5, [r4, #0]
 80093e6:	bf18      	it	ne
 80093e8:	6059      	strne	r1, [r3, #4]
 80093ea:	6863      	ldr	r3, [r4, #4]
 80093ec:	bf08      	it	eq
 80093ee:	6031      	streq	r1, [r6, #0]
 80093f0:	5162      	str	r2, [r4, r5]
 80093f2:	604b      	str	r3, [r1, #4]
 80093f4:	4638      	mov	r0, r7
 80093f6:	f104 060b 	add.w	r6, r4, #11
 80093fa:	f000 f879 	bl	80094f0 <__malloc_unlock>
 80093fe:	f026 0607 	bic.w	r6, r6, #7
 8009402:	1d23      	adds	r3, r4, #4
 8009404:	1af2      	subs	r2, r6, r3
 8009406:	d0b6      	beq.n	8009376 <_malloc_r+0x22>
 8009408:	1b9b      	subs	r3, r3, r6
 800940a:	50a3      	str	r3, [r4, r2]
 800940c:	e7b3      	b.n	8009376 <_malloc_r+0x22>
 800940e:	6862      	ldr	r2, [r4, #4]
 8009410:	42a3      	cmp	r3, r4
 8009412:	bf0c      	ite	eq
 8009414:	6032      	streq	r2, [r6, #0]
 8009416:	605a      	strne	r2, [r3, #4]
 8009418:	e7ec      	b.n	80093f4 <_malloc_r+0xa0>
 800941a:	4623      	mov	r3, r4
 800941c:	6864      	ldr	r4, [r4, #4]
 800941e:	e7b2      	b.n	8009386 <_malloc_r+0x32>
 8009420:	4634      	mov	r4, r6
 8009422:	6876      	ldr	r6, [r6, #4]
 8009424:	e7b9      	b.n	800939a <_malloc_r+0x46>
 8009426:	230c      	movs	r3, #12
 8009428:	603b      	str	r3, [r7, #0]
 800942a:	4638      	mov	r0, r7
 800942c:	f000 f860 	bl	80094f0 <__malloc_unlock>
 8009430:	e7a1      	b.n	8009376 <_malloc_r+0x22>
 8009432:	6025      	str	r5, [r4, #0]
 8009434:	e7de      	b.n	80093f4 <_malloc_r+0xa0>
 8009436:	bf00      	nop
 8009438:	24000624 	.word	0x24000624

0800943c <_sbrk_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4d06      	ldr	r5, [pc, #24]	; (8009458 <_sbrk_r+0x1c>)
 8009440:	2300      	movs	r3, #0
 8009442:	4604      	mov	r4, r0
 8009444:	4608      	mov	r0, r1
 8009446:	602b      	str	r3, [r5, #0]
 8009448:	f7fa fbee 	bl	8003c28 <_sbrk>
 800944c:	1c43      	adds	r3, r0, #1
 800944e:	d102      	bne.n	8009456 <_sbrk_r+0x1a>
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	b103      	cbz	r3, 8009456 <_sbrk_r+0x1a>
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	2400062c 	.word	0x2400062c

0800945c <_raise_r>:
 800945c:	291f      	cmp	r1, #31
 800945e:	b538      	push	{r3, r4, r5, lr}
 8009460:	4604      	mov	r4, r0
 8009462:	460d      	mov	r5, r1
 8009464:	d904      	bls.n	8009470 <_raise_r+0x14>
 8009466:	2316      	movs	r3, #22
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	f04f 30ff 	mov.w	r0, #4294967295
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009472:	b112      	cbz	r2, 800947a <_raise_r+0x1e>
 8009474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009478:	b94b      	cbnz	r3, 800948e <_raise_r+0x32>
 800947a:	4620      	mov	r0, r4
 800947c:	f000 f830 	bl	80094e0 <_getpid_r>
 8009480:	462a      	mov	r2, r5
 8009482:	4601      	mov	r1, r0
 8009484:	4620      	mov	r0, r4
 8009486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800948a:	f000 b817 	b.w	80094bc <_kill_r>
 800948e:	2b01      	cmp	r3, #1
 8009490:	d00a      	beq.n	80094a8 <_raise_r+0x4c>
 8009492:	1c59      	adds	r1, r3, #1
 8009494:	d103      	bne.n	800949e <_raise_r+0x42>
 8009496:	2316      	movs	r3, #22
 8009498:	6003      	str	r3, [r0, #0]
 800949a:	2001      	movs	r0, #1
 800949c:	e7e7      	b.n	800946e <_raise_r+0x12>
 800949e:	2400      	movs	r4, #0
 80094a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094a4:	4628      	mov	r0, r5
 80094a6:	4798      	blx	r3
 80094a8:	2000      	movs	r0, #0
 80094aa:	e7e0      	b.n	800946e <_raise_r+0x12>

080094ac <raise>:
 80094ac:	4b02      	ldr	r3, [pc, #8]	; (80094b8 <raise+0xc>)
 80094ae:	4601      	mov	r1, r0
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	f7ff bfd3 	b.w	800945c <_raise_r>
 80094b6:	bf00      	nop
 80094b8:	24000010 	.word	0x24000010

080094bc <_kill_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d07      	ldr	r5, [pc, #28]	; (80094dc <_kill_r+0x20>)
 80094c0:	2300      	movs	r3, #0
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	4611      	mov	r1, r2
 80094c8:	602b      	str	r3, [r5, #0]
 80094ca:	f7fa fb93 	bl	8003bf4 <_kill>
 80094ce:	1c43      	adds	r3, r0, #1
 80094d0:	d102      	bne.n	80094d8 <_kill_r+0x1c>
 80094d2:	682b      	ldr	r3, [r5, #0]
 80094d4:	b103      	cbz	r3, 80094d8 <_kill_r+0x1c>
 80094d6:	6023      	str	r3, [r4, #0]
 80094d8:	bd38      	pop	{r3, r4, r5, pc}
 80094da:	bf00      	nop
 80094dc:	2400062c 	.word	0x2400062c

080094e0 <_getpid_r>:
 80094e0:	f7fa bb80 	b.w	8003be4 <_getpid>

080094e4 <__malloc_lock>:
 80094e4:	4801      	ldr	r0, [pc, #4]	; (80094ec <__malloc_lock+0x8>)
 80094e6:	f000 b809 	b.w	80094fc <__retarget_lock_acquire_recursive>
 80094ea:	bf00      	nop
 80094ec:	24000630 	.word	0x24000630

080094f0 <__malloc_unlock>:
 80094f0:	4801      	ldr	r0, [pc, #4]	; (80094f8 <__malloc_unlock+0x8>)
 80094f2:	f000 b804 	b.w	80094fe <__retarget_lock_release_recursive>
 80094f6:	bf00      	nop
 80094f8:	24000630 	.word	0x24000630

080094fc <__retarget_lock_acquire_recursive>:
 80094fc:	4770      	bx	lr

080094fe <__retarget_lock_release_recursive>:
 80094fe:	4770      	bx	lr

08009500 <_init>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr

0800950c <_fini>:
 800950c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950e:	bf00      	nop
 8009510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009512:	bc08      	pop	{r3}
 8009514:	469e      	mov	lr, r3
 8009516:	4770      	bx	lr
