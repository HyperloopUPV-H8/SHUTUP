#pragma once

#include "Mini-STLIB/Mini-STLIB.hpp"
#include <functional>

using namespace std;

int sin_index = 0;

extern FDCAN_HandleTypeDef hfdcan1;


FDCAN_TxHeaderTypeDef   TxHeader;
uint8_t               TxData[8];
uint32_t              TxMailbox;
uint16_t adc1_data[1];
uint16_t adc2_data[2];

class TUDTests{
public:

	static void setup(){
		start();

		// ANALOG OUT
		timer_7.execute_every([](){
			for(auto analog_out : AnalogOut::all_analog_outs)
				analog_out->set_voltage(sin(sin_index / 1000.0 * 3.1415) * 1.65 + 1.65);
			sin_index ++;
		}, 1000, Timer::MICROSEONDS);

		// GPIO IN
		timer_13.execute_every([](){
			for(auto in : DigitalIn::all_digital_ins)
				in->get_value();
		}, 1000, Timer::MICROSEONDS);

		//CAN

		TxHeader.IdType = FDCAN_STANDARD_ID;
		TxHeader.Identifier = 0x446;
		TxHeader.DataLength = FDCAN_DLC_BYTES_8;
		for(int i = 0; i < 8; i++)
			TxData[i] = i;

		HAL_FDCAN_Start(&hfdcan1);

		timer_14.execute_every([](){
			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK) {
			   Error_Handler ();
			}
		}, 1000, Timer::MILLISECONDS);

	}

	static void loop() {
		// GPIO OUT
		for(auto base : DigitalOut::all_digital_outs)
			base->turn_high();
		HAL_Delay(2000);

		for(auto base : DigitalOut::all_digital_outs)
			base->turn_low();
		HAL_Delay(2000);
	}
};
