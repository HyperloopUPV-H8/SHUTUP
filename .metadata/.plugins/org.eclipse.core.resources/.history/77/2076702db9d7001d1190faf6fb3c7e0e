#pragma once

#include "stm32h7xx_hal.h"
#include "DataStructures/RingBuffer.hpp"
#include "Filters/MovingAverage.hpp"
#include "Models/Pin.hpp"
#include <vector>
#include <cmath>

using namespace std;

class InputCapture {
private:
	static const uint32_t TIMER_CLOK_FREQ = 277777777;
	static const uint32_t MOVING_AVERAGE_SIZE = 3;
	MovingAverage<MOVING_AVERAGE_SIZE, double> DutyAverage;
	MovingAverage<MOVING_AVERAGE_SIZE, double> FrequencyAverage;
	int rising_edge = -1, falling_edge = -1;

	uint32_t absolute_difference(uint32_t a, uint32_t b);
	double interrupt();
	bool channel_is_active();

public:
	static vector<InputCapture*> all_input_captures;
	TIM_HandleTypeDef* timer;
	uint32_t channel;
	Pin pin;

	double frequency, duty;
	uint32_t frequency_i, duty_i;

	InputCapture(TIM_HandleTypeDef* timer, uint32_t channel, Pin pin);
	static void start_all_input_captures();
	static void interrupt_of_all_input_captures(TIM_HandleTypeDef* timer);
	void start();
	void stop();
	void reset();
};


