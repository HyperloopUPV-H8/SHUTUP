#pragma once

#include "stm32h7xx_hal.h"
#include <vector>
#include <map>

using namespace std;

struct ADC {
	uint32_t data_size;
	uint16_t data[16];
};

class AnalogIn {

private:
	static map<ADC_HandleTypeDef*, ADC> adcs;
	ADC_HandleTypeDef* adc;
	TIM_HandleTypeDef* timer;
	uint16_t pin;
	uint32_t adc_index;

	void start();

public:
	double voltage;
	static vector<AnalogIn*> all_analog_ins;
	static uint16_t adc1_data[16];

	AnalogIn(ADC_HandleTypeDef* adc, TIM_HandleTypeDef* timer);

	double update() {
		voltage = AnalogIn::adcs[adc].data[adc_index] / 65535.0 * 3.3;
		return voltage;
	}

	static void start_all_analog_ins(){
		for(auto analog_in : AnalogIn::all_analog_ins)
			analog_in->start();
	}

	static void interrupt_all_analog_ins(){
		for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
			AnalogIn::all_analog_ins[i]->update();
	}
};
