#pragma once

#include "stm32h7xx_hal.h"
#include <vector>

template<double MAX_VOLTAGE>
class AnalogOut{
private:
	TIM_HandleTypeDef* timer;
	uint32_t channel;
	GPIO_TypeDef* port;
	uint16_t pin;

	double current_voltage = 0.0;

public:
	static vector<AnalogOut*> all_analog_outs;

	AnalogOut(TIM_HandleTypeDef* timer, uint32_t channel, GPIO_TypeDef* port, uint16_t pin)
		: timer(timer), channel(channel), port(port), pin(pin){
		all_analog_outs.push_back(this);
	}

	void set_voltage(double current_voltage){
		uint32_t arr = (uint32_t) (current_voltage / MAX_VOLTAGE * timer->Instance->ARR);

		switch(channel){
		case(TIM_CHANNEL_1):
				break;
		case(TIM_CHANNEL_2):
				break;
		case(TIM_CHANNEL_3):
				break;
		case(TIM_CHANNEL_4):
				break;
		case(TIM_CHANNEL_5):
				break;
		case(TIM_CHANNEL_6):
				break;
		}
	}

	void start(){
		HAL_TIM_PWM_Start(timer, channel);
	}

	static void start_all_analog_outs(){
		for(auto analog_out: all_analog_outs)
			analog_out->start();
	}

};
