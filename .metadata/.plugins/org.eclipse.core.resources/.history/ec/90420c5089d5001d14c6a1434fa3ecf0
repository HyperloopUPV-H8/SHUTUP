#pragma once

#include "stm32h7xx_hal.h"
#include <vector>
#include <map>

using namespace std;

struct ADC {
	uint32_t data_size;
	uint16_t data[16];
};

class AnalogIn {

private:
	static map<ADC_HandleTypeDef*, ADC> adcs;
	ADC_HandleTypeDef* adc;
	TIM_HandleTypeDef* timer;
	uint16_t pin;
	uint32_t adc_index;

	void start() {
		if(timer->State == HAL_TIM_StateTypeDef::HAL_TIM_STATE_READY){
			HAL_TIM_Base_Start(timer);
		}

		if(adc->State == 1){
			HAL_ADC_Start_DMA(adc,(uint32_t*) adcs[adc].data, adcs[adc].data_size);
			HAL_Delay(10); // NO FUNCIONA SIN ESTO, NO TOCAR
		}
	}

public:
	double voltage;
	static vector<AnalogIn*> all_analog_ins;
	static uint16_t adc1_data[16];

	AnalogIn(ADC_HandleTypeDef* adc, TIM_HandleTypeDef* timer) : adc(adc), timer(timer) {
		AnalogIn::all_analog_ins.push_back(this);

		if(adcs.count(adc) == 0) {
			ADC adc_struct;
			adc_struct.data_size = 0;
			adcs[adc] = adc_struct;
		}

		adc_index = adcs[adc].data_size;
		adcs[adc].data_size += 1;
	}

	double update() {
		voltage = AnalogIn::adcs[adc].data[adc_index] / 65535.0 * 3.3;
		return voltage;
	}

	static void start_all_analog_ins(){
		for(auto analog_in : AnalogIn::all_analog_ins)
			analog_in->start();
	}

};
