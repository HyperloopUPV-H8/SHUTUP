#pragma once

#include "Timer.hpp"
#include <vector>

using namespace std;

enum State{
	FREE,
	OCCUPIED
};


class StreamMessage{
public:
	size_t total_size = 0;
	vector<size_t> size;
	vector<void*> ptrs;

	template<typename Arg1, typename... Rest>
	StreamMessage(Arg1* arg1, Rest*... args){
		total_size += sizeof(Arg1);
		size.push_back(sizeof(Arg1));
		ptrs.push_back(arg1);
		if(sizeof...(args) == 0)
			return;
		else
			StreamMessage(args...);
	}
};

class Stream {
private:
	static vector<Stream*> streams;
	vector<StreamMessage> messages;
	Timer* timer;

public:
	State state = FREE;
	uint32_t frequency;

	Stream(Timer* timer) : timer(timer) {
		Stream::streams.push_back(this);
	}

	void send_all_messages(){
		for(auto message : messages){

		}
	}

	void add_message(StreamMessage message, uint32_t frequency){
		if(stae == FREE){
			state=OCCUPIED;
			timer->execute_at([](){
				main_can.send_message(id, data, size);
			}, frequency);
		}
		messages.push_back(message);
		frequency = frequency;
	}

	template<typename Arg1, typename... Rest>
	static void add_stream(uint16_t frequency, Arg1* arg1, Rest*... rest) {
		for(auto s : streams){
			if(s->state == FREE || frequency == s->frequency){
				StreamMessage message(arg1, rest...);
				s->add_message(message, frequency);
			}

		}
	}

};
