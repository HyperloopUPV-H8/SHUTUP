#pragma once

#include "stm32h7xx_hal.h"
#include <vector>

using namespace std;



class Packet{

private:
	uint8_t id;
	uint8_t operation;
	uint8_t operation_mode;
	char pin[4];
	uint8_t* content;

public:

	static const uint8_t TUD_A_ID		= 0b01;
	static const uint8_t TUD_B_DST_ID	= 0b10;
	static const uint8_t CLIENT_ID		= 0b11;

	static const uint8_t READ_OPERATION	= 0;
	static const uint8_t WRITE_OPERATION = 1;

	static const uint8_t SINGLE_SHOT_MODE = 0;
	static const uint8_t DATA_STREAM_MODE = 1;

	Packet(uint8_t id, uint8_t size, uint8_t* content): id(id){
		opeartion 		= content[0] & 0b10000000;
		opeartion_mode	= content[0] & 0b01000000;

	}

};

class Can {
private:
	FDCAN_HandleTypeDef* hdcan;
	static vector<Can*> all_cans;

public:
	void send_message();
	Can(FDCAN_HandleTypeDef* hdcan);
	static void start_all_cans();
};
