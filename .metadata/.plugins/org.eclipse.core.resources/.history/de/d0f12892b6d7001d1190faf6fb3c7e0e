#pragma once

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim7;
extern TIM_HandleTypeDef htim8;
extern TIM_HandleTypeDef htim12;
extern TIM_HandleTypeDef htim13;
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim15;
extern TIM_HandleTypeDef htim16;
extern TIM_HandleTypeDef htim17;
extern TIM_HandleTypeDef htim23;
extern TIM_HandleTypeDef htim24;
extern ADC_HandleTypeDef hadc1;
extern FDCAN_HandleTypeDef hfdcan1;

#include "Models/Packet.hpp"
#include "InputCapture.hpp"
#include "DigitalOut.hpp"
#include "AnalogOut.hpp"
#include "DigitalIn.hpp"
#include "AnalogIn.hpp"
#include "Timer.hpp"
#include "Can.hpp"
#include <vector>

using namespace std;

uint16_t data_adc_1[16];

// INPUTS

InputCapture ic_PA1(&htim2, TIM_CHANNEL_2, GPIOA, GPIO_PIN_1);
InputCapture ic_PA5(&htim2, TIM_CHANNEL_1, GPIOA, GPIO_PIN_5);
InputCapture ic_PB0(&htim3, TIM_CHANNEL_3, GPIOB, GPIO_PIN_0);
InputCapture ic_PB1(&htim3, TIM_CHANNEL_4, GPIOB, GPIO_PIN_1);
InputCapture ic_PB4(&htim3, TIM_CHANNEL_1, GPIOB, GPIO_PIN_4);
InputCapture ic_PB5(&htim3, TIM_CHANNEL_2, GPIOB, GPIO_PIN_5);
InputCapture ic_PB10(&htim2, TIM_CHANNEL_3, GPIOB, GPIO_PIN_10);
InputCapture ic_PB11(&htim2, TIM_CHANNEL_4, GPIOB, GPIO_PIN_11);
InputCapture ic_PC6(&htim8, TIM_CHANNEL_1, GPIOC, GPIO_PIN_6);
InputCapture ic_PD12(&htim4, TIM_CHANNEL_1, GPIOD, GPIO_PIN_12);
InputCapture ic_PD13(&htim4, TIM_CHANNEL_2, GPIOD, GPIO_PIN_13);
InputCapture ic_PD14(&htim4, TIM_CHANNEL_3, GPIOD, GPIO_PIN_14);
InputCapture ic_PD15(&htim4, TIM_CHANNEL_4, GPIOD, GPIO_PIN_15);
InputCapture ic_PE9(&htim1, TIM_CHANNEL_1, GPIOE, GPIO_PIN_9);
InputCapture ic_PE11(&htim1, TIM_CHANNEL_2, GPIOE, GPIO_PIN_11);
InputCapture ic_PE13(&htim1, TIM_CHANNEL_3, GPIOE, GPIO_PIN_13);
InputCapture ic_PE14(&htim1, TIM_CHANNEL_4, GPIOE, GPIO_PIN_14);

DigitalIn digital_in_PC1(GPIOC, GPIO_PIN_1);
DigitalIn digital_in_PC2(GPIOC, GPIO_PIN_2);
DigitalIn digital_in_PC3(GPIOC, GPIO_PIN_3);

AnalogIn analog_in_PA6(&hadc1, &htim6);

// OUTPUTS

AnalogOut analog_out_PF1(3.3, &htim23, TIM_CHANNEL_2, GPIOF, GPIO_PIN_1);
AnalogOut analog_out_PF0(3.3, &htim23, TIM_CHANNEL_1, GPIOF, GPIO_PIN_0);
AnalogOut analog_out_PA0(3.3, &htim5, TIM_CHANNEL_1, GPIOA, GPIO_PIN_0);
AnalogOut analog_out_PA2(3.3, &htim5, TIM_CHANNEL_3, GPIOA, GPIO_PIN_2);
AnalogOut analog_out_PA3(3.3, &htim5, TIM_CHANNEL_4, GPIOA, GPIO_PIN_3);
AnalogOut analog_out_PC7(3.3, &htim8, TIM_CHANNEL_2, GPIOC, GPIO_PIN_7);
AnalogOut analog_out_PC6(3.3, &htim8, TIM_CHANNEL_1, GPIOC, GPIO_PIN_6);
AnalogOut analog_out_PC8(3.3, &htim8, TIM_CHANNEL_3, GPIOC, GPIO_PIN_8);
AnalogOut analog_out_PC9(3.3, &htim8, TIM_CHANNEL_4, GPIOC, GPIO_PIN_9);
AnalogOut analog_out_PF2(3.3, &htim23, TIM_CHANNEL_3, GPIOF, GPIO_PIN_2);
AnalogOut analog_out_PF13(3.3, &htim24, TIM_CHANNEL_3, GPIOF, GPIO_PIN_13);
AnalogOut analog_out_PF12(3.3, &htim24, TIM_CHANNEL_2, GPIOF, GPIO_PIN_12);
AnalogOut analog_out_PB14(3.3, &htim12, TIM_CHANNEL_1, GPIOB, GPIO_PIN_14);
AnalogOut analog_out_PF14(3.3, &htim24, TIM_CHANNEL_4, GPIOF, GPIO_PIN_14);
AnalogOut analog_out_PF3(3.3, &htim23, TIM_CHANNEL_4, GPIOF, GPIO_PIN_3);
AnalogOut analog_out_PF11(3.3, &htim24, TIM_CHANNEL_1, GPIOF, GPIO_PIN_11);

DigitalOut digital_out_PC10(GPIOC, GPIO_PIN_10);
DigitalOut digital_out_PC11(GPIOC, GPIO_PIN_11);
DigitalOut digital_out_PC12(GPIOC, GPIO_PIN_12);
DigitalOut digital_out_PC13(GPIOC, GPIO_PIN_13);
DigitalOut digital_out_PC14(GPIOC, GPIO_PIN_14);
DigitalOut digital_out_PC15(GPIOC, GPIO_PIN_15);
DigitalOut digital_out_PF6(GPIOF, GPIO_PIN_6);
DigitalOut digital_out_PF7(GPIOF, GPIO_PIN_7);
DigitalOut digital_out_PB7(GPIOB, GPIO_PIN_7);
DigitalOut digital_out_PB9(GPIOB, GPIO_PIN_9);
DigitalOut digital_out_PD8(GPIOD, GPIO_PIN_8);

// TIMERS

Timer timer_7(&htim7);
Timer timer_13(&htim13);
Timer timer_14(&htim14);
Timer timer_15(&htim15);
Timer timer_16(&htim16);
Timer timer_17(&htim17);

// Communication

Can main_can(&hfdcan1);

void read_once_callback();
void read_stream_callback();
void write_once_callback();

uint16_t read_once_pin;
uint8_t  read_stream_pin;
uint16_t read_stream_frequency;
uint32_t read_stream_size;
uint8_t  write_once_pin;

Packet read_single	(0b0100, read_once_callback		, &read_once_pin);
Packet read_stream	(0b0101, read_stream_callback	, &read_stream_pin, &read_stream_frequency, &read_stream_size);
Packet write_single	(0b0110, write_once_callback	, &write_once_pin);

void start(){
	InputCapture::start_all_input_captures();
	AnalogOut::start_all_analog_outs();
	AnalogIn::start_all_analog_ins();
	Can::start_all_cans();
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* timer){
	InputCapture::interrupt_of_all_input_captures(timer);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
	AnalogIn::interrupt_all_analog_ins();
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
	Timer::interrupt_all_timers(tim);
}


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
	Can::message_received_all_cans(hfdcan, RxFifo0ITs);
}

void read_once_callback() {
	int a = 0;
}

void read_stream_callback() {
	int a = 0;
}

void write_once_callback(){
	int a = 0;
}
