#pragma once

extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim5;
extern TIM_HandleTypeDef htim6;
extern TIM_HandleTypeDef htim7;
extern TIM_HandleTypeDef htim8;
extern TIM_HandleTypeDef htim12;
extern TIM_HandleTypeDef htim13;
extern TIM_HandleTypeDef htim14;
extern TIM_HandleTypeDef htim15;
extern TIM_HandleTypeDef htim16;
extern TIM_HandleTypeDef htim17;
extern TIM_HandleTypeDef htim23;
extern TIM_HandleTypeDef htim24;
extern ADC_HandleTypeDef hadc1;
extern FDCAN_HandleTypeDef hfdcan1;

#include "Models/Packet.hpp"
#include "InputCapture.hpp"
#include "DigitalOut.hpp"
#include "AnalogOut.hpp"
#include "DigitalIn.hpp"
#include "AnalogIn.hpp"
#include "Timer.hpp"
#include "Can.hpp"
#include <vector>

using namespace std;

uint16_t data_adc_1[16];

// INPUTS

InputCapture ic_PA1	(&htim2, TIM_CHANNEL_2, &PA1);
InputCapture ic_PA5	(&htim2, TIM_CHANNEL_1, &PA5);
InputCapture ic_PB0	(&htim3, TIM_CHANNEL_3, &PB0);
InputCapture ic_PB1	(&htim3, TIM_CHANNEL_4, &PB1);
InputCapture ic_PB4	(&htim3, TIM_CHANNEL_1, &PB4);
InputCapture ic_PB5	(&htim3, TIM_CHANNEL_2, &PB5);
InputCapture ic_PB10(&htim2, TIM_CHANNEL_3, &PB10);
InputCapture ic_PB11(&htim2, TIM_CHANNEL_4, &PB11);
InputCapture ic_PC6	(&htim8, TIM_CHANNEL_1, &PC6);
InputCapture ic_PD12(&htim4, TIM_CHANNEL_1, &PD12);
InputCapture ic_PD13(&htim4, TIM_CHANNEL_2, &PD13);
InputCapture ic_PD14(&htim4, TIM_CHANNEL_3, &PD14);
InputCapture ic_PD15(&htim4, TIM_CHANNEL_4, &PD15);
InputCapture ic_PE9	(&htim1, TIM_CHANNEL_1,	&PE9);
InputCapture ic_PE11(&htim1, TIM_CHANNEL_2,	&PE11);
InputCapture ic_PE13(&htim1, TIM_CHANNEL_3, &PE13);
InputCapture ic_PE14(&htim1, TIM_CHANNEL_4, &PE14);

DigitalIn digital_in_PC1(PC1);
DigitalIn digital_in_PC2(PC2);
DigitalIn digital_in_PC3(PC3);

AnalogIn analog_in_PA6(&hadc1, &htim6, &PA6);

// OUTPUTS

AnalogOut analog_out_PF1 (3.3, &htim23, TIM_CHANNEL_2, &PF1);
AnalogOut analog_out_PF0 (3.3, &htim23, TIM_CHANNEL_1, &PF0);
AnalogOut analog_out_PA0 (3.3, &htim5, 	TIM_CHANNEL_1, &PA0);
AnalogOut analog_out_PA2 (3.3, &htim5, 	TIM_CHANNEL_3, &PA2);
AnalogOut analog_out_PA3 (3.3, &htim5, 	TIM_CHANNEL_4, &PA3);
AnalogOut analog_out_PC7 (3.3, &htim8, 	TIM_CHANNEL_2, &PC7);
AnalogOut analog_out_PC6 (3.3, &htim8, 	TIM_CHANNEL_1, &PC6);
AnalogOut analog_out_PC8 (3.3, &htim8, 	TIM_CHANNEL_3, &PC8);
AnalogOut analog_out_PC9 (3.3, &htim8, 	TIM_CHANNEL_4, &PC9);
AnalogOut analog_out_PF2 (3.3, &htim23, TIM_CHANNEL_3, &PF2);
AnalogOut analog_out_PF13(3.3, &htim24, TIM_CHANNEL_3, &PF13);
AnalogOut analog_out_PF12(3.3, &htim24, TIM_CHANNEL_2, &PF12);
AnalogOut analog_out_PB14(3.3, &htim12, TIM_CHANNEL_1, &PB14);
AnalogOut analog_out_PF14(3.3, &htim24, TIM_CHANNEL_4, &PF14);
AnalogOut analog_out_PF3 (3.3, &htim23, TIM_CHANNEL_4, &PF3);
AnalogOut analog_out_PF11(3.3, &htim24, TIM_CHANNEL_1, &PF11);

DigitalOut digital_out_PC10(&PC10);
DigitalOut digital_out_PC11(&PC11);
DigitalOut digital_out_PC12(&PC12);
DigitalOut digital_out_PC13(&PC13);
DigitalOut digital_out_PC14(&PC14);
DigitalOut digital_out_PC15(&PC15);
DigitalOut digital_out_PF6 (&PF6);
DigitalOut digital_out_PF7 (&PF7);
DigitalOut digital_out_PB7 (&PB7);
DigitalOut digital_out_PB9 (&PB9);
DigitalOut digital_out_PD8 (&PD8);

// TIMERS

Timer timer_7(&htim7);
Timer timer_13(&htim13);
Timer timer_14(&htim14);
Timer timer_15(&htim15);
Timer timer_16(&htim16);
Timer timer_17(&htim17);

// Communication

Can main_can(&hfdcan1);

void read_once_callback();
void read_stream_callback();
void write_once_callback();

uint16_t read_once_pin;
uint8_t  read_stream_pin;
uint16_t read_stream_frequency;
uint32_t read_stream_size;
uint8_t  write_once_pin;

Packet read_once	(0b0100, read_once_callback		, &read_once_pin);
Packet read_stream	(0b0101, read_stream_callback	, &read_stream_pin, &read_stream_frequency, &read_stream_size);
Packet write_once	(0b0110, write_once_callback	, &write_once_pin);

Packet re

void start(){
	InputCapture::start_all_input_captures();
	AnalogOut::start_all_analog_outs();
	AnalogIn::start_all_analog_ins();
	Can::start_all_cans();
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* timer){
	InputCapture::interrupt_of_all_input_captures(timer);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
	AnalogIn::interrupt_all_analog_ins();
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
	Timer::interrupt_all_timers(tim);
}


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
	Can::message_received_all_cans(hfdcan, RxFifo0ITs);
}

void read_once_callback() {
	Pin* pin = Pin::get_pin_from_id(id);
	switch(pin->mode) {
		ANALOG_INPUT:
			break;
		DIGITAL_INPUT:
			break;
		INPUT_CAPTURE:
			break;
	}
}

void read_stream_callback() {
	int a = 0;
}

void write_once_callback(){
	int a = 0;
}
