#pragma once

#include "stm32h7xx_hal.h"
#include <vector>

using namespace std;



/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/

#include <iostream>
#include <functional>

using namespace std;

// TODO -> move this out

template<uint16_t id, typename... args>
class Order{

public:
    uint8_t* current_data;
    size_t sizes[sizeof...(args)] = { sizeof(args)... };
    function<void()> callback;
    Order() { }

    template<typename T>
    T get_arg(int index) {
        int position = 0;
        for(int i = 0; i < index; i++){
            position += sizes[i];
            cout << position << endl;
        }
        return *((T*) current_data + position);
    }

    void set_callback(function<void()> callback){
        this -> callback = callback;
    }

};

//// CAN SERVICE

class Can {


private:
	FDCAN_HandleTypeDef* hdcan;
	static vector<Can*> all_cans;

public:
	void send_message();
	Can(FDCAN_HandleTypeDef* hdcan);
	static void start_all_cans();
};
