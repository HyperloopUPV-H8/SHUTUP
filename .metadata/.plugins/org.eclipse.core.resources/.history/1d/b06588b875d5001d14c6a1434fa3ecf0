#pragma once

#include "stm32h7xx_hal.h"
#include <vector>
#include <map>

using namespace std;

class AnalogIn {

private:
	ADC_HandleTypeDef* adc;
	TIM_HandleTypeDef* timer;
	uint16_t pin;

	void start() {
		if(timer->State == HAL_TIM_StateTypeDef::HAL_TIM_STATE_READY){
			HAL_TIM_Base_Start(timer);
		}

		if(adc->State == 1){
			if(HAL_ADC_Start_DMA(&adc,(uint32_t*) AnalogIn::adc1_data, AnalogIn::all_analog_ins.size()) != HAL_OK)
			  Error_Handler();
		}
	}

public:
	double voltage;
	static vector<AnalogIn*> all_analog_ins;
	static uint16_t adc1_data[16];

	AnalogIn(ADC_HandleTypeDef* adc,TIM_HandleTypeDef* timer) : adc(adc), timer(timer) {
		AnalogIn::all_analog_ins.push_back(this);
	}

	double update(uint16_t value) {
		return value / 65535.0 * 3.3;
	}

	static void start_all_analog_ins(){

	}

};
