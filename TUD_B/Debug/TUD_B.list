
TUD_B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b60  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009e98  08009e98  00019e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009e9c  08009e9c  00019e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08009ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004c4  24000010  08009eb0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240004d4  08009eb0  000204d4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001c274  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002aab  00000000  00000000  0003c2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001890  00000000  00000000  0003ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001768  00000000  00000000  000405f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000363ab  00000000  00000000  00041d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001bfec  00000000  00000000  00078103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016c755  00000000  00000000  000940ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00200844  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006cb0  00000000  00000000  00200894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009e14 	.word	0x08009e14

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08009e14 	.word	0x08009e14

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f001 fdc8 	bl	8001ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f81e 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 ff3e 	bl	8001198 <MX_GPIO_Init>
  MX_ADC1_Init();
 800031c:	f000 f892 	bl	8000444 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8000320:	f000 f908 	bl	8000534 <MX_FDCAN1_Init>
  MX_SPI3_Init();
 8000324:	f000 f96a 	bl	80005fc <MX_SPI3_Init>
  MX_TIM3_Init();
 8000328:	f000 fb04 	bl	8000934 <MX_TIM3_Init>
  MX_TIM4_Init();
 800032c:	f000 fb9a 	bl	8000a64 <MX_TIM4_Init>
  MX_TIM24_Init();
 8000330:	f000 fe72 	bl	8001018 <MX_TIM24_Init>
  MX_USART1_Init();
 8000334:	f000 fee4 	bl	8001100 <MX_USART1_Init>
  MX_TIM1_Init();
 8000338:	f000 f9b6 	bl	80006a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800033c:	f000 fa78 	bl	8000830 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000340:	f000 fc28 	bl	8000b94 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000344:	f000 fcea 	bl	8000d1c <MX_TIM12_Init>
  MX_TIM15_Init();
 8000348:	f000 fd4a 	bl	8000de0 <MX_TIM15_Init>
  MX_TIM23_Init();
 800034c:	f000 fdec 	bl	8000f28 <MX_TIM23_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000350:	e7fe      	b.n	8000350 <main+0x44>
	...

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b09c      	sub	sp, #112	; 0x70
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035e:	224c      	movs	r2, #76	; 0x4c
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f009 fd4e 	bl	8009e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2220      	movs	r2, #32
 800036c:	2100      	movs	r1, #0
 800036e:	4618      	mov	r0, r3
 8000370:	f009 fd48 	bl	8009e04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000374:	2002      	movs	r0, #2
 8000376:	f003 ffa1 	bl	80042bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800037a:	2300      	movs	r3, #0
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	4b2f      	ldr	r3, [pc, #188]	; (800043c <SystemClock_Config+0xe8>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000386:	4a2d      	ldr	r2, [pc, #180]	; (800043c <SystemClock_Config+0xe8>)
 8000388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b2b      	ldr	r3, [pc, #172]	; (800043c <SystemClock_Config+0xe8>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800039a:	bf00      	nop
 800039c:	4b27      	ldr	r3, [pc, #156]	; (800043c <SystemClock_Config+0xe8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003a8:	d1f8      	bne.n	800039c <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80003aa:	4b25      	ldr	r3, [pc, #148]	; (8000440 <SystemClock_Config+0xec>)
 80003ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ae:	4a24      	ldr	r2, [pc, #144]	; (8000440 <SystemClock_Config+0xec>)
 80003b0:	f023 0303 	bic.w	r3, r3, #3
 80003b4:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b6:	2302      	movs	r3, #2
 80003b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80003be:	2340      	movs	r3, #64	; 0x40
 80003c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c2:	2302      	movs	r3, #2
 80003c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c6:	2300      	movs	r3, #0
 80003c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 80003ca:	2320      	movs	r3, #32
 80003cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 80003ce:	2381      	movs	r3, #129	; 0x81
 80003d0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003d2:	2302      	movs	r3, #2
 80003d4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003da:	2302      	movs	r3, #2
 80003dc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80003de:	2304      	movs	r3, #4
 80003e0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003e2:	2300      	movs	r3, #0
 80003e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 ff9e 	bl	8004330 <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80003fa:	f000 ffe9 	bl	80013d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	233f      	movs	r3, #63	; 0x3f
 8000400:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000402:	2300      	movs	r3, #0
 8000404:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2101      	movs	r1, #1
 8000422:	4618      	mov	r0, r3
 8000424:	f004 fb5e 	bl	8004ae4 <HAL_RCC_ClockConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800042e:	f000 ffcf 	bl	80013d0 <Error_Handler>
  }
}
 8000432:	bf00      	nop
 8000434:	3770      	adds	r7, #112	; 0x70
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	58024800 	.word	0x58024800
 8000440:	58024400 	.word	0x58024400

08000444 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08c      	sub	sp, #48	; 0x30
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800044a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000456:	463b      	mov	r3, r7
 8000458:	2224      	movs	r2, #36	; 0x24
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f009 fcd1 	bl	8009e04 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000462:	4b31      	ldr	r3, [pc, #196]	; (8000528 <MX_ADC1_Init+0xe4>)
 8000464:	4a31      	ldr	r2, [pc, #196]	; (800052c <MX_ADC1_Init+0xe8>)
 8000466:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000468:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <MX_ADC1_Init+0xe4>)
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800046e:	4b2e      	ldr	r3, [pc, #184]	; (8000528 <MX_ADC1_Init+0xe4>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000474:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <MX_ADC1_Init+0xe4>)
 8000476:	2200      	movs	r2, #0
 8000478:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <MX_ADC1_Init+0xe4>)
 800047c:	2204      	movs	r2, #4
 800047e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000480:	4b29      	ldr	r3, [pc, #164]	; (8000528 <MX_ADC1_Init+0xe4>)
 8000482:	2200      	movs	r2, #0
 8000484:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000486:	4b28      	ldr	r3, [pc, #160]	; (8000528 <MX_ADC1_Init+0xe4>)
 8000488:	2200      	movs	r2, #0
 800048a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800048c:	4b26      	ldr	r3, [pc, #152]	; (8000528 <MX_ADC1_Init+0xe4>)
 800048e:	2201      	movs	r2, #1
 8000490:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000492:	4b25      	ldr	r3, [pc, #148]	; (8000528 <MX_ADC1_Init+0xe4>)
 8000494:	2200      	movs	r2, #0
 8000496:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800049a:	4b23      	ldr	r3, [pc, #140]	; (8000528 <MX_ADC1_Init+0xe4>)
 800049c:	2200      	movs	r2, #0
 800049e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004a0:	4b21      	ldr	r3, [pc, #132]	; (8000528 <MX_ADC1_Init+0xe4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80004a6:	4b20      	ldr	r3, [pc, #128]	; (8000528 <MX_ADC1_Init+0xe4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <MX_ADC1_Init+0xe4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <MX_ADC1_Init+0xe4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_ADC1_Init+0xe4>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004c0:	4819      	ldr	r0, [pc, #100]	; (8000528 <MX_ADC1_Init+0xe4>)
 80004c2:	f001 ffc7 	bl	8002454 <HAL_ADC_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80004cc:	f000 ff80 	bl	80013d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d8:	4619      	mov	r1, r3
 80004da:	4813      	ldr	r0, [pc, #76]	; (8000528 <MX_ADC1_Init+0xe4>)
 80004dc:	f003 f802 	bl	80034e4 <HAL_ADCEx_MultiModeConfigChannel>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004e6:	f000 ff73 	bl	80013d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80004ea:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_ADC1_Init+0xec>)
 80004ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ee:	2306      	movs	r3, #6
 80004f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004f6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80004fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004fc:	2304      	movs	r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000504:	2300      	movs	r3, #0
 8000506:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800050a:	463b      	mov	r3, r7
 800050c:	4619      	mov	r1, r3
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <MX_ADC1_Init+0xe4>)
 8000510:	f002 f9a8 	bl	8002864 <HAL_ADC_ConfigChannel>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800051a:	f000 ff59 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800051e:	bf00      	nop
 8000520:	3730      	adds	r7, #48	; 0x30
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	2400002c 	.word	0x2400002c
 800052c:	40022000 	.word	0x40022000
 8000530:	1d500080 	.word	0x1d500080

08000534 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000538:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 800053a:	4a2f      	ldr	r2, [pc, #188]	; (80005f8 <MX_FDCAN1_Init+0xc4>)
 800053c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800053e:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000544:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 800054c:	2200      	movs	r2, #0
 800054e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 8000552:	2200      	movs	r2, #0
 8000554:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000556:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 8000558:	2200      	movs	r2, #0
 800055a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 800055e:	2210      	movs	r2, #16
 8000560:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000562:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 8000564:	2201      	movs	r2, #1
 8000566:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 800056a:	2202      	movs	r2, #2
 800056c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 8000570:	2202      	movs	r2, #2
 8000572:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 8000576:	2201      	movs	r2, #1
 8000578:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800057a:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 800057c:	2201      	movs	r2, #1
 800057e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 8000582:	2201      	movs	r2, #1
 8000584:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 8000588:	2201      	movs	r2, #1
 800058a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 800058e:	2200      	movs	r2, #0
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 8000594:	2200      	movs	r2, #0
 8000596:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000598:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 800059a:	2200      	movs	r2, #0
 800059c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80005a4:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80005b0:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005b2:	2204      	movs	r2, #4
 80005b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80005b6:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005be:	2204      	movs	r2, #4
 80005c0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80005c8:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005dc:	2204      	movs	r2, #4
 80005de:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_FDCAN1_Init+0xc0>)
 80005e2:	f003 f945 	bl	8003870 <HAL_FDCAN_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80005ec:	f000 fef0 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2400009c 	.word	0x2400009c
 80005f8:	4000a000 	.word	0x4000a000

080005fc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000602:	4a28      	ldr	r2, [pc, #160]	; (80006a4 <MX_SPI3_Init+0xa8>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000608:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800060c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000616:	2203      	movs	r2, #3
 8000618:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_SPI3_Init+0xa4>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000628:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800062c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_SPI3_Init+0xa4>)
 800063c:	2200      	movs	r2, #0
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_SPI3_Init+0xa4>)
 800064e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000656:	2200      	movs	r2, #0
 8000658:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_SPI3_Init+0xa4>)
 800065c:	2200      	movs	r2, #0
 800065e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000662:	2200      	movs	r2, #0
 8000664:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000668:	2200      	movs	r2, #0
 800066a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_SPI3_Init+0xa4>)
 800066e:	2200      	movs	r2, #0
 8000670:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000674:	2200      	movs	r2, #0
 8000676:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_SPI3_Init+0xa4>)
 800067a:	2200      	movs	r2, #0
 800067c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000680:	2200      	movs	r2, #0
 8000682:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_SPI3_Init+0xa4>)
 8000686:	2200      	movs	r2, #0
 8000688:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_SPI3_Init+0xa4>)
 800068c:	f007 f99c 	bl	80079c8 <HAL_SPI_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000696:	f000 fe9b 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2400013c 	.word	0x2400013c
 80006a4:	40003c00 	.word	0x40003c00

080006a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09c      	sub	sp, #112	; 0x70
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2234      	movs	r2, #52	; 0x34
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f009 fb8e 	bl	8009e04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e8:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <MX_TIM1_Init+0x180>)
 80006ea:	4a50      	ldr	r2, [pc, #320]	; (800082c <MX_TIM1_Init+0x184>)
 80006ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006ee:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <MX_TIM1_Init+0x180>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f4:	4b4c      	ldr	r3, [pc, #304]	; (8000828 <MX_TIM1_Init+0x180>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006fa:	4b4b      	ldr	r3, [pc, #300]	; (8000828 <MX_TIM1_Init+0x180>)
 80006fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000700:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000702:	4b49      	ldr	r3, [pc, #292]	; (8000828 <MX_TIM1_Init+0x180>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000708:	4b47      	ldr	r3, [pc, #284]	; (8000828 <MX_TIM1_Init+0x180>)
 800070a:	2200      	movs	r2, #0
 800070c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b46      	ldr	r3, [pc, #280]	; (8000828 <MX_TIM1_Init+0x180>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000714:	4844      	ldr	r0, [pc, #272]	; (8000828 <MX_TIM1_Init+0x180>)
 8000716:	f007 fa96 	bl	8007c46 <HAL_TIM_Base_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000720:	f000 fe56 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800072e:	4619      	mov	r1, r3
 8000730:	483d      	ldr	r0, [pc, #244]	; (8000828 <MX_TIM1_Init+0x180>)
 8000732:	f007 fc4b 	bl	8007fcc <HAL_TIM_ConfigClockSource>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800073c:	f000 fe48 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <MX_TIM1_Init+0x180>)
 8000742:	f007 fad7 	bl	8007cf4 <HAL_TIM_PWM_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800074c:	f000 fe40 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000750:	2300      	movs	r3, #0
 8000752:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000760:	4619      	mov	r1, r3
 8000762:	4831      	ldr	r0, [pc, #196]	; (8000828 <MX_TIM1_Init+0x180>)
 8000764:	f008 fa7c 	bl	8008c60 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800076e:	f000 fe2f 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000772:	2360      	movs	r3, #96	; 0x60
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	2300      	movs	r3, #0
 800077c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	4824      	ldr	r0, [pc, #144]	; (8000828 <MX_TIM1_Init+0x180>)
 8000798:	f007 fb04 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007a2:	f000 fe15 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007aa:	2208      	movs	r2, #8
 80007ac:	4619      	mov	r1, r3
 80007ae:	481e      	ldr	r0, [pc, #120]	; (8000828 <MX_TIM1_Init+0x180>)
 80007b0:	f007 faf8 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007ba:	f000 fe09 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c2:	220c      	movs	r2, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <MX_TIM1_Init+0x180>)
 80007c8:	f007 faec 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007d2:	f000 fdfd 	bl	80013d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_TIM1_Init+0x180>)
 800080c:	f008 fac4 	bl	8008d98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000816:	f000 fddb 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_TIM1_Init+0x180>)
 800081c:	f001 f868 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8000820:	bf00      	nop
 8000822:	3770      	adds	r7, #112	; 0x70
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	240001c4 	.word	0x240001c4
 800082c:	40010000 	.word	0x40010000

08000830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]
 800085e:	615a      	str	r2, [r3, #20]
 8000860:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000862:	4b33      	ldr	r3, [pc, #204]	; (8000930 <MX_TIM2_Init+0x100>)
 8000864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000868:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800086a:	4b31      	ldr	r3, [pc, #196]	; (8000930 <MX_TIM2_Init+0x100>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_TIM2_Init+0x100>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <MX_TIM2_Init+0x100>)
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b2c      	ldr	r3, [pc, #176]	; (8000930 <MX_TIM2_Init+0x100>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b2a      	ldr	r3, [pc, #168]	; (8000930 <MX_TIM2_Init+0x100>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800088a:	4829      	ldr	r0, [pc, #164]	; (8000930 <MX_TIM2_Init+0x100>)
 800088c:	f007 f9db 	bl	8007c46 <HAL_TIM_Base_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000896:	f000 fd9b 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4822      	ldr	r0, [pc, #136]	; (8000930 <MX_TIM2_Init+0x100>)
 80008a8:	f007 fb90 	bl	8007fcc <HAL_TIM_ConfigClockSource>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008b2:	f000 fd8d 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008b6:	481e      	ldr	r0, [pc, #120]	; (8000930 <MX_TIM2_Init+0x100>)
 80008b8:	f007 fa1c 	bl	8007cf4 <HAL_TIM_PWM_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008c2:	f000 fd85 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4816      	ldr	r0, [pc, #88]	; (8000930 <MX_TIM2_Init+0x100>)
 80008d6:	f008 f9c3 	bl	8008c60 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008e0:	f000 fd76 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e4:	2360      	movs	r3, #96	; 0x60
 80008e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2204      	movs	r2, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_TIM2_Init+0x100>)
 80008fc:	f007 fa52 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000906:	f000 fd63 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	2208      	movs	r2, #8
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM2_Init+0x100>)
 8000912:	f007 fa47 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800091c:	f000 fd58 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM2_Init+0x100>)
 8000922:	f000 ffe5 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8000926:	bf00      	nop
 8000928:	3738      	adds	r7, #56	; 0x38
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	24000210 	.word	0x24000210

08000934 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	; 0x38
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000954:	463b      	mov	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000966:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <MX_TIM3_Init+0x128>)
 8000968:	4a3d      	ldr	r2, [pc, #244]	; (8000a60 <MX_TIM3_Init+0x12c>)
 800096a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800096c:	4b3b      	ldr	r3, [pc, #236]	; (8000a5c <MX_TIM3_Init+0x128>)
 800096e:	2200      	movs	r2, #0
 8000970:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000972:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <MX_TIM3_Init+0x128>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000978:	4b38      	ldr	r3, [pc, #224]	; (8000a5c <MX_TIM3_Init+0x128>)
 800097a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800097e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000980:	4b36      	ldr	r3, [pc, #216]	; (8000a5c <MX_TIM3_Init+0x128>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000986:	4b35      	ldr	r3, [pc, #212]	; (8000a5c <MX_TIM3_Init+0x128>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800098c:	4833      	ldr	r0, [pc, #204]	; (8000a5c <MX_TIM3_Init+0x128>)
 800098e:	f007 f95a 	bl	8007c46 <HAL_TIM_Base_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000998:	f000 fd1a 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a6:	4619      	mov	r1, r3
 80009a8:	482c      	ldr	r0, [pc, #176]	; (8000a5c <MX_TIM3_Init+0x128>)
 80009aa:	f007 fb0f 	bl	8007fcc <HAL_TIM_ConfigClockSource>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009b4:	f000 fd0c 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009b8:	4828      	ldr	r0, [pc, #160]	; (8000a5c <MX_TIM3_Init+0x128>)
 80009ba:	f007 f99b 	bl	8007cf4 <HAL_TIM_PWM_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009c4:	f000 fd04 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4821      	ldr	r0, [pc, #132]	; (8000a5c <MX_TIM3_Init+0x128>)
 80009d8:	f008 f942 	bl	8008c60 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009e2:	f000 fcf5 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e6:	2360      	movs	r3, #96	; 0x60
 80009e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	2200      	movs	r2, #0
 80009fa:	4619      	mov	r1, r3
 80009fc:	4817      	ldr	r0, [pc, #92]	; (8000a5c <MX_TIM3_Init+0x128>)
 80009fe:	f007 f9d1 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a08:	f000 fce2 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	2204      	movs	r2, #4
 8000a10:	4619      	mov	r1, r3
 8000a12:	4812      	ldr	r0, [pc, #72]	; (8000a5c <MX_TIM3_Init+0x128>)
 8000a14:	f007 f9c6 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000a1e:	f000 fcd7 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	2208      	movs	r2, #8
 8000a26:	4619      	mov	r1, r3
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM3_Init+0x128>)
 8000a2a:	f007 f9bb 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000a34:	f000 fccc 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <MX_TIM3_Init+0x128>)
 8000a40:	f007 f9b0 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000a4a:	f000 fcc1 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a4e:	4803      	ldr	r0, [pc, #12]	; (8000a5c <MX_TIM3_Init+0x128>)
 8000a50:	f000 ff4e 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8000a54:	bf00      	nop
 8000a56:	3738      	adds	r7, #56	; 0x38
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	2400025c 	.word	0x2400025c
 8000a60:	40000400 	.word	0x40000400

08000a64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08e      	sub	sp, #56	; 0x38
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]
 8000a92:	615a      	str	r2, [r3, #20]
 8000a94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a96:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000a98:	4a3d      	ldr	r2, [pc, #244]	; (8000b90 <MX_TIM4_Init+0x12c>)
 8000a9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b3a      	ldr	r3, [pc, #232]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000aa8:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab0:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000abc:	4833      	ldr	r0, [pc, #204]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000abe:	f007 f8c2 	bl	8007c46 <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ac8:	f000 fc82 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	482c      	ldr	r0, [pc, #176]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000ada:	f007 fa77 	bl	8007fcc <HAL_TIM_ConfigClockSource>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000ae4:	f000 fc74 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ae8:	4828      	ldr	r0, [pc, #160]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000aea:	f007 f903 	bl	8007cf4 <HAL_TIM_PWM_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000af4:	f000 fc6c 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	4821      	ldr	r0, [pc, #132]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000b08:	f008 f8aa 	bl	8008c60 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b12:	f000 fc5d 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b16:	2360      	movs	r3, #96	; 0x60
 8000b18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b26:	463b      	mov	r3, r7
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4817      	ldr	r0, [pc, #92]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000b2e:	f007 f939 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b38:	f000 fc4a 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2204      	movs	r2, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4812      	ldr	r0, [pc, #72]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000b44:	f007 f92e 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000b4e:	f000 fc3f 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	2208      	movs	r2, #8
 8000b56:	4619      	mov	r1, r3
 8000b58:	480c      	ldr	r0, [pc, #48]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000b5a:	f007 f923 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000b64:	f000 fc34 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b68:	463b      	mov	r3, r7
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000b70:	f007 f918 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 8000b7a:	f000 fc29 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b7e:	4803      	ldr	r0, [pc, #12]	; (8000b8c <MX_TIM4_Init+0x128>)
 8000b80:	f000 feb6 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8000b84:	bf00      	nop
 8000b86:	3738      	adds	r7, #56	; 0x38
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	240002a8 	.word	0x240002a8
 8000b90:	40000800 	.word	0x40000800

08000b94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09c      	sub	sp, #112	; 0x70
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2234      	movs	r2, #52	; 0x34
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f009 f918 	bl	8009e04 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000bd4:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000bd6:	4a50      	ldr	r2, [pc, #320]	; (8000d18 <MX_TIM8_Init+0x184>)
 8000bd8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000bda:	4b4e      	ldr	r3, [pc, #312]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000be6:	4b4b      	ldr	r3, [pc, #300]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b46      	ldr	r3, [pc, #280]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000c00:	4844      	ldr	r0, [pc, #272]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000c02:	f007 f820 	bl	8007c46 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 fbe0 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	483d      	ldr	r0, [pc, #244]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000c1e:	f007 f9d5 	bl	8007fcc <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000c28:	f000 fbd2 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000c2c:	4839      	ldr	r0, [pc, #228]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000c2e:	f007 f861 	bl	8007cf4 <HAL_TIM_PWM_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000c38:	f000 fbca 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c40:	2300      	movs	r3, #0
 8000c42:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4831      	ldr	r0, [pc, #196]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000c50:	f008 f806 	bl	8008c60 <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000c5a:	f000 fbb9 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c5e:	2360      	movs	r3, #96	; 0x60
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c66:	2300      	movs	r3, #0
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c72:	2300      	movs	r3, #0
 8000c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c7e:	2204      	movs	r2, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4824      	ldr	r0, [pc, #144]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000c84:	f007 f88e 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000c8e:	f000 fb9f 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c96:	2208      	movs	r2, #8
 8000c98:	4619      	mov	r1, r3
 8000c9a:	481e      	ldr	r0, [pc, #120]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000c9c:	f007 f882 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8000ca6:	f000 fb93 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000caa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cae:	220c      	movs	r2, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4818      	ldr	r0, [pc, #96]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000cb4:	f007 f876 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8000cbe:	f000 fb87 	bl	80013d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4807      	ldr	r0, [pc, #28]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000cf8:	f008 f84e 	bl	8008d98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000d02:	f000 fb65 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <MX_TIM8_Init+0x180>)
 8000d08:	f000 fdf2 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8000d0c:	bf00      	nop
 8000d0e:	3770      	adds	r7, #112	; 0x70
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	240002f4 	.word	0x240002f4
 8000d18:	40010400 	.word	0x40010400

08000d1c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08c      	sub	sp, #48	; 0x30
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d22:	f107 0320 	add.w	r3, r7, #32
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
 8000d3e:	615a      	str	r2, [r3, #20]
 8000d40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d42:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <MX_TIM12_Init+0xc0>)
 8000d46:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000d48:	4b23      	ldr	r3, [pc, #140]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000d68:	481b      	ldr	r0, [pc, #108]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000d6a:	f006 ff6c 	bl	8007c46 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8000d74:	f000 fb2c 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	4619      	mov	r1, r3
 8000d84:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000d86:	f007 f921 	bl	8007fcc <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000d90:	f000 fb1e 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000d94:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000d96:	f006 ffad 	bl	8007cf4 <HAL_TIM_PWM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000da0:	f000 fb16 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da4:	2360      	movs	r3, #96	; 0x60
 8000da6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000dbc:	f006 fff2 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8000dc6:	f000 fb03 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000dca:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM12_Init+0xbc>)
 8000dcc:	f000 fd90 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8000dd0:	bf00      	nop
 8000dd2:	3730      	adds	r7, #48	; 0x30
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000340 	.word	0x24000340
 8000ddc:	40001800 	.word	0x40001800

08000de0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b09c      	sub	sp, #112	; 0x70
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	615a      	str	r2, [r3, #20]
 8000e12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2234      	movs	r2, #52	; 0x34
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f008 fff2 	bl	8009e04 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000e20:	4b3f      	ldr	r3, [pc, #252]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e22:	4a40      	ldr	r2, [pc, #256]	; (8000f24 <MX_TIM15_Init+0x144>)
 8000e24:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000e26:	4b3e      	ldr	r3, [pc, #248]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000e32:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e38:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000e40:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e46:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000e4c:	4834      	ldr	r0, [pc, #208]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e4e:	f006 fefa 	bl	8007c46 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000e58:	f000 faba 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000e62:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e66:	4619      	mov	r1, r3
 8000e68:	482d      	ldr	r0, [pc, #180]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e6a:	f007 f8af 	bl	8007fcc <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000e74:	f000 faac 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000e78:	4829      	ldr	r0, [pc, #164]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e7a:	f006 ff3b 	bl	8007cf4 <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000e84:	f000 faa4 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000e90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e94:	4619      	mov	r1, r3
 8000e96:	4822      	ldr	r0, [pc, #136]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000e98:	f007 fee2 	bl	8008c60 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000ea2:	f000 fa95 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2360      	movs	r3, #96	; 0x60
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ec2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4815      	ldr	r0, [pc, #84]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000ecc:	f006 ff6a 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8000ed6:	f000 fa7b 	bl	80013d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000f02:	f007 ff49 	bl	8008d98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 8000f0c:	f000 fa60 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <MX_TIM15_Init+0x140>)
 8000f12:	f000 fced 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8000f16:	bf00      	nop
 8000f18:	3770      	adds	r7, #112	; 0x70
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2400038c 	.word	0x2400038c
 8000f24:	40014000 	.word	0x40014000

08000f28 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	; 0x38
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]
 8000f56:	615a      	str	r2, [r3, #20]
 8000f58:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000f5c:	4a2d      	ldr	r2, [pc, #180]	; (8001014 <MX_TIM23_Init+0xec>)
 8000f5e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8000f60:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000f6c:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f72:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f74:	4b26      	ldr	r3, [pc, #152]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000f80:	4823      	ldr	r0, [pc, #140]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000f82:	f006 fe60 	bl	8007c46 <HAL_TIM_Base_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM23_Init+0x68>
  {
    Error_Handler();
 8000f8c:	f000 fa20 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8000f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481c      	ldr	r0, [pc, #112]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000f9e:	f007 f815 	bl	8007fcc <HAL_TIM_ConfigClockSource>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM23_Init+0x84>
  {
    Error_Handler();
 8000fa8:	f000 fa12 	bl	80013d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 8000fac:	4818      	ldr	r0, [pc, #96]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000fae:	f006 fea1 	bl	8007cf4 <HAL_TIM_PWM_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM23_Init+0x94>
  {
    Error_Handler();
 8000fb8:	f000 fa0a 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4811      	ldr	r0, [pc, #68]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000fcc:	f007 fe48 	bl	8008c60 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM23_Init+0xb2>
  {
    Error_Handler();
 8000fd6:	f000 f9fb 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fda:	2360      	movs	r3, #96	; 0x60
 8000fdc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	220c      	movs	r2, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <MX_TIM23_Init+0xe8>)
 8000ff2:	f006 fed7 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM23_Init+0xd8>
  {
    Error_Handler();
 8000ffc:	f000 f9e8 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <MX_TIM23_Init+0xe8>)
 8001002:	f000 fc75 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	240003d8 	.word	0x240003d8
 8001014:	4000e000 	.word	0x4000e000

08001018 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	; 0x38
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800101e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001038:	463b      	mov	r3, r7
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	615a      	str	r2, [r3, #20]
 8001048:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800104a:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <MX_TIM24_Init+0xe0>)
 800104c:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <MX_TIM24_Init+0xe4>)
 800104e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <MX_TIM24_Init+0xe0>)
 8001052:	2200      	movs	r2, #0
 8001054:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001056:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <MX_TIM24_Init+0xe0>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <MX_TIM24_Init+0xe0>)
 800105e:	f04f 32ff 	mov.w	r2, #4294967295
 8001062:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001064:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <MX_TIM24_Init+0xe0>)
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <MX_TIM24_Init+0xe0>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
 8001070:	4821      	ldr	r0, [pc, #132]	; (80010f8 <MX_TIM24_Init+0xe0>)
 8001072:	f006 fe3f 	bl	8007cf4 <HAL_TIM_PWM_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM24_Init+0x68>
  {
    Error_Handler();
 800107c:	f000 f9a8 	bl	80013d0 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001080:	2300      	movs	r3, #0
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC1Filter = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.Commutation_Delay = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_HallSensor_Init(&htim24, &sConfig) != HAL_OK)
 8001090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001094:	4619      	mov	r1, r3
 8001096:	4818      	ldr	r0, [pc, #96]	; (80010f8 <MX_TIM24_Init+0xe0>)
 8001098:	f007 fd2a 	bl	8008af0 <HAL_TIMEx_HallSensor_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 80010a2:	f000 f995 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80010a6:	2350      	movs	r3, #80	; 0x50
 80010a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4810      	ldr	r0, [pc, #64]	; (80010f8 <MX_TIM24_Init+0xe0>)
 80010b6:	f007 fdd3 	bl	8008c60 <HAL_TIMEx_MasterConfigSynchronization>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM24_Init+0xac>
  {
    Error_Handler();
 80010c0:	f000 f986 	bl	80013d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c4:	2360      	movs	r3, #96	; 0x60
 80010c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	220c      	movs	r2, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <MX_TIM24_Init+0xe0>)
 80010dc:	f006 fe62 	bl	8007da4 <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM24_Init+0xd2>
  {
    Error_Handler();
 80010e6:	f000 f973 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <MX_TIM24_Init+0xe0>)
 80010ec:	f000 fc00 	bl	80018f0 <HAL_TIM_MspPostInit>

}
 80010f0:	bf00      	nop
 80010f2:	3738      	adds	r7, #56	; 0x38
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	24000424 	.word	0x24000424
 80010fc:	4000e400 	.word	0x4000e400

08001100 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_USART1_Init+0x90>)
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <MX_USART1_Init+0x94>)
 8001108:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_USART1_Init+0x90>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_USART1_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_USART1_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_USART1_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_USART1_Init+0x90>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_USART1_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_USART1_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_USART1_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_USART1_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_USART1_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <MX_USART1_Init+0x90>)
 800114a:	f007 fec5 	bl	8008ed8 <HAL_USART_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8001154:	f000 f93c 	bl	80013d0 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001158:	2100      	movs	r1, #0
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_USART1_Init+0x90>)
 800115c:	f008 fd5a 	bl	8009c14 <HAL_USARTEx_SetTxFifoThreshold>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8001166:	f000 f933 	bl	80013d0 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116a:	2100      	movs	r1, #0
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <MX_USART1_Init+0x90>)
 800116e:	f008 fd8f 	bl	8009c90 <HAL_USARTEx_SetRxFifoThreshold>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8001178:	f000 f92a 	bl	80013d0 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_USART1_Init+0x90>)
 800117e:	f008 fd10 	bl	8009ba2 <HAL_USARTEx_DisableFifoMode>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8001188:	f000 f922 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	24000470 	.word	0x24000470
 8001194:	40011000 	.word	0x40011000

08001198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ae:	4b80      	ldr	r3, [pc, #512]	; (80013b0 <MX_GPIO_Init+0x218>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	4a7e      	ldr	r2, [pc, #504]	; (80013b0 <MX_GPIO_Init+0x218>)
 80011b6:	f043 0310 	orr.w	r3, r3, #16
 80011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011be:	4b7c      	ldr	r3, [pc, #496]	; (80013b0 <MX_GPIO_Init+0x218>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011cc:	4b78      	ldr	r3, [pc, #480]	; (80013b0 <MX_GPIO_Init+0x218>)
 80011ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d2:	4a77      	ldr	r2, [pc, #476]	; (80013b0 <MX_GPIO_Init+0x218>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011dc:	4b74      	ldr	r3, [pc, #464]	; (80013b0 <MX_GPIO_Init+0x218>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ea:	4b71      	ldr	r3, [pc, #452]	; (80013b0 <MX_GPIO_Init+0x218>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f0:	4a6f      	ldr	r2, [pc, #444]	; (80013b0 <MX_GPIO_Init+0x218>)
 80011f2:	f043 0320 	orr.w	r3, r3, #32
 80011f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011fa:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <MX_GPIO_Init+0x218>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	f003 0320 	and.w	r3, r3, #32
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b69      	ldr	r3, [pc, #420]	; (80013b0 <MX_GPIO_Init+0x218>)
 800120a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120e:	4a68      	ldr	r2, [pc, #416]	; (80013b0 <MX_GPIO_Init+0x218>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001218:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <MX_GPIO_Init+0x218>)
 800121a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b62      	ldr	r3, [pc, #392]	; (80013b0 <MX_GPIO_Init+0x218>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	4a60      	ldr	r2, [pc, #384]	; (80013b0 <MX_GPIO_Init+0x218>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001236:	4b5e      	ldr	r3, [pc, #376]	; (80013b0 <MX_GPIO_Init+0x218>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001244:	4b5a      	ldr	r3, [pc, #360]	; (80013b0 <MX_GPIO_Init+0x218>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	4a59      	ldr	r2, [pc, #356]	; (80013b0 <MX_GPIO_Init+0x218>)
 800124c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001254:	4b56      	ldr	r3, [pc, #344]	; (80013b0 <MX_GPIO_Init+0x218>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <MX_GPIO_Init+0x218>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001268:	4a51      	ldr	r2, [pc, #324]	; (80013b0 <MX_GPIO_Init+0x218>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001272:	4b4f      	ldr	r3, [pc, #316]	; (80013b0 <MX_GPIO_Init+0x218>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_GPIO_2_Pin|DUT_GPIO_4_Pin|DIUT_GPIO_6_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2170      	movs	r1, #112	; 0x70
 8001284:	484b      	ldr	r0, [pc, #300]	; (80013b4 <MX_GPIO_Init+0x21c>)
 8001286:	f002 ffff 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DUT_GPIO_3_Pin|DUT_GPIO_12_Pin|DUT_GPIO_10_Pin|DUT_GPIO_13_Pin
 800128a:	2200      	movs	r2, #0
 800128c:	f246 0107 	movw	r1, #24583	; 0x6007
 8001290:	4849      	ldr	r0, [pc, #292]	; (80013b8 <MX_GPIO_Init+0x220>)
 8001292:	f002 fff9 	bl	8004288 <HAL_GPIO_WritePin>
                          |DUT_GPIO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DUT_BOOT_Pin|DUT_NRST_Pin|DUT_GPIO_8_Pin|DUT_GPIO_7_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800129c:	4847      	ldr	r0, [pc, #284]	; (80013bc <MX_GPIO_Init+0x224>)
 800129e:	f002 fff3 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, DUT_GPIO_1_Pin|DUT_GPIO_5_Pin|DUT_GPIO_14_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f248 4102 	movw	r1, #33794	; 0x8402
 80012a8:	4845      	ldr	r0, [pc, #276]	; (80013c0 <MX_GPIO_Init+0x228>)
 80012aa:	f002 ffed 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SLNT_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80012b4:	4843      	ldr	r0, [pc, #268]	; (80013c4 <MX_GPIO_Init+0x22c>)
 80012b6:	f002 ffe7 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DUT_GPIO_9_GPIO_Port, DUT_GPIO_9_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	4842      	ldr	r0, [pc, #264]	; (80013c8 <MX_GPIO_Init+0x230>)
 80012c0:	f002 ffe2 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_GPIO_2_Pin DUT_GPIO_4_Pin DIUT_GPIO_6_Pin */
  GPIO_InitStruct.Pin = DUT_GPIO_2_Pin|DUT_GPIO_4_Pin|DIUT_GPIO_6_Pin;
 80012c4:	2370      	movs	r3, #112	; 0x70
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	4836      	ldr	r0, [pc, #216]	; (80013b4 <MX_GPIO_Init+0x21c>)
 80012dc:	f002 fe2c 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DUT_GPIO_3_Pin DUT_GPIO_12_Pin DUT_GPIO_10_Pin DUT_GPIO_13_Pin
                           DUT_GPIO_11_Pin */
  GPIO_InitStruct.Pin = DUT_GPIO_3_Pin|DUT_GPIO_12_Pin|DUT_GPIO_10_Pin|DUT_GPIO_13_Pin
 80012e0:	f246 0307 	movw	r3, #24583	; 0x6007
 80012e4:	61fb      	str	r3, [r7, #28]
                          |DUT_GPIO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	482f      	ldr	r0, [pc, #188]	; (80013b8 <MX_GPIO_Init+0x220>)
 80012fa:	f002 fe1d 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DUT_BOOT_Pin DUT_NRST_Pin DUT_GPIO_8_Pin DUT_GPIO_7_Pin */
  GPIO_InitStruct.Pin = DUT_BOOT_Pin|DUT_NRST_Pin|DUT_GPIO_8_Pin|DUT_GPIO_7_Pin;
 80012fe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	4829      	ldr	r0, [pc, #164]	; (80013bc <MX_GPIO_Init+0x224>)
 8001318:	f002 fe0e 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DUT_ACTUATOR_1_Pin */
  GPIO_InitStruct.Pin = DUT_ACTUATOR_1_Pin;
 800131c:	2320      	movs	r3, #32
 800131e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DUT_ACTUATOR_1_GPIO_Port, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4827      	ldr	r0, [pc, #156]	; (80013cc <MX_GPIO_Init+0x234>)
 8001330:	f002 fe02 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DUT_GPIO_1_Pin DUT_GPIO_5_Pin DUT_GPIO_14_Pin */
  GPIO_InitStruct.Pin = DUT_GPIO_1_Pin|DUT_GPIO_5_Pin|DUT_GPIO_14_Pin;
 8001334:	f248 4302 	movw	r3, #33794	; 0x8402
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	481c      	ldr	r0, [pc, #112]	; (80013c0 <MX_GPIO_Init+0x228>)
 800134e:	f002 fdf3 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DUT_ACTUATOR_3_Pin DUT_ACTUATOR_2_Pin */
  GPIO_InitStruct.Pin = DUT_ACTUATOR_3_Pin|DUT_ACTUATOR_2_Pin;
 8001352:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	4818      	ldr	r0, [pc, #96]	; (80013c8 <MX_GPIO_Init+0x230>)
 8001368:	f002 fde6 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SLNT_Pin SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SLNT_Pin|SPI3_CS_Pin;
 800136c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <MX_GPIO_Init+0x22c>)
 8001386:	f002 fdd7 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DUT_GPIO_9_Pin */
  GPIO_InitStruct.Pin = DUT_GPIO_9_Pin;
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DUT_GPIO_9_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4809      	ldr	r0, [pc, #36]	; (80013c8 <MX_GPIO_Init+0x230>)
 80013a2:	f002 fdc9 	bl	8003f38 <HAL_GPIO_Init>

}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	; 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	58024400 	.word	0x58024400
 80013b4:	58021000 	.word	0x58021000
 80013b8:	58020800 	.word	0x58020800
 80013bc:	58021400 	.word	0x58021400
 80013c0:	58021800 	.word	0x58021800
 80013c4:	58020c00 	.word	0x58020c00
 80013c8:	58020400 	.word	0x58020400
 80013cc:	58020000 	.word	0x58020000

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_MspInit+0x30>)
 80013e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_MspInit+0x30>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_MspInit+0x30>)
 80013f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	58024400 	.word	0x58024400

08001410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0ba      	sub	sp, #232	; 0xe8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	22b8      	movs	r2, #184	; 0xb8
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f008 fce7 	bl	8009e04 <memset>
  if(hadc->Instance==ADC1)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a3a      	ldr	r2, [pc, #232]	; (8001524 <HAL_ADC_MspInit+0x114>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d16d      	bne.n	800151c <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001440:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 800144c:	2320      	movs	r3, #32
 800144e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8001450:	2381      	movs	r3, #129	; 0x81
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001454:	2302      	movs	r3, #2
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001458:	2302      	movs	r3, #2
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800145c:	2302      	movs	r3, #2
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001460:	2340      	movs	r3, #64	; 0x40
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001464:	2300      	movs	r3, #0
 8001466:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fec0 	bl	80051fc <HAL_RCCEx_PeriphCLKConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8001482:	f7ff ffa5 	bl	80013d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_ADC_MspInit+0x118>)
 8001488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800148c:	4a26      	ldr	r2, [pc, #152]	; (8001528 <HAL_ADC_MspInit+0x118>)
 800148e:	f043 0320 	orr.w	r3, r3, #32
 8001492:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <HAL_ADC_MspInit+0x118>)
 8001498:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_ADC_MspInit+0x118>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	4a1f      	ldr	r2, [pc, #124]	; (8001528 <HAL_ADC_MspInit+0x118>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_ADC_MspInit+0x118>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_ADC_MspInit+0x118>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	4a17      	ldr	r2, [pc, #92]	; (8001528 <HAL_ADC_MspInit+0x118>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_ADC_MspInit+0x118>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PA7     ------> ADC1_INP7
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = DUT_ACTUATOR_4_20mA_Pin|VOLTAGE_Pin;
 80014e0:	23c0      	movs	r3, #192	; 0xc0
 80014e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e6:	2303      	movs	r3, #3
 80014e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <HAL_ADC_MspInit+0x11c>)
 80014fa:	f002 fd1d 	bl	8003f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRENT_Pin;
 80014fe:	2310      	movs	r3, #16
 8001500:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001504:	2303      	movs	r3, #3
 8001506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(CURRENT_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <HAL_ADC_MspInit+0x120>)
 8001518:	f002 fd0e 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800151c:	bf00      	nop
 800151e:	37e8      	adds	r7, #232	; 0xe8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40022000 	.word	0x40022000
 8001528:	58024400 	.word	0x58024400
 800152c:	58020000 	.word	0x58020000
 8001530:	58020800 	.word	0x58020800

08001534 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0b8      	sub	sp, #224	; 0xe0
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	22b8      	movs	r2, #184	; 0xb8
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f008 fc55 	bl	8009e04 <memset>
  if(hfdcan->Instance==FDCAN1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a27      	ldr	r2, [pc, #156]	; (80015fc <HAL_FDCAN_MspInit+0xc8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d146      	bne.n	80015f2 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001564:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001574:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fe3e 	bl	80051fc <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001586:	f7ff ff23 	bl	80013d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <HAL_FDCAN_MspInit+0xcc>)
 800158c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <HAL_FDCAN_MspInit+0xcc>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_FDCAN_MspInit+0xcc>)
 800159c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_FDCAN_MspInit+0xcc>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ae:	4a14      	ldr	r2, [pc, #80]	; (8001600 <HAL_FDCAN_MspInit+0xcc>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_FDCAN_MspInit+0xcc>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80015c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80015e0:	2309      	movs	r3, #9
 80015e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_FDCAN_MspInit+0xd0>)
 80015ee:	f002 fca3 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	37e0      	adds	r7, #224	; 0xe0
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	4000a000 	.word	0x4000a000
 8001600:	58024400 	.word	0x58024400
 8001604:	58020000 	.word	0x58020000

08001608 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0b8      	sub	sp, #224	; 0xe0
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	22b8      	movs	r2, #184	; 0xb8
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f008 fbeb 	bl	8009e04 <memset>
  if(hspi->Instance==SPI3)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a26      	ldr	r2, [pc, #152]	; (80016cc <HAL_SPI_MspInit+0xc4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d145      	bne.n	80016c4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001644:	2300      	movs	r3, #0
 8001646:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fdd5 	bl	80051fc <HAL_RCCEx_PeriphCLKConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001658:	f7ff feba 	bl	80013d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_SPI_MspInit+0xc8>)
 800165e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001662:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <HAL_SPI_MspInit+0xc8>)
 8001664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001668:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_SPI_MspInit+0xc8>)
 800166e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_SPI_MspInit+0xc8>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001680:	4a13      	ldr	r2, [pc, #76]	; (80016d0 <HAL_SPI_MspInit+0xc8>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <HAL_SPI_MspInit+0xc8>)
 800168c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001698:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800169c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016b2:	2306      	movs	r3, #6
 80016b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016bc:	4619      	mov	r1, r3
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <HAL_SPI_MspInit+0xcc>)
 80016c0:	f002 fc3a 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016c4:	bf00      	nop
 80016c6:	37e0      	adds	r7, #224	; 0xe0
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40003c00 	.word	0x40003c00
 80016d0:	58024400 	.word	0x58024400
 80016d4:	58020800 	.word	0x58020800

080016d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d8:	b480      	push	{r7}
 80016da:	b08b      	sub	sp, #44	; 0x2c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a55      	ldr	r2, [pc, #340]	; (800183c <HAL_TIM_Base_MspInit+0x164>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10f      	bne.n	800170a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ea:	4b55      	ldr	r3, [pc, #340]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 80016ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016f0:	4a53      	ldr	r2, [pc, #332]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016fa:	4b51      	ldr	r3, [pc, #324]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 80016fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8001708:	e091      	b.n	800182e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001712:	d10f      	bne.n	8001734 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001714:	4b4a      	ldr	r3, [pc, #296]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 8001716:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800171a:	4a49      	ldr	r2, [pc, #292]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001724:	4b46      	ldr	r3, [pc, #280]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 8001726:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	6a3b      	ldr	r3, [r7, #32]
}
 8001732:	e07c      	b.n	800182e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a42      	ldr	r2, [pc, #264]	; (8001844 <HAL_TIM_Base_MspInit+0x16c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d10f      	bne.n	800175e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800173e:	4b40      	ldr	r3, [pc, #256]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 8001740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001744:	4a3e      	ldr	r2, [pc, #248]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 8001746:	f043 0302 	orr.w	r3, r3, #2
 800174a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800174e:	4b3c      	ldr	r3, [pc, #240]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 8001750:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	69fb      	ldr	r3, [r7, #28]
}
 800175c:	e067      	b.n	800182e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a39      	ldr	r2, [pc, #228]	; (8001848 <HAL_TIM_Base_MspInit+0x170>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d10f      	bne.n	8001788 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001768:	4b35      	ldr	r3, [pc, #212]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 800176a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800176e:	4a34      	ldr	r2, [pc, #208]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001778:	4b31      	ldr	r3, [pc, #196]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 800177a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	61bb      	str	r3, [r7, #24]
 8001784:	69bb      	ldr	r3, [r7, #24]
}
 8001786:	e052      	b.n	800182e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM8)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a2f      	ldr	r2, [pc, #188]	; (800184c <HAL_TIM_Base_MspInit+0x174>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10f      	bne.n	80017b2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 8001794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001798:	4a29      	ldr	r2, [pc, #164]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 80017a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697b      	ldr	r3, [r7, #20]
}
 80017b0:	e03d      	b.n	800182e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM12)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a26      	ldr	r2, [pc, #152]	; (8001850 <HAL_TIM_Base_MspInit+0x178>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d10f      	bne.n	80017dc <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017bc:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 80017be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 80017c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017cc:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 80017ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
}
 80017da:	e028      	b.n	800182e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM15)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_TIM_Base_MspInit+0x17c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d10f      	bne.n	8001806 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 80017e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 80017ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 80017f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	e013      	b.n	800182e <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM23)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a13      	ldr	r2, [pc, #76]	; (8001858 <HAL_TIM_Base_MspInit+0x180>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d10e      	bne.n	800182e <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 8001812:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 8001818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <HAL_TIM_Base_MspInit+0x168>)
 8001822:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
}
 800182e:	bf00      	nop
 8001830:	372c      	adds	r7, #44	; 0x2c
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40010000 	.word	0x40010000
 8001840:	58024400 	.word	0x58024400
 8001844:	40000400 	.word	0x40000400
 8001848:	40000800 	.word	0x40000800
 800184c:	40010400 	.word	0x40010400
 8001850:	40001800 	.word	0x40001800
 8001854:	40014000 	.word	0x40014000
 8001858:	4000e000 	.word	0x4000e000

0800185c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM24)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1a      	ldr	r2, [pc, #104]	; (80018e4 <HAL_TIM_PWM_MspInit+0x88>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d12e      	bne.n	80018dc <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM24_MspInit 0 */

  /* USER CODE END TIM24_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM24_CLK_ENABLE();
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001880:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001884:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800188a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_TIM_PWM_MspInit+0x8c>)
 8001890:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_TIM_PWM_MspInit+0x8c>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_TIM_PWM_MspInit+0x8c>)
 80018a4:	f043 0320 	orr.w	r3, r3, #32
 80018a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_TIM_PWM_MspInit+0x8c>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM24 GPIO Configuration
    PF11     ------> TIM24_CH1
    PF12     ------> TIM24_CH2
    PF13     ------> TIM24_CH3
    */
    GPIO_InitStruct.Pin = NTC_4_Pin|NTC_2_Pin|NTC_1_Pin;
 80018ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80018cc:	230e      	movs	r3, #14
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <HAL_TIM_PWM_MspInit+0x90>)
 80018d8:	f002 fb2e 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	4000e400 	.word	0x4000e400
 80018e8:	58024400 	.word	0x58024400
 80018ec:	58021400 	.word	0x58021400

080018f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b092      	sub	sp, #72	; 0x48
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4aa4      	ldr	r2, [pc, #656]	; (8001ba0 <HAL_TIM_MspPostInit+0x2b0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d120      	bne.n	8001954 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001912:	4ba4      	ldr	r3, [pc, #656]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	4aa2      	ldr	r2, [pc, #648]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001922:	4ba0      	ldr	r3, [pc, #640]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
 800192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = DUT_PWM_11_Pin|DUT_PWM_12_Pin|DUT_PWM_10_Pin;
 8001930:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001942:	2301      	movs	r3, #1
 8001944:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001946:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800194a:	4619      	mov	r1, r3
 800194c:	4896      	ldr	r0, [pc, #600]	; (8001ba8 <HAL_TIM_MspPostInit+0x2b8>)
 800194e:	f002 faf3 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspPostInit 1 */

  /* USER CODE END TIM24_MspPostInit 1 */
  }

}
 8001952:	e166      	b.n	8001c22 <HAL_TIM_MspPostInit+0x332>
  else if(htim->Instance==TIM2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195c:	d11f      	bne.n	800199e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b91      	ldr	r3, [pc, #580]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001964:	4a8f      	ldr	r2, [pc, #572]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800196e:	4b8d      	ldr	r3, [pc, #564]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = DUT_PWM_2_Pin|SENSOR_5V_8_Pin;
 800197c:	2306      	movs	r3, #6
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800198c:	2301      	movs	r3, #1
 800198e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001994:	4619      	mov	r1, r3
 8001996:	4885      	ldr	r0, [pc, #532]	; (8001bac <HAL_TIM_MspPostInit+0x2bc>)
 8001998:	f002 face 	bl	8003f38 <HAL_GPIO_Init>
}
 800199c:	e141      	b.n	8001c22 <HAL_TIM_MspPostInit+0x332>
  else if(htim->Instance==TIM3)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a83      	ldr	r2, [pc, #524]	; (8001bb0 <HAL_TIM_MspPostInit+0x2c0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d13e      	bne.n	8001a26 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a8:	4b7e      	ldr	r3, [pc, #504]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 80019aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ae:	4a7d      	ldr	r2, [pc, #500]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019b8:	4b7a      	ldr	r3, [pc, #488]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 80019ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	4b77      	ldr	r3, [pc, #476]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 80019c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019cc:	4a75      	ldr	r2, [pc, #468]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = DUT_PWM_3_Pin|DUT_PWM_4_Pin|DUT_PWM_5_Pin;
 80019e4:	2323      	movs	r3, #35	; 0x23
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019f4:	2302      	movs	r3, #2
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019fc:	4619      	mov	r1, r3
 80019fe:	486d      	ldr	r0, [pc, #436]	; (8001bb4 <HAL_TIM_MspPostInit+0x2c4>)
 8001a00:	f002 fa9a 	bl	8003f38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_5V_5_Pin;
 8001a04:	2340      	movs	r3, #64	; 0x40
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a14:	2302      	movs	r3, #2
 8001a16:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SENSOR_5V_5_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4866      	ldr	r0, [pc, #408]	; (8001bb8 <HAL_TIM_MspPostInit+0x2c8>)
 8001a20:	f002 fa8a 	bl	8003f38 <HAL_GPIO_Init>
}
 8001a24:	e0fd      	b.n	8001c22 <HAL_TIM_MspPostInit+0x332>
  else if(htim->Instance==TIM4)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a64      	ldr	r2, [pc, #400]	; (8001bbc <HAL_TIM_MspPostInit+0x2cc>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d120      	bne.n	8001a72 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a30:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	4a5b      	ldr	r2, [pc, #364]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a40:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	623b      	str	r3, [r7, #32]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = DUT_PWM_7_Pin|DUT_PWM_6_Pin|DUT_PWM_8_Pin|DUT_PWM_9_Pin;
 8001a4e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a60:	2302      	movs	r3, #2
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4855      	ldr	r0, [pc, #340]	; (8001bc0 <HAL_TIM_MspPostInit+0x2d0>)
 8001a6c:	f002 fa64 	bl	8003f38 <HAL_GPIO_Init>
}
 8001a70:	e0d7      	b.n	8001c22 <HAL_TIM_MspPostInit+0x332>
  else if(htim->Instance==TIM8)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a53      	ldr	r2, [pc, #332]	; (8001bc4 <HAL_TIM_MspPostInit+0x2d4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d120      	bne.n	8001abe <HAL_TIM_MspPostInit+0x1ce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7c:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a82:	4a48      	ldr	r2, [pc, #288]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a8c:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	61fb      	str	r3, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = SENSOR_5V_2_Pin|SENSOR_5V_4_Pin|SENSOR_5V_1_Pin;
 8001a9a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001aac:	2303      	movs	r3, #3
 8001aae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4840      	ldr	r0, [pc, #256]	; (8001bb8 <HAL_TIM_MspPostInit+0x2c8>)
 8001ab8:	f002 fa3e 	bl	8003f38 <HAL_GPIO_Init>
}
 8001abc:	e0b1      	b.n	8001c22 <HAL_TIM_MspPostInit+0x332>
  else if(htim->Instance==TIM12)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a41      	ldr	r2, [pc, #260]	; (8001bc8 <HAL_TIM_MspPostInit+0x2d8>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d120      	bne.n	8001b0a <HAL_TIM_MspPostInit+0x21a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac8:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ace:	4a35      	ldr	r2, [pc, #212]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad8:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	61bb      	str	r3, [r7, #24]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = SENSOR_5V_6_Pin;
 8001ae6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8001af8:	2302      	movs	r3, #2
 8001afa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SENSOR_5V_6_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b00:	4619      	mov	r1, r3
 8001b02:	482c      	ldr	r0, [pc, #176]	; (8001bb4 <HAL_TIM_MspPostInit+0x2c4>)
 8001b04:	f002 fa18 	bl	8003f38 <HAL_GPIO_Init>
}
 8001b08:	e08b      	b.n	8001c22 <HAL_TIM_MspPostInit+0x332>
  else if(htim->Instance==TIM15)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a2f      	ldr	r2, [pc, #188]	; (8001bcc <HAL_TIM_MspPostInit+0x2dc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d11f      	bne.n	8001b54 <HAL_TIM_MspPostInit+0x264>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	4a22      	ldr	r2, [pc, #136]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SENSOR_5V_3_Pin;
 8001b32:	2308      	movs	r3, #8
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001b42:	2304      	movs	r3, #4
 8001b44:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SENSOR_5V_3_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4817      	ldr	r0, [pc, #92]	; (8001bac <HAL_TIM_MspPostInit+0x2bc>)
 8001b4e:	f002 f9f3 	bl	8003f38 <HAL_GPIO_Init>
}
 8001b52:	e066      	b.n	8001c22 <HAL_TIM_MspPostInit+0x332>
  else if(htim->Instance==TIM23)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1d      	ldr	r2, [pc, #116]	; (8001bd0 <HAL_TIM_MspPostInit+0x2e0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d13c      	bne.n	8001bd8 <HAL_TIM_MspPostInit+0x2e8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b64:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001b66:	f043 0320 	orr.w	r3, r3, #32
 8001b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_TIM_MspPostInit+0x2b4>)
 8001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = NTC_3_Pin;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8001b8c:	230d      	movs	r3, #13
 8001b8e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(NTC_3_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b94:	4619      	mov	r1, r3
 8001b96:	480f      	ldr	r0, [pc, #60]	; (8001bd4 <HAL_TIM_MspPostInit+0x2e4>)
 8001b98:	f002 f9ce 	bl	8003f38 <HAL_GPIO_Init>
}
 8001b9c:	e041      	b.n	8001c22 <HAL_TIM_MspPostInit+0x332>
 8001b9e:	bf00      	nop
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	58024400 	.word	0x58024400
 8001ba8:	58021000 	.word	0x58021000
 8001bac:	58020000 	.word	0x58020000
 8001bb0:	40000400 	.word	0x40000400
 8001bb4:	58020400 	.word	0x58020400
 8001bb8:	58020800 	.word	0x58020800
 8001bbc:	40000800 	.word	0x40000800
 8001bc0:	58020c00 	.word	0x58020c00
 8001bc4:	40010400 	.word	0x40010400
 8001bc8:	40001800 	.word	0x40001800
 8001bcc:	40014000 	.word	0x40014000
 8001bd0:	4000e000 	.word	0x4000e000
 8001bd4:	58021400 	.word	0x58021400
  else if(htim->Instance==TIM24)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a13      	ldr	r2, [pc, #76]	; (8001c2c <HAL_TIM_MspPostInit+0x33c>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d11f      	bne.n	8001c22 <HAL_TIM_MspPostInit+0x332>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <HAL_TIM_MspPostInit+0x340>)
 8001be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be8:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <HAL_TIM_MspPostInit+0x340>)
 8001bea:	f043 0320 	orr.w	r3, r3, #32
 8001bee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_TIM_MspPostInit+0x340>)
 8001bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_5V_7_Pin;
 8001c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8001c12:	230e      	movs	r3, #14
 8001c14:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SENSOR_5V_7_GPIO_Port, &GPIO_InitStruct);
 8001c16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <HAL_TIM_MspPostInit+0x344>)
 8001c1e:	f002 f98b 	bl	8003f38 <HAL_GPIO_Init>
}
 8001c22:	bf00      	nop
 8001c24:	3748      	adds	r7, #72	; 0x48
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	4000e400 	.word	0x4000e400
 8001c30:	58024400 	.word	0x58024400
 8001c34:	58021400 	.word	0x58021400

08001c38 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0b8      	sub	sp, #224	; 0xe0
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	22b8      	movs	r2, #184	; 0xb8
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f008 f8d3 	bl	8009e04 <memset>
  if(husart->Instance==USART1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <HAL_USART_MspInit+0xc8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d146      	bne.n	8001cf6 <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c68:	f04f 0201 	mov.w	r2, #1
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c7a:	f107 0310 	add.w	r3, r7, #16
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f003 fabc 	bl	80051fc <HAL_RCCEx_PeriphCLKConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8001c8a:	f7ff fba1 	bl	80013d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_USART_MspInit+0xcc>)
 8001c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <HAL_USART_MspInit+0xcc>)
 8001c96:	f043 0310 	orr.w	r3, r3, #16
 8001c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_USART_MspInit+0xcc>)
 8001ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_USART_MspInit+0xcc>)
 8001cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb2:	4a14      	ldr	r2, [pc, #80]	; (8001d04 <HAL_USART_MspInit+0xcc>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_USART_MspInit+0xcc>)
 8001cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001cca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ce4:	2307      	movs	r3, #7
 8001ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_USART_MspInit+0xd0>)
 8001cf2:	f002 f921 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	37e0      	adds	r7, #224	; 0xe0
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40011000 	.word	0x40011000
 8001d04:	58024400 	.word	0x58024400
 8001d08:	58020000 	.word	0x58020000

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <NMI_Handler+0x4>

08001d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <HardFault_Handler+0x4>

08001d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <MemManage_Handler+0x4>

08001d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d22:	e7fe      	b.n	8001d22 <BusFault_Handler+0x4>

08001d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <UsageFault_Handler+0x4>

08001d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 f916 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d64:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <SystemInit+0xd0>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6a:	4a31      	ldr	r2, [pc, #196]	; (8001e30 <SystemInit+0xd0>)
 8001d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d74:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <SystemInit+0xd4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	2b06      	cmp	r3, #6
 8001d7e:	d807      	bhi.n	8001d90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d80:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <SystemInit+0xd4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 030f 	bic.w	r3, r3, #15
 8001d88:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <SystemInit+0xd4>)
 8001d8a:	f043 0307 	orr.w	r3, r3, #7
 8001d8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <SystemInit+0xd8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a28      	ldr	r2, [pc, #160]	; (8001e38 <SystemInit+0xd8>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d9c:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <SystemInit+0xd8>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001da2:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <SystemInit+0xd8>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4924      	ldr	r1, [pc, #144]	; (8001e38 <SystemInit+0xd8>)
 8001da8:	4b24      	ldr	r3, [pc, #144]	; (8001e3c <SystemInit+0xdc>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <SystemInit+0xd4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <SystemInit+0xd4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 030f 	bic.w	r3, r3, #15
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	; (8001e34 <SystemInit+0xd4>)
 8001dc4:	f043 0307 	orr.w	r3, r3, #7
 8001dc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <SystemInit+0xd8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <SystemInit+0xd8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <SystemInit+0xd8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <SystemInit+0xd8>)
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <SystemInit+0xe0>)
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <SystemInit+0xd8>)
 8001de4:	4a17      	ldr	r2, [pc, #92]	; (8001e44 <SystemInit+0xe4>)
 8001de6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <SystemInit+0xd8>)
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <SystemInit+0xe8>)
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <SystemInit+0xd8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <SystemInit+0xd8>)
 8001df6:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <SystemInit+0xe8>)
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <SystemInit+0xd8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <SystemInit+0xd8>)
 8001e02:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <SystemInit+0xe8>)
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <SystemInit+0xd8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <SystemInit+0xd8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <SystemInit+0xd8>)
 8001e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <SystemInit+0xd8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <SystemInit+0xec>)
 8001e20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00
 8001e34:	52002000 	.word	0x52002000
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e40:	02020200 	.word	0x02020200
 8001e44:	01ff0000 	.word	0x01ff0000
 8001e48:	01010280 	.word	0x01010280
 8001e4c:	52004000 	.word	0x52004000

08001e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e54:	f7ff ff84 	bl	8001d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e58:	480c      	ldr	r0, [pc, #48]	; (8001e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e5a:	490d      	ldr	r1, [pc, #52]	; (8001e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e70:	4c0a      	ldr	r4, [pc, #40]	; (8001e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e7e:	f007 ff8f 	bl	8009da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e82:	f7fe fa43 	bl	800030c <main>
  bx  lr
 8001e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e88:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001e8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e90:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001e94:	08009ea0 	.word	0x08009ea0
  ldr r2, =_sbss
 8001e98:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001e9c:	240004d4 	.word	0x240004d4

08001ea0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea0:	e7fe      	b.n	8001ea0 <ADC3_IRQHandler>
	...

08001ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eaa:	2003      	movs	r0, #3
 8001eac:	f001 fcae 	bl	800380c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eb0:	f002 ffce 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_Init+0x68>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	4913      	ldr	r1, [pc, #76]	; (8001f10 <HAL_Init+0x6c>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ecc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_Init+0x68>)
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_Init+0x6c>)
 8001ed8:	5cd3      	ldrb	r3, [r2, r3]
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <HAL_Init+0x70>)
 8001ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <HAL_Init+0x74>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eee:	200f      	movs	r0, #15
 8001ef0:	f000 f814 	bl	8001f1c <HAL_InitTick>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e002      	b.n	8001f04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001efe:	f7ff fa6d 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	58024400 	.word	0x58024400
 8001f10:	08009e78 	.word	0x08009e78
 8001f14:	24000004 	.word	0x24000004
 8001f18:	24000000 	.word	0x24000000

08001f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f24:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_InitTick+0x60>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e021      	b.n	8001f74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <HAL_InitTick+0x64>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_InitTick+0x60>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 fc85 	bl	8003856 <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00e      	b.n	8001f74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d80a      	bhi.n	8001f72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f001 fc5d 	bl	8003822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f68:	4a06      	ldr	r2, [pc, #24]	; (8001f84 <HAL_InitTick+0x68>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2400000c 	.word	0x2400000c
 8001f80:	24000000 	.word	0x24000000
 8001f84:	24000008 	.word	0x24000008

08001f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_IncTick+0x20>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_IncTick+0x24>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_IncTick+0x24>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	2400000c 	.word	0x2400000c
 8001fac:	240004d0 	.word	0x240004d0

08001fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <HAL_GetTick+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	240004d0 	.word	0x240004d0

08001fc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	609a      	str	r2, [r3, #8]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3360      	adds	r3, #96	; 0x60
 8002042:	461a      	mov	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <LL_ADC_SetOffset+0x60>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10b      	bne.n	800206c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	4313      	orrs	r3, r2
 8002062:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800206a:	e00b      	b.n	8002084 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	430b      	orrs	r3, r1
 800207e:	431a      	orrs	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	58026000 	.word	0x58026000

08002094 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3360      	adds	r3, #96	; 0x60
 80020a2:	461a      	mov	r2, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	611a      	str	r2, [r3, #16]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00e      	beq.n	8002126 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3360      	adds	r3, #96	; 0x60
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	431a      	orrs	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	601a      	str	r2, [r3, #0]
  }
}
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	58026000 	.word	0x58026000

08002138 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a0c      	ldr	r2, [pc, #48]	; (8002178 <LL_ADC_SetOffsetSaturation+0x40>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d10e      	bne.n	800216a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3360      	adds	r3, #96	; 0x60
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	431a      	orrs	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	58026000 	.word	0x58026000

0800217c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <LL_ADC_SetOffsetSign+0x40>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10e      	bne.n	80021ae <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	3360      	adds	r3, #96	; 0x60
 8002194:	461a      	mov	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	431a      	orrs	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80021ae:	bf00      	nop
 80021b0:	371c      	adds	r7, #28
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	58026000 	.word	0x58026000

080021c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3360      	adds	r3, #96	; 0x60
 80021d0:	461a      	mov	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <LL_ADC_SetOffsetState+0x50>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d108      	bne.n	80021f4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80021f2:	e007      	b.n	8002204 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	431a      	orrs	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	58026000 	.word	0x58026000

08002214 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3330      	adds	r3, #48	; 0x30
 8002224:	461a      	mov	r2, r3
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	4413      	add	r3, r2
 8002232:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	211f      	movs	r1, #31
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0e9b      	lsrs	r3, r3, #26
 800224c:	f003 011f 	and.w	r1, r3, #31
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 031f 	and.w	r3, r3, #31
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	431a      	orrs	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002260:	bf00      	nop
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3314      	adds	r3, #20
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	4413      	add	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	0d1b      	lsrs	r3, r3, #20
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	2107      	movs	r1, #7
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	401a      	ands	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	0d1b      	lsrs	r3, r3, #20
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	431a      	orrs	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <LL_ADC_SetChannelSingleDiff+0x78>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d115      	bne.n	8002304 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e4:	43db      	mvns	r3, r3
 80022e6:	401a      	ands	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0318 	and.w	r3, r3, #24
 80022ee:	4914      	ldr	r1, [pc, #80]	; (8002340 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80022f0:	40d9      	lsrs	r1, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	400b      	ands	r3, r1
 80022f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022fa:	431a      	orrs	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002302:	e014      	b.n	800232e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002310:	43db      	mvns	r3, r3
 8002312:	401a      	ands	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f003 0318 	and.w	r3, r3, #24
 800231a:	4909      	ldr	r1, [pc, #36]	; (8002340 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800231c:	40d9      	lsrs	r1, r3
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	400b      	ands	r3, r1
 8002322:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800232e:	bf00      	nop
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	58026000 	.word	0x58026000
 8002340:	000fffff 	.word	0x000fffff

08002344 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002352:	4013      	ands	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6093      	str	r3, [r2, #8]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	5fffffc0 	.word	0x5fffffc0

08002368 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800237c:	d101      	bne.n	8002382 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800239e:	4013      	ands	r3, r2
 80023a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	6fffffc0 	.word	0x6fffffc0

080023b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023cc:	d101      	bne.n	80023d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <LL_ADC_IsEnabled+0x18>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <LL_ADC_IsEnabled+0x1a>
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b04      	cmp	r3, #4
 8002418:	d101      	bne.n	800241e <LL_ADC_REG_IsConversionOngoing+0x18>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b08      	cmp	r3, #8
 800243e:	d101      	bne.n	8002444 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e1ee      	b.n	800284c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002478:	2b00      	cmp	r3, #0
 800247a:	d109      	bne.n	8002490 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7fe ffc7 	bl	8001410 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff67 	bl	8002368 <LL_ADC_IsDeepPowerDownEnabled>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff4d 	bl	8002344 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff82 	bl	80023b8 <LL_ADC_IsInternalRegulatorEnabled>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d114      	bne.n	80024e4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ff66 	bl	8002390 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024c4:	4b8e      	ldr	r3, [pc, #568]	; (8002700 <HAL_ADC_Init+0x2ac>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	099b      	lsrs	r3, r3, #6
 80024ca:	4a8e      	ldr	r2, [pc, #568]	; (8002704 <HAL_ADC_Init+0x2b0>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	099b      	lsrs	r3, r3, #6
 80024d2:	3301      	adds	r3, #1
 80024d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024d6:	e002      	b.n	80024de <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	3b01      	subs	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f9      	bne.n	80024d8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff65 	bl	80023b8 <LL_ADC_IsInternalRegulatorEnabled>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10d      	bne.n	8002510 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	f043 0210 	orr.w	r2, r3, #16
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff76 	bl	8002406 <LL_ADC_REG_IsConversionOngoing>
 800251a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 8188 	bne.w	800283a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	f040 8184 	bne.w	800283a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002536:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800253a:	f043 0202 	orr.w	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff4a 	bl	80023e0 <LL_ADC_IsEnabled>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d136      	bne.n	80025c0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6c      	ldr	r2, [pc, #432]	; (8002708 <HAL_ADC_Init+0x2b4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d004      	beq.n	8002566 <HAL_ADC_Init+0x112>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6a      	ldr	r2, [pc, #424]	; (800270c <HAL_ADC_Init+0x2b8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10e      	bne.n	8002584 <HAL_ADC_Init+0x130>
 8002566:	4868      	ldr	r0, [pc, #416]	; (8002708 <HAL_ADC_Init+0x2b4>)
 8002568:	f7ff ff3a 	bl	80023e0 <LL_ADC_IsEnabled>
 800256c:	4604      	mov	r4, r0
 800256e:	4867      	ldr	r0, [pc, #412]	; (800270c <HAL_ADC_Init+0x2b8>)
 8002570:	f7ff ff36 	bl	80023e0 <LL_ADC_IsEnabled>
 8002574:	4603      	mov	r3, r0
 8002576:	4323      	orrs	r3, r4
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e008      	b.n	8002596 <HAL_ADC_Init+0x142>
 8002584:	4862      	ldr	r0, [pc, #392]	; (8002710 <HAL_ADC_Init+0x2bc>)
 8002586:	f7ff ff2b 	bl	80023e0 <LL_ADC_IsEnabled>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d012      	beq.n	80025c0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5a      	ldr	r2, [pc, #360]	; (8002708 <HAL_ADC_Init+0x2b4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d004      	beq.n	80025ae <HAL_ADC_Init+0x15a>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a58      	ldr	r2, [pc, #352]	; (800270c <HAL_ADC_Init+0x2b8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Init+0x15e>
 80025ae:	4a59      	ldr	r2, [pc, #356]	; (8002714 <HAL_ADC_Init+0x2c0>)
 80025b0:	e000      	b.n	80025b4 <HAL_ADC_Init+0x160>
 80025b2:	4a59      	ldr	r2, [pc, #356]	; (8002718 <HAL_ADC_Init+0x2c4>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f7ff fd04 	bl	8001fc8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_ADC_Init+0x2bc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d129      	bne.n	800261e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	7e5b      	ldrb	r3, [r3, #25]
 80025ce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80025d4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80025da:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d013      	beq.n	800260c <HAL_ADC_Init+0x1b8>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	d00d      	beq.n	8002608 <HAL_ADC_Init+0x1b4>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b1c      	cmp	r3, #28
 80025f2:	d007      	beq.n	8002604 <HAL_ADC_Init+0x1b0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b18      	cmp	r3, #24
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_Init+0x1ac>
 80025fc:	2318      	movs	r3, #24
 80025fe:	e006      	b.n	800260e <HAL_ADC_Init+0x1ba>
 8002600:	2300      	movs	r3, #0
 8002602:	e004      	b.n	800260e <HAL_ADC_Init+0x1ba>
 8002604:	2310      	movs	r3, #16
 8002606:	e002      	b.n	800260e <HAL_ADC_Init+0x1ba>
 8002608:	2308      	movs	r3, #8
 800260a:	e000      	b.n	800260e <HAL_ADC_Init+0x1ba>
 800260c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800260e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002616:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	e00e      	b.n	800263c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7e5b      	ldrb	r3, [r3, #25]
 8002622:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002628:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800262e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002636:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d106      	bne.n	8002654 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	3b01      	subs	r3, #1
 800264c:	045b      	lsls	r3, r3, #17
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d009      	beq.n	8002670 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a26      	ldr	r2, [pc, #152]	; (8002710 <HAL_ADC_Init+0x2bc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d115      	bne.n	80026a6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <HAL_ADC_Init+0x2c8>)
 8002682:	4013      	ands	r3, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	69b9      	ldr	r1, [r7, #24]
 800268a:	430b      	orrs	r3, r1
 800268c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	e009      	b.n	80026ba <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_ADC_Init+0x2cc>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	69b9      	ldr	r1, [r7, #24]
 80026b6:	430b      	orrs	r3, r1
 80026b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fea1 	bl	8002406 <LL_ADC_REG_IsConversionOngoing>
 80026c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff feae 	bl	800242c <LL_ADC_INJ_IsConversionOngoing>
 80026d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 808e 	bne.w	80027f6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f040 808a 	bne.w	80027f6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <HAL_ADC_Init+0x2bc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d11b      	bne.n	8002724 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7e1b      	ldrb	r3, [r3, #24]
 80026f0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026f8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	e018      	b.n	8002732 <HAL_ADC_Init+0x2de>
 8002700:	24000000 	.word	0x24000000
 8002704:	053e2d63 	.word	0x053e2d63
 8002708:	40022000 	.word	0x40022000
 800270c:	40022100 	.word	0x40022100
 8002710:	58026000 	.word	0x58026000
 8002714:	40022300 	.word	0x40022300
 8002718:	58026300 	.word	0x58026300
 800271c:	fff04007 	.word	0xfff04007
 8002720:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7e1b      	ldrb	r3, [r3, #24]
 8002728:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	4b46      	ldr	r3, [pc, #280]	; (8002854 <HAL_ADC_Init+0x400>)
 800273a:	4013      	ands	r3, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	69b9      	ldr	r1, [r7, #24]
 8002742:	430b      	orrs	r3, r1
 8002744:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800274c:	2b01      	cmp	r3, #1
 800274e:	d137      	bne.n	80027c0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <HAL_ADC_Init+0x404>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d116      	bne.n	800278e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_ADC_Init+0x408>)
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002772:	4311      	orrs	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800277e:	430a      	orrs	r2, r1
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	611a      	str	r2, [r3, #16]
 800278c:	e020      	b.n	80027d0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	4b32      	ldr	r3, [pc, #200]	; (8002860 <HAL_ADC_Init+0x40c>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800279c:	3a01      	subs	r2, #1
 800279e:	0411      	lsls	r1, r2, #16
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027aa:	4311      	orrs	r1, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80027b0:	430a      	orrs	r2, r1
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 0201 	orr.w	r2, r2, #1
 80027bc:	611a      	str	r2, [r3, #16]
 80027be:	e007      	b.n	80027d0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <HAL_ADC_Init+0x404>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d002      	beq.n	80027f6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fd63 	bl	80032bc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d10c      	bne.n	8002818 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	f023 010f 	bic.w	r1, r3, #15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
 8002816:	e007      	b.n	8002828 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 020f 	bic.w	r2, r2, #15
 8002826:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282c:	f023 0303 	bic.w	r3, r3, #3
 8002830:	f043 0201 	orr.w	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	661a      	str	r2, [r3, #96]	; 0x60
 8002838:	e007      	b.n	800284a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	f043 0210 	orr.w	r2, r3, #16
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800284a:	7ffb      	ldrb	r3, [r7, #31]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3724      	adds	r7, #36	; 0x24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd90      	pop	{r4, r7, pc}
 8002854:	ffffbffc 	.word	0xffffbffc
 8002858:	58026000 	.word	0x58026000
 800285c:	fc00f81f 	.word	0xfc00f81f
 8002860:	fc00f81e 	.word	0xfc00f81e

08002864 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b0b9      	sub	sp, #228	; 0xe4
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800287e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4aa9      	ldr	r2, [pc, #676]	; (8002b2c <HAL_ADC_ConfigChannel+0x2c8>)
 8002886:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800288e:	2b01      	cmp	r3, #1
 8002890:	d102      	bne.n	8002898 <HAL_ADC_ConfigChannel+0x34>
 8002892:	2302      	movs	r3, #2
 8002894:	f000 bcfa 	b.w	800328c <HAL_ADC_ConfigChannel+0xa28>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fdae 	bl	8002406 <LL_ADC_REG_IsConversionOngoing>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 84de 	bne.w	800326e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a9e      	ldr	r2, [pc, #632]	; (8002b30 <HAL_ADC_ConfigChannel+0x2cc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d033      	beq.n	8002924 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d108      	bne.n	80028da <HAL_ADC_ConfigChannel+0x76>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2201      	movs	r2, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	e01d      	b.n	8002916 <HAL_ADC_ConfigChannel+0xb2>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80028fe:	2320      	movs	r3, #32
 8002900:	e004      	b.n	800290c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2201      	movs	r2, #1
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	69d1      	ldr	r1, [r2, #28]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	430b      	orrs	r3, r1
 8002922:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	f7ff fc6f 	bl	8002214 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fd63 	bl	8002406 <LL_ADC_REG_IsConversionOngoing>
 8002940:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fd6f 	bl	800242c <LL_ADC_INJ_IsConversionOngoing>
 800294e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 8270 	bne.w	8002e3c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800295c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002960:	2b00      	cmp	r3, #0
 8002962:	f040 826b 	bne.w	8002e3c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	461a      	mov	r2, r3
 8002974:	f7ff fc7a 	bl	800226c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a6c      	ldr	r2, [pc, #432]	; (8002b30 <HAL_ADC_ConfigChannel+0x2cc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10d      	bne.n	800299e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	08db      	lsrs	r3, r3, #3
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800299c:	e032      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800299e:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <HAL_ADC_ConfigChannel+0x2d0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80029a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029aa:	d10b      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x160>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	e01d      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x19c>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10b      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x186>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	695a      	ldr	r2, [r3, #20]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	089b      	lsrs	r3, r3, #2
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	e00a      	b.n	8002a00 <HAL_ADC_ConfigChannel+0x19c>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d048      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6919      	ldr	r1, [r3, #16]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a1c:	f7ff fb08 	bl	8002030 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a42      	ldr	r2, [pc, #264]	; (8002b30 <HAL_ADC_ConfigChannel+0x2cc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d119      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6919      	ldr	r1, [r3, #16]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f7ff fba0 	bl	800217c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	6919      	ldr	r1, [r3, #16]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x1f0>
 8002a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a52:	e000      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x1f2>
 8002a54:	2300      	movs	r3, #0
 8002a56:	461a      	mov	r2, r3
 8002a58:	f7ff fb6e 	bl	8002138 <LL_ADC_SetOffsetSaturation>
 8002a5c:	e1ee      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6919      	ldr	r1, [r3, #16]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d102      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x212>
 8002a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a74:	e000      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x214>
 8002a76:	2300      	movs	r3, #0
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f7ff fb3b 	bl	80020f4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6919      	ldr	r1, [r3, #16]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	7e1b      	ldrb	r3, [r3, #24]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d102      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x230>
 8002a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x232>
 8002a94:	2300      	movs	r3, #0
 8002a96:	461a      	mov	r2, r3
 8002a98:	f7ff fb12 	bl	80020c0 <LL_ADC_SetDataRightShift>
 8002a9c:	e1ce      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <HAL_ADC_ConfigChannel+0x2cc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	f040 8181 	bne.w	8002dac <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff faef 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_ADC_ConfigChannel+0x272>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fae4 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	0e9b      	lsrs	r3, r3, #26
 8002ad0:	f003 021f 	and.w	r2, r3, #31
 8002ad4:	e01e      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x2b0>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fad9 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002af4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002afc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002b04:	2320      	movs	r3, #32
 8002b06:	e004      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10b      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x2d4>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	e01e      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x306>
 8002b2c:	47ff0000 	.word	0x47ff0000
 8002b30:	58026000 	.word	0x58026000
 8002b34:	5c001000 	.word	0x5c001000
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002b4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002b54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002b5c:	2320      	movs	r3, #32
 8002b5e:	e004      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8002b60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d106      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fb22 	bl	80021c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff fa86 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x344>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fa7b 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	f003 021f 	and.w	r2, r3, #31
 8002ba6:	e01e      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x382>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fa70 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002bc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002bce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002bd6:	2320      	movs	r3, #32
 8002bd8:	e004      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002bda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x39a>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0e9b      	lsrs	r3, r3, #26
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	e018      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x3cc>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002c1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002c22:	2320      	movs	r3, #32
 8002c24:	e004      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d106      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fabf 	bl	80021c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2102      	movs	r1, #2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fa23 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x40a>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fa18 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002c64:	4603      	mov	r3, r0
 8002c66:	0e9b      	lsrs	r3, r3, #26
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	e01e      	b.n	8002cac <HAL_ADC_ConfigChannel+0x448>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2102      	movs	r1, #2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fa0d 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	e004      	b.n	8002caa <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d105      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x460>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0e9b      	lsrs	r3, r3, #26
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	e014      	b.n	8002cee <HAL_ADC_ConfigChannel+0x48a>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e004      	b.n	8002cee <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8002ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d106      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2102      	movs	r1, #2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fa60 	bl	80021c0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2103      	movs	r1, #3
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff f9c4 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10a      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x4c8>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2103      	movs	r1, #3
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f9b9 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002d22:	4603      	mov	r3, r0
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	e017      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x4f8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2103      	movs	r1, #3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff f9ae 	bl	8002094 <LL_ADC_GetOffsetChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d46:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e003      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x510>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	e011      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x534>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d84:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e003      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d14f      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2103      	movs	r1, #3
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fa0b 	bl	80021c0 <LL_ADC_SetOffsetState>
 8002daa:	e047      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	069b      	lsls	r3, r3, #26
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002dce:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	069b      	lsls	r3, r3, #26
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d107      	bne.n	8002df4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002df2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	069b      	lsls	r3, r3, #26
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d107      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e16:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	069b      	lsls	r3, r3, #26
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e3a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff facd 	bl	80023e0 <LL_ADC_IsEnabled>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f040 8219 	bne.w	8003280 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6819      	ldr	r1, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f7ff fa32 	bl	80022c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4aa1      	ldr	r2, [pc, #644]	; (80030ec <HAL_ADC_ConfigChannel+0x888>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	f040 812e 	bne.w	80030c8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x630>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0e9b      	lsrs	r3, r3, #26
 8002e82:	3301      	adds	r3, #1
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2b09      	cmp	r3, #9
 8002e8a:	bf94      	ite	ls
 8002e8c:	2301      	movls	r3, #1
 8002e8e:	2300      	movhi	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e019      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x664>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002eac:	2320      	movs	r3, #32
 8002eae:	e003      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2b09      	cmp	r3, #9
 8002ec0:	bf94      	ite	ls
 8002ec2:	2301      	movls	r3, #1
 8002ec4:	2300      	movhi	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d079      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d107      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x684>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	3301      	adds	r3, #1
 8002ee0:	069b      	lsls	r3, r3, #26
 8002ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ee6:	e015      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x6b0>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002f00:	2320      	movs	r3, #32
 8002f02:	e003      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	069b      	lsls	r3, r3, #26
 8002f10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x6d0>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	3301      	adds	r3, #1
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f32:	e017      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x700>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	e003      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	2101      	movs	r1, #1
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	ea42 0103 	orr.w	r1, r2, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10a      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x726>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	0e9b      	lsrs	r3, r3, #26
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f003 021f 	and.w	r2, r3, #31
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	051b      	lsls	r3, r3, #20
 8002f88:	e018      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x758>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	e003      	b.n	8002fae <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	e07e      	b.n	80030be <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d107      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x778>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0e9b      	lsrs	r3, r3, #26
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	069b      	lsls	r3, r3, #26
 8002fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fda:	e015      	b.n	8003008 <HAL_ADC_ConfigChannel+0x7a4>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002ff4:	2320      	movs	r3, #32
 8002ff6:	e003      	b.n	8003000 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffa:	fab3 f383 	clz	r3, r3
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	069b      	lsls	r3, r3, #26
 8003004:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x7c4>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	3301      	adds	r3, #1
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	e017      	b.n	8003058 <HAL_ADC_ConfigChannel+0x7f4>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	61bb      	str	r3, [r7, #24]
  return result;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003040:	2320      	movs	r3, #32
 8003042:	e003      	b.n	800304c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	3301      	adds	r3, #1
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	ea42 0103 	orr.w	r1, r2, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10d      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x820>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	3301      	adds	r3, #1
 8003070:	f003 021f 	and.w	r2, r3, #31
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	3b1e      	subs	r3, #30
 800307c:	051b      	lsls	r3, r3, #20
 800307e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003082:	e01b      	b.n	80030bc <HAL_ADC_ConfigChannel+0x858>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	60fb      	str	r3, [r7, #12]
  return result;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800309c:	2320      	movs	r3, #32
 800309e:	e003      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f003 021f 	and.w	r2, r3, #31
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	3b1e      	subs	r3, #30
 80030b6:	051b      	lsls	r3, r3, #20
 80030b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030bc:	430b      	orrs	r3, r1
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	6892      	ldr	r2, [r2, #8]
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7ff f8d2 	bl	800226c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f280 80d7 	bge.w	8003280 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a06      	ldr	r2, [pc, #24]	; (80030f0 <HAL_ADC_ConfigChannel+0x88c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_ADC_ConfigChannel+0x882>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <HAL_ADC_ConfigChannel+0x890>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10a      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x898>
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <HAL_ADC_ConfigChannel+0x894>)
 80030e8:	e009      	b.n	80030fe <HAL_ADC_ConfigChannel+0x89a>
 80030ea:	bf00      	nop
 80030ec:	47ff0000 	.word	0x47ff0000
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40022100 	.word	0x40022100
 80030f8:	40022300 	.word	0x40022300
 80030fc:	4b65      	ldr	r3, [pc, #404]	; (8003294 <HAL_ADC_ConfigChannel+0xa30>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe ff88 	bl	8002014 <LL_ADC_GetCommonPathInternalCh>
 8003104:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a62      	ldr	r2, [pc, #392]	; (8003298 <HAL_ADC_ConfigChannel+0xa34>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <HAL_ADC_ConfigChannel+0x8b8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a61      	ldr	r2, [pc, #388]	; (800329c <HAL_ADC_ConfigChannel+0xa38>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d10e      	bne.n	800313a <HAL_ADC_ConfigChannel+0x8d6>
 800311c:	485e      	ldr	r0, [pc, #376]	; (8003298 <HAL_ADC_ConfigChannel+0xa34>)
 800311e:	f7ff f95f 	bl	80023e0 <LL_ADC_IsEnabled>
 8003122:	4604      	mov	r4, r0
 8003124:	485d      	ldr	r0, [pc, #372]	; (800329c <HAL_ADC_ConfigChannel+0xa38>)
 8003126:	f7ff f95b 	bl	80023e0 <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	4323      	orrs	r3, r4
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e008      	b.n	800314c <HAL_ADC_ConfigChannel+0x8e8>
 800313a:	4859      	ldr	r0, [pc, #356]	; (80032a0 <HAL_ADC_ConfigChannel+0xa3c>)
 800313c:	f7ff f950 	bl	80023e0 <LL_ADC_IsEnabled>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8084 	beq.w	800325a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a53      	ldr	r2, [pc, #332]	; (80032a4 <HAL_ADC_ConfigChannel+0xa40>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d132      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x95e>
 800315c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d12c      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4c      	ldr	r2, [pc, #304]	; (80032a0 <HAL_ADC_ConfigChannel+0xa3c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	f040 8086 	bne.w	8003280 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a47      	ldr	r2, [pc, #284]	; (8003298 <HAL_ADC_ConfigChannel+0xa34>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d004      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x924>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a46      	ldr	r2, [pc, #280]	; (800329c <HAL_ADC_ConfigChannel+0xa38>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x928>
 8003188:	4a47      	ldr	r2, [pc, #284]	; (80032a8 <HAL_ADC_ConfigChannel+0xa44>)
 800318a:	e000      	b.n	800318e <HAL_ADC_ConfigChannel+0x92a>
 800318c:	4a41      	ldr	r2, [pc, #260]	; (8003294 <HAL_ADC_ConfigChannel+0xa30>)
 800318e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003192:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003196:	4619      	mov	r1, r3
 8003198:	4610      	mov	r0, r2
 800319a:	f7fe ff28 	bl	8001fee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800319e:	4b43      	ldr	r3, [pc, #268]	; (80032ac <HAL_ADC_ConfigChannel+0xa48>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	4a42      	ldr	r2, [pc, #264]	; (80032b0 <HAL_ADC_ConfigChannel+0xa4c>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	099b      	lsrs	r3, r3, #6
 80031ac:	3301      	adds	r3, #1
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031b2:	e002      	b.n	80031ba <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1f9      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031c0:	e05e      	b.n	8003280 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a3b      	ldr	r2, [pc, #236]	; (80032b4 <HAL_ADC_ConfigChannel+0xa50>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d120      	bne.n	800320e <HAL_ADC_ConfigChannel+0x9aa>
 80031cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d11a      	bne.n	800320e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a30      	ldr	r2, [pc, #192]	; (80032a0 <HAL_ADC_ConfigChannel+0xa3c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d14e      	bne.n	8003280 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <HAL_ADC_ConfigChannel+0xa34>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_ADC_ConfigChannel+0x992>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2a      	ldr	r2, [pc, #168]	; (800329c <HAL_ADC_ConfigChannel+0xa38>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x996>
 80031f6:	4a2c      	ldr	r2, [pc, #176]	; (80032a8 <HAL_ADC_ConfigChannel+0xa44>)
 80031f8:	e000      	b.n	80031fc <HAL_ADC_ConfigChannel+0x998>
 80031fa:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_ADC_ConfigChannel+0xa30>)
 80031fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f7fe fef1 	bl	8001fee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800320c:	e038      	b.n	8003280 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <HAL_ADC_ConfigChannel+0xa54>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d133      	bne.n	8003280 <HAL_ADC_ConfigChannel+0xa1c>
 8003218:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800321c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d12d      	bne.n	8003280 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <HAL_ADC_ConfigChannel+0xa3c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d128      	bne.n	8003280 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a19      	ldr	r2, [pc, #100]	; (8003298 <HAL_ADC_ConfigChannel+0xa34>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x9de>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_ADC_ConfigChannel+0xa38>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x9e2>
 8003242:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_ADC_ConfigChannel+0xa44>)
 8003244:	e000      	b.n	8003248 <HAL_ADC_ConfigChannel+0x9e4>
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <HAL_ADC_ConfigChannel+0xa30>)
 8003248:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800324c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f7fe fecb 	bl	8001fee <LL_ADC_SetCommonPathInternalCh>
 8003258:	e012      	b.n	8003280 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800326c:	e008      	b.n	8003280 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003288:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800328c:	4618      	mov	r0, r3
 800328e:	37e4      	adds	r7, #228	; 0xe4
 8003290:	46bd      	mov	sp, r7
 8003292:	bd90      	pop	{r4, r7, pc}
 8003294:	58026300 	.word	0x58026300
 8003298:	40022000 	.word	0x40022000
 800329c:	40022100 	.word	0x40022100
 80032a0:	58026000 	.word	0x58026000
 80032a4:	c7520000 	.word	0xc7520000
 80032a8:	40022300 	.word	0x40022300
 80032ac:	24000000 	.word	0x24000000
 80032b0:	053e2d63 	.word	0x053e2d63
 80032b4:	c3210000 	.word	0xc3210000
 80032b8:	cb840000 	.word	0xcb840000

080032bc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6c      	ldr	r2, [pc, #432]	; (800347c <ADC_ConfigureBoostMode+0x1c0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d004      	beq.n	80032d8 <ADC_ConfigureBoostMode+0x1c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6b      	ldr	r2, [pc, #428]	; (8003480 <ADC_ConfigureBoostMode+0x1c4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d109      	bne.n	80032ec <ADC_ConfigureBoostMode+0x30>
 80032d8:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <ADC_ConfigureBoostMode+0x1c8>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bf14      	ite	ne
 80032e4:	2301      	movne	r3, #1
 80032e6:	2300      	moveq	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	e008      	b.n	80032fe <ADC_ConfigureBoostMode+0x42>
 80032ec:	4b66      	ldr	r3, [pc, #408]	; (8003488 <ADC_ConfigureBoostMode+0x1cc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d01c      	beq.n	800333c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003302:	f001 ff1f 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 8003306:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003310:	d010      	beq.n	8003334 <ADC_ConfigureBoostMode+0x78>
 8003312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003316:	d873      	bhi.n	8003400 <ADC_ConfigureBoostMode+0x144>
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331c:	d002      	beq.n	8003324 <ADC_ConfigureBoostMode+0x68>
 800331e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003322:	d16d      	bne.n	8003400 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	60fb      	str	r3, [r7, #12]
        break;
 8003332:	e068      	b.n	8003406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	089b      	lsrs	r3, r3, #2
 8003338:	60fb      	str	r3, [r7, #12]
        break;
 800333a:	e064      	b.n	8003406 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800333c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	f003 f8fa 	bl	800653c <HAL_RCCEx_GetPeriphCLKFreq>
 8003348:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003352:	d051      	beq.n	80033f8 <ADC_ConfigureBoostMode+0x13c>
 8003354:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003358:	d854      	bhi.n	8003404 <ADC_ConfigureBoostMode+0x148>
 800335a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800335e:	d047      	beq.n	80033f0 <ADC_ConfigureBoostMode+0x134>
 8003360:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003364:	d84e      	bhi.n	8003404 <ADC_ConfigureBoostMode+0x148>
 8003366:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800336a:	d03d      	beq.n	80033e8 <ADC_ConfigureBoostMode+0x12c>
 800336c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003370:	d848      	bhi.n	8003404 <ADC_ConfigureBoostMode+0x148>
 8003372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003376:	d033      	beq.n	80033e0 <ADC_ConfigureBoostMode+0x124>
 8003378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800337c:	d842      	bhi.n	8003404 <ADC_ConfigureBoostMode+0x148>
 800337e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003382:	d029      	beq.n	80033d8 <ADC_ConfigureBoostMode+0x11c>
 8003384:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003388:	d83c      	bhi.n	8003404 <ADC_ConfigureBoostMode+0x148>
 800338a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800338e:	d01a      	beq.n	80033c6 <ADC_ConfigureBoostMode+0x10a>
 8003390:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003394:	d836      	bhi.n	8003404 <ADC_ConfigureBoostMode+0x148>
 8003396:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800339a:	d014      	beq.n	80033c6 <ADC_ConfigureBoostMode+0x10a>
 800339c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80033a0:	d830      	bhi.n	8003404 <ADC_ConfigureBoostMode+0x148>
 80033a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a6:	d00e      	beq.n	80033c6 <ADC_ConfigureBoostMode+0x10a>
 80033a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ac:	d82a      	bhi.n	8003404 <ADC_ConfigureBoostMode+0x148>
 80033ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033b2:	d008      	beq.n	80033c6 <ADC_ConfigureBoostMode+0x10a>
 80033b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033b8:	d824      	bhi.n	8003404 <ADC_ConfigureBoostMode+0x148>
 80033ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033be:	d002      	beq.n	80033c6 <ADC_ConfigureBoostMode+0x10a>
 80033c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033c4:	d11e      	bne.n	8003404 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0c9b      	lsrs	r3, r3, #18
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	60fb      	str	r3, [r7, #12]
        break;
 80033d6:	e016      	b.n	8003406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
        break;
 80033de:	e012      	b.n	8003406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	60fb      	str	r3, [r7, #12]
        break;
 80033e6:	e00e      	b.n	8003406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	099b      	lsrs	r3, r3, #6
 80033ec:	60fb      	str	r3, [r7, #12]
        break;
 80033ee:	e00a      	b.n	8003406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	09db      	lsrs	r3, r3, #7
 80033f4:	60fb      	str	r3, [r7, #12]
        break;
 80033f6:	e006      	b.n	8003406 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	60fb      	str	r3, [r7, #12]
        break;
 80033fe:	e002      	b.n	8003406 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003400:	bf00      	nop
 8003402:	e000      	b.n	8003406 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003404:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a1f      	ldr	r2, [pc, #124]	; (800348c <ADC_ConfigureBoostMode+0x1d0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d808      	bhi.n	8003426 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003422:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003424:	e025      	b.n	8003472 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a19      	ldr	r2, [pc, #100]	; (8003490 <ADC_ConfigureBoostMode+0x1d4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d80a      	bhi.n	8003444 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003440:	609a      	str	r2, [r3, #8]
}
 8003442:	e016      	b.n	8003472 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a13      	ldr	r2, [pc, #76]	; (8003494 <ADC_ConfigureBoostMode+0x1d8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d80a      	bhi.n	8003462 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	e007      	b.n	8003472 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003470:	609a      	str	r2, [r3, #8]
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40022000 	.word	0x40022000
 8003480:	40022100 	.word	0x40022100
 8003484:	40022300 	.word	0x40022300
 8003488:	58026300 	.word	0x58026300
 800348c:	005f5e10 	.word	0x005f5e10
 8003490:	00bebc20 	.word	0x00bebc20
 8003494:	017d7840 	.word	0x017d7840

08003498 <LL_ADC_IsEnabled>:
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <LL_ADC_IsEnabled+0x18>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <LL_ADC_IsEnabled+0x1a>
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_ADC_REG_IsConversionOngoing>:
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d101      	bne.n	80034d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034e4:	b590      	push	{r4, r7, lr}
 80034e6:	b0a3      	sub	sp, #140	; 0x8c
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034fe:	2302      	movs	r3, #2
 8003500:	e0c1      	b.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800350a:	2300      	movs	r3, #0
 800350c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800350e:	2300      	movs	r3, #0
 8003510:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a5e      	ldr	r2, [pc, #376]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d102      	bne.n	8003522 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800351c:	4b5d      	ldr	r3, [pc, #372]	; (8003694 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e001      	b.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0a0      	b.n	8003686 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ffb9 	bl	80034be <LL_ADC_REG_IsConversionOngoing>
 800354c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ffb2 	bl	80034be <LL_ADC_REG_IsConversionOngoing>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	f040 8081 	bne.w	8003664 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003562:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d17c      	bne.n	8003664 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a48      	ldr	r2, [pc, #288]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d004      	beq.n	800357e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a46      	ldr	r2, [pc, #280]	; (8003694 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d101      	bne.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800357e:	4b46      	ldr	r3, [pc, #280]	; (8003698 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003580:	e000      	b.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003582:	4b46      	ldr	r3, [pc, #280]	; (800369c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003584:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d039      	beq.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800358e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	431a      	orrs	r2, r3
 800359c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800359e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3a      	ldr	r2, [pc, #232]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a39      	ldr	r2, [pc, #228]	; (8003694 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d10e      	bne.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80035b4:	4836      	ldr	r0, [pc, #216]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80035b6:	f7ff ff6f 	bl	8003498 <LL_ADC_IsEnabled>
 80035ba:	4604      	mov	r4, r0
 80035bc:	4835      	ldr	r0, [pc, #212]	; (8003694 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80035be:	f7ff ff6b 	bl	8003498 <LL_ADC_IsEnabled>
 80035c2:	4603      	mov	r3, r0
 80035c4:	4323      	orrs	r3, r4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf0c      	ite	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	2300      	movne	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	e008      	b.n	80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80035d2:	4833      	ldr	r0, [pc, #204]	; (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80035d4:	f7ff ff60 	bl	8003498 <LL_ADC_IsEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d047      	beq.n	8003678 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	6811      	ldr	r1, [r2, #0]
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	6892      	ldr	r2, [r2, #8]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	431a      	orrs	r2, r3
 80035fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035fe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003600:	e03a      	b.n	8003678 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003602:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800360a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800360c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1d      	ldr	r2, [pc, #116]	; (8003694 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10e      	bne.n	8003640 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003622:	481b      	ldr	r0, [pc, #108]	; (8003690 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003624:	f7ff ff38 	bl	8003498 <LL_ADC_IsEnabled>
 8003628:	4604      	mov	r4, r0
 800362a:	481a      	ldr	r0, [pc, #104]	; (8003694 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800362c:	f7ff ff34 	bl	8003498 <LL_ADC_IsEnabled>
 8003630:	4603      	mov	r3, r0
 8003632:	4323      	orrs	r3, r4
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e008      	b.n	8003652 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003640:	4817      	ldr	r0, [pc, #92]	; (80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003642:	f7ff ff29 	bl	8003498 <LL_ADC_IsEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	bf0c      	ite	eq
 800364c:	2301      	moveq	r3, #1
 800364e:	2300      	movne	r3, #0
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d010      	beq.n	8003678 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800365c:	4013      	ands	r3, r2
 800365e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003660:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003662:	e009      	b.n	8003678 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003676:	e000      	b.n	800367a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003678:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003682:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003686:	4618      	mov	r0, r3
 8003688:	378c      	adds	r7, #140	; 0x8c
 800368a:	46bd      	mov	sp, r7
 800368c:	bd90      	pop	{r4, r7, pc}
 800368e:	bf00      	nop
 8003690:	40022000 	.word	0x40022000
 8003694:	40022100 	.word	0x40022100
 8003698:	40022300 	.word	0x40022300
 800369c:	58026300 	.word	0x58026300
 80036a0:	58026000 	.word	0x58026000
 80036a4:	fffff0e0 	.word	0xfffff0e0

080036a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <__NVIC_SetPriorityGrouping+0x40>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036d6:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <__NVIC_SetPriorityGrouping+0x40>)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	60d3      	str	r3, [r2, #12]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000ed00 	.word	0xe000ed00
 80036ec:	05fa0000 	.word	0x05fa0000

080036f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <__NVIC_GetPriorityGrouping+0x18>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 0307 	and.w	r3, r3, #7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800371c:	2b00      	cmp	r3, #0
 800371e:	db0a      	blt.n	8003736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	490c      	ldr	r1, [pc, #48]	; (8003758 <__NVIC_SetPriority+0x4c>)
 8003726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	440b      	add	r3, r1
 8003730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003734:	e00a      	b.n	800374c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <__NVIC_SetPriority+0x50>)
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	3b04      	subs	r3, #4
 8003744:	0112      	lsls	r2, r2, #4
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	440b      	add	r3, r1
 800374a:	761a      	strb	r2, [r3, #24]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000e100 	.word	0xe000e100
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	; 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f1c3 0307 	rsb	r3, r3, #7
 800377a:	2b04      	cmp	r3, #4
 800377c:	bf28      	it	cs
 800377e:	2304      	movcs	r3, #4
 8003780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3304      	adds	r3, #4
 8003786:	2b06      	cmp	r3, #6
 8003788:	d902      	bls.n	8003790 <NVIC_EncodePriority+0x30>
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3b03      	subs	r3, #3
 800378e:	e000      	b.n	8003792 <NVIC_EncodePriority+0x32>
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	401a      	ands	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a8:	f04f 31ff 	mov.w	r1, #4294967295
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	43d9      	mvns	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	4313      	orrs	r3, r2
         );
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	; 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
	...

080037c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d8:	d301      	bcc.n	80037de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037da:	2301      	movs	r3, #1
 80037dc:	e00f      	b.n	80037fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <SysTick_Config+0x40>)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e6:	210f      	movs	r1, #15
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ec:	f7ff ff8e 	bl	800370c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037f0:	4b05      	ldr	r3, [pc, #20]	; (8003808 <SysTick_Config+0x40>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f6:	4b04      	ldr	r3, [pc, #16]	; (8003808 <SysTick_Config+0x40>)
 80037f8:	2207      	movs	r2, #7
 80037fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	e000e010 	.word	0xe000e010

0800380c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff ff47 	bl	80036a8 <__NVIC_SetPriorityGrouping>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af00      	add	r7, sp, #0
 8003828:	4603      	mov	r3, r0
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003830:	f7ff ff5e 	bl	80036f0 <__NVIC_GetPriorityGrouping>
 8003834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	6978      	ldr	r0, [r7, #20]
 800383c:	f7ff ff90 	bl	8003760 <NVIC_EncodePriority>
 8003840:	4602      	mov	r2, r0
 8003842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff5f 	bl	800370c <__NVIC_SetPriority>
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffb2 	bl	80037c8 <SysTick_Config>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b098      	sub	sp, #96	; 0x60
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003878:	4a84      	ldr	r2, [pc, #528]	; (8003a8c <HAL_FDCAN_Init+0x21c>)
 800387a:	f107 030c 	add.w	r3, r7, #12
 800387e:	4611      	mov	r1, r2
 8003880:	224c      	movs	r2, #76	; 0x4c
 8003882:	4618      	mov	r0, r3
 8003884:	f006 fab0 	bl	8009de8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e1c6      	b.n	8003c20 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7e      	ldr	r2, [pc, #504]	; (8003a90 <HAL_FDCAN_Init+0x220>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d106      	bne.n	80038aa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80038a4:	461a      	mov	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d106      	bne.n	80038c4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7fd fe38 	bl	8001534 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0210 	bic.w	r2, r2, #16
 80038d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038d4:	f7fe fb6c 	bl	8001fb0 <HAL_GetTick>
 80038d8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80038da:	e014      	b.n	8003906 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80038dc:	f7fe fb68 	bl	8001fb0 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b0a      	cmp	r3, #10
 80038e8:	d90d      	bls.n	8003906 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038f0:	f043 0201 	orr.w	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2203      	movs	r2, #3
 80038fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e18c      	b.n	8003c20 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b08      	cmp	r3, #8
 8003912:	d0e3      	beq.n	80038dc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003924:	f7fe fb44 	bl	8001fb0 <HAL_GetTick>
 8003928:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800392a:	e014      	b.n	8003956 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800392c:	f7fe fb40 	bl	8001fb0 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b0a      	cmp	r3, #10
 8003938:	d90d      	bls.n	8003956 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2203      	movs	r2, #3
 800394e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e164      	b.n	8003c20 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0e3      	beq.n	800392c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0202 	orr.w	r2, r2, #2
 8003972:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7c1b      	ldrb	r3, [r3, #16]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d108      	bne.n	800398e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398a:	619a      	str	r2, [r3, #24]
 800398c:	e007      	b.n	800399e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800399c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	7c5b      	ldrb	r3, [r3, #17]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d108      	bne.n	80039b8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699a      	ldr	r2, [r3, #24]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b4:	619a      	str	r2, [r3, #24]
 80039b6:	e007      	b.n	80039c8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039c6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	7c9b      	ldrb	r3, [r3, #18]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d108      	bne.n	80039e2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039de:	619a      	str	r2, [r3, #24]
 80039e0:	e007      	b.n	80039f2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80039f0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003a16:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0210 	bic.w	r2, r2, #16
 8003a26:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d108      	bne.n	8003a42 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0204 	orr.w	r2, r2, #4
 8003a3e:	619a      	str	r2, [r3, #24]
 8003a40:	e030      	b.n	8003aa4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02c      	beq.n	8003aa4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d020      	beq.n	8003a94 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699a      	ldr	r2, [r3, #24]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a60:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0210 	orr.w	r2, r2, #16
 8003a70:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d114      	bne.n	8003aa4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699a      	ldr	r2, [r3, #24]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0220 	orr.w	r2, r2, #32
 8003a88:	619a      	str	r2, [r3, #24]
 8003a8a:	e00b      	b.n	8003aa4 <HAL_FDCAN_Init+0x234>
 8003a8c:	08009e2c 	.word	0x08009e2c
 8003a90:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0220 	orr.w	r2, r2, #32
 8003aa2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ab4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003abc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003acc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003ace:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad8:	d115      	bne.n	8003b06 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ae8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	3b01      	subs	r3, #1
 8003af0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003af2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	3b01      	subs	r3, #1
 8003afc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003b02:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003b04:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00a      	beq.n	8003b24 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b2c:	4413      	add	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d011      	beq.n	8003b56 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003b3a:	f023 0107 	bic.w	r1, r3, #7
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	3360      	adds	r3, #96	; 0x60
 8003b46:	443b      	add	r3, r7
 8003b48:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d011      	beq.n	8003b82 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003b66:	f023 0107 	bic.w	r1, r3, #7
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	3360      	adds	r3, #96	; 0x60
 8003b72:	443b      	add	r3, r7
 8003b74:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d012      	beq.n	8003bb0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003b92:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	3360      	adds	r3, #96	; 0x60
 8003b9e:	443b      	add	r3, r7
 8003ba0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003ba4:	011a      	lsls	r2, r3, #4
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d012      	beq.n	8003bde <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003bc0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	3360      	adds	r3, #96	; 0x60
 8003bcc:	443b      	add	r3, r7
 8003bce:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003bd2:	021a      	lsls	r2, r3, #8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a11      	ldr	r2, [pc, #68]	; (8003c28 <HAL_FDCAN_Init+0x3b8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d107      	bne.n	8003bf8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f022 0203 	bic.w	r2, r2, #3
 8003bf6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f80b 	bl	8003c2c <FDCAN_CalcultateRamBlockAddresses>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003c1c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3760      	adds	r7, #96	; 0x60
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	4000a000 	.word	0x4000a000

08003c2c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c42:	4ba7      	ldr	r3, [pc, #668]	; (8003ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	0091      	lsls	r1, r2, #2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	041a      	lsls	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	4413      	add	r3, r2
 8003c78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c82:	4b97      	ldr	r3, [pc, #604]	; (8003ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	0091      	lsls	r1, r2, #2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6812      	ldr	r2, [r2, #0]
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	4413      	add	r3, r2
 8003cba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003cc4:	4b86      	ldr	r3, [pc, #536]	; (8003ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	0091      	lsls	r1, r2, #2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cde:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	041a      	lsls	r2, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	4413      	add	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d0c:	4b74      	ldr	r3, [pc, #464]	; (8003ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	0091      	lsls	r1, r2, #2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d26:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2e:	041a      	lsls	r2, r3, #16
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4413      	add	r3, r2
 8003d4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003d54:	4b62      	ldr	r3, [pc, #392]	; (8003ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	0091      	lsls	r1, r2, #2
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	430b      	orrs	r3, r1
 8003d62:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	4413      	add	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003d80:	4b57      	ldr	r3, [pc, #348]	; (8003ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	0091      	lsls	r1, r2, #2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d9a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	041a      	lsls	r2, r3, #16
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	4413      	add	r3, r2
 8003db8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003dc2:	4b47      	ldr	r3, [pc, #284]	; (8003ee0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	0091      	lsls	r1, r2, #2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6812      	ldr	r2, [r2, #0]
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ddc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	041a      	lsls	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003df8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e00:	061a      	lsls	r2, r3, #24
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e10:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003e12:	4413      	add	r3, r2
 8003e14:	009a      	lsls	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	441a      	add	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	441a      	add	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	441a      	add	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	441a      	add	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d915      	bls.n	8003f08 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003edc:	e006      	b.n	8003eec <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003ede:	bf00      	nop
 8003ee0:	ffff0003 	.word	0xffff0003
 8003ee4:	10002b00 	.word	0x10002b00
 8003ee8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2203      	movs	r2, #3
 8003f00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e010      	b.n	8003f2a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e005      	b.n	8003f1c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d3f3      	bcc.n	8003f10 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop

08003f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	; 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f46:	4b86      	ldr	r3, [pc, #536]	; (8004160 <HAL_GPIO_Init+0x228>)
 8003f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f4a:	e18c      	b.n	8004266 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	2101      	movs	r1, #1
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	fa01 f303 	lsl.w	r3, r1, r3
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 817e 	beq.w	8004260 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d005      	beq.n	8003f7c <HAL_GPIO_Init+0x44>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d130      	bne.n	8003fde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2203      	movs	r2, #3
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 0201 	and.w	r2, r3, #1
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d017      	beq.n	800401a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4313      	orrs	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d123      	bne.n	800406e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	08da      	lsrs	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3208      	adds	r2, #8
 800402e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	220f      	movs	r2, #15
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4313      	orrs	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	08da      	lsrs	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3208      	adds	r2, #8
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	2203      	movs	r2, #3
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43db      	mvns	r3, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4013      	ands	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 0203 	and.w	r2, r3, #3
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4313      	orrs	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80d8 	beq.w	8004260 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b0:	4b2c      	ldr	r3, [pc, #176]	; (8004164 <HAL_GPIO_Init+0x22c>)
 80040b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040b6:	4a2b      	ldr	r2, [pc, #172]	; (8004164 <HAL_GPIO_Init+0x22c>)
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040c0:	4b28      	ldr	r3, [pc, #160]	; (8004164 <HAL_GPIO_Init+0x22c>)
 80040c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040ce:	4a26      	ldr	r2, [pc, #152]	; (8004168 <HAL_GPIO_Init+0x230>)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	089b      	lsrs	r3, r3, #2
 80040d4:	3302      	adds	r3, #2
 80040d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	220f      	movs	r2, #15
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4013      	ands	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a1d      	ldr	r2, [pc, #116]	; (800416c <HAL_GPIO_Init+0x234>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d04a      	beq.n	8004190 <HAL_GPIO_Init+0x258>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <HAL_GPIO_Init+0x238>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d02b      	beq.n	800415a <HAL_GPIO_Init+0x222>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_GPIO_Init+0x23c>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d025      	beq.n	8004156 <HAL_GPIO_Init+0x21e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a1a      	ldr	r2, [pc, #104]	; (8004178 <HAL_GPIO_Init+0x240>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01f      	beq.n	8004152 <HAL_GPIO_Init+0x21a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a19      	ldr	r2, [pc, #100]	; (800417c <HAL_GPIO_Init+0x244>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d019      	beq.n	800414e <HAL_GPIO_Init+0x216>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a18      	ldr	r2, [pc, #96]	; (8004180 <HAL_GPIO_Init+0x248>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_GPIO_Init+0x212>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_GPIO_Init+0x24c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d00d      	beq.n	8004146 <HAL_GPIO_Init+0x20e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_GPIO_Init+0x250>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d007      	beq.n	8004142 <HAL_GPIO_Init+0x20a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <HAL_GPIO_Init+0x254>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <HAL_GPIO_Init+0x206>
 800413a:	2309      	movs	r3, #9
 800413c:	e029      	b.n	8004192 <HAL_GPIO_Init+0x25a>
 800413e:	230a      	movs	r3, #10
 8004140:	e027      	b.n	8004192 <HAL_GPIO_Init+0x25a>
 8004142:	2307      	movs	r3, #7
 8004144:	e025      	b.n	8004192 <HAL_GPIO_Init+0x25a>
 8004146:	2306      	movs	r3, #6
 8004148:	e023      	b.n	8004192 <HAL_GPIO_Init+0x25a>
 800414a:	2305      	movs	r3, #5
 800414c:	e021      	b.n	8004192 <HAL_GPIO_Init+0x25a>
 800414e:	2304      	movs	r3, #4
 8004150:	e01f      	b.n	8004192 <HAL_GPIO_Init+0x25a>
 8004152:	2303      	movs	r3, #3
 8004154:	e01d      	b.n	8004192 <HAL_GPIO_Init+0x25a>
 8004156:	2302      	movs	r3, #2
 8004158:	e01b      	b.n	8004192 <HAL_GPIO_Init+0x25a>
 800415a:	2301      	movs	r3, #1
 800415c:	e019      	b.n	8004192 <HAL_GPIO_Init+0x25a>
 800415e:	bf00      	nop
 8004160:	58000080 	.word	0x58000080
 8004164:	58024400 	.word	0x58024400
 8004168:	58000400 	.word	0x58000400
 800416c:	58020000 	.word	0x58020000
 8004170:	58020400 	.word	0x58020400
 8004174:	58020800 	.word	0x58020800
 8004178:	58020c00 	.word	0x58020c00
 800417c:	58021000 	.word	0x58021000
 8004180:	58021400 	.word	0x58021400
 8004184:	58021800 	.word	0x58021800
 8004188:	58021c00 	.word	0x58021c00
 800418c:	58022400 	.word	0x58022400
 8004190:	2300      	movs	r3, #0
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	f002 0203 	and.w	r2, r2, #3
 8004198:	0092      	lsls	r2, r2, #2
 800419a:	4093      	lsls	r3, r2
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a2:	4938      	ldr	r1, [pc, #224]	; (8004284 <HAL_GPIO_Init+0x34c>)
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	3302      	adds	r3, #2
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3301      	adds	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f ae6b 	bne.w	8003f4c <HAL_GPIO_Init+0x14>
  }
}
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	3724      	adds	r7, #36	; 0x24
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	58000400 	.word	0x58000400

08004288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	807b      	strh	r3, [r7, #2]
 8004294:	4613      	mov	r3, r2
 8004296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004298:	787b      	ldrb	r3, [r7, #1]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800429e:	887a      	ldrh	r2, [r7, #2]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042a4:	e003      	b.n	80042ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042a6:	887b      	ldrh	r3, [r7, #2]
 80042a8:	041a      	lsls	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	619a      	str	r2, [r3, #24]
}
 80042ae:	bf00      	nop
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d00a      	beq.n	80042e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042d0:	4b16      	ldr	r3, [pc, #88]	; (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d001      	beq.n	80042e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e01f      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	e01d      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f023 0207 	bic.w	r2, r3, #7
 80042ee:	490f      	ldr	r1, [pc, #60]	; (800432c <HAL_PWREx_ConfigSupply+0x70>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042f6:	f7fd fe5b 	bl	8001fb0 <HAL_GetTick>
 80042fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042fc:	e009      	b.n	8004312 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042fe:	f7fd fe57 	bl	8001fb0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800430c:	d901      	bls.n	8004312 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e007      	b.n	8004322 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_PWREx_ConfigSupply+0x70>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	d1ee      	bne.n	80042fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	58024800 	.word	0x58024800

08004330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08c      	sub	sp, #48	; 0x30
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e3c8      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 8087 	beq.w	800445e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004350:	4b88      	ldr	r3, [pc, #544]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800435a:	4b86      	ldr	r3, [pc, #536]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004362:	2b10      	cmp	r3, #16
 8004364:	d007      	beq.n	8004376 <HAL_RCC_OscConfig+0x46>
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b18      	cmp	r3, #24
 800436a:	d110      	bne.n	800438e <HAL_RCC_OscConfig+0x5e>
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d10b      	bne.n	800438e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004376:	4b7f      	ldr	r3, [pc, #508]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d06c      	beq.n	800445c <HAL_RCC_OscConfig+0x12c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d168      	bne.n	800445c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e3a2      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004396:	d106      	bne.n	80043a6 <HAL_RCC_OscConfig+0x76>
 8004398:	4b76      	ldr	r3, [pc, #472]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a75      	ldr	r2, [pc, #468]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 800439e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	e02e      	b.n	8004404 <HAL_RCC_OscConfig+0xd4>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0x98>
 80043ae:	4b71      	ldr	r3, [pc, #452]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a70      	ldr	r2, [pc, #448]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	4b6e      	ldr	r3, [pc, #440]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6d      	ldr	r2, [pc, #436]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e01d      	b.n	8004404 <HAL_RCC_OscConfig+0xd4>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043d0:	d10c      	bne.n	80043ec <HAL_RCC_OscConfig+0xbc>
 80043d2:	4b68      	ldr	r3, [pc, #416]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a67      	ldr	r2, [pc, #412]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b65      	ldr	r3, [pc, #404]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a64      	ldr	r2, [pc, #400]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e00b      	b.n	8004404 <HAL_RCC_OscConfig+0xd4>
 80043ec:	4b61      	ldr	r3, [pc, #388]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a60      	ldr	r2, [pc, #384]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b5e      	ldr	r3, [pc, #376]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5d      	ldr	r2, [pc, #372]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80043fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d013      	beq.n	8004434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fd fdd0 	bl	8001fb0 <HAL_GetTick>
 8004410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fd fdcc 	bl	8001fb0 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	; 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e356      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004426:	4b53      	ldr	r3, [pc, #332]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0xe4>
 8004432:	e014      	b.n	800445e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fd fdbc 	bl	8001fb0 <HAL_GetTick>
 8004438:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800443c:	f7fd fdb8 	bl	8001fb0 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e342      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800444e:	4b49      	ldr	r3, [pc, #292]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x10c>
 800445a:	e000      	b.n	800445e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 808c 	beq.w	8004584 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446c:	4b41      	ldr	r3, [pc, #260]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004476:	4b3f      	ldr	r3, [pc, #252]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d007      	beq.n	8004492 <HAL_RCC_OscConfig+0x162>
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	2b18      	cmp	r3, #24
 8004486:	d137      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1c8>
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d132      	bne.n	80044f8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004492:	4b38      	ldr	r3, [pc, #224]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0304 	and.w	r3, r3, #4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_RCC_OscConfig+0x17a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e314      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80044aa:	4b32      	ldr	r3, [pc, #200]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 0219 	bic.w	r2, r3, #25
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	492f      	ldr	r1, [pc, #188]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fd fd78 	bl	8001fb0 <HAL_GetTick>
 80044c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c4:	f7fd fd74 	bl	8001fb0 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e2fe      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044d6:	4b27      	ldr	r3, [pc, #156]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	061b      	lsls	r3, r3, #24
 80044f0:	4920      	ldr	r1, [pc, #128]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044f6:	e045      	b.n	8004584 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d026      	beq.n	800454e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004500:	4b1c      	ldr	r3, [pc, #112]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 0219 	bic.w	r2, r3, #25
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4919      	ldr	r1, [pc, #100]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 800450e:	4313      	orrs	r3, r2
 8004510:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fd fd4d 	bl	8001fb0 <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451a:	f7fd fd49 	bl	8001fb0 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e2d3      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	490b      	ldr	r1, [pc, #44]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 8004548:	4313      	orrs	r3, r2
 800454a:	604b      	str	r3, [r1, #4]
 800454c:	e01a      	b.n	8004584 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <HAL_RCC_OscConfig+0x244>)
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fd fd29 	bl	8001fb0 <HAL_GetTick>
 800455e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004562:	f7fd fd25 	bl	8001fb0 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d903      	bls.n	8004578 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e2af      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
 8004574:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004578:	4b96      	ldr	r3, [pc, #600]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ee      	bne.n	8004562 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b00      	cmp	r3, #0
 800458e:	d06a      	beq.n	8004666 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004590:	4b90      	ldr	r3, [pc, #576]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004598:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800459a:	4b8e      	ldr	r3, [pc, #568]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d007      	beq.n	80045b6 <HAL_RCC_OscConfig+0x286>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b18      	cmp	r3, #24
 80045aa:	d11b      	bne.n	80045e4 <HAL_RCC_OscConfig+0x2b4>
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d116      	bne.n	80045e4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045b6:	4b87      	ldr	r3, [pc, #540]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_RCC_OscConfig+0x29e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e282      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045ce:	4b81      	ldr	r3, [pc, #516]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	497d      	ldr	r1, [pc, #500]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045e2:	e040      	b.n	8004666 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d023      	beq.n	8004634 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045ec:	4b79      	ldr	r3, [pc, #484]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a78      	ldr	r2, [pc, #480]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80045f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd fcda 	bl	8001fb0 <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004600:	f7fd fcd6 	bl	8001fb0 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e260      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004612:	4b70      	ldr	r3, [pc, #448]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800461e:	4b6d      	ldr	r3, [pc, #436]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	061b      	lsls	r3, r3, #24
 800462c:	4969      	ldr	r1, [pc, #420]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	60cb      	str	r3, [r1, #12]
 8004632:	e018      	b.n	8004666 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004634:	4b67      	ldr	r3, [pc, #412]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a66      	ldr	r2, [pc, #408]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800463a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800463e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fd fcb6 	bl	8001fb0 <HAL_GetTick>
 8004644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004646:	e008      	b.n	800465a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004648:	f7fd fcb2 	bl	8001fb0 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e23c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800465a:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f0      	bne.n	8004648 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d036      	beq.n	80046e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d019      	beq.n	80046ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800467a:	4b56      	ldr	r3, [pc, #344]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800467c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800467e:	4a55      	ldr	r2, [pc, #340]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004686:	f7fd fc93 	bl	8001fb0 <HAL_GetTick>
 800468a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800468e:	f7fd fc8f 	bl	8001fb0 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e219      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046a0:	4b4c      	ldr	r3, [pc, #304]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCC_OscConfig+0x35e>
 80046ac:	e018      	b.n	80046e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ae:	4b49      	ldr	r3, [pc, #292]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b2:	4a48      	ldr	r2, [pc, #288]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fd fc79 	bl	8001fb0 <HAL_GetTick>
 80046be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c2:	f7fd fc75 	bl	8001fb0 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e1ff      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046d4:	4b3f      	ldr	r3, [pc, #252]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1f0      	bne.n	80046c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d036      	beq.n	800475a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d019      	beq.n	8004728 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046f4:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a36      	ldr	r2, [pc, #216]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80046fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004700:	f7fd fc56 	bl	8001fb0 <HAL_GetTick>
 8004704:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004708:	f7fd fc52 	bl	8001fb0 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e1dc      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800471a:	4b2e      	ldr	r3, [pc, #184]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0x3d8>
 8004726:	e018      	b.n	800475a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004728:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a29      	ldr	r2, [pc, #164]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 800472e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004732:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004734:	f7fd fc3c 	bl	8001fb0 <HAL_GetTick>
 8004738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800473c:	f7fd fc38 	bl	8001fb0 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e1c2      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800474e:	4b21      	ldr	r3, [pc, #132]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1f0      	bne.n	800473c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8086 	beq.w	8004874 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_RCC_OscConfig+0x4a8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <HAL_RCC_OscConfig+0x4a8>)
 800476e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004772:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004774:	f7fd fc1c 	bl	8001fb0 <HAL_GetTick>
 8004778:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477c:	f7fd fc18 	bl	8001fb0 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	; 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1a2      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800478e:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <HAL_RCC_OscConfig+0x4a8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d0f0      	beq.n	800477c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d106      	bne.n	80047b0 <HAL_RCC_OscConfig+0x480>
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	4a0b      	ldr	r2, [pc, #44]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	6713      	str	r3, [r2, #112]	; 0x70
 80047ae:	e032      	b.n	8004816 <HAL_RCC_OscConfig+0x4e6>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d111      	bne.n	80047dc <HAL_RCC_OscConfig+0x4ac>
 80047b8:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047be:	f023 0301 	bic.w	r3, r3, #1
 80047c2:	6713      	str	r3, [r2, #112]	; 0x70
 80047c4:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	4a02      	ldr	r2, [pc, #8]	; (80047d4 <HAL_RCC_OscConfig+0x4a4>)
 80047ca:	f023 0304 	bic.w	r3, r3, #4
 80047ce:	6713      	str	r3, [r2, #112]	; 0x70
 80047d0:	e021      	b.n	8004816 <HAL_RCC_OscConfig+0x4e6>
 80047d2:	bf00      	nop
 80047d4:	58024400 	.word	0x58024400
 80047d8:	58024800 	.word	0x58024800
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d10c      	bne.n	80047fe <HAL_RCC_OscConfig+0x4ce>
 80047e4:	4b83      	ldr	r3, [pc, #524]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e8:	4a82      	ldr	r2, [pc, #520]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80047ea:	f043 0304 	orr.w	r3, r3, #4
 80047ee:	6713      	str	r3, [r2, #112]	; 0x70
 80047f0:	4b80      	ldr	r3, [pc, #512]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a7f      	ldr	r2, [pc, #508]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	e00b      	b.n	8004816 <HAL_RCC_OscConfig+0x4e6>
 80047fe:	4b7d      	ldr	r3, [pc, #500]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	4a7c      	ldr	r2, [pc, #496]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	6713      	str	r3, [r2, #112]	; 0x70
 800480a:	4b7a      	ldr	r3, [pc, #488]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	4a79      	ldr	r2, [pc, #484]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004810:	f023 0304 	bic.w	r3, r3, #4
 8004814:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d015      	beq.n	800484a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481e:	f7fd fbc7 	bl	8001fb0 <HAL_GetTick>
 8004822:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004824:	e00a      	b.n	800483c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fd fbc3 	bl	8001fb0 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f241 3288 	movw	r2, #5000	; 0x1388
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e14b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800483c:	4b6d      	ldr	r3, [pc, #436]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ee      	beq.n	8004826 <HAL_RCC_OscConfig+0x4f6>
 8004848:	e014      	b.n	8004874 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fd fbb1 	bl	8001fb0 <HAL_GetTick>
 800484e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fd fbad 	bl	8001fb0 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e135      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004868:	4b62      	ldr	r3, [pc, #392]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ee      	bne.n	8004852 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 812a 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800487e:	4b5d      	ldr	r3, [pc, #372]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004886:	2b18      	cmp	r3, #24
 8004888:	f000 80ba 	beq.w	8004a00 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	2b02      	cmp	r3, #2
 8004892:	f040 8095 	bne.w	80049c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004896:	4b57      	ldr	r3, [pc, #348]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a56      	ldr	r2, [pc, #344]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800489c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fd fb85 	bl	8001fb0 <HAL_GetTick>
 80048a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048aa:	f7fd fb81 	bl	8001fb0 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e10b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048bc:	4b4d      	ldr	r3, [pc, #308]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f0      	bne.n	80048aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048c8:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80048ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048cc:	4b4a      	ldr	r3, [pc, #296]	; (80049f8 <HAL_RCC_OscConfig+0x6c8>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80048d8:	0112      	lsls	r2, r2, #4
 80048da:	430a      	orrs	r2, r1
 80048dc:	4945      	ldr	r1, [pc, #276]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	628b      	str	r3, [r1, #40]	; 0x28
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	3b01      	subs	r3, #1
 80048e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f0:	3b01      	subs	r3, #1
 80048f2:	025b      	lsls	r3, r3, #9
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	3b01      	subs	r3, #1
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	3b01      	subs	r3, #1
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004912:	4938      	ldr	r1, [pc, #224]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004914:	4313      	orrs	r3, r2
 8004916:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004918:	4b36      	ldr	r3, [pc, #216]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	4a35      	ldr	r2, [pc, #212]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800491e:	f023 0301 	bic.w	r3, r3, #1
 8004922:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004924:	4b33      	ldr	r3, [pc, #204]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004928:	4b34      	ldr	r3, [pc, #208]	; (80049fc <HAL_RCC_OscConfig+0x6cc>)
 800492a:	4013      	ands	r3, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004930:	00d2      	lsls	r2, r2, #3
 8004932:	4930      	ldr	r1, [pc, #192]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004934:	4313      	orrs	r3, r2
 8004936:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004938:	4b2e      	ldr	r3, [pc, #184]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	f023 020c 	bic.w	r2, r3, #12
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	492b      	ldr	r1, [pc, #172]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800494a:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494e:	f023 0202 	bic.w	r2, r3, #2
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	4927      	ldr	r1, [pc, #156]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004958:	4313      	orrs	r3, r2
 800495a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	4a24      	ldr	r2, [pc, #144]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004966:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004972:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004974:	4b1f      	ldr	r3, [pc, #124]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4a1e      	ldr	r2, [pc, #120]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800497a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800497e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004980:	4b1c      	ldr	r3, [pc, #112]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	4a1b      	ldr	r2, [pc, #108]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800498c:	4b19      	ldr	r3, [pc, #100]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 8004992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fd fb0a 	bl	8001fb0 <HAL_GetTick>
 800499c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a0:	f7fd fb06 	bl	8001fb0 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e090      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049b2:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCC_OscConfig+0x670>
 80049be:	e088      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a0b      	ldr	r2, [pc, #44]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80049c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fd faf0 	bl	8001fb0 <HAL_GetTick>
 80049d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fd faec 	bl	8001fb0 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e076      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049e6:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <HAL_RCC_OscConfig+0x6c4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x6a4>
 80049f2:	e06e      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7a2>
 80049f4:	58024400 	.word	0x58024400
 80049f8:	fffffc0c 	.word	0xfffffc0c
 80049fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a00:	4b36      	ldr	r3, [pc, #216]	; (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a06:	4b35      	ldr	r3, [pc, #212]	; (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d031      	beq.n	8004a78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f003 0203 	and.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d12a      	bne.n	8004a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d122      	bne.n	8004a78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d11a      	bne.n	8004a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	0a5b      	lsrs	r3, r3, #9
 8004a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d111      	bne.n	8004a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d108      	bne.n	8004a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	0e1b      	lsrs	r3, r3, #24
 8004a6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e02b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004a7c:	4b17      	ldr	r3, [pc, #92]	; (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	08db      	lsrs	r3, r3, #3
 8004a82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d01f      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	4a11      	ldr	r2, [pc, #68]	; (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a9e:	f7fd fa87 	bl	8001fb0 <HAL_GetTick>
 8004aa2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004aa4:	bf00      	nop
 8004aa6:	f7fd fa83 	bl	8001fb0 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d0f9      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <HAL_RCC_OscConfig+0x7b0>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004abe:	00d2      	lsls	r2, r2, #3
 8004ac0:	4906      	ldr	r1, [pc, #24]	; (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	4a04      	ldr	r2, [pc, #16]	; (8004adc <HAL_RCC_OscConfig+0x7ac>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3730      	adds	r7, #48	; 0x30
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	ffff0007 	.word	0xffff0007

08004ae4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e19c      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004af8:	4b8a      	ldr	r3, [pc, #552]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d910      	bls.n	8004b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b87      	ldr	r3, [pc, #540]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 020f 	bic.w	r2, r3, #15
 8004b0e:	4985      	ldr	r1, [pc, #532]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b83      	ldr	r3, [pc, #524]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e184      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d010      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	4b7b      	ldr	r3, [pc, #492]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d908      	bls.n	8004b56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b44:	4b78      	ldr	r3, [pc, #480]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	4975      	ldr	r1, [pc, #468]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d010      	beq.n	8004b84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695a      	ldr	r2, [r3, #20]
 8004b66:	4b70      	ldr	r3, [pc, #448]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d908      	bls.n	8004b84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b72:	4b6d      	ldr	r3, [pc, #436]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	496a      	ldr	r1, [pc, #424]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d010      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699a      	ldr	r2, [r3, #24]
 8004b94:	4b64      	ldr	r3, [pc, #400]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d908      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ba0:	4b61      	ldr	r3, [pc, #388]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	495e      	ldr	r1, [pc, #376]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d010      	beq.n	8004be0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	4b59      	ldr	r3, [pc, #356]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d908      	bls.n	8004be0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004bce:	4b56      	ldr	r3, [pc, #344]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	4953      	ldr	r1, [pc, #332]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d010      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	4b4d      	ldr	r3, [pc, #308]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d908      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bfc:	4b4a      	ldr	r3, [pc, #296]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f023 020f 	bic.w	r2, r3, #15
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4947      	ldr	r1, [pc, #284]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d055      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c1a:	4b43      	ldr	r3, [pc, #268]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	4940      	ldr	r1, [pc, #256]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c34:	4b3c      	ldr	r3, [pc, #240]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d121      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0f6      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c4c:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d115      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e0ea      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d107      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c64:	4b30      	ldr	r3, [pc, #192]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0de      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c74:	4b2c      	ldr	r3, [pc, #176]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0304 	and.w	r3, r3, #4
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0d6      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c84:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f023 0207 	bic.w	r2, r3, #7
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4925      	ldr	r1, [pc, #148]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c96:	f7fd f98b 	bl	8001fb0 <HAL_GetTick>
 8004c9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9c:	e00a      	b.n	8004cb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9e:	f7fd f987 	bl	8001fb0 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e0be      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb4:	4b1c      	ldr	r3, [pc, #112]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d1eb      	bne.n	8004c9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d010      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d208      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce2:	4b11      	ldr	r3, [pc, #68]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f023 020f 	bic.w	r2, r3, #15
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	490e      	ldr	r1, [pc, #56]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d214      	bcs.n	8004d2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d02:	4b08      	ldr	r3, [pc, #32]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f023 020f 	bic.w	r2, r3, #15
 8004d0a:	4906      	ldr	r1, [pc, #24]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d12:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d005      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e086      	b.n	8004e32 <HAL_RCC_ClockConfig+0x34e>
 8004d24:	52002000 	.word	0x52002000
 8004d28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	4b3f      	ldr	r3, [pc, #252]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d208      	bcs.n	8004d5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d48:	4b3c      	ldr	r3, [pc, #240]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	4939      	ldr	r1, [pc, #228]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d010      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695a      	ldr	r2, [r3, #20]
 8004d6a:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d208      	bcs.n	8004d88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d76:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	492e      	ldr	r1, [pc, #184]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d010      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699a      	ldr	r2, [r3, #24]
 8004d98:	4b28      	ldr	r3, [pc, #160]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d208      	bcs.n	8004db6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004da4:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	4922      	ldr	r1, [pc, #136]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d010      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d208      	bcs.n	8004de4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4917      	ldr	r1, [pc, #92]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004de4:	f000 f834 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	4912      	ldr	r1, [pc, #72]	; (8004e40 <HAL_RCC_ClockConfig+0x35c>)
 8004df6:	5ccb      	ldrb	r3, [r1, r3]
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e02:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <HAL_RCC_ClockConfig+0x358>)
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	4a0d      	ldr	r2, [pc, #52]	; (8004e40 <HAL_RCC_ClockConfig+0x35c>)
 8004e0c:	5cd3      	ldrb	r3, [r2, r3]
 8004e0e:	f003 031f 	and.w	r3, r3, #31
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
 8004e18:	4a0a      	ldr	r2, [pc, #40]	; (8004e44 <HAL_RCC_ClockConfig+0x360>)
 8004e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e1c:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <HAL_RCC_ClockConfig+0x364>)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <HAL_RCC_ClockConfig+0x368>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd f878 	bl	8001f1c <HAL_InitTick>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	58024400 	.word	0x58024400
 8004e40:	08009e78 	.word	0x08009e78
 8004e44:	24000004 	.word	0x24000004
 8004e48:	24000000 	.word	0x24000000
 8004e4c:	24000008 	.word	0x24000008

08004e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b089      	sub	sp, #36	; 0x24
 8004e54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e56:	4bb3      	ldr	r3, [pc, #716]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e5e:	2b18      	cmp	r3, #24
 8004e60:	f200 8155 	bhi.w	800510e <HAL_RCC_GetSysClockFreq+0x2be>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004ed1 	.word	0x08004ed1
 8004e70:	0800510f 	.word	0x0800510f
 8004e74:	0800510f 	.word	0x0800510f
 8004e78:	0800510f 	.word	0x0800510f
 8004e7c:	0800510f 	.word	0x0800510f
 8004e80:	0800510f 	.word	0x0800510f
 8004e84:	0800510f 	.word	0x0800510f
 8004e88:	0800510f 	.word	0x0800510f
 8004e8c:	08004ef7 	.word	0x08004ef7
 8004e90:	0800510f 	.word	0x0800510f
 8004e94:	0800510f 	.word	0x0800510f
 8004e98:	0800510f 	.word	0x0800510f
 8004e9c:	0800510f 	.word	0x0800510f
 8004ea0:	0800510f 	.word	0x0800510f
 8004ea4:	0800510f 	.word	0x0800510f
 8004ea8:	0800510f 	.word	0x0800510f
 8004eac:	08004efd 	.word	0x08004efd
 8004eb0:	0800510f 	.word	0x0800510f
 8004eb4:	0800510f 	.word	0x0800510f
 8004eb8:	0800510f 	.word	0x0800510f
 8004ebc:	0800510f 	.word	0x0800510f
 8004ec0:	0800510f 	.word	0x0800510f
 8004ec4:	0800510f 	.word	0x0800510f
 8004ec8:	0800510f 	.word	0x0800510f
 8004ecc:	08004f03 	.word	0x08004f03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ed0:	4b94      	ldr	r3, [pc, #592]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d009      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004edc:	4b91      	ldr	r3, [pc, #580]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	4a90      	ldr	r2, [pc, #576]	; (8005128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004eee:	e111      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ef0:	4b8d      	ldr	r3, [pc, #564]	; (8005128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ef2:	61bb      	str	r3, [r7, #24]
      break;
 8004ef4:	e10e      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004ef6:	4b8d      	ldr	r3, [pc, #564]	; (800512c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ef8:	61bb      	str	r3, [r7, #24]
      break;
 8004efa:	e10b      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004efc:	4b8c      	ldr	r3, [pc, #560]	; (8005130 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004efe:	61bb      	str	r3, [r7, #24]
      break;
 8004f00:	e108      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f02:	4b88      	ldr	r3, [pc, #544]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	f003 0303 	and.w	r3, r3, #3
 8004f0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f0c:	4b85      	ldr	r3, [pc, #532]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f18:	4b82      	ldr	r3, [pc, #520]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f22:	4b80      	ldr	r3, [pc, #512]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f26:	08db      	lsrs	r3, r3, #3
 8004f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80e1 	beq.w	8005108 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	f000 8083 	beq.w	8005054 <HAL_RCC_GetSysClockFreq+0x204>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	f200 80a1 	bhi.w	8005098 <HAL_RCC_GetSysClockFreq+0x248>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_RCC_GetSysClockFreq+0x114>
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d056      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f62:	e099      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f64:	4b6f      	ldr	r3, [pc, #444]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d02d      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f70:	4b6c      	ldr	r3, [pc, #432]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	4a6b      	ldr	r2, [pc, #428]	; (8005128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f9a:	4b62      	ldr	r3, [pc, #392]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa2:	ee07 3a90 	vmov	s15, r3
 8004fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004fca:	e087      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005138 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fde:	4b51      	ldr	r3, [pc, #324]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ff2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800500e:	e065      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800513c <HAL_RCC_GetSysClockFreq+0x2ec>
 800501e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005022:	4b40      	ldr	r3, [pc, #256]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005032:	ed97 6a02 	vldr	s12, [r7, #8]
 8005036:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800503a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005052:	e043      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005140 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005076:	ed97 6a02 	vldr	s12, [r7, #8]
 800507a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800507e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800508a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005096:	e021      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800513c <HAL_RCC_GetSysClockFreq+0x2ec>
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b1e      	ldr	r3, [pc, #120]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80050be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005134 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80050dc:	4b11      	ldr	r3, [pc, #68]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	0a5b      	lsrs	r3, r3, #9
 80050e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050e6:	3301      	adds	r3, #1
 80050e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	ee07 3a90 	vmov	s15, r3
 80050f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80050f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005100:	ee17 3a90 	vmov	r3, s15
 8005104:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005106:	e005      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	61bb      	str	r3, [r7, #24]
      break;
 800510c:	e002      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800510e:	4b07      	ldr	r3, [pc, #28]	; (800512c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005110:	61bb      	str	r3, [r7, #24]
      break;
 8005112:	bf00      	nop
  }

  return sysclockfreq;
 8005114:	69bb      	ldr	r3, [r7, #24]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3724      	adds	r7, #36	; 0x24
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	58024400 	.word	0x58024400
 8005128:	03d09000 	.word	0x03d09000
 800512c:	003d0900 	.word	0x003d0900
 8005130:	017d7840 	.word	0x017d7840
 8005134:	46000000 	.word	0x46000000
 8005138:	4c742400 	.word	0x4c742400
 800513c:	4a742400 	.word	0x4a742400
 8005140:	4bbebc20 	.word	0x4bbebc20

08005144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800514a:	f7ff fe81 	bl	8004e50 <HAL_RCC_GetSysClockFreq>
 800514e:	4602      	mov	r2, r0
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <HAL_RCC_GetHCLKFreq+0x50>)
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	490f      	ldr	r1, [pc, #60]	; (8005198 <HAL_RCC_GetHCLKFreq+0x54>)
 800515c:	5ccb      	ldrb	r3, [r1, r3]
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	fa22 f303 	lsr.w	r3, r2, r3
 8005166:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005168:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <HAL_RCC_GetHCLKFreq+0x50>)
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	4a09      	ldr	r2, [pc, #36]	; (8005198 <HAL_RCC_GetHCLKFreq+0x54>)
 8005172:	5cd3      	ldrb	r3, [r2, r3]
 8005174:	f003 031f 	and.w	r3, r3, #31
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	fa22 f303 	lsr.w	r3, r2, r3
 800517e:	4a07      	ldr	r2, [pc, #28]	; (800519c <HAL_RCC_GetHCLKFreq+0x58>)
 8005180:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005182:	4a07      	ldr	r2, [pc, #28]	; (80051a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <HAL_RCC_GetHCLKFreq+0x58>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	58024400 	.word	0x58024400
 8005198:	08009e78 	.word	0x08009e78
 800519c:	24000004 	.word	0x24000004
 80051a0:	24000000 	.word	0x24000000

080051a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051a8:	f7ff ffcc 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4904      	ldr	r1, [pc, #16]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	58024400 	.word	0x58024400
 80051cc:	08009e78 	.word	0x08009e78

080051d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80051d4:	f7ff ffb6 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4904      	ldr	r1, [pc, #16]	; (80051f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	58024400 	.word	0x58024400
 80051f8:	08009e78 	.word	0x08009e78

080051fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005200:	b0c6      	sub	sp, #280	; 0x118
 8005202:	af00      	add	r7, sp, #0
 8005204:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800520e:	2300      	movs	r3, #0
 8005210:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005220:	2500      	movs	r5, #0
 8005222:	ea54 0305 	orrs.w	r3, r4, r5
 8005226:	d049      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800522c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800522e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005232:	d02f      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005234:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005238:	d828      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800523a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800523e:	d01a      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005244:	d822      	bhi.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800524a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524e:	d007      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005250:	e01c      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005252:	4bab      	ldr	r3, [pc, #684]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005256:	4aaa      	ldr	r2, [pc, #680]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800525c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800525e:	e01a      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005264:	3308      	adds	r3, #8
 8005266:	2102      	movs	r1, #2
 8005268:	4618      	mov	r0, r3
 800526a:	f002 fa49 	bl	8007700 <RCCEx_PLL2_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005274:	e00f      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527a:	3328      	adds	r3, #40	; 0x28
 800527c:	2102      	movs	r1, #2
 800527e:	4618      	mov	r0, r3
 8005280:	f002 faf0 	bl	8007864 <RCCEx_PLL3_Config>
 8005284:	4603      	mov	r3, r0
 8005286:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800528a:	e004      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005296:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800529e:	4b98      	ldr	r3, [pc, #608]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80052a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ac:	4a94      	ldr	r2, [pc, #592]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052ae:	430b      	orrs	r3, r1
 80052b0:	6513      	str	r3, [r2, #80]	; 0x50
 80052b2:	e003      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80052b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80052bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80052c8:	f04f 0900 	mov.w	r9, #0
 80052cc:	ea58 0309 	orrs.w	r3, r8, r9
 80052d0:	d047      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d82a      	bhi.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	080052f9 	.word	0x080052f9
 80052e8:	08005307 	.word	0x08005307
 80052ec:	0800531d 	.word	0x0800531d
 80052f0:	0800533b 	.word	0x0800533b
 80052f4:	0800533b 	.word	0x0800533b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052f8:	4b81      	ldr	r3, [pc, #516]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	4a80      	ldr	r2, [pc, #512]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005304:	e01a      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530a:	3308      	adds	r3, #8
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f002 f9f6 	bl	8007700 <RCCEx_PLL2_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800531a:	e00f      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005320:	3328      	adds	r3, #40	; 0x28
 8005322:	2100      	movs	r1, #0
 8005324:	4618      	mov	r0, r3
 8005326:	f002 fa9d 	bl	8007864 <RCCEx_PLL3_Config>
 800532a:	4603      	mov	r3, r0
 800532c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005330:	e004      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005338:	e000      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800533a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800533c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005344:	4b6e      	ldr	r3, [pc, #440]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005348:	f023 0107 	bic.w	r1, r3, #7
 800534c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005352:	4a6b      	ldr	r2, [pc, #428]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005354:	430b      	orrs	r3, r1
 8005356:	6513      	str	r3, [r2, #80]	; 0x50
 8005358:	e003      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800535e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800536e:	f04f 0b00 	mov.w	fp, #0
 8005372:	ea5a 030b 	orrs.w	r3, sl, fp
 8005376:	d05b      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005380:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005384:	d03b      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005386:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800538a:	d834      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800538c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005390:	d037      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005396:	d82e      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005398:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800539c:	d033      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800539e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053a2:	d828      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053a8:	d01a      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80053aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ae:	d822      	bhi.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80053b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053b8:	d007      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80053ba:	e01c      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053bc:	4b50      	ldr	r3, [pc, #320]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	4a4f      	ldr	r2, [pc, #316]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053c8:	e01e      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ce:	3308      	adds	r3, #8
 80053d0:	2100      	movs	r1, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f002 f994 	bl	8007700 <RCCEx_PLL2_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053de:	e013      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053e4:	3328      	adds	r3, #40	; 0x28
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f002 fa3b 	bl	8007864 <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053f4:	e008      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80053fc:	e004      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80053fe:	bf00      	nop
 8005400:	e002      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005402:	bf00      	nop
 8005404:	e000      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005408:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10b      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005410:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005414:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005420:	4a37      	ldr	r2, [pc, #220]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005422:	430b      	orrs	r3, r1
 8005424:	6593      	str	r3, [r2, #88]	; 0x58
 8005426:	e003      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005428:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800542c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800543c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005440:	2300      	movs	r3, #0
 8005442:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005446:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800544a:	460b      	mov	r3, r1
 800544c:	4313      	orrs	r3, r2
 800544e:	d05d      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005458:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800545c:	d03b      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800545e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005462:	d834      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005464:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005468:	d037      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800546a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800546e:	d82e      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005470:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005474:	d033      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005476:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800547a:	d828      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800547c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005480:	d01a      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005486:	d822      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800548c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005490:	d007      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005492:	e01c      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005494:	4b1a      	ldr	r3, [pc, #104]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	4a19      	ldr	r2, [pc, #100]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800549a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054a0:	e01e      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a6:	3308      	adds	r3, #8
 80054a8:	2100      	movs	r1, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f002 f928 	bl	8007700 <RCCEx_PLL2_Config>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054b6:	e013      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054bc:	3328      	adds	r3, #40	; 0x28
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f002 f9cf 	bl	8007864 <RCCEx_PLL3_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054cc:	e008      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80054d4:	e004      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054d6:	bf00      	nop
 80054d8:	e002      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054da:	bf00      	nop
 80054dc:	e000      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80054de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10d      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80054f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054f8:	4a01      	ldr	r2, [pc, #4]	; (8005500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054fa:	430b      	orrs	r3, r1
 80054fc:	6593      	str	r3, [r2, #88]	; 0x58
 80054fe:	e005      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005504:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005508:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005518:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800551c:	2300      	movs	r3, #0
 800551e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005522:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005526:	460b      	mov	r3, r1
 8005528:	4313      	orrs	r3, r2
 800552a:	d03a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800552c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005532:	2b30      	cmp	r3, #48	; 0x30
 8005534:	d01f      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005536:	2b30      	cmp	r3, #48	; 0x30
 8005538:	d819      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800553a:	2b20      	cmp	r3, #32
 800553c:	d00c      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800553e:	2b20      	cmp	r3, #32
 8005540:	d815      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d019      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005546:	2b10      	cmp	r3, #16
 8005548:	d111      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554a:	4baa      	ldr	r3, [pc, #680]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	4aa9      	ldr	r2, [pc, #676]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005556:	e011      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555c:	3308      	adds	r3, #8
 800555e:	2102      	movs	r1, #2
 8005560:	4618      	mov	r0, r3
 8005562:	f002 f8cd 	bl	8007700 <RCCEx_PLL2_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800556c:	e006      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005574:	e002      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005576:	bf00      	nop
 8005578:	e000      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800557a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800557c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005584:	4b9b      	ldr	r3, [pc, #620]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800558c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005592:	4a98      	ldr	r2, [pc, #608]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005594:	430b      	orrs	r3, r1
 8005596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005598:	e003      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800559e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80055ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055b2:	2300      	movs	r3, #0
 80055b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80055bc:	460b      	mov	r3, r1
 80055be:	4313      	orrs	r3, r2
 80055c0:	d051      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80055c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055cc:	d035      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80055ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d2:	d82e      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80055d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055d8:	d031      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80055da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055de:	d828      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80055e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e4:	d01a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80055e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ea:	d822      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f4:	d007      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80055f6:	e01c      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f8:	4b7e      	ldr	r3, [pc, #504]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	4a7d      	ldr	r2, [pc, #500]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80055fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005604:	e01c      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560a:	3308      	adds	r3, #8
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f002 f876 	bl	8007700 <RCCEx_PLL2_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800561a:	e011      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005620:	3328      	adds	r3, #40	; 0x28
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f002 f91d 	bl	8007864 <RCCEx_PLL3_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800563e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005640:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005648:	4b6a      	ldr	r3, [pc, #424]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005656:	4a67      	ldr	r2, [pc, #412]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005658:	430b      	orrs	r3, r1
 800565a:	6513      	str	r3, [r2, #80]	; 0x50
 800565c:	e003      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005662:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005672:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800567c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005680:	460b      	mov	r3, r1
 8005682:	4313      	orrs	r3, r2
 8005684:	d053      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800568a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005690:	d033      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005696:	d82c      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800569c:	d02f      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800569e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056a2:	d826      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056a8:	d02b      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80056aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056ae:	d820      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b4:	d012      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80056b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ba:	d81a      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d022      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d115      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ca:	3308      	adds	r3, #8
 80056cc:	2101      	movs	r1, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f002 f816 	bl	8007700 <RCCEx_PLL2_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056da:	e015      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e0:	3328      	adds	r3, #40	; 0x28
 80056e2:	2101      	movs	r1, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f002 f8bd 	bl	8007864 <RCCEx_PLL3_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056f0:	e00a      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80056fa:	bf00      	nop
 80056fc:	e004      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005708:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005710:	4b38      	ldr	r3, [pc, #224]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571e:	4a35      	ldr	r2, [pc, #212]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005720:	430b      	orrs	r3, r1
 8005722:	6513      	str	r3, [r2, #80]	; 0x50
 8005724:	e003      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005726:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800572a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800572e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800573a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800573e:	2300      	movs	r3, #0
 8005740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005744:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005748:	460b      	mov	r3, r1
 800574a:	4313      	orrs	r3, r2
 800574c:	d058      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800575a:	d033      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800575c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005760:	d82c      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005766:	d02f      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576c:	d826      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800576e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005772:	d02b      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005778:	d820      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800577a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800577e:	d012      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005784:	d81a      	bhi.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d022      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800578a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800578e:	d115      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005794:	3308      	adds	r3, #8
 8005796:	2101      	movs	r1, #1
 8005798:	4618      	mov	r0, r3
 800579a:	f001 ffb1 	bl	8007700 <RCCEx_PLL2_Config>
 800579e:	4603      	mov	r3, r0
 80057a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057a4:	e015      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057aa:	3328      	adds	r3, #40	; 0x28
 80057ac:	2101      	movs	r1, #1
 80057ae:	4618      	mov	r0, r3
 80057b0:	f002 f858 	bl	8007864 <RCCEx_PLL3_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057ba:	e00a      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80057c2:	e006      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057c4:	bf00      	nop
 80057c6:	e004      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057c8:	bf00      	nop
 80057ca:	e002      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057cc:	bf00      	nop
 80057ce:	e000      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80057d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10e      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057ea:	4a02      	ldr	r2, [pc, #8]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6593      	str	r3, [r2, #88]	; 0x58
 80057f0:	e006      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80057f2:	bf00      	nop
 80057f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800580c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005816:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800581a:	460b      	mov	r3, r1
 800581c:	4313      	orrs	r3, r2
 800581e:	d037      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800582a:	d00e      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800582c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005830:	d816      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d018      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800583a:	d111      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583c:	4bc4      	ldr	r3, [pc, #784]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	4ac3      	ldr	r2, [pc, #780]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005848:	e00f      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584e:	3308      	adds	r3, #8
 8005850:	2101      	movs	r1, #1
 8005852:	4618      	mov	r0, r3
 8005854:	f001 ff54 	bl	8007700 <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800585e:	e004      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10a      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005872:	4bb7      	ldr	r3, [pc, #732]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800587e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005880:	4ab3      	ldr	r2, [pc, #716]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005882:	430b      	orrs	r3, r1
 8005884:	6513      	str	r3, [r2, #80]	; 0x50
 8005886:	e003      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005888:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800588c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800589c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80058aa:	460b      	mov	r3, r1
 80058ac:	4313      	orrs	r3, r2
 80058ae:	d039      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d81c      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80058ba:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058fd 	.word	0x080058fd
 80058c4:	080058d1 	.word	0x080058d1
 80058c8:	080058df 	.word	0x080058df
 80058cc:	080058fd 	.word	0x080058fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d0:	4b9f      	ldr	r3, [pc, #636]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4a9e      	ldr	r2, [pc, #632]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80058d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058dc:	e00f      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e2:	3308      	adds	r3, #8
 80058e4:	2102      	movs	r1, #2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 ff0a 	bl	8007700 <RCCEx_PLL2_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058f2:	e004      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80058fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005906:	4b92      	ldr	r3, [pc, #584]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	f023 0103 	bic.w	r1, r3, #3
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005914:	4a8e      	ldr	r2, [pc, #568]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005916:	430b      	orrs	r3, r1
 8005918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800591a:	e003      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005920:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005930:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005934:	2300      	movs	r3, #0
 8005936:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800593a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800593e:	460b      	mov	r3, r1
 8005940:	4313      	orrs	r3, r2
 8005942:	f000 8099 	beq.w	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005946:	4b83      	ldr	r3, [pc, #524]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a82      	ldr	r2, [pc, #520]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800594c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005952:	f7fc fb2d 	bl	8001fb0 <HAL_GetTick>
 8005956:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800595a:	e00b      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595c:	f7fc fb28 	bl	8001fb0 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b64      	cmp	r3, #100	; 0x64
 800596a:	d903      	bls.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005972:	e005      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005974:	4b77      	ldr	r3, [pc, #476]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ed      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005980:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005984:	2b00      	cmp	r3, #0
 8005986:	d173      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005988:	4b71      	ldr	r3, [pc, #452]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800598a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800598c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005994:	4053      	eors	r3, r2
 8005996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599a:	2b00      	cmp	r3, #0
 800599c:	d015      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800599e:	4b6c      	ldr	r3, [pc, #432]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059aa:	4b69      	ldr	r3, [pc, #420]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	4a68      	ldr	r2, [pc, #416]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059b6:	4b66      	ldr	r3, [pc, #408]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	4a65      	ldr	r2, [pc, #404]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059c2:	4a63      	ldr	r2, [pc, #396]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80059c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	d118      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fc faea 	bl	8001fb0 <HAL_GetTick>
 80059dc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059e0:	e00d      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e2:	f7fc fae5 	bl	8001fb0 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80059ec:	1ad2      	subs	r2, r2, r3
 80059ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d903      	bls.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80059fc:	e005      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059fe:	4b54      	ldr	r3, [pc, #336]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0eb      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d129      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a22:	d10e      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005a24:	4b4a      	ldr	r3, [pc, #296]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a34:	091a      	lsrs	r2, r3, #4
 8005a36:	4b48      	ldr	r3, [pc, #288]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	4a45      	ldr	r2, [pc, #276]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	6113      	str	r3, [r2, #16]
 8005a40:	e005      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005a42:	4b43      	ldr	r3, [pc, #268]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	4a42      	ldr	r2, [pc, #264]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a4c:	6113      	str	r3, [r2, #16]
 8005a4e:	4b40      	ldr	r3, [pc, #256]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a50:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5e:	4a3c      	ldr	r2, [pc, #240]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6713      	str	r3, [r2, #112]	; 0x70
 8005a64:	e008      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a6a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8005a6e:	e003      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f002 0301 	and.w	r3, r2, #1
 8005a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005a92:	460b      	mov	r3, r1
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f000 808f 	beq.w	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa0:	2b28      	cmp	r3, #40	; 0x28
 8005aa2:	d871      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005b91 	.word	0x08005b91
 8005ab0:	08005b89 	.word	0x08005b89
 8005ab4:	08005b89 	.word	0x08005b89
 8005ab8:	08005b89 	.word	0x08005b89
 8005abc:	08005b89 	.word	0x08005b89
 8005ac0:	08005b89 	.word	0x08005b89
 8005ac4:	08005b89 	.word	0x08005b89
 8005ac8:	08005b89 	.word	0x08005b89
 8005acc:	08005b5d 	.word	0x08005b5d
 8005ad0:	08005b89 	.word	0x08005b89
 8005ad4:	08005b89 	.word	0x08005b89
 8005ad8:	08005b89 	.word	0x08005b89
 8005adc:	08005b89 	.word	0x08005b89
 8005ae0:	08005b89 	.word	0x08005b89
 8005ae4:	08005b89 	.word	0x08005b89
 8005ae8:	08005b89 	.word	0x08005b89
 8005aec:	08005b73 	.word	0x08005b73
 8005af0:	08005b89 	.word	0x08005b89
 8005af4:	08005b89 	.word	0x08005b89
 8005af8:	08005b89 	.word	0x08005b89
 8005afc:	08005b89 	.word	0x08005b89
 8005b00:	08005b89 	.word	0x08005b89
 8005b04:	08005b89 	.word	0x08005b89
 8005b08:	08005b89 	.word	0x08005b89
 8005b0c:	08005b91 	.word	0x08005b91
 8005b10:	08005b89 	.word	0x08005b89
 8005b14:	08005b89 	.word	0x08005b89
 8005b18:	08005b89 	.word	0x08005b89
 8005b1c:	08005b89 	.word	0x08005b89
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b89 	.word	0x08005b89
 8005b28:	08005b89 	.word	0x08005b89
 8005b2c:	08005b91 	.word	0x08005b91
 8005b30:	08005b89 	.word	0x08005b89
 8005b34:	08005b89 	.word	0x08005b89
 8005b38:	08005b89 	.word	0x08005b89
 8005b3c:	08005b89 	.word	0x08005b89
 8005b40:	08005b89 	.word	0x08005b89
 8005b44:	08005b89 	.word	0x08005b89
 8005b48:	08005b89 	.word	0x08005b89
 8005b4c:	08005b91 	.word	0x08005b91
 8005b50:	58024400 	.word	0x58024400
 8005b54:	58024800 	.word	0x58024800
 8005b58:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b60:	3308      	adds	r3, #8
 8005b62:	2101      	movs	r1, #1
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 fdcb 	bl	8007700 <RCCEx_PLL2_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b70:	e00f      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b76:	3328      	adds	r3, #40	; 0x28
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 fe72 	bl	8007864 <RCCEx_PLL3_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b86:	e004      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b8e:	e000      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b9a:	4bbf      	ldr	r3, [pc, #764]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ba8:	4abb      	ldr	r2, [pc, #748]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005baa:	430b      	orrs	r3, r1
 8005bac:	6553      	str	r3, [r2, #84]	; 0x54
 8005bae:	e003      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005bb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f002 0302 	and.w	r3, r2, #2
 8005bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	d041      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d824      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c35 	.word	0x08005c35
 8005bec:	08005c01 	.word	0x08005c01
 8005bf0:	08005c17 	.word	0x08005c17
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c35 	.word	0x08005c35
 8005bfc:	08005c35 	.word	0x08005c35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c04:	3308      	adds	r3, #8
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fd79 	bl	8007700 <RCCEx_PLL2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c14:	e00f      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c1a:	3328      	adds	r3, #40	; 0x28
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 fe20 	bl	8007864 <RCCEx_PLL3_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c3e:	4b96      	ldr	r3, [pc, #600]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f023 0107 	bic.w	r1, r3, #7
 8005c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c4c:	4a92      	ldr	r2, [pc, #584]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	6553      	str	r3, [r2, #84]	; 0x54
 8005c52:	e003      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f002 0304 	and.w	r3, r2, #4
 8005c68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c72:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c76:	460b      	mov	r3, r1
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	d044      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c84:	2b05      	cmp	r3, #5
 8005c86:	d825      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005c88:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8e:	bf00      	nop
 8005c90:	08005cdd 	.word	0x08005cdd
 8005c94:	08005ca9 	.word	0x08005ca9
 8005c98:	08005cbf 	.word	0x08005cbf
 8005c9c:	08005cdd 	.word	0x08005cdd
 8005ca0:	08005cdd 	.word	0x08005cdd
 8005ca4:	08005cdd 	.word	0x08005cdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cac:	3308      	adds	r3, #8
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 fd25 	bl	8007700 <RCCEx_PLL2_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cbc:	e00f      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc2:	3328      	adds	r3, #40	; 0x28
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 fdcc 	bl	8007864 <RCCEx_PLL3_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cd2:	e004      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cda:	e000      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ce6:	4b6c      	ldr	r3, [pc, #432]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cea:	f023 0107 	bic.w	r1, r3, #7
 8005cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	4a68      	ldr	r2, [pc, #416]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8005cfc:	e003      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f002 0320 	and.w	r3, r2, #32
 8005d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4313      	orrs	r3, r2
 8005d24:	d055      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d32:	d033      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d38:	d82c      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3e:	d02f      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d44:	d826      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d4a:	d02b      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005d4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d50:	d820      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d56:	d012      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d5c:	d81a      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d022      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d66:	d115      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 fcc5 	bl	8007700 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d7c:	e015      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d82:	3328      	adds	r3, #40	; 0x28
 8005d84:	2102      	movs	r1, #2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fd6c 	bl	8007864 <RCCEx_PLL3_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d92:	e00a      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d9a:	e006      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e004      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005da0:	bf00      	nop
 8005da2:	e002      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005da4:	bf00      	nop
 8005da6:	e000      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005daa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005db2:	4b39      	ldr	r3, [pc, #228]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc2:	4a35      	ldr	r2, [pc, #212]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6553      	str	r3, [r2, #84]	; 0x54
 8005dc8:	e003      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005dce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005dde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005de8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005dec:	460b      	mov	r3, r1
 8005dee:	4313      	orrs	r3, r2
 8005df0:	d058      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005dfe:	d033      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005e00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e04:	d82c      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0a:	d02f      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e10:	d826      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e16:	d02b      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e1c:	d820      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e22:	d012      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e28:	d81a      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d022      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e32:	d115      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e38:	3308      	adds	r3, #8
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 fc5f 	bl	8007700 <RCCEx_PLL2_Config>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e48:	e015      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e4e:	3328      	adds	r3, #40	; 0x28
 8005e50:	2102      	movs	r1, #2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 fd06 	bl	8007864 <RCCEx_PLL3_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e66:	e006      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e004      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e6c:	bf00      	nop
 8005e6e:	e002      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10e      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e8e:	4a02      	ldr	r2, [pc, #8]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6593      	str	r3, [r2, #88]	; 0x58
 8005e94:	e006      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005e96:	bf00      	nop
 8005e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ea0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005eb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005eba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	d055      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ecc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ed0:	d033      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005ed2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ed6:	d82c      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005edc:	d02f      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee2:	d826      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ee4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ee8:	d02b      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8005eea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005eee:	d820      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef4:	d012      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005efa:	d81a      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d022      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f04:	d115      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fbf6 	bl	8007700 <RCCEx_PLL2_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f1a:	e015      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f20:	3328      	adds	r3, #40	; 0x28
 8005f22:	2102      	movs	r1, #2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 fc9d 	bl	8007864 <RCCEx_PLL3_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f30:	e00a      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e004      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e002      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f50:	4ba0      	ldr	r3, [pc, #640]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f54:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f60:	4a9c      	ldr	r2, [pc, #624]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6593      	str	r3, [r2, #88]	; 0x58
 8005f66:	e003      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f002 0308 	and.w	r3, r2, #8
 8005f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f86:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d01e      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa2:	3328      	adds	r3, #40	; 0x28
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 fc5c 	bl	8007864 <RCCEx_PLL3_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8005fb8:	4b86      	ldr	r3, [pc, #536]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fc8:	4a82      	ldr	r2, [pc, #520]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f002 0310 	and.w	r3, r2, #16
 8005fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fe4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	d01e      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffa:	d10c      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006000:	3328      	adds	r3, #40	; 0x28
 8006002:	2102      	movs	r1, #2
 8006004:	4618      	mov	r0, r3
 8006006:	f001 fc2d 	bl	8007864 <RCCEx_PLL3_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006016:	4b6f      	ldr	r3, [pc, #444]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800601e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006026:	4a6b      	ldr	r2, [pc, #428]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006028:	430b      	orrs	r3, r1
 800602a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800602c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006038:	67bb      	str	r3, [r7, #120]	; 0x78
 800603a:	2300      	movs	r3, #0
 800603c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800603e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006042:	460b      	mov	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	d03e      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800604c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006054:	d022      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800605a:	d81b      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006064:	d00b      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006066:	e015      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606c:	3308      	adds	r3, #8
 800606e:	2100      	movs	r1, #0
 8006070:	4618      	mov	r0, r3
 8006072:	f001 fb45 	bl	8007700 <RCCEx_PLL2_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800607c:	e00f      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800607e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006082:	3328      	adds	r3, #40	; 0x28
 8006084:	2102      	movs	r1, #2
 8006086:	4618      	mov	r0, r3
 8006088:	f001 fbec 	bl	8007864 <RCCEx_PLL3_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800609c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060a6:	4b4b      	ldr	r3, [pc, #300]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80060ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060b6:	4a47      	ldr	r2, [pc, #284]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6593      	str	r3, [r2, #88]	; 0x58
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80060d2:	673b      	str	r3, [r7, #112]	; 0x70
 80060d4:	2300      	movs	r3, #0
 80060d6:	677b      	str	r3, [r7, #116]	; 0x74
 80060d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80060dc:	460b      	mov	r3, r1
 80060de:	4313      	orrs	r3, r2
 80060e0:	d03b      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80060e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060ee:	d01f      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80060f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060f4:	d818      	bhi.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80060f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060fa:	d003      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80060fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006100:	d007      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006102:	e011      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006104:	4b33      	ldr	r3, [pc, #204]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	4a32      	ldr	r2, [pc, #200]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800610a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800610e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006110:	e00f      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006116:	3328      	adds	r3, #40	; 0x28
 8006118:	2101      	movs	r1, #1
 800611a:	4618      	mov	r0, r3
 800611c:	f001 fba2 	bl	8007864 <RCCEx_PLL3_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006126:	e004      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800612e:	e000      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006132:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10b      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800613a:	4b26      	ldr	r3, [pc, #152]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800613c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800614a:	4a22      	ldr	r2, [pc, #136]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800614c:	430b      	orrs	r3, r1
 800614e:	6553      	str	r3, [r2, #84]	; 0x54
 8006150:	e003      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006152:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006156:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800615a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006166:	66bb      	str	r3, [r7, #104]	; 0x68
 8006168:	2300      	movs	r3, #0
 800616a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800616c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006170:	460b      	mov	r3, r1
 8006172:	4313      	orrs	r3, r2
 8006174:	d034      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006184:	d007      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006186:	e011      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006188:	4b12      	ldr	r3, [pc, #72]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618c:	4a11      	ldr	r2, [pc, #68]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800618e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006192:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006194:	e00e      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619a:	3308      	adds	r3, #8
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 faae 	bl	8007700 <RCCEx_PLL2_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061aa:	e003      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10d      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ca:	4a02      	ldr	r2, [pc, #8]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80061cc:	430b      	orrs	r3, r1
 80061ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061d0:	e006      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80061d2:	bf00      	nop
 80061d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80061dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80061ec:	663b      	str	r3, [r7, #96]	; 0x60
 80061ee:	2300      	movs	r3, #0
 80061f0:	667b      	str	r3, [r7, #100]	; 0x64
 80061f2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80061f6:	460b      	mov	r3, r1
 80061f8:	4313      	orrs	r3, r2
 80061fa:	d00c      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006200:	3328      	adds	r3, #40	; 0x28
 8006202:	2102      	movs	r1, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f001 fb2d 	bl	8007864 <RCCEx_PLL3_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006222:	65bb      	str	r3, [r7, #88]	; 0x58
 8006224:	2300      	movs	r3, #0
 8006226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006228:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800622c:	460b      	mov	r3, r1
 800622e:	4313      	orrs	r3, r2
 8006230:	d036      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006232:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800623c:	d018      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800623e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006242:	d811      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006248:	d014      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800624a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624e:	d80b      	bhi.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d011      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006258:	d106      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625a:	4bb7      	ldr	r3, [pc, #732]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	4ab6      	ldr	r2, [pc, #728]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006264:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006266:	e008      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800626e:	e004      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006270:	bf00      	nop
 8006272:	e002      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800627a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006282:	4bad      	ldr	r3, [pc, #692]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800628e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006290:	4aa9      	ldr	r2, [pc, #676]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006292:	430b      	orrs	r3, r1
 8006294:	6553      	str	r3, [r2, #84]	; 0x54
 8006296:	e003      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006298:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800629c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80062ac:	653b      	str	r3, [r7, #80]	; 0x50
 80062ae:	2300      	movs	r3, #0
 80062b0:	657b      	str	r3, [r7, #84]	; 0x54
 80062b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80062b6:	460b      	mov	r3, r1
 80062b8:	4313      	orrs	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062bc:	4b9e      	ldr	r3, [pc, #632]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ca:	4a9b      	ldr	r2, [pc, #620]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80062dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80062de:	2300      	movs	r3, #0
 80062e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80062e6:	460b      	mov	r3, r1
 80062e8:	4313      	orrs	r3, r2
 80062ea:	d009      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062ec:	4b92      	ldr	r3, [pc, #584]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062fa:	4a8f      	ldr	r2, [pc, #572]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800630c:	643b      	str	r3, [r7, #64]	; 0x40
 800630e:	2300      	movs	r3, #0
 8006310:	647b      	str	r3, [r7, #68]	; 0x44
 8006312:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006316:	460b      	mov	r3, r1
 8006318:	4313      	orrs	r3, r2
 800631a:	d00e      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800631c:	4b86      	ldr	r3, [pc, #536]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	4a85      	ldr	r2, [pc, #532]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006322:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006326:	6113      	str	r3, [r2, #16]
 8006328:	4b83      	ldr	r3, [pc, #524]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800632a:	6919      	ldr	r1, [r3, #16]
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006334:	4a80      	ldr	r2, [pc, #512]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006336:	430b      	orrs	r3, r1
 8006338:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800633a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006346:	63bb      	str	r3, [r7, #56]	; 0x38
 8006348:	2300      	movs	r3, #0
 800634a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800634c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006350:	460b      	mov	r3, r1
 8006352:	4313      	orrs	r3, r2
 8006354:	d009      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006356:	4b78      	ldr	r3, [pc, #480]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800635e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	4a74      	ldr	r2, [pc, #464]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006366:	430b      	orrs	r3, r1
 8006368:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800636a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006376:	633b      	str	r3, [r7, #48]	; 0x30
 8006378:	2300      	movs	r3, #0
 800637a:	637b      	str	r3, [r7, #52]	; 0x34
 800637c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006380:	460b      	mov	r3, r1
 8006382:	4313      	orrs	r3, r2
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006386:	4b6c      	ldr	r3, [pc, #432]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800638e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006396:	4a68      	ldr	r2, [pc, #416]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006398:	430b      	orrs	r3, r1
 800639a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800639c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a4:	2100      	movs	r1, #0
 80063a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80063b2:	460b      	mov	r3, r1
 80063b4:	4313      	orrs	r3, r2
 80063b6:	d011      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063bc:	3308      	adds	r3, #8
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 f99d 	bl	8007700 <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80063cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80063dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	2100      	movs	r1, #0
 80063e6:	6239      	str	r1, [r7, #32]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
 80063ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80063f2:	460b      	mov	r3, r1
 80063f4:	4313      	orrs	r3, r2
 80063f6:	d011      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fc:	3308      	adds	r3, #8
 80063fe:	2101      	movs	r1, #1
 8006400:	4618      	mov	r0, r3
 8006402:	f001 f97d 	bl	8007700 <RCCEx_PLL2_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800640c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006418:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	2100      	movs	r1, #0
 8006426:	61b9      	str	r1, [r7, #24]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006432:	460b      	mov	r3, r1
 8006434:	4313      	orrs	r3, r2
 8006436:	d011      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800643c:	3308      	adds	r3, #8
 800643e:	2102      	movs	r1, #2
 8006440:	4618      	mov	r0, r3
 8006442:	f001 f95d 	bl	8007700 <RCCEx_PLL2_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800644c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006458:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	2100      	movs	r1, #0
 8006466:	6139      	str	r1, [r7, #16]
 8006468:	f003 0308 	and.w	r3, r3, #8
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006472:	460b      	mov	r3, r1
 8006474:	4313      	orrs	r3, r2
 8006476:	d011      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800647c:	3328      	adds	r3, #40	; 0x28
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f001 f9ef 	bl	8007864 <RCCEx_PLL3_Config>
 8006486:	4603      	mov	r3, r0
 8006488:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800648c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006498:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	2100      	movs	r1, #0
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064b2:	460b      	mov	r3, r1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	d011      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064bc:	3328      	adds	r3, #40	; 0x28
 80064be:	2101      	movs	r1, #1
 80064c0:	4618      	mov	r0, r3
 80064c2:	f001 f9cf 	bl	8007864 <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80064cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d003      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80064dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	2100      	movs	r1, #0
 80064e6:	6039      	str	r1, [r7, #0]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d011      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fc:	3328      	adds	r3, #40	; 0x28
 80064fe:	2102      	movs	r1, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f001 f9af 	bl	8007864 <RCCEx_PLL3_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800650c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006514:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800651c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e000      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
}
 800652a:	4618      	mov	r0, r3
 800652c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006530:	46bd      	mov	sp, r7
 8006532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006536:	bf00      	nop
 8006538:	58024400 	.word	0x58024400

0800653c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b090      	sub	sp, #64	; 0x40
 8006540:	af00      	add	r7, sp, #0
 8006542:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800654a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800654e:	430b      	orrs	r3, r1
 8006550:	f040 8094 	bne.w	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006554:	4b9b      	ldr	r3, [pc, #620]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	2b04      	cmp	r3, #4
 8006562:	f200 8087 	bhi.w	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	08006581 	.word	0x08006581
 8006570:	080065a9 	.word	0x080065a9
 8006574:	080065d1 	.word	0x080065d1
 8006578:	0800666d 	.word	0x0800666d
 800657c:	080065f9 	.word	0x080065f9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006580:	4b90      	ldr	r3, [pc, #576]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006588:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800658c:	d108      	bne.n	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800658e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006592:	4618      	mov	r0, r3
 8006594:	f000 ff62 	bl	800745c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800659c:	f000 bc93 	b.w	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065a4:	f000 bc8f 	b.w	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065a8:	4b86      	ldr	r3, [pc, #536]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065b4:	d108      	bne.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065b6:	f107 0318 	add.w	r3, r7, #24
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fca6 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065c4:	f000 bc7f 	b.w	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065cc:	f000 bc7b 	b.w	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065d0:	4b7c      	ldr	r3, [pc, #496]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065dc:	d108      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065de:	f107 030c 	add.w	r3, r7, #12
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fde6 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065ec:	f000 bc6b 	b.w	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f4:	f000 bc67 	b.w	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80065f8:	4b72      	ldr	r3, [pc, #456]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80065fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006600:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006602:	4b70      	ldr	r3, [pc, #448]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b04      	cmp	r3, #4
 800660c:	d10c      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800660e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006610:	2b00      	cmp	r3, #0
 8006612:	d109      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006614:	4b6b      	ldr	r3, [pc, #428]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	08db      	lsrs	r3, r3, #3
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	4a6a      	ldr	r2, [pc, #424]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006620:	fa22 f303 	lsr.w	r3, r2, r3
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006626:	e01f      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006628:	4b66      	ldr	r3, [pc, #408]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006634:	d106      	bne.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800663c:	d102      	bne.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800663e:	4b63      	ldr	r3, [pc, #396]	; (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006642:	e011      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006644:	4b5f      	ldr	r3, [pc, #380]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800664c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006650:	d106      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006658:	d102      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800665a:	4b5d      	ldr	r3, [pc, #372]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800665e:	e003      	b.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006660:	2300      	movs	r3, #0
 8006662:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006664:	f000 bc2f 	b.w	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006668:	f000 bc2d 	b.w	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800666c:	4b59      	ldr	r3, [pc, #356]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800666e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006670:	f000 bc29 	b.w	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006678:	f000 bc25 	b.w	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800667c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006680:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006684:	430b      	orrs	r3, r1
 8006686:	f040 80a7 	bne.w	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800668a:	4b4e      	ldr	r3, [pc, #312]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800668c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006692:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800669a:	d054      	beq.n	8006746 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066a2:	f200 808b 	bhi.w	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066ac:	f000 8083 	beq.w	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066b6:	f200 8081 	bhi.w	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c0:	d02f      	beq.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c8:	d878      	bhi.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d004      	beq.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d6:	d012      	beq.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80066d8:	e070      	b.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066da:	4b3a      	ldr	r3, [pc, #232]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066e6:	d107      	bne.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 feb5 	bl	800745c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066f6:	e3e6      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066fc:	e3e3      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066fe:	4b31      	ldr	r3, [pc, #196]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800670a:	d107      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800670c:	f107 0318 	add.w	r3, r7, #24
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fbfb 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800671a:	e3d4      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006720:	e3d1      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006722:	4b28      	ldr	r3, [pc, #160]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800672a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800672e:	d107      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006730:	f107 030c 	add.w	r3, r7, #12
 8006734:	4618      	mov	r0, r3
 8006736:	f000 fd3d 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800673e:	e3c2      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006744:	e3bf      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006746:	4b1f      	ldr	r3, [pc, #124]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800674e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006750:	4b1c      	ldr	r3, [pc, #112]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b04      	cmp	r3, #4
 800675a:	d10c      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800675c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006762:	4b18      	ldr	r3, [pc, #96]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	08db      	lsrs	r3, r3, #3
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800676e:	fa22 f303 	lsr.w	r3, r2, r3
 8006772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006774:	e01e      	b.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006776:	4b13      	ldr	r3, [pc, #76]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006782:	d106      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678a:	d102      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006790:	e010      	b.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800679e:	d106      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80067a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a6:	d102      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067a8:	4b09      	ldr	r3, [pc, #36]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ac:	e002      	b.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80067b2:	e388      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067b4:	e387      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067b6:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ba:	e384      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c0:	e381      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067c2:	bf00      	nop
 80067c4:	58024400 	.word	0x58024400
 80067c8:	03d09000 	.word	0x03d09000
 80067cc:	003d0900 	.word	0x003d0900
 80067d0:	017d7840 	.word	0x017d7840
 80067d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80067d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067dc:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80067e0:	430b      	orrs	r3, r1
 80067e2:	f040 809c 	bne.w	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80067e6:	4b9e      	ldr	r3, [pc, #632]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80067e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067f6:	d054      	beq.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067fe:	f200 808b 	bhi.w	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006808:	f000 8083 	beq.w	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006812:	f200 8081 	bhi.w	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800681c:	d02f      	beq.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006824:	d878      	bhi.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006832:	d012      	beq.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006834:	e070      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006836:	4b8a      	ldr	r3, [pc, #552]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006842:	d107      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fe07 	bl	800745c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006852:	e338      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006858:	e335      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800685a:	4b81      	ldr	r3, [pc, #516]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006862:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006866:	d107      	bne.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006868:	f107 0318 	add.w	r3, r7, #24
 800686c:	4618      	mov	r0, r3
 800686e:	f000 fb4d 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006876:	e326      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800687c:	e323      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800687e:	4b78      	ldr	r3, [pc, #480]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688a:	d107      	bne.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800688c:	f107 030c 	add.w	r3, r7, #12
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fc8f 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800689a:	e314      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068a0:	e311      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068a2:	4b6f      	ldr	r3, [pc, #444]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068aa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068ac:	4b6c      	ldr	r3, [pc, #432]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d10c      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d109      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068be:	4b68      	ldr	r3, [pc, #416]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	08db      	lsrs	r3, r3, #3
 80068c4:	f003 0303 	and.w	r3, r3, #3
 80068c8:	4a66      	ldr	r2, [pc, #408]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80068ca:	fa22 f303 	lsr.w	r3, r2, r3
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d0:	e01e      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068d2:	4b63      	ldr	r3, [pc, #396]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068de:	d106      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80068e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068e6:	d102      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80068e8:	4b5f      	ldr	r3, [pc, #380]	; (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80068ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068ec:	e010      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ee:	4b5c      	ldr	r3, [pc, #368]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068fa:	d106      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80068fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006902:	d102      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006904:	4b59      	ldr	r3, [pc, #356]	; (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006908:	e002      	b.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800690e:	e2da      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006910:	e2d9      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006912:	4b57      	ldr	r3, [pc, #348]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006916:	e2d6      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800691c:	e2d3      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800691e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006922:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006926:	430b      	orrs	r3, r1
 8006928:	f040 80a7 	bne.w	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800692c:	4b4c      	ldr	r3, [pc, #304]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800692e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006930:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006934:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800693c:	d055      	beq.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006944:	f200 8096 	bhi.w	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800694e:	f000 8084 	beq.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006958:	f200 808c 	bhi.w	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006962:	d030      	beq.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800696a:	f200 8083 	bhi.w	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800696e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697a:	d012      	beq.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800697c:	e07a      	b.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800697e:	4b38      	ldr	r3, [pc, #224]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800698a:	d107      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800698c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fd63 	bl	800745c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800699a:	e294      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a0:	e291      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069a2:	4b2f      	ldr	r3, [pc, #188]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ae:	d107      	bne.n	80069c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b0:	f107 0318 	add.w	r3, r7, #24
 80069b4:	4618      	mov	r0, r3
 80069b6:	f000 faa9 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069be:	e282      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069c4:	e27f      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069c6:	4b26      	ldr	r3, [pc, #152]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d2:	d107      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d4:	f107 030c 	add.w	r3, r7, #12
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fbeb 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069e2:	e270      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e8:	e26d      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069f4:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d10c      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a06:	4b16      	ldr	r3, [pc, #88]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	08db      	lsrs	r3, r3, #3
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	4a14      	ldr	r2, [pc, #80]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006a12:	fa22 f303 	lsr.w	r3, r2, r3
 8006a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a18:	e01e      	b.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a1a:	4b11      	ldr	r3, [pc, #68]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a26:	d106      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a2e:	d102      	bne.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a30:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a34:	e010      	b.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a36:	4b0a      	ldr	r3, [pc, #40]	; (8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a42:	d106      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8006a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a4a:	d102      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a4c:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a50:	e002      	b.n	8006a58 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a56:	e236      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a58:	e235      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a5a:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a5e:	e232      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a60:	58024400 	.word	0x58024400
 8006a64:	03d09000 	.word	0x03d09000
 8006a68:	003d0900 	.word	0x003d0900
 8006a6c:	017d7840 	.word	0x017d7840
 8006a70:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a78:	e225      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a7e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006a82:	430b      	orrs	r3, r1
 8006a84:	f040 8085 	bne.w	8006b92 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006a88:	4b9c      	ldr	r3, [pc, #624]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006a90:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a98:	d06b      	beq.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aa0:	d874      	bhi.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006aa8:	d056      	beq.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ab0:	d86c      	bhi.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ab8:	d03b      	beq.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ac0:	d864      	bhi.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac8:	d021      	beq.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ad0:	d85c      	bhi.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d004      	beq.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ade:	d004      	beq.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8006ae0:	e054      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006ae2:	f7fe fb5f 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8006ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ae8:	e1ed      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006aea:	4b84      	ldr	r3, [pc, #528]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006af6:	d107      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006af8:	f107 0318 	add.w	r3, r7, #24
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fa05 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b06:	e1de      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b0c:	e1db      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b0e:	4b7b      	ldr	r3, [pc, #492]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b1a:	d107      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b1c:	f107 030c 	add.w	r3, r7, #12
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 fb47 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b2a:	e1cc      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b30:	e1c9      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b32:	4b72      	ldr	r3, [pc, #456]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d109      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b3e:	4b6f      	ldr	r3, [pc, #444]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	08db      	lsrs	r3, r3, #3
 8006b44:	f003 0303 	and.w	r3, r3, #3
 8006b48:	4a6d      	ldr	r2, [pc, #436]	; (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b50:	e1b9      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b56:	e1b6      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006b58:	4b68      	ldr	r3, [pc, #416]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b64:	d102      	bne.n	8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8006b66:	4b67      	ldr	r3, [pc, #412]	; (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b6a:	e1ac      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b70:	e1a9      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b72:	4b62      	ldr	r3, [pc, #392]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b7e:	d102      	bne.n	8006b86 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8006b80:	4b61      	ldr	r3, [pc, #388]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b84:	e19f      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b86:	2300      	movs	r3, #0
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b8a:	e19c      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b90:	e199      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b96:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	d173      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006b9e:	4b57      	ldr	r3, [pc, #348]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ba6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bae:	d02f      	beq.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb6:	d863      	bhi.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d004      	beq.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc4:	d012      	beq.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8006bc6:	e05b      	b.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bc8:	4b4c      	ldr	r3, [pc, #304]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd4:	d107      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bd6:	f107 0318 	add.w	r3, r7, #24
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f996 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006be4:	e16f      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bea:	e16c      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bec:	4b43      	ldr	r3, [pc, #268]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bfa:	f107 030c 	add.w	r3, r7, #12
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fad8 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c08:	e15d      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0e:	e15a      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c10:	4b3a      	ldr	r3, [pc, #232]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c1a:	4b38      	ldr	r3, [pc, #224]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0304 	and.w	r3, r3, #4
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d10c      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d109      	bne.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c2c:	4b33      	ldr	r3, [pc, #204]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	08db      	lsrs	r3, r3, #3
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	4a32      	ldr	r2, [pc, #200]	; (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8006c38:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c3e:	e01e      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c40:	4b2e      	ldr	r3, [pc, #184]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c4c:	d106      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c54:	d102      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c56:	4b2b      	ldr	r3, [pc, #172]	; (8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8006c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c5a:	e010      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c5c:	4b27      	ldr	r3, [pc, #156]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c68:	d106      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c70:	d102      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c72:	4b25      	ldr	r3, [pc, #148]	; (8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8006c74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c76:	e002      	b.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c7c:	e123      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c7e:	e122      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c84:	e11f      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c8a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	d13c      	bne.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006c92:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c9a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d004      	beq.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca8:	d012      	beq.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8006caa:	e023      	b.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cac:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cb8:	d107      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fbcc 	bl	800745c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cc8:	e0fd      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cce:	e0fa      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cdc:	d107      	bne.n	8006cee <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cde:	f107 0318 	add.w	r3, r7, #24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f000 f912 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cec:	e0eb      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf2:	e0e8      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf8:	e0e5      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006cfa:	bf00      	nop
 8006cfc:	58024400 	.word	0x58024400
 8006d00:	03d09000 	.word	0x03d09000
 8006d04:	003d0900 	.word	0x003d0900
 8006d08:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d10:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006d14:	430b      	orrs	r3, r1
 8006d16:	f040 8085 	bne.w	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006d1a:	4b6d      	ldr	r3, [pc, #436]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006d22:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d2a:	d06b      	beq.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d32:	d874      	bhi.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3a:	d056      	beq.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8006d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d42:	d86c      	bhi.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d4a:	d03b      	beq.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d52:	d864      	bhi.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d5a:	d021      	beq.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d62:	d85c      	bhi.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d70:	d004      	beq.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8006d72:	e054      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006d74:	f000 f8b4 	bl	8006ee0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d78:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d7a:	e0a4      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d7c:	4b54      	ldr	r3, [pc, #336]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d88:	d107      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d8a:	f107 0318 	add.w	r3, r7, #24
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 f8bc 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d98:	e095      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9e:	e092      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006da0:	4b4b      	ldr	r3, [pc, #300]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dac:	d107      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dae:	f107 030c 	add.w	r3, r7, #12
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 f9fe 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dbc:	e083      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dc2:	e080      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dc4:	4b42      	ldr	r3, [pc, #264]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b04      	cmp	r3, #4
 8006dce:	d109      	bne.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dd0:	4b3f      	ldr	r3, [pc, #252]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	08db      	lsrs	r3, r3, #3
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	4a3e      	ldr	r2, [pc, #248]	; (8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8006de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006de2:	e070      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de8:	e06d      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006dea:	4b39      	ldr	r3, [pc, #228]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df6:	d102      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8006df8:	4b37      	ldr	r3, [pc, #220]	; (8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dfc:	e063      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e02:	e060      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e04:	4b32      	ldr	r3, [pc, #200]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e10:	d102      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8006e12:	4b32      	ldr	r3, [pc, #200]	; (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e16:	e056      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e1c:	e053      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e22:	e050      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e28:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	d148      	bne.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006e30:	4b27      	ldr	r3, [pc, #156]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e40:	d02a      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e48:	d838      	bhi.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e56:	d00d      	beq.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006e58:	e030      	b.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e5a:	4b1d      	ldr	r3, [pc, #116]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e66:	d102      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8006e68:	4b1c      	ldr	r3, [pc, #112]	; (8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e6c:	e02b      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e72:	e028      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e74:	4b16      	ldr	r3, [pc, #88]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e80:	d107      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fae8 	bl	800745c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e90:	e019      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e96:	e016      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e98:	4b0d      	ldr	r3, [pc, #52]	; (8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ea4:	d107      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ea6:	f107 0318 	add.w	r3, r7, #24
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 f82e 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb4:	e007      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eba:	e004      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ec0:	e001      	b.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3740      	adds	r7, #64	; 0x40
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	58024400 	.word	0x58024400
 8006ed4:	03d09000 	.word	0x03d09000
 8006ed8:	003d0900 	.word	0x003d0900
 8006edc:	017d7840 	.word	0x017d7840

08006ee0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ee4:	f7fe f92e 	bl	8005144 <HAL_RCC_GetHCLKFreq>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4b06      	ldr	r3, [pc, #24]	; (8006f04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	091b      	lsrs	r3, r3, #4
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	4904      	ldr	r1, [pc, #16]	; (8006f08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006ef6:	5ccb      	ldrb	r3, [r1, r3]
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	58024400 	.word	0x58024400
 8006f08:	08009e78 	.word	0x08009e78

08006f0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b089      	sub	sp, #36	; 0x24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f14:	4ba1      	ldr	r3, [pc, #644]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f1e:	4b9f      	ldr	r3, [pc, #636]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	0b1b      	lsrs	r3, r3, #12
 8006f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f2a:	4b9c      	ldr	r3, [pc, #624]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	091b      	lsrs	r3, r3, #4
 8006f30:	f003 0301 	and.w	r3, r3, #1
 8006f34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f36:	4b99      	ldr	r3, [pc, #612]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3a:	08db      	lsrs	r3, r3, #3
 8006f3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	fb02 f303 	mul.w	r3, r2, r3
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 8111 	beq.w	800717c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	f000 8083 	beq.w	8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	f200 80a1 	bhi.w	80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d056      	beq.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f76:	e099      	b.n	80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f78:	4b88      	ldr	r3, [pc, #544]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02d      	beq.n	8006fe0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f84:	4b85      	ldr	r3, [pc, #532]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	4a84      	ldr	r2, [pc, #528]	; (80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
 8006f94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	ee07 3a90 	vmov	s15, r3
 8006f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fae:	4b7b      	ldr	r3, [pc, #492]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006fde:	e087      	b.n	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff2:	4b6a      	ldr	r3, [pc, #424]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007002:	ed97 6a03 	vldr	s12, [r7, #12]
 8007006:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800700a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007022:	e065      	b.n	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007036:	4b59      	ldr	r3, [pc, #356]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007046:	ed97 6a03 	vldr	s12, [r7, #12]
 800704a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800704e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800705a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007066:	e043      	b.n	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007072:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707a:	4b48      	ldr	r3, [pc, #288]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708a:	ed97 6a03 	vldr	s12, [r7, #12]
 800708e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800709e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070aa:	e021      	b.n	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070be:	4b37      	ldr	r3, [pc, #220]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80070d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80070f0:	4b2a      	ldr	r3, [pc, #168]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	0a5b      	lsrs	r3, r3, #9
 80070f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800710a:	edd7 6a07 	vldr	s13, [r7, #28]
 800710e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007116:	ee17 2a90 	vmov	r2, s15
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800711e:	4b1f      	ldr	r3, [pc, #124]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007122:	0c1b      	lsrs	r3, r3, #16
 8007124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007134:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007138:	edd7 6a07 	vldr	s13, [r7, #28]
 800713c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007144:	ee17 2a90 	vmov	r2, s15
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800714c:	4b13      	ldr	r3, [pc, #76]	; (800719c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	0e1b      	lsrs	r3, r3, #24
 8007152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007166:	edd7 6a07 	vldr	s13, [r7, #28]
 800716a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007172:	ee17 2a90 	vmov	r2, s15
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800717a:	e008      	b.n	800718e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	609a      	str	r2, [r3, #8]
}
 800718e:	bf00      	nop
 8007190:	3724      	adds	r7, #36	; 0x24
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	58024400 	.word	0x58024400
 80071a0:	03d09000 	.word	0x03d09000
 80071a4:	46000000 	.word	0x46000000
 80071a8:	4c742400 	.word	0x4c742400
 80071ac:	4a742400 	.word	0x4a742400
 80071b0:	4bbebc20 	.word	0x4bbebc20

080071b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b089      	sub	sp, #36	; 0x24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071bc:	4ba1      	ldr	r3, [pc, #644]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80071c6:	4b9f      	ldr	r3, [pc, #636]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	0d1b      	lsrs	r3, r3, #20
 80071cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071d2:	4b9c      	ldr	r3, [pc, #624]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	0a1b      	lsrs	r3, r3, #8
 80071d8:	f003 0301 	and.w	r3, r3, #1
 80071dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80071de:	4b99      	ldr	r3, [pc, #612]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	08db      	lsrs	r3, r3, #3
 80071e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	fb02 f303 	mul.w	r3, r2, r3
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 8111 	beq.w	8007424 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	2b02      	cmp	r3, #2
 8007206:	f000 8083 	beq.w	8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	2b02      	cmp	r3, #2
 800720e:	f200 80a1 	bhi.w	8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d056      	beq.n	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800721e:	e099      	b.n	8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007220:	4b88      	ldr	r3, [pc, #544]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b00      	cmp	r3, #0
 800722a:	d02d      	beq.n	8007288 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800722c:	4b85      	ldr	r3, [pc, #532]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	08db      	lsrs	r3, r3, #3
 8007232:	f003 0303 	and.w	r3, r3, #3
 8007236:	4a84      	ldr	r2, [pc, #528]	; (8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
 800723c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	ee07 3a90 	vmov	s15, r3
 8007244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007256:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007266:	ed97 6a03 	vldr	s12, [r7, #12]
 800726a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800726e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800727a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007282:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007286:	e087      	b.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	ee07 3a90 	vmov	s15, r3
 800728e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007292:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007450 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729a:	4b6a      	ldr	r3, [pc, #424]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ca:	e065      	b.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072de:	4b59      	ldr	r3, [pc, #356]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800730e:	e043      	b.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007458 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800731e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007322:	4b48      	ldr	r3, [pc, #288]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007332:	ed97 6a03 	vldr	s12, [r7, #12]
 8007336:	eddf 5a45 	vldr	s11, [pc, #276]	; 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800733a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007352:	e021      	b.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b37      	ldr	r3, [pc, #220]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a03 	vldr	s12, [r7, #12]
 800737a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800744c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007396:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007398:	4b2a      	ldr	r3, [pc, #168]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	0a5b      	lsrs	r3, r3, #9
 800739e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073be:	ee17 2a90 	vmov	r2, s15
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80073c6:	4b1f      	ldr	r3, [pc, #124]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	0c1b      	lsrs	r3, r3, #16
 80073cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073d0:	ee07 3a90 	vmov	s15, r3
 80073d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80073e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ec:	ee17 2a90 	vmov	r2, s15
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80073f4:	4b13      	ldr	r3, [pc, #76]	; (8007444 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	0e1b      	lsrs	r3, r3, #24
 80073fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800740a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800740e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800741a:	ee17 2a90 	vmov	r2, s15
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007422:	e008      	b.n	8007436 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	609a      	str	r2, [r3, #8]
}
 8007436:	bf00      	nop
 8007438:	3724      	adds	r7, #36	; 0x24
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	58024400 	.word	0x58024400
 8007448:	03d09000 	.word	0x03d09000
 800744c:	46000000 	.word	0x46000000
 8007450:	4c742400 	.word	0x4c742400
 8007454:	4a742400 	.word	0x4a742400
 8007458:	4bbebc20 	.word	0x4bbebc20

0800745c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800745c:	b480      	push	{r7}
 800745e:	b089      	sub	sp, #36	; 0x24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007464:	4ba0      	ldr	r3, [pc, #640]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	f003 0303 	and.w	r3, r3, #3
 800746c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800746e:	4b9e      	ldr	r3, [pc, #632]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	091b      	lsrs	r3, r3, #4
 8007474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007478:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800747a:	4b9b      	ldr	r3, [pc, #620]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800747c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007484:	4b98      	ldr	r3, [pc, #608]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007488:	08db      	lsrs	r3, r3, #3
 800748a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	fb02 f303 	mul.w	r3, r2, r3
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8111 	beq.w	80076ca <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	f000 8083 	beq.w	80075b6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	f200 80a1 	bhi.w	80075fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d056      	beq.n	8007572 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80074c4:	e099      	b.n	80075fa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074c6:	4b88      	ldr	r3, [pc, #544]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0320 	and.w	r3, r3, #32
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d02d      	beq.n	800752e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074d2:	4b85      	ldr	r3, [pc, #532]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	08db      	lsrs	r3, r3, #3
 80074d8:	f003 0303 	and.w	r3, r3, #3
 80074dc:	4a83      	ldr	r2, [pc, #524]	; (80076ec <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80074de:	fa22 f303 	lsr.w	r3, r2, r3
 80074e2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	ee07 3a90 	vmov	s15, r3
 80074f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fc:	4b7a      	ldr	r3, [pc, #488]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007504:	ee07 3a90 	vmov	s15, r3
 8007508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007510:	eddf 5a77 	vldr	s11, [pc, #476]	; 80076f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007528:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800752c:	e087      	b.n	800763e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	ee07 3a90 	vmov	s15, r3
 8007534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007538:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80076f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800753c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007540:	4b69      	ldr	r3, [pc, #420]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007548:	ee07 3a90 	vmov	s15, r3
 800754c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007550:	ed97 6a03 	vldr	s12, [r7, #12]
 8007554:	eddf 5a66 	vldr	s11, [pc, #408]	; 80076f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007570:	e065      	b.n	800763e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	ee07 3a90 	vmov	s15, r3
 8007578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80076f8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007584:	4b58      	ldr	r3, [pc, #352]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758c:	ee07 3a90 	vmov	s15, r3
 8007590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007594:	ed97 6a03 	vldr	s12, [r7, #12]
 8007598:	eddf 5a55 	vldr	s11, [pc, #340]	; 80076f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800759c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075b4:	e043      	b.n	800763e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	ee07 3a90 	vmov	s15, r3
 80075bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075c0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80076fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80075c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c8:	4b47      	ldr	r3, [pc, #284]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d0:	ee07 3a90 	vmov	s15, r3
 80075d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80075dc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80076f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f8:	e021      	b.n	800763e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	ee07 3a90 	vmov	s15, r3
 8007600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007604:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80076f4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760c:	4b36      	ldr	r3, [pc, #216]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800760e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007614:	ee07 3a90 	vmov	s15, r3
 8007618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007620:	eddf 5a33 	vldr	s11, [pc, #204]	; 80076f0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007624:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007628:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007630:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007638:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800763c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800763e:	4b2a      	ldr	r3, [pc, #168]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	0a5b      	lsrs	r3, r3, #9
 8007644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007648:	ee07 3a90 	vmov	s15, r3
 800764c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007650:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007658:	edd7 6a07 	vldr	s13, [r7, #28]
 800765c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007664:	ee17 2a90 	vmov	r2, s15
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800766c:	4b1e      	ldr	r3, [pc, #120]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800766e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007670:	0c1b      	lsrs	r3, r3, #16
 8007672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007676:	ee07 3a90 	vmov	s15, r3
 800767a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007682:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007686:	edd7 6a07 	vldr	s13, [r7, #28]
 800768a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800768e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007692:	ee17 2a90 	vmov	r2, s15
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800769a:	4b13      	ldr	r3, [pc, #76]	; (80076e8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	0e1b      	lsrs	r3, r3, #24
 80076a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80076b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076c0:	ee17 2a90 	vmov	r2, s15
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80076c8:	e008      	b.n	80076dc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	609a      	str	r2, [r3, #8]
}
 80076dc:	bf00      	nop
 80076de:	3724      	adds	r7, #36	; 0x24
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	58024400 	.word	0x58024400
 80076ec:	03d09000 	.word	0x03d09000
 80076f0:	46000000 	.word	0x46000000
 80076f4:	4c742400 	.word	0x4c742400
 80076f8:	4a742400 	.word	0x4a742400
 80076fc:	4bbebc20 	.word	0x4bbebc20

08007700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800770e:	4b53      	ldr	r3, [pc, #332]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b03      	cmp	r3, #3
 8007718:	d101      	bne.n	800771e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e099      	b.n	8007852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800771e:	4b4f      	ldr	r3, [pc, #316]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a4e      	ldr	r2, [pc, #312]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007724:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772a:	f7fa fc41 	bl	8001fb0 <HAL_GetTick>
 800772e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007730:	e008      	b.n	8007744 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007732:	f7fa fc3d 	bl	8001fb0 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d901      	bls.n	8007744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e086      	b.n	8007852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007744:	4b45      	ldr	r3, [pc, #276]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f0      	bne.n	8007732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007750:	4b42      	ldr	r3, [pc, #264]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	031b      	lsls	r3, r3, #12
 800775e:	493f      	ldr	r1, [pc, #252]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007760:	4313      	orrs	r3, r2
 8007762:	628b      	str	r3, [r1, #40]	; 0x28
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	3b01      	subs	r3, #1
 800776a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	3b01      	subs	r3, #1
 8007774:	025b      	lsls	r3, r3, #9
 8007776:	b29b      	uxth	r3, r3
 8007778:	431a      	orrs	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	3b01      	subs	r3, #1
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	3b01      	subs	r3, #1
 800778e:	061b      	lsls	r3, r3, #24
 8007790:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007794:	4931      	ldr	r1, [pc, #196]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007796:	4313      	orrs	r3, r2
 8007798:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800779a:	4b30      	ldr	r3, [pc, #192]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	492d      	ldr	r1, [pc, #180]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077ac:	4b2b      	ldr	r3, [pc, #172]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	f023 0220 	bic.w	r2, r3, #32
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	4928      	ldr	r1, [pc, #160]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077be:	4b27      	ldr	r3, [pc, #156]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	4a26      	ldr	r2, [pc, #152]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077c4:	f023 0310 	bic.w	r3, r3, #16
 80077c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077ca:	4b24      	ldr	r3, [pc, #144]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ce:	4b24      	ldr	r3, [pc, #144]	; (8007860 <RCCEx_PLL2_Config+0x160>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	69d2      	ldr	r2, [r2, #28]
 80077d6:	00d2      	lsls	r2, r2, #3
 80077d8:	4920      	ldr	r1, [pc, #128]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077de:	4b1f      	ldr	r3, [pc, #124]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	4a1e      	ldr	r2, [pc, #120]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077e4:	f043 0310 	orr.w	r3, r3, #16
 80077e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d106      	bne.n	80077fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077f0:	4b1a      	ldr	r3, [pc, #104]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	4a19      	ldr	r2, [pc, #100]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 80077f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077fc:	e00f      	b.n	800781e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d106      	bne.n	8007812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007804:	4b15      	ldr	r3, [pc, #84]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007808:	4a14      	ldr	r2, [pc, #80]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 800780a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800780e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007810:	e005      	b.n	800781e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007812:	4b12      	ldr	r3, [pc, #72]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	4a11      	ldr	r2, [pc, #68]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800781c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a0e      	ldr	r2, [pc, #56]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007824:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800782a:	f7fa fbc1 	bl	8001fb0 <HAL_GetTick>
 800782e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007830:	e008      	b.n	8007844 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007832:	f7fa fbbd 	bl	8001fb0 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	2b02      	cmp	r3, #2
 800783e:	d901      	bls.n	8007844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e006      	b.n	8007852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007844:	4b05      	ldr	r3, [pc, #20]	; (800785c <RCCEx_PLL2_Config+0x15c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0f0      	beq.n	8007832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007850:	7bfb      	ldrb	r3, [r7, #15]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	58024400 	.word	0x58024400
 8007860:	ffff0007 	.word	0xffff0007

08007864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007872:	4b53      	ldr	r3, [pc, #332]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b03      	cmp	r3, #3
 800787c:	d101      	bne.n	8007882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e099      	b.n	80079b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007882:	4b4f      	ldr	r3, [pc, #316]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a4e      	ldr	r2, [pc, #312]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800788c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800788e:	f7fa fb8f 	bl	8001fb0 <HAL_GetTick>
 8007892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007894:	e008      	b.n	80078a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007896:	f7fa fb8b 	bl	8001fb0 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d901      	bls.n	80078a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e086      	b.n	80079b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078a8:	4b45      	ldr	r3, [pc, #276]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1f0      	bne.n	8007896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078b4:	4b42      	ldr	r3, [pc, #264]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	051b      	lsls	r3, r3, #20
 80078c2:	493f      	ldr	r1, [pc, #252]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	628b      	str	r3, [r1, #40]	; 0x28
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	025b      	lsls	r3, r3, #9
 80078da:	b29b      	uxth	r3, r3
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	041b      	lsls	r3, r3, #16
 80078e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	061b      	lsls	r3, r3, #24
 80078f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078f8:	4931      	ldr	r1, [pc, #196]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078fe:	4b30      	ldr	r3, [pc, #192]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007902:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	492d      	ldr	r1, [pc, #180]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800790c:	4313      	orrs	r3, r2
 800790e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007910:	4b2b      	ldr	r3, [pc, #172]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	4928      	ldr	r1, [pc, #160]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800791e:	4313      	orrs	r3, r2
 8007920:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007922:	4b27      	ldr	r3, [pc, #156]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	4a26      	ldr	r2, [pc, #152]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800792c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800792e:	4b24      	ldr	r3, [pc, #144]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <RCCEx_PLL3_Config+0x160>)
 8007934:	4013      	ands	r3, r2
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	69d2      	ldr	r2, [r2, #28]
 800793a:	00d2      	lsls	r2, r2, #3
 800793c:	4920      	ldr	r1, [pc, #128]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800793e:	4313      	orrs	r3, r2
 8007940:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007942:	4b1f      	ldr	r3, [pc, #124]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	4a1e      	ldr	r2, [pc, #120]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800794c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007954:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	4a19      	ldr	r2, [pc, #100]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800795a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800795e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007960:	e00f      	b.n	8007982 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d106      	bne.n	8007976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007968:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	4a14      	ldr	r2, [pc, #80]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800796e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007972:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007974:	e005      	b.n	8007982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007976:	4b12      	ldr	r3, [pc, #72]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	4a11      	ldr	r2, [pc, #68]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 800797c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007980:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007982:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a0e      	ldr	r2, [pc, #56]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 8007988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800798c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800798e:	f7fa fb0f 	bl	8001fb0 <HAL_GetTick>
 8007992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007994:	e008      	b.n	80079a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007996:	f7fa fb0b 	bl	8001fb0 <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d901      	bls.n	80079a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e006      	b.n	80079b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079a8:	4b05      	ldr	r3, [pc, #20]	; (80079c0 <RCCEx_PLL3_Config+0x15c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0f0      	beq.n	8007996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	58024400 	.word	0x58024400
 80079c4:	ffff0007 	.word	0xffff0007

080079c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d101      	bne.n	80079da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e10f      	b.n	8007bfa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a87      	ldr	r2, [pc, #540]	; (8007c04 <HAL_SPI_Init+0x23c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d00f      	beq.n	8007a0a <HAL_SPI_Init+0x42>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a86      	ldr	r2, [pc, #536]	; (8007c08 <HAL_SPI_Init+0x240>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d00a      	beq.n	8007a0a <HAL_SPI_Init+0x42>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a84      	ldr	r2, [pc, #528]	; (8007c0c <HAL_SPI_Init+0x244>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d005      	beq.n	8007a0a <HAL_SPI_Init+0x42>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	2b0f      	cmp	r3, #15
 8007a04:	d901      	bls.n	8007a0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e0f7      	b.n	8007bfa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f900 	bl	8007c10 <SPI_GetPacketSize>
 8007a10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a7b      	ldr	r2, [pc, #492]	; (8007c04 <HAL_SPI_Init+0x23c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00c      	beq.n	8007a36 <HAL_SPI_Init+0x6e>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a79      	ldr	r2, [pc, #484]	; (8007c08 <HAL_SPI_Init+0x240>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d007      	beq.n	8007a36 <HAL_SPI_Init+0x6e>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a78      	ldr	r2, [pc, #480]	; (8007c0c <HAL_SPI_Init+0x244>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d002      	beq.n	8007a36 <HAL_SPI_Init+0x6e>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b08      	cmp	r3, #8
 8007a34:	d811      	bhi.n	8007a5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a3a:	4a72      	ldr	r2, [pc, #456]	; (8007c04 <HAL_SPI_Init+0x23c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a70      	ldr	r2, [pc, #448]	; (8007c08 <HAL_SPI_Init+0x240>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <HAL_SPI_Init+0x8c>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a6f      	ldr	r2, [pc, #444]	; (8007c0c <HAL_SPI_Init+0x244>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d104      	bne.n	8007a5e <HAL_SPI_Init+0x96>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b10      	cmp	r3, #16
 8007a58:	d901      	bls.n	8007a5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e0cd      	b.n	8007bfa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d106      	bne.n	8007a78 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7f9 fdc8 	bl	8001608 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007a9a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007aa4:	d119      	bne.n	8007ada <HAL_SPI_Init+0x112>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aae:	d103      	bne.n	8007ab8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d008      	beq.n	8007aca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10c      	bne.n	8007ada <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ac8:	d107      	bne.n	8007ada <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ad8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00f      	beq.n	8007b06 <HAL_SPI_Init+0x13e>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	2b06      	cmp	r3, #6
 8007aec:	d90b      	bls.n	8007b06 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	601a      	str	r2, [r3, #0]
 8007b04:	e007      	b.n	8007b16 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	69da      	ldr	r2, [r3, #28]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	431a      	orrs	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b28:	ea42 0103 	orr.w	r1, r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68da      	ldr	r2, [r3, #12]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	431a      	orrs	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b76:	ea42 0103 	orr.w	r1, r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d113      	bne.n	8007bb6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ba0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007bb4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0201 	bic.w	r2, r2, #1
 8007bc4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00a      	beq.n	8007be8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40013000 	.word	0x40013000
 8007c08:	40003800 	.word	0x40003800
 8007c0c:	40003c00 	.word	0x40003c00

08007c10 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1c:	095b      	lsrs	r3, r3, #5
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	3301      	adds	r3, #1
 8007c28:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	3307      	adds	r3, #7
 8007c2e:	08db      	lsrs	r3, r3, #3
 8007c30:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	e049      	b.n	8007cec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d106      	bne.n	8007c72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7f9 fd33 	bl	80016d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4619      	mov	r1, r3
 8007c84:	4610      	mov	r0, r2
 8007c86:	f000 fa99 	bl	80081bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e049      	b.n	8007d9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7f9 fd9e 	bl	800185c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4619      	mov	r1, r3
 8007d32:	4610      	mov	r0, r2
 8007d34:	f000 fa42 	bl	80081bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3708      	adds	r7, #8
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e0ff      	b.n	8007fc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b14      	cmp	r3, #20
 8007dce:	f200 80f0 	bhi.w	8007fb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007e2d 	.word	0x08007e2d
 8007ddc:	08007fb3 	.word	0x08007fb3
 8007de0:	08007fb3 	.word	0x08007fb3
 8007de4:	08007fb3 	.word	0x08007fb3
 8007de8:	08007e6d 	.word	0x08007e6d
 8007dec:	08007fb3 	.word	0x08007fb3
 8007df0:	08007fb3 	.word	0x08007fb3
 8007df4:	08007fb3 	.word	0x08007fb3
 8007df8:	08007eaf 	.word	0x08007eaf
 8007dfc:	08007fb3 	.word	0x08007fb3
 8007e00:	08007fb3 	.word	0x08007fb3
 8007e04:	08007fb3 	.word	0x08007fb3
 8007e08:	08007eef 	.word	0x08007eef
 8007e0c:	08007fb3 	.word	0x08007fb3
 8007e10:	08007fb3 	.word	0x08007fb3
 8007e14:	08007fb3 	.word	0x08007fb3
 8007e18:	08007f31 	.word	0x08007f31
 8007e1c:	08007fb3 	.word	0x08007fb3
 8007e20:	08007fb3 	.word	0x08007fb3
 8007e24:	08007fb3 	.word	0x08007fb3
 8007e28:	08007f71 	.word	0x08007f71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68b9      	ldr	r1, [r7, #8]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fa68 	bl	8008308 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0208 	orr.w	r2, r2, #8
 8007e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f022 0204 	bic.w	r2, r2, #4
 8007e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6999      	ldr	r1, [r3, #24]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	619a      	str	r2, [r3, #24]
      break;
 8007e6a:	e0a5      	b.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fad8 	bl	8008428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6999      	ldr	r1, [r3, #24]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	021a      	lsls	r2, r3, #8
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	619a      	str	r2, [r3, #24]
      break;
 8007eac:	e084      	b.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 fb41 	bl	800853c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69da      	ldr	r2, [r3, #28]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f042 0208 	orr.w	r2, r2, #8
 8007ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69da      	ldr	r2, [r3, #28]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 0204 	bic.w	r2, r2, #4
 8007ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69d9      	ldr	r1, [r3, #28]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	691a      	ldr	r2, [r3, #16]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	61da      	str	r2, [r3, #28]
      break;
 8007eec:	e064      	b.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fba9 	bl	800864c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69d9      	ldr	r1, [r3, #28]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	021a      	lsls	r2, r3, #8
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	61da      	str	r2, [r3, #28]
      break;
 8007f2e:	e043      	b.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fbf2 	bl	8008720 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0208 	orr.w	r2, r2, #8
 8007f4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0204 	bic.w	r2, r2, #4
 8007f5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007f6e:	e023      	b.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fc36 	bl	80087e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	021a      	lsls	r2, r3, #8
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fb0:	e002      	b.n	8007fb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop

08007fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <HAL_TIM_ConfigClockSource+0x1c>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e0dc      	b.n	80081a2 <HAL_TIM_ConfigClockSource+0x1d6>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	4b6a      	ldr	r3, [pc, #424]	; (80081ac <HAL_TIM_ConfigClockSource+0x1e0>)
 8008004:	4013      	ands	r3, r2
 8008006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800800e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a64      	ldr	r2, [pc, #400]	; (80081b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800801e:	4293      	cmp	r3, r2
 8008020:	f000 80a9 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x1aa>
 8008024:	4a62      	ldr	r2, [pc, #392]	; (80081b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008026:	4293      	cmp	r3, r2
 8008028:	f200 80ae 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 800802c:	4a61      	ldr	r2, [pc, #388]	; (80081b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800802e:	4293      	cmp	r3, r2
 8008030:	f000 80a1 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x1aa>
 8008034:	4a5f      	ldr	r2, [pc, #380]	; (80081b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008036:	4293      	cmp	r3, r2
 8008038:	f200 80a6 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 800803c:	4a5e      	ldr	r2, [pc, #376]	; (80081b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800803e:	4293      	cmp	r3, r2
 8008040:	f000 8099 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x1aa>
 8008044:	4a5c      	ldr	r2, [pc, #368]	; (80081b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008046:	4293      	cmp	r3, r2
 8008048:	f200 809e 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 800804c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008050:	f000 8091 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x1aa>
 8008054:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008058:	f200 8096 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 800805c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008060:	f000 8089 	beq.w	8008176 <HAL_TIM_ConfigClockSource+0x1aa>
 8008064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008068:	f200 808e 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 800806c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008070:	d03e      	beq.n	80080f0 <HAL_TIM_ConfigClockSource+0x124>
 8008072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008076:	f200 8087 	bhi.w	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 800807a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800807e:	f000 8086 	beq.w	800818e <HAL_TIM_ConfigClockSource+0x1c2>
 8008082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008086:	d87f      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 8008088:	2b70      	cmp	r3, #112	; 0x70
 800808a:	d01a      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0xf6>
 800808c:	2b70      	cmp	r3, #112	; 0x70
 800808e:	d87b      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 8008090:	2b60      	cmp	r3, #96	; 0x60
 8008092:	d050      	beq.n	8008136 <HAL_TIM_ConfigClockSource+0x16a>
 8008094:	2b60      	cmp	r3, #96	; 0x60
 8008096:	d877      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 8008098:	2b50      	cmp	r3, #80	; 0x50
 800809a:	d03c      	beq.n	8008116 <HAL_TIM_ConfigClockSource+0x14a>
 800809c:	2b50      	cmp	r3, #80	; 0x50
 800809e:	d873      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 80080a0:	2b40      	cmp	r3, #64	; 0x40
 80080a2:	d058      	beq.n	8008156 <HAL_TIM_ConfigClockSource+0x18a>
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d86f      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 80080a8:	2b30      	cmp	r3, #48	; 0x30
 80080aa:	d064      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x1aa>
 80080ac:	2b30      	cmp	r3, #48	; 0x30
 80080ae:	d86b      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d060      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x1aa>
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d867      	bhi.n	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d05c      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x1aa>
 80080bc:	2b10      	cmp	r3, #16
 80080be:	d05a      	beq.n	8008176 <HAL_TIM_ConfigClockSource+0x1aa>
 80080c0:	e062      	b.n	8008188 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6818      	ldr	r0, [r3, #0]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6899      	ldr	r1, [r3, #8]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f000 fced 	bl	8008ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	609a      	str	r2, [r3, #8]
      break;
 80080ee:	e04f      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6818      	ldr	r0, [r3, #0]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	6899      	ldr	r1, [r3, #8]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f000 fcd6 	bl	8008ab0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008112:	609a      	str	r2, [r3, #8]
      break;
 8008114:	e03c      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6859      	ldr	r1, [r3, #4]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	461a      	mov	r2, r3
 8008124:	f000 fc46 	bl	80089b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2150      	movs	r1, #80	; 0x50
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fca0 	bl	8008a74 <TIM_ITRx_SetConfig>
      break;
 8008134:	e02c      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	6859      	ldr	r1, [r3, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	461a      	mov	r2, r3
 8008144:	f000 fc65 	bl	8008a12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2160      	movs	r1, #96	; 0x60
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fc90 	bl	8008a74 <TIM_ITRx_SetConfig>
      break;
 8008154:	e01c      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	6859      	ldr	r1, [r3, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	461a      	mov	r2, r3
 8008164:	f000 fc26 	bl	80089b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2140      	movs	r1, #64	; 0x40
 800816e:	4618      	mov	r0, r3
 8008170:	f000 fc80 	bl	8008a74 <TIM_ITRx_SetConfig>
      break;
 8008174:	e00c      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4619      	mov	r1, r3
 8008180:	4610      	mov	r0, r2
 8008182:	f000 fc77 	bl	8008a74 <TIM_ITRx_SetConfig>
      break;
 8008186:	e003      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	73fb      	strb	r3, [r7, #15]
      break;
 800818c:	e000      	b.n	8008190 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800818e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	ffceff88 	.word	0xffceff88
 80081b0:	00100040 	.word	0x00100040
 80081b4:	00100030 	.word	0x00100030
 80081b8:	00100020 	.word	0x00100020

080081bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a44      	ldr	r2, [pc, #272]	; (80082e0 <TIM_Base_SetConfig+0x124>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d013      	beq.n	80081fc <TIM_Base_SetConfig+0x40>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081da:	d00f      	beq.n	80081fc <TIM_Base_SetConfig+0x40>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a41      	ldr	r2, [pc, #260]	; (80082e4 <TIM_Base_SetConfig+0x128>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00b      	beq.n	80081fc <TIM_Base_SetConfig+0x40>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a40      	ldr	r2, [pc, #256]	; (80082e8 <TIM_Base_SetConfig+0x12c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d007      	beq.n	80081fc <TIM_Base_SetConfig+0x40>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a3f      	ldr	r2, [pc, #252]	; (80082ec <TIM_Base_SetConfig+0x130>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d003      	beq.n	80081fc <TIM_Base_SetConfig+0x40>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a3e      	ldr	r2, [pc, #248]	; (80082f0 <TIM_Base_SetConfig+0x134>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d108      	bne.n	800820e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4a33      	ldr	r2, [pc, #204]	; (80082e0 <TIM_Base_SetConfig+0x124>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d027      	beq.n	8008266 <TIM_Base_SetConfig+0xaa>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821c:	d023      	beq.n	8008266 <TIM_Base_SetConfig+0xaa>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a30      	ldr	r2, [pc, #192]	; (80082e4 <TIM_Base_SetConfig+0x128>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d01f      	beq.n	8008266 <TIM_Base_SetConfig+0xaa>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a2f      	ldr	r2, [pc, #188]	; (80082e8 <TIM_Base_SetConfig+0x12c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d01b      	beq.n	8008266 <TIM_Base_SetConfig+0xaa>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a2e      	ldr	r2, [pc, #184]	; (80082ec <TIM_Base_SetConfig+0x130>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d017      	beq.n	8008266 <TIM_Base_SetConfig+0xaa>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a2d      	ldr	r2, [pc, #180]	; (80082f0 <TIM_Base_SetConfig+0x134>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d013      	beq.n	8008266 <TIM_Base_SetConfig+0xaa>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a2c      	ldr	r2, [pc, #176]	; (80082f4 <TIM_Base_SetConfig+0x138>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d00f      	beq.n	8008266 <TIM_Base_SetConfig+0xaa>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a2b      	ldr	r2, [pc, #172]	; (80082f8 <TIM_Base_SetConfig+0x13c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d00b      	beq.n	8008266 <TIM_Base_SetConfig+0xaa>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a2a      	ldr	r2, [pc, #168]	; (80082fc <TIM_Base_SetConfig+0x140>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d007      	beq.n	8008266 <TIM_Base_SetConfig+0xaa>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a29      	ldr	r2, [pc, #164]	; (8008300 <TIM_Base_SetConfig+0x144>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d003      	beq.n	8008266 <TIM_Base_SetConfig+0xaa>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a28      	ldr	r2, [pc, #160]	; (8008304 <TIM_Base_SetConfig+0x148>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d108      	bne.n	8008278 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800826c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4313      	orrs	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a10      	ldr	r2, [pc, #64]	; (80082e0 <TIM_Base_SetConfig+0x124>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d00f      	beq.n	80082c4 <TIM_Base_SetConfig+0x108>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a12      	ldr	r2, [pc, #72]	; (80082f0 <TIM_Base_SetConfig+0x134>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00b      	beq.n	80082c4 <TIM_Base_SetConfig+0x108>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a11      	ldr	r2, [pc, #68]	; (80082f4 <TIM_Base_SetConfig+0x138>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d007      	beq.n	80082c4 <TIM_Base_SetConfig+0x108>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a10      	ldr	r2, [pc, #64]	; (80082f8 <TIM_Base_SetConfig+0x13c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d003      	beq.n	80082c4 <TIM_Base_SetConfig+0x108>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a0f      	ldr	r2, [pc, #60]	; (80082fc <TIM_Base_SetConfig+0x140>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d103      	bne.n	80082cc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	691a      	ldr	r2, [r3, #16]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	615a      	str	r2, [r3, #20]
}
 80082d2:	bf00      	nop
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40000400 	.word	0x40000400
 80082e8:	40000800 	.word	0x40000800
 80082ec:	40000c00 	.word	0x40000c00
 80082f0:	40010400 	.word	0x40010400
 80082f4:	40014000 	.word	0x40014000
 80082f8:	40014400 	.word	0x40014400
 80082fc:	40014800 	.word	0x40014800
 8008300:	4000e000 	.word	0x4000e000
 8008304:	4000e400 	.word	0x4000e400

08008308 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	f023 0201 	bic.w	r2, r3, #1
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4b37      	ldr	r3, [pc, #220]	; (8008410 <TIM_OC1_SetConfig+0x108>)
 8008334:	4013      	ands	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 0303 	bic.w	r3, r3, #3
 800833e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4313      	orrs	r3, r2
 8008348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f023 0302 	bic.w	r3, r3, #2
 8008350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4313      	orrs	r3, r2
 800835a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a2d      	ldr	r2, [pc, #180]	; (8008414 <TIM_OC1_SetConfig+0x10c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00f      	beq.n	8008384 <TIM_OC1_SetConfig+0x7c>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a2c      	ldr	r2, [pc, #176]	; (8008418 <TIM_OC1_SetConfig+0x110>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00b      	beq.n	8008384 <TIM_OC1_SetConfig+0x7c>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a2b      	ldr	r2, [pc, #172]	; (800841c <TIM_OC1_SetConfig+0x114>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d007      	beq.n	8008384 <TIM_OC1_SetConfig+0x7c>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a2a      	ldr	r2, [pc, #168]	; (8008420 <TIM_OC1_SetConfig+0x118>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_OC1_SetConfig+0x7c>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a29      	ldr	r2, [pc, #164]	; (8008424 <TIM_OC1_SetConfig+0x11c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d10c      	bne.n	800839e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f023 0308 	bic.w	r3, r3, #8
 800838a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4313      	orrs	r3, r2
 8008394:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f023 0304 	bic.w	r3, r3, #4
 800839c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a1c      	ldr	r2, [pc, #112]	; (8008414 <TIM_OC1_SetConfig+0x10c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d00f      	beq.n	80083c6 <TIM_OC1_SetConfig+0xbe>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a1b      	ldr	r2, [pc, #108]	; (8008418 <TIM_OC1_SetConfig+0x110>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d00b      	beq.n	80083c6 <TIM_OC1_SetConfig+0xbe>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a1a      	ldr	r2, [pc, #104]	; (800841c <TIM_OC1_SetConfig+0x114>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d007      	beq.n	80083c6 <TIM_OC1_SetConfig+0xbe>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a19      	ldr	r2, [pc, #100]	; (8008420 <TIM_OC1_SetConfig+0x118>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d003      	beq.n	80083c6 <TIM_OC1_SetConfig+0xbe>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a18      	ldr	r2, [pc, #96]	; (8008424 <TIM_OC1_SetConfig+0x11c>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d111      	bne.n	80083ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	4313      	orrs	r3, r2
 80083de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	621a      	str	r2, [r3, #32]
}
 8008404:	bf00      	nop
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	fffeff8f 	.word	0xfffeff8f
 8008414:	40010000 	.word	0x40010000
 8008418:	40010400 	.word	0x40010400
 800841c:	40014000 	.word	0x40014000
 8008420:	40014400 	.word	0x40014400
 8008424:	40014800 	.word	0x40014800

08008428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	f023 0210 	bic.w	r2, r3, #16
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4b34      	ldr	r3, [pc, #208]	; (8008524 <TIM_OC2_SetConfig+0xfc>)
 8008454:	4013      	ands	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800845e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f023 0320 	bic.w	r3, r3, #32
 8008472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	4313      	orrs	r3, r2
 800847e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a29      	ldr	r2, [pc, #164]	; (8008528 <TIM_OC2_SetConfig+0x100>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_OC2_SetConfig+0x68>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a28      	ldr	r2, [pc, #160]	; (800852c <TIM_OC2_SetConfig+0x104>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d10d      	bne.n	80084ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a1e      	ldr	r2, [pc, #120]	; (8008528 <TIM_OC2_SetConfig+0x100>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d00f      	beq.n	80084d4 <TIM_OC2_SetConfig+0xac>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a1d      	ldr	r2, [pc, #116]	; (800852c <TIM_OC2_SetConfig+0x104>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00b      	beq.n	80084d4 <TIM_OC2_SetConfig+0xac>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a1c      	ldr	r2, [pc, #112]	; (8008530 <TIM_OC2_SetConfig+0x108>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d007      	beq.n	80084d4 <TIM_OC2_SetConfig+0xac>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <TIM_OC2_SetConfig+0x10c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d003      	beq.n	80084d4 <TIM_OC2_SetConfig+0xac>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a1a      	ldr	r2, [pc, #104]	; (8008538 <TIM_OC2_SetConfig+0x110>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d113      	bne.n	80084fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	621a      	str	r2, [r3, #32]
}
 8008516:	bf00      	nop
 8008518:	371c      	adds	r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	feff8fff 	.word	0xfeff8fff
 8008528:	40010000 	.word	0x40010000
 800852c:	40010400 	.word	0x40010400
 8008530:	40014000 	.word	0x40014000
 8008534:	40014400 	.word	0x40014400
 8008538:	40014800 	.word	0x40014800

0800853c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800853c:	b480      	push	{r7}
 800853e:	b087      	sub	sp, #28
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4b33      	ldr	r3, [pc, #204]	; (8008634 <TIM_OC3_SetConfig+0xf8>)
 8008568:	4013      	ands	r3, r2
 800856a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 0303 	bic.w	r3, r3, #3
 8008572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	021b      	lsls	r3, r3, #8
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	4313      	orrs	r3, r2
 8008590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a28      	ldr	r2, [pc, #160]	; (8008638 <TIM_OC3_SetConfig+0xfc>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d003      	beq.n	80085a2 <TIM_OC3_SetConfig+0x66>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a27      	ldr	r2, [pc, #156]	; (800863c <TIM_OC3_SetConfig+0x100>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d10d      	bne.n	80085be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	021b      	lsls	r3, r3, #8
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a1d      	ldr	r2, [pc, #116]	; (8008638 <TIM_OC3_SetConfig+0xfc>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00f      	beq.n	80085e6 <TIM_OC3_SetConfig+0xaa>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a1c      	ldr	r2, [pc, #112]	; (800863c <TIM_OC3_SetConfig+0x100>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00b      	beq.n	80085e6 <TIM_OC3_SetConfig+0xaa>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a1b      	ldr	r2, [pc, #108]	; (8008640 <TIM_OC3_SetConfig+0x104>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d007      	beq.n	80085e6 <TIM_OC3_SetConfig+0xaa>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a1a      	ldr	r2, [pc, #104]	; (8008644 <TIM_OC3_SetConfig+0x108>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d003      	beq.n	80085e6 <TIM_OC3_SetConfig+0xaa>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a19      	ldr	r2, [pc, #100]	; (8008648 <TIM_OC3_SetConfig+0x10c>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d113      	bne.n	800860e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	4313      	orrs	r3, r2
 8008600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	011b      	lsls	r3, r3, #4
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	4313      	orrs	r3, r2
 800860c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	621a      	str	r2, [r3, #32]
}
 8008628:	bf00      	nop
 800862a:	371c      	adds	r7, #28
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	fffeff8f 	.word	0xfffeff8f
 8008638:	40010000 	.word	0x40010000
 800863c:	40010400 	.word	0x40010400
 8008640:	40014000 	.word	0x40014000
 8008644:	40014400 	.word	0x40014400
 8008648:	40014800 	.word	0x40014800

0800864c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800864c:	b480      	push	{r7}
 800864e:	b087      	sub	sp, #28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4b24      	ldr	r3, [pc, #144]	; (8008708 <TIM_OC4_SetConfig+0xbc>)
 8008678:	4013      	ands	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008682:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4313      	orrs	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	031b      	lsls	r3, r3, #12
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a19      	ldr	r2, [pc, #100]	; (800870c <TIM_OC4_SetConfig+0xc0>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d00f      	beq.n	80086cc <TIM_OC4_SetConfig+0x80>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a18      	ldr	r2, [pc, #96]	; (8008710 <TIM_OC4_SetConfig+0xc4>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00b      	beq.n	80086cc <TIM_OC4_SetConfig+0x80>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a17      	ldr	r2, [pc, #92]	; (8008714 <TIM_OC4_SetConfig+0xc8>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d007      	beq.n	80086cc <TIM_OC4_SetConfig+0x80>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a16      	ldr	r2, [pc, #88]	; (8008718 <TIM_OC4_SetConfig+0xcc>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d003      	beq.n	80086cc <TIM_OC4_SetConfig+0x80>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a15      	ldr	r2, [pc, #84]	; (800871c <TIM_OC4_SetConfig+0xd0>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d109      	bne.n	80086e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	019b      	lsls	r3, r3, #6
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	4313      	orrs	r3, r2
 80086de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	621a      	str	r2, [r3, #32]
}
 80086fa:	bf00      	nop
 80086fc:	371c      	adds	r7, #28
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	feff8fff 	.word	0xfeff8fff
 800870c:	40010000 	.word	0x40010000
 8008710:	40010400 	.word	0x40010400
 8008714:	40014000 	.word	0x40014000
 8008718:	40014400 	.word	0x40014400
 800871c:	40014800 	.word	0x40014800

08008720 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	4b21      	ldr	r3, [pc, #132]	; (80087d0 <TIM_OC5_SetConfig+0xb0>)
 800874c:	4013      	ands	r3, r2
 800874e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008760:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	4313      	orrs	r3, r2
 800876c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a18      	ldr	r2, [pc, #96]	; (80087d4 <TIM_OC5_SetConfig+0xb4>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d00f      	beq.n	8008796 <TIM_OC5_SetConfig+0x76>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <TIM_OC5_SetConfig+0xb8>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00b      	beq.n	8008796 <TIM_OC5_SetConfig+0x76>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a16      	ldr	r2, [pc, #88]	; (80087dc <TIM_OC5_SetConfig+0xbc>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d007      	beq.n	8008796 <TIM_OC5_SetConfig+0x76>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a15      	ldr	r2, [pc, #84]	; (80087e0 <TIM_OC5_SetConfig+0xc0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d003      	beq.n	8008796 <TIM_OC5_SetConfig+0x76>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a14      	ldr	r2, [pc, #80]	; (80087e4 <TIM_OC5_SetConfig+0xc4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d109      	bne.n	80087aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800879c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	021b      	lsls	r3, r3, #8
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	621a      	str	r2, [r3, #32]
}
 80087c4:	bf00      	nop
 80087c6:	371c      	adds	r7, #28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	fffeff8f 	.word	0xfffeff8f
 80087d4:	40010000 	.word	0x40010000
 80087d8:	40010400 	.word	0x40010400
 80087dc:	40014000 	.word	0x40014000
 80087e0:	40014400 	.word	0x40014400
 80087e4:	40014800 	.word	0x40014800

080087e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800880e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4b22      	ldr	r3, [pc, #136]	; (800889c <TIM_OC6_SetConfig+0xb4>)
 8008814:	4013      	ands	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800882a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	051b      	lsls	r3, r3, #20
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	4313      	orrs	r3, r2
 8008836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a19      	ldr	r2, [pc, #100]	; (80088a0 <TIM_OC6_SetConfig+0xb8>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00f      	beq.n	8008860 <TIM_OC6_SetConfig+0x78>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a18      	ldr	r2, [pc, #96]	; (80088a4 <TIM_OC6_SetConfig+0xbc>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d00b      	beq.n	8008860 <TIM_OC6_SetConfig+0x78>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <TIM_OC6_SetConfig+0xc0>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d007      	beq.n	8008860 <TIM_OC6_SetConfig+0x78>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a16      	ldr	r2, [pc, #88]	; (80088ac <TIM_OC6_SetConfig+0xc4>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d003      	beq.n	8008860 <TIM_OC6_SetConfig+0x78>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <TIM_OC6_SetConfig+0xc8>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d109      	bne.n	8008874 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008866:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	029b      	lsls	r3, r3, #10
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	4313      	orrs	r3, r2
 8008872:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	621a      	str	r2, [r3, #32]
}
 800888e:	bf00      	nop
 8008890:	371c      	adds	r7, #28
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	feff8fff 	.word	0xfeff8fff
 80088a0:	40010000 	.word	0x40010000
 80088a4:	40010400 	.word	0x40010400
 80088a8:	40014000 	.word	0x40014000
 80088ac:	40014400 	.word	0x40014400
 80088b0:	40014800 	.word	0x40014800

080088b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	f023 0201 	bic.w	r2, r3, #1
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6a1b      	ldr	r3, [r3, #32]
 80088d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4a2c      	ldr	r2, [pc, #176]	; (8008990 <TIM_TI1_SetConfig+0xdc>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d023      	beq.n	800892a <TIM_TI1_SetConfig+0x76>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e8:	d01f      	beq.n	800892a <TIM_TI1_SetConfig+0x76>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	4a29      	ldr	r2, [pc, #164]	; (8008994 <TIM_TI1_SetConfig+0xe0>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01b      	beq.n	800892a <TIM_TI1_SetConfig+0x76>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4a28      	ldr	r2, [pc, #160]	; (8008998 <TIM_TI1_SetConfig+0xe4>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d017      	beq.n	800892a <TIM_TI1_SetConfig+0x76>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4a27      	ldr	r2, [pc, #156]	; (800899c <TIM_TI1_SetConfig+0xe8>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <TIM_TI1_SetConfig+0x76>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	4a26      	ldr	r2, [pc, #152]	; (80089a0 <TIM_TI1_SetConfig+0xec>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d00f      	beq.n	800892a <TIM_TI1_SetConfig+0x76>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4a25      	ldr	r2, [pc, #148]	; (80089a4 <TIM_TI1_SetConfig+0xf0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d00b      	beq.n	800892a <TIM_TI1_SetConfig+0x76>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4a24      	ldr	r2, [pc, #144]	; (80089a8 <TIM_TI1_SetConfig+0xf4>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d007      	beq.n	800892a <TIM_TI1_SetConfig+0x76>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4a23      	ldr	r2, [pc, #140]	; (80089ac <TIM_TI1_SetConfig+0xf8>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d003      	beq.n	800892a <TIM_TI1_SetConfig+0x76>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	4a22      	ldr	r2, [pc, #136]	; (80089b0 <TIM_TI1_SetConfig+0xfc>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d101      	bne.n	800892e <TIM_TI1_SetConfig+0x7a>
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <TIM_TI1_SetConfig+0x7c>
 800892e:	2300      	movs	r3, #0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d008      	beq.n	8008946 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f023 0303 	bic.w	r3, r3, #3
 800893a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4313      	orrs	r3, r2
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	e003      	b.n	800894e <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f043 0301 	orr.w	r3, r3, #1
 800894c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	b2db      	uxtb	r3, r3
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f023 030a 	bic.w	r3, r3, #10
 8008968:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f003 030a 	and.w	r3, r3, #10
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	4313      	orrs	r3, r2
 8008974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	621a      	str	r2, [r3, #32]
}
 8008982:	bf00      	nop
 8008984:	371c      	adds	r7, #28
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
 800898e:	bf00      	nop
 8008990:	40010000 	.word	0x40010000
 8008994:	40000400 	.word	0x40000400
 8008998:	40000800 	.word	0x40000800
 800899c:	40000c00 	.word	0x40000c00
 80089a0:	40010400 	.word	0x40010400
 80089a4:	40001800 	.word	0x40001800
 80089a8:	40014000 	.word	0x40014000
 80089ac:	4000e000 	.word	0x4000e000
 80089b0:	4000e400 	.word	0x4000e400

080089b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	f023 0201 	bic.w	r2, r3, #1
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	f023 030a 	bic.w	r3, r3, #10
 80089f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b087      	sub	sp, #28
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	60f8      	str	r0, [r7, #12]
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	f023 0210 	bic.w	r2, r3, #16
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	031b      	lsls	r3, r3, #12
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	621a      	str	r2, [r3, #32]
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
	...

08008a74 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	4b09      	ldr	r3, [pc, #36]	; (8008aac <TIM_ITRx_SetConfig+0x38>)
 8008a88:	4013      	ands	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	f043 0307 	orr.w	r3, r3, #7
 8008a96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	609a      	str	r2, [r3, #8]
}
 8008a9e:	bf00      	nop
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	ffcfff8f 	.word	0xffcfff8f

08008ab0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008aca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	021a      	lsls	r2, r3, #8
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	609a      	str	r2, [r3, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	371c      	adds	r7, #28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08a      	sub	sp, #40	; 0x28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e09a      	b.n	8008c3a <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d106      	bne.n	8008b1e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f897 	bl	8008c4c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2202      	movs	r2, #2
 8008b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4619      	mov	r1, r3
 8008b30:	4610      	mov	r0, r2
 8008b32:	f7ff fb43 	bl	80081bc <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6819      	ldr	r1, [r3, #0]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	2203      	movs	r2, #3
 8008b44:	f7ff feb6 	bl	80088b4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 020c 	bic.w	r2, r2, #12
 8008b56:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6999      	ldr	r1, [r3, #24]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b78:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6899      	ldr	r1, [r3, #8]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	4b2f      	ldr	r3, [pc, #188]	; (8008c44 <HAL_TIMEx_HallSensor_Init+0x154>)
 8008b86:	400b      	ands	r3, r1
 8008b88:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b98:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6899      	ldr	r1, [r3, #8]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	4b28      	ldr	r3, [pc, #160]	; (8008c48 <HAL_TIMEx_HallSensor_Init+0x158>)
 8008ba6:	400b      	ands	r3, r1
 8008ba8:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689a      	ldr	r2, [r3, #8]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f042 0204 	orr.w	r2, r2, #4
 8008bb8:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8008bc2:	2370      	movs	r3, #112	; 0x70
 8008bc4:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f107 020c 	add.w	r2, r7, #12
 8008be0:	4611      	mov	r1, r2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff fc20 	bl	8008428 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008bf6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8008c06:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3728      	adds	r7, #40	; 0x28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	ffcfff8f 	.word	0xffcfff8f
 8008c48:	fffefff8 	.word	0xfffefff8

08008c4c <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c74:	2302      	movs	r3, #2
 8008c76:	e077      	b.n	8008d68 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2202      	movs	r2, #2
 8008c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a35      	ldr	r2, [pc, #212]	; (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d004      	beq.n	8008cac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a34      	ldr	r2, [pc, #208]	; (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d108      	bne.n	8008cbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008cb2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a25      	ldr	r2, [pc, #148]	; (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d02c      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cea:	d027      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a22      	ldr	r2, [pc, #136]	; (8008d7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d022      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a21      	ldr	r2, [pc, #132]	; (8008d80 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d01d      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a1f      	ldr	r2, [pc, #124]	; (8008d84 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d018      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a1a      	ldr	r2, [pc, #104]	; (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d013      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a1b      	ldr	r2, [pc, #108]	; (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00e      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a1a      	ldr	r2, [pc, #104]	; (8008d8c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d009      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a18      	ldr	r2, [pc, #96]	; (8008d90 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d004      	beq.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a17      	ldr	r2, [pc, #92]	; (8008d94 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d10c      	bne.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	40010000 	.word	0x40010000
 8008d78:	40010400 	.word	0x40010400
 8008d7c:	40000400 	.word	0x40000400
 8008d80:	40000800 	.word	0x40000800
 8008d84:	40000c00 	.word	0x40000c00
 8008d88:	40001800 	.word	0x40001800
 8008d8c:	40014000 	.word	0x40014000
 8008d90:	4000e000 	.word	0x4000e000
 8008d94:	4000e400 	.word	0x4000e400

08008d98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008da2:	2300      	movs	r3, #0
 8008da4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d101      	bne.n	8008db4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008db0:	2302      	movs	r3, #2
 8008db2:	e087      	b.n	8008ec4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	041b      	lsls	r3, r3, #16
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a27      	ldr	r2, [pc, #156]	; (8008ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d004      	beq.n	8008e42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a25      	ldr	r2, [pc, #148]	; (8008ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d106      	bne.n	8008e50 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	69db      	ldr	r3, [r3, #28]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a1e      	ldr	r2, [pc, #120]	; (8008ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d004      	beq.n	8008e64 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a1d      	ldr	r2, [pc, #116]	; (8008ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d126      	bne.n	8008eb2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6e:	051b      	lsls	r3, r3, #20
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a0e      	ldr	r2, [pc, #56]	; (8008ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d004      	beq.n	8008ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a0d      	ldr	r2, [pc, #52]	; (8008ed4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d106      	bne.n	8008eb2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	40010000 	.word	0x40010000
 8008ed4:	40010400 	.word	0x40010400

08008ed8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e03c      	b.n	8008f64 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7f8 fe9a 	bl	8001c38 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2202      	movs	r2, #2
 8008f08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 0201 	bic.w	r2, r2, #1
 8008f1a:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f85b 	bl	8008fd8 <USART_SetConfig>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d101      	bne.n	8008f2c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e01b      	b.n	8008f64 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f3a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689a      	ldr	r2, [r3, #8]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f4a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f042 0201 	orr.w	r2, r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fddd 	bl	8009b1c <USART_CheckIdleState>
 8008f62:	4603      	mov	r3, r0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008f7c:	e018      	b.n	8008fb0 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f84:	d014      	beq.n	8008fb0 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f86:	f7f9 f813 	bl	8001fb0 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d302      	bcc.n	8008f9c <USART_WaitOnFlagUntilTimeout+0x30>
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d109      	bne.n	8008fb0 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e00f      	b.n	8008fd0 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69da      	ldr	r2, [r3, #28]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	4013      	ands	r3, r2
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	bf0c      	ite	eq
 8008fc0:	2301      	moveq	r3, #1
 8008fc2:	2300      	movne	r3, #0
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d0d7      	beq.n	8008f7e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b08e      	sub	sp, #56	; 0x38
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	4bc9      	ldr	r3, [pc, #804]	; (800932c <USART_SetConfig+0x354>)
 8009008:	4013      	ands	r3, r2
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6812      	ldr	r2, [r2, #0]
 800900e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009010:	430b      	orrs	r3, r1
 8009012:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8009014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009018:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009020:	4313      	orrs	r3, r2
 8009022:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	699a      	ldr	r2, [r3, #24]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	69db      	ldr	r3, [r3, #28]
 800902c:	4313      	orrs	r3, r2
 800902e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009030:	4313      	orrs	r3, r2
 8009032:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800903a:	4313      	orrs	r3, r2
 800903c:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	4bba      	ldr	r3, [pc, #744]	; (8009330 <USART_SetConfig+0x358>)
 8009046:	4013      	ands	r3, r2
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	6812      	ldr	r2, [r2, #0]
 800904c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800904e:	430b      	orrs	r3, r1
 8009050:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	f023 010f 	bic.w	r1, r3, #15
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	430a      	orrs	r2, r1
 8009066:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4ab1      	ldr	r2, [pc, #708]	; (8009334 <USART_SetConfig+0x35c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d176      	bne.n	8009160 <USART_SetConfig+0x188>
 8009072:	4bb1      	ldr	r3, [pc, #708]	; (8009338 <USART_SetConfig+0x360>)
 8009074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800907a:	2b28      	cmp	r3, #40	; 0x28
 800907c:	d86c      	bhi.n	8009158 <USART_SetConfig+0x180>
 800907e:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <USART_SetConfig+0xac>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	08009129 	.word	0x08009129
 8009088:	08009159 	.word	0x08009159
 800908c:	08009159 	.word	0x08009159
 8009090:	08009159 	.word	0x08009159
 8009094:	08009159 	.word	0x08009159
 8009098:	08009159 	.word	0x08009159
 800909c:	08009159 	.word	0x08009159
 80090a0:	08009159 	.word	0x08009159
 80090a4:	08009131 	.word	0x08009131
 80090a8:	08009159 	.word	0x08009159
 80090ac:	08009159 	.word	0x08009159
 80090b0:	08009159 	.word	0x08009159
 80090b4:	08009159 	.word	0x08009159
 80090b8:	08009159 	.word	0x08009159
 80090bc:	08009159 	.word	0x08009159
 80090c0:	08009159 	.word	0x08009159
 80090c4:	08009139 	.word	0x08009139
 80090c8:	08009159 	.word	0x08009159
 80090cc:	08009159 	.word	0x08009159
 80090d0:	08009159 	.word	0x08009159
 80090d4:	08009159 	.word	0x08009159
 80090d8:	08009159 	.word	0x08009159
 80090dc:	08009159 	.word	0x08009159
 80090e0:	08009159 	.word	0x08009159
 80090e4:	08009141 	.word	0x08009141
 80090e8:	08009159 	.word	0x08009159
 80090ec:	08009159 	.word	0x08009159
 80090f0:	08009159 	.word	0x08009159
 80090f4:	08009159 	.word	0x08009159
 80090f8:	08009159 	.word	0x08009159
 80090fc:	08009159 	.word	0x08009159
 8009100:	08009159 	.word	0x08009159
 8009104:	08009149 	.word	0x08009149
 8009108:	08009159 	.word	0x08009159
 800910c:	08009159 	.word	0x08009159
 8009110:	08009159 	.word	0x08009159
 8009114:	08009159 	.word	0x08009159
 8009118:	08009159 	.word	0x08009159
 800911c:	08009159 	.word	0x08009159
 8009120:	08009159 	.word	0x08009159
 8009124:	08009151 	.word	0x08009151
 8009128:	2301      	movs	r3, #1
 800912a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800912e:	e18e      	b.n	800944e <USART_SetConfig+0x476>
 8009130:	2302      	movs	r3, #2
 8009132:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009136:	e18a      	b.n	800944e <USART_SetConfig+0x476>
 8009138:	2304      	movs	r3, #4
 800913a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800913e:	e186      	b.n	800944e <USART_SetConfig+0x476>
 8009140:	2308      	movs	r3, #8
 8009142:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009146:	e182      	b.n	800944e <USART_SetConfig+0x476>
 8009148:	2310      	movs	r3, #16
 800914a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800914e:	e17e      	b.n	800944e <USART_SetConfig+0x476>
 8009150:	2320      	movs	r3, #32
 8009152:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009156:	e17a      	b.n	800944e <USART_SetConfig+0x476>
 8009158:	2340      	movs	r3, #64	; 0x40
 800915a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800915e:	e176      	b.n	800944e <USART_SetConfig+0x476>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a75      	ldr	r2, [pc, #468]	; (800933c <USART_SetConfig+0x364>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d130      	bne.n	80091cc <USART_SetConfig+0x1f4>
 800916a:	4b73      	ldr	r3, [pc, #460]	; (8009338 <USART_SetConfig+0x360>)
 800916c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	2b05      	cmp	r3, #5
 8009174:	d826      	bhi.n	80091c4 <USART_SetConfig+0x1ec>
 8009176:	a201      	add	r2, pc, #4	; (adr r2, 800917c <USART_SetConfig+0x1a4>)
 8009178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917c:	08009195 	.word	0x08009195
 8009180:	0800919d 	.word	0x0800919d
 8009184:	080091a5 	.word	0x080091a5
 8009188:	080091ad 	.word	0x080091ad
 800918c:	080091b5 	.word	0x080091b5
 8009190:	080091bd 	.word	0x080091bd
 8009194:	2300      	movs	r3, #0
 8009196:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800919a:	e158      	b.n	800944e <USART_SetConfig+0x476>
 800919c:	2302      	movs	r3, #2
 800919e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80091a2:	e154      	b.n	800944e <USART_SetConfig+0x476>
 80091a4:	2304      	movs	r3, #4
 80091a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80091aa:	e150      	b.n	800944e <USART_SetConfig+0x476>
 80091ac:	2308      	movs	r3, #8
 80091ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80091b2:	e14c      	b.n	800944e <USART_SetConfig+0x476>
 80091b4:	2310      	movs	r3, #16
 80091b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80091ba:	e148      	b.n	800944e <USART_SetConfig+0x476>
 80091bc:	2320      	movs	r3, #32
 80091be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80091c2:	e144      	b.n	800944e <USART_SetConfig+0x476>
 80091c4:	2340      	movs	r3, #64	; 0x40
 80091c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80091ca:	e140      	b.n	800944e <USART_SetConfig+0x476>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a5b      	ldr	r2, [pc, #364]	; (8009340 <USART_SetConfig+0x368>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d130      	bne.n	8009238 <USART_SetConfig+0x260>
 80091d6:	4b58      	ldr	r3, [pc, #352]	; (8009338 <USART_SetConfig+0x360>)
 80091d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	2b05      	cmp	r3, #5
 80091e0:	d826      	bhi.n	8009230 <USART_SetConfig+0x258>
 80091e2:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <USART_SetConfig+0x210>)
 80091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e8:	08009201 	.word	0x08009201
 80091ec:	08009209 	.word	0x08009209
 80091f0:	08009211 	.word	0x08009211
 80091f4:	08009219 	.word	0x08009219
 80091f8:	08009221 	.word	0x08009221
 80091fc:	08009229 	.word	0x08009229
 8009200:	2300      	movs	r3, #0
 8009202:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009206:	e122      	b.n	800944e <USART_SetConfig+0x476>
 8009208:	2302      	movs	r3, #2
 800920a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800920e:	e11e      	b.n	800944e <USART_SetConfig+0x476>
 8009210:	2304      	movs	r3, #4
 8009212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009216:	e11a      	b.n	800944e <USART_SetConfig+0x476>
 8009218:	2308      	movs	r3, #8
 800921a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800921e:	e116      	b.n	800944e <USART_SetConfig+0x476>
 8009220:	2310      	movs	r3, #16
 8009222:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009226:	e112      	b.n	800944e <USART_SetConfig+0x476>
 8009228:	2320      	movs	r3, #32
 800922a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800922e:	e10e      	b.n	800944e <USART_SetConfig+0x476>
 8009230:	2340      	movs	r3, #64	; 0x40
 8009232:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009236:	e10a      	b.n	800944e <USART_SetConfig+0x476>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a41      	ldr	r2, [pc, #260]	; (8009344 <USART_SetConfig+0x36c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	f040 8086 	bne.w	8009350 <USART_SetConfig+0x378>
 8009244:	4b3c      	ldr	r3, [pc, #240]	; (8009338 <USART_SetConfig+0x360>)
 8009246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800924c:	2b28      	cmp	r3, #40	; 0x28
 800924e:	d87b      	bhi.n	8009348 <USART_SetConfig+0x370>
 8009250:	a201      	add	r2, pc, #4	; (adr r2, 8009258 <USART_SetConfig+0x280>)
 8009252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009256:	bf00      	nop
 8009258:	080092fd 	.word	0x080092fd
 800925c:	08009349 	.word	0x08009349
 8009260:	08009349 	.word	0x08009349
 8009264:	08009349 	.word	0x08009349
 8009268:	08009349 	.word	0x08009349
 800926c:	08009349 	.word	0x08009349
 8009270:	08009349 	.word	0x08009349
 8009274:	08009349 	.word	0x08009349
 8009278:	08009305 	.word	0x08009305
 800927c:	08009349 	.word	0x08009349
 8009280:	08009349 	.word	0x08009349
 8009284:	08009349 	.word	0x08009349
 8009288:	08009349 	.word	0x08009349
 800928c:	08009349 	.word	0x08009349
 8009290:	08009349 	.word	0x08009349
 8009294:	08009349 	.word	0x08009349
 8009298:	0800930d 	.word	0x0800930d
 800929c:	08009349 	.word	0x08009349
 80092a0:	08009349 	.word	0x08009349
 80092a4:	08009349 	.word	0x08009349
 80092a8:	08009349 	.word	0x08009349
 80092ac:	08009349 	.word	0x08009349
 80092b0:	08009349 	.word	0x08009349
 80092b4:	08009349 	.word	0x08009349
 80092b8:	08009315 	.word	0x08009315
 80092bc:	08009349 	.word	0x08009349
 80092c0:	08009349 	.word	0x08009349
 80092c4:	08009349 	.word	0x08009349
 80092c8:	08009349 	.word	0x08009349
 80092cc:	08009349 	.word	0x08009349
 80092d0:	08009349 	.word	0x08009349
 80092d4:	08009349 	.word	0x08009349
 80092d8:	0800931d 	.word	0x0800931d
 80092dc:	08009349 	.word	0x08009349
 80092e0:	08009349 	.word	0x08009349
 80092e4:	08009349 	.word	0x08009349
 80092e8:	08009349 	.word	0x08009349
 80092ec:	08009349 	.word	0x08009349
 80092f0:	08009349 	.word	0x08009349
 80092f4:	08009349 	.word	0x08009349
 80092f8:	08009325 	.word	0x08009325
 80092fc:	2301      	movs	r3, #1
 80092fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009302:	e0a4      	b.n	800944e <USART_SetConfig+0x476>
 8009304:	2302      	movs	r3, #2
 8009306:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800930a:	e0a0      	b.n	800944e <USART_SetConfig+0x476>
 800930c:	2304      	movs	r3, #4
 800930e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009312:	e09c      	b.n	800944e <USART_SetConfig+0x476>
 8009314:	2308      	movs	r3, #8
 8009316:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800931a:	e098      	b.n	800944e <USART_SetConfig+0x476>
 800931c:	2310      	movs	r3, #16
 800931e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009322:	e094      	b.n	800944e <USART_SetConfig+0x476>
 8009324:	2320      	movs	r3, #32
 8009326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800932a:	e090      	b.n	800944e <USART_SetConfig+0x476>
 800932c:	cfff69f3 	.word	0xcfff69f3
 8009330:	ffffc0f6 	.word	0xffffc0f6
 8009334:	40011000 	.word	0x40011000
 8009338:	58024400 	.word	0x58024400
 800933c:	40004400 	.word	0x40004400
 8009340:	40004800 	.word	0x40004800
 8009344:	40011400 	.word	0x40011400
 8009348:	2340      	movs	r3, #64	; 0x40
 800934a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800934e:	e07e      	b.n	800944e <USART_SetConfig+0x476>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4ab5      	ldr	r2, [pc, #724]	; (800962c <USART_SetConfig+0x654>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d176      	bne.n	8009448 <USART_SetConfig+0x470>
 800935a:	4bb5      	ldr	r3, [pc, #724]	; (8009630 <USART_SetConfig+0x658>)
 800935c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800935e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009362:	2b28      	cmp	r3, #40	; 0x28
 8009364:	d86c      	bhi.n	8009440 <USART_SetConfig+0x468>
 8009366:	a201      	add	r2, pc, #4	; (adr r2, 800936c <USART_SetConfig+0x394>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	08009411 	.word	0x08009411
 8009370:	08009441 	.word	0x08009441
 8009374:	08009441 	.word	0x08009441
 8009378:	08009441 	.word	0x08009441
 800937c:	08009441 	.word	0x08009441
 8009380:	08009441 	.word	0x08009441
 8009384:	08009441 	.word	0x08009441
 8009388:	08009441 	.word	0x08009441
 800938c:	08009419 	.word	0x08009419
 8009390:	08009441 	.word	0x08009441
 8009394:	08009441 	.word	0x08009441
 8009398:	08009441 	.word	0x08009441
 800939c:	08009441 	.word	0x08009441
 80093a0:	08009441 	.word	0x08009441
 80093a4:	08009441 	.word	0x08009441
 80093a8:	08009441 	.word	0x08009441
 80093ac:	08009421 	.word	0x08009421
 80093b0:	08009441 	.word	0x08009441
 80093b4:	08009441 	.word	0x08009441
 80093b8:	08009441 	.word	0x08009441
 80093bc:	08009441 	.word	0x08009441
 80093c0:	08009441 	.word	0x08009441
 80093c4:	08009441 	.word	0x08009441
 80093c8:	08009441 	.word	0x08009441
 80093cc:	08009429 	.word	0x08009429
 80093d0:	08009441 	.word	0x08009441
 80093d4:	08009441 	.word	0x08009441
 80093d8:	08009441 	.word	0x08009441
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009441 	.word	0x08009441
 80093e4:	08009441 	.word	0x08009441
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009431 	.word	0x08009431
 80093f0:	08009441 	.word	0x08009441
 80093f4:	08009441 	.word	0x08009441
 80093f8:	08009441 	.word	0x08009441
 80093fc:	08009441 	.word	0x08009441
 8009400:	08009441 	.word	0x08009441
 8009404:	08009441 	.word	0x08009441
 8009408:	08009441 	.word	0x08009441
 800940c:	08009439 	.word	0x08009439
 8009410:	2301      	movs	r3, #1
 8009412:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009416:	e01a      	b.n	800944e <USART_SetConfig+0x476>
 8009418:	2302      	movs	r3, #2
 800941a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800941e:	e016      	b.n	800944e <USART_SetConfig+0x476>
 8009420:	2304      	movs	r3, #4
 8009422:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009426:	e012      	b.n	800944e <USART_SetConfig+0x476>
 8009428:	2308      	movs	r3, #8
 800942a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800942e:	e00e      	b.n	800944e <USART_SetConfig+0x476>
 8009430:	2310      	movs	r3, #16
 8009432:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009436:	e00a      	b.n	800944e <USART_SetConfig+0x476>
 8009438:	2320      	movs	r3, #32
 800943a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800943e:	e006      	b.n	800944e <USART_SetConfig+0x476>
 8009440:	2340      	movs	r3, #64	; 0x40
 8009442:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009446:	e002      	b.n	800944e <USART_SetConfig+0x476>
 8009448:	2340      	movs	r3, #64	; 0x40
 800944a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 800944e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009452:	2b20      	cmp	r3, #32
 8009454:	f200 832f 	bhi.w	8009ab6 <USART_SetConfig+0xade>
 8009458:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <USART_SetConfig+0x488>)
 800945a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945e:	bf00      	nop
 8009460:	080094e5 	.word	0x080094e5
 8009464:	0800959b 	.word	0x0800959b
 8009468:	0800965b 	.word	0x0800965b
 800946c:	08009ab7 	.word	0x08009ab7
 8009470:	08009715 	.word	0x08009715
 8009474:	08009ab7 	.word	0x08009ab7
 8009478:	08009ab7 	.word	0x08009ab7
 800947c:	08009ab7 	.word	0x08009ab7
 8009480:	080097cf 	.word	0x080097cf
 8009484:	08009ab7 	.word	0x08009ab7
 8009488:	08009ab7 	.word	0x08009ab7
 800948c:	08009ab7 	.word	0x08009ab7
 8009490:	08009ab7 	.word	0x08009ab7
 8009494:	08009ab7 	.word	0x08009ab7
 8009498:	08009ab7 	.word	0x08009ab7
 800949c:	08009ab7 	.word	0x08009ab7
 80094a0:	08009947 	.word	0x08009947
 80094a4:	08009ab7 	.word	0x08009ab7
 80094a8:	08009ab7 	.word	0x08009ab7
 80094ac:	08009ab7 	.word	0x08009ab7
 80094b0:	08009ab7 	.word	0x08009ab7
 80094b4:	08009ab7 	.word	0x08009ab7
 80094b8:	08009ab7 	.word	0x08009ab7
 80094bc:	08009ab7 	.word	0x08009ab7
 80094c0:	08009ab7 	.word	0x08009ab7
 80094c4:	08009ab7 	.word	0x08009ab7
 80094c8:	08009ab7 	.word	0x08009ab7
 80094cc:	08009ab7 	.word	0x08009ab7
 80094d0:	08009ab7 	.word	0x08009ab7
 80094d4:	08009ab7 	.word	0x08009ab7
 80094d8:	08009ab7 	.word	0x08009ab7
 80094dc:	08009ab7 	.word	0x08009ab7
 80094e0:	08009a05 	.word	0x08009a05
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80094e4:	f7fb fe5e 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 80094e8:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d044      	beq.n	800957c <USART_SetConfig+0x5a4>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d03e      	beq.n	8009578 <USART_SetConfig+0x5a0>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d038      	beq.n	8009574 <USART_SetConfig+0x59c>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	2b03      	cmp	r3, #3
 8009508:	d032      	beq.n	8009570 <USART_SetConfig+0x598>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	2b04      	cmp	r3, #4
 8009510:	d02c      	beq.n	800956c <USART_SetConfig+0x594>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	2b05      	cmp	r3, #5
 8009518:	d026      	beq.n	8009568 <USART_SetConfig+0x590>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	2b06      	cmp	r3, #6
 8009520:	d020      	beq.n	8009564 <USART_SetConfig+0x58c>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	2b07      	cmp	r3, #7
 8009528:	d01a      	beq.n	8009560 <USART_SetConfig+0x588>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	2b08      	cmp	r3, #8
 8009530:	d014      	beq.n	800955c <USART_SetConfig+0x584>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	2b09      	cmp	r3, #9
 8009538:	d00e      	beq.n	8009558 <USART_SetConfig+0x580>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953e:	2b0a      	cmp	r3, #10
 8009540:	d008      	beq.n	8009554 <USART_SetConfig+0x57c>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	2b0b      	cmp	r3, #11
 8009548:	d102      	bne.n	8009550 <USART_SetConfig+0x578>
 800954a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800954e:	e016      	b.n	800957e <USART_SetConfig+0x5a6>
 8009550:	2301      	movs	r3, #1
 8009552:	e014      	b.n	800957e <USART_SetConfig+0x5a6>
 8009554:	2380      	movs	r3, #128	; 0x80
 8009556:	e012      	b.n	800957e <USART_SetConfig+0x5a6>
 8009558:	2340      	movs	r3, #64	; 0x40
 800955a:	e010      	b.n	800957e <USART_SetConfig+0x5a6>
 800955c:	2320      	movs	r3, #32
 800955e:	e00e      	b.n	800957e <USART_SetConfig+0x5a6>
 8009560:	2310      	movs	r3, #16
 8009562:	e00c      	b.n	800957e <USART_SetConfig+0x5a6>
 8009564:	230c      	movs	r3, #12
 8009566:	e00a      	b.n	800957e <USART_SetConfig+0x5a6>
 8009568:	230a      	movs	r3, #10
 800956a:	e008      	b.n	800957e <USART_SetConfig+0x5a6>
 800956c:	2308      	movs	r3, #8
 800956e:	e006      	b.n	800957e <USART_SetConfig+0x5a6>
 8009570:	2306      	movs	r3, #6
 8009572:	e004      	b.n	800957e <USART_SetConfig+0x5a6>
 8009574:	2304      	movs	r3, #4
 8009576:	e002      	b.n	800957e <USART_SetConfig+0x5a6>
 8009578:	2302      	movs	r3, #2
 800957a:	e000      	b.n	800957e <USART_SetConfig+0x5a6>
 800957c:	2301      	movs	r3, #1
 800957e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009580:	fbb2 f3f3 	udiv	r3, r2, r3
 8009584:	005a      	lsls	r2, r3, #1
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	085b      	lsrs	r3, r3, #1
 800958c:	441a      	add	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	fbb2 f3f3 	udiv	r3, r2, r3
 8009596:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009598:	e291      	b.n	8009abe <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800959a:	f7fb fe19 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 800959e:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d049      	beq.n	800963c <USART_SetConfig+0x664>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d043      	beq.n	8009638 <USART_SetConfig+0x660>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d03d      	beq.n	8009634 <USART_SetConfig+0x65c>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	2b03      	cmp	r3, #3
 80095be:	d032      	beq.n	8009626 <USART_SetConfig+0x64e>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	2b04      	cmp	r3, #4
 80095c6:	d02c      	beq.n	8009622 <USART_SetConfig+0x64a>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	2b05      	cmp	r3, #5
 80095ce:	d026      	beq.n	800961e <USART_SetConfig+0x646>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	2b06      	cmp	r3, #6
 80095d6:	d020      	beq.n	800961a <USART_SetConfig+0x642>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	2b07      	cmp	r3, #7
 80095de:	d01a      	beq.n	8009616 <USART_SetConfig+0x63e>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	2b08      	cmp	r3, #8
 80095e6:	d014      	beq.n	8009612 <USART_SetConfig+0x63a>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	2b09      	cmp	r3, #9
 80095ee:	d00e      	beq.n	800960e <USART_SetConfig+0x636>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f4:	2b0a      	cmp	r3, #10
 80095f6:	d008      	beq.n	800960a <USART_SetConfig+0x632>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fc:	2b0b      	cmp	r3, #11
 80095fe:	d102      	bne.n	8009606 <USART_SetConfig+0x62e>
 8009600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009604:	e01b      	b.n	800963e <USART_SetConfig+0x666>
 8009606:	2301      	movs	r3, #1
 8009608:	e019      	b.n	800963e <USART_SetConfig+0x666>
 800960a:	2380      	movs	r3, #128	; 0x80
 800960c:	e017      	b.n	800963e <USART_SetConfig+0x666>
 800960e:	2340      	movs	r3, #64	; 0x40
 8009610:	e015      	b.n	800963e <USART_SetConfig+0x666>
 8009612:	2320      	movs	r3, #32
 8009614:	e013      	b.n	800963e <USART_SetConfig+0x666>
 8009616:	2310      	movs	r3, #16
 8009618:	e011      	b.n	800963e <USART_SetConfig+0x666>
 800961a:	230c      	movs	r3, #12
 800961c:	e00f      	b.n	800963e <USART_SetConfig+0x666>
 800961e:	230a      	movs	r3, #10
 8009620:	e00d      	b.n	800963e <USART_SetConfig+0x666>
 8009622:	2308      	movs	r3, #8
 8009624:	e00b      	b.n	800963e <USART_SetConfig+0x666>
 8009626:	2306      	movs	r3, #6
 8009628:	e009      	b.n	800963e <USART_SetConfig+0x666>
 800962a:	bf00      	nop
 800962c:	40011c00 	.word	0x40011c00
 8009630:	58024400 	.word	0x58024400
 8009634:	2304      	movs	r3, #4
 8009636:	e002      	b.n	800963e <USART_SetConfig+0x666>
 8009638:	2302      	movs	r3, #2
 800963a:	e000      	b.n	800963e <USART_SetConfig+0x666>
 800963c:	2301      	movs	r3, #1
 800963e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009640:	fbb2 f3f3 	udiv	r3, r2, r3
 8009644:	005a      	lsls	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	085b      	lsrs	r3, r3, #1
 800964c:	441a      	add	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	fbb2 f3f3 	udiv	r3, r2, r3
 8009656:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009658:	e231      	b.n	8009abe <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800965a:	f107 0318 	add.w	r3, r7, #24
 800965e:	4618      	mov	r0, r3
 8009660:	f7fd fc54 	bl	8006f0c <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8009664:	69fa      	ldr	r2, [r7, #28]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966a:	2b00      	cmp	r3, #0
 800966c:	d044      	beq.n	80096f8 <USART_SetConfig+0x720>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	2b01      	cmp	r3, #1
 8009674:	d03e      	beq.n	80096f4 <USART_SetConfig+0x71c>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	2b02      	cmp	r3, #2
 800967c:	d038      	beq.n	80096f0 <USART_SetConfig+0x718>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009682:	2b03      	cmp	r3, #3
 8009684:	d032      	beq.n	80096ec <USART_SetConfig+0x714>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968a:	2b04      	cmp	r3, #4
 800968c:	d02c      	beq.n	80096e8 <USART_SetConfig+0x710>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009692:	2b05      	cmp	r3, #5
 8009694:	d026      	beq.n	80096e4 <USART_SetConfig+0x70c>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969a:	2b06      	cmp	r3, #6
 800969c:	d020      	beq.n	80096e0 <USART_SetConfig+0x708>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a2:	2b07      	cmp	r3, #7
 80096a4:	d01a      	beq.n	80096dc <USART_SetConfig+0x704>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	d014      	beq.n	80096d8 <USART_SetConfig+0x700>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	2b09      	cmp	r3, #9
 80096b4:	d00e      	beq.n	80096d4 <USART_SetConfig+0x6fc>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	2b0a      	cmp	r3, #10
 80096bc:	d008      	beq.n	80096d0 <USART_SetConfig+0x6f8>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	2b0b      	cmp	r3, #11
 80096c4:	d102      	bne.n	80096cc <USART_SetConfig+0x6f4>
 80096c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096ca:	e016      	b.n	80096fa <USART_SetConfig+0x722>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e014      	b.n	80096fa <USART_SetConfig+0x722>
 80096d0:	2380      	movs	r3, #128	; 0x80
 80096d2:	e012      	b.n	80096fa <USART_SetConfig+0x722>
 80096d4:	2340      	movs	r3, #64	; 0x40
 80096d6:	e010      	b.n	80096fa <USART_SetConfig+0x722>
 80096d8:	2320      	movs	r3, #32
 80096da:	e00e      	b.n	80096fa <USART_SetConfig+0x722>
 80096dc:	2310      	movs	r3, #16
 80096de:	e00c      	b.n	80096fa <USART_SetConfig+0x722>
 80096e0:	230c      	movs	r3, #12
 80096e2:	e00a      	b.n	80096fa <USART_SetConfig+0x722>
 80096e4:	230a      	movs	r3, #10
 80096e6:	e008      	b.n	80096fa <USART_SetConfig+0x722>
 80096e8:	2308      	movs	r3, #8
 80096ea:	e006      	b.n	80096fa <USART_SetConfig+0x722>
 80096ec:	2306      	movs	r3, #6
 80096ee:	e004      	b.n	80096fa <USART_SetConfig+0x722>
 80096f0:	2304      	movs	r3, #4
 80096f2:	e002      	b.n	80096fa <USART_SetConfig+0x722>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e000      	b.n	80096fa <USART_SetConfig+0x722>
 80096f8:	2301      	movs	r3, #1
 80096fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80096fe:	005a      	lsls	r2, r3, #1
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	441a      	add	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009710:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8009712:	e1d4      	b.n	8009abe <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009714:	f107 030c 	add.w	r3, r7, #12
 8009718:	4618      	mov	r0, r3
 800971a:	f7fd fd4b 	bl	80071b4 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	2b00      	cmp	r3, #0
 8009726:	d044      	beq.n	80097b2 <USART_SetConfig+0x7da>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	2b01      	cmp	r3, #1
 800972e:	d03e      	beq.n	80097ae <USART_SetConfig+0x7d6>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	2b02      	cmp	r3, #2
 8009736:	d038      	beq.n	80097aa <USART_SetConfig+0x7d2>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	2b03      	cmp	r3, #3
 800973e:	d032      	beq.n	80097a6 <USART_SetConfig+0x7ce>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	2b04      	cmp	r3, #4
 8009746:	d02c      	beq.n	80097a2 <USART_SetConfig+0x7ca>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	2b05      	cmp	r3, #5
 800974e:	d026      	beq.n	800979e <USART_SetConfig+0x7c6>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009754:	2b06      	cmp	r3, #6
 8009756:	d020      	beq.n	800979a <USART_SetConfig+0x7c2>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	2b07      	cmp	r3, #7
 800975e:	d01a      	beq.n	8009796 <USART_SetConfig+0x7be>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009764:	2b08      	cmp	r3, #8
 8009766:	d014      	beq.n	8009792 <USART_SetConfig+0x7ba>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976c:	2b09      	cmp	r3, #9
 800976e:	d00e      	beq.n	800978e <USART_SetConfig+0x7b6>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	2b0a      	cmp	r3, #10
 8009776:	d008      	beq.n	800978a <USART_SetConfig+0x7b2>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977c:	2b0b      	cmp	r3, #11
 800977e:	d102      	bne.n	8009786 <USART_SetConfig+0x7ae>
 8009780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009784:	e016      	b.n	80097b4 <USART_SetConfig+0x7dc>
 8009786:	2301      	movs	r3, #1
 8009788:	e014      	b.n	80097b4 <USART_SetConfig+0x7dc>
 800978a:	2380      	movs	r3, #128	; 0x80
 800978c:	e012      	b.n	80097b4 <USART_SetConfig+0x7dc>
 800978e:	2340      	movs	r3, #64	; 0x40
 8009790:	e010      	b.n	80097b4 <USART_SetConfig+0x7dc>
 8009792:	2320      	movs	r3, #32
 8009794:	e00e      	b.n	80097b4 <USART_SetConfig+0x7dc>
 8009796:	2310      	movs	r3, #16
 8009798:	e00c      	b.n	80097b4 <USART_SetConfig+0x7dc>
 800979a:	230c      	movs	r3, #12
 800979c:	e00a      	b.n	80097b4 <USART_SetConfig+0x7dc>
 800979e:	230a      	movs	r3, #10
 80097a0:	e008      	b.n	80097b4 <USART_SetConfig+0x7dc>
 80097a2:	2308      	movs	r3, #8
 80097a4:	e006      	b.n	80097b4 <USART_SetConfig+0x7dc>
 80097a6:	2306      	movs	r3, #6
 80097a8:	e004      	b.n	80097b4 <USART_SetConfig+0x7dc>
 80097aa:	2304      	movs	r3, #4
 80097ac:	e002      	b.n	80097b4 <USART_SetConfig+0x7dc>
 80097ae:	2302      	movs	r3, #2
 80097b0:	e000      	b.n	80097b4 <USART_SetConfig+0x7dc>
 80097b2:	2301      	movs	r3, #1
 80097b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b8:	005a      	lsls	r2, r3, #1
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	085b      	lsrs	r3, r3, #1
 80097c0:	441a      	add	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ca:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 80097cc:	e177      	b.n	8009abe <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ce:	4b8a      	ldr	r3, [pc, #552]	; (80099f8 <USART_SetConfig+0xa20>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0320 	and.w	r3, r3, #32
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d05d      	beq.n	8009896 <USART_SetConfig+0x8be>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 80097da:	4b87      	ldr	r3, [pc, #540]	; (80099f8 <USART_SetConfig+0xa20>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	08db      	lsrs	r3, r3, #3
 80097e0:	f003 0303 	and.w	r3, r3, #3
 80097e4:	4a85      	ldr	r2, [pc, #532]	; (80099fc <USART_SetConfig+0xa24>)
 80097e6:	40da      	lsrs	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d044      	beq.n	800987a <USART_SetConfig+0x8a2>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d03e      	beq.n	8009876 <USART_SetConfig+0x89e>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d038      	beq.n	8009872 <USART_SetConfig+0x89a>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	2b03      	cmp	r3, #3
 8009806:	d032      	beq.n	800986e <USART_SetConfig+0x896>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2b04      	cmp	r3, #4
 800980e:	d02c      	beq.n	800986a <USART_SetConfig+0x892>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	2b05      	cmp	r3, #5
 8009816:	d026      	beq.n	8009866 <USART_SetConfig+0x88e>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981c:	2b06      	cmp	r3, #6
 800981e:	d020      	beq.n	8009862 <USART_SetConfig+0x88a>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009824:	2b07      	cmp	r3, #7
 8009826:	d01a      	beq.n	800985e <USART_SetConfig+0x886>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	2b08      	cmp	r3, #8
 800982e:	d014      	beq.n	800985a <USART_SetConfig+0x882>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	2b09      	cmp	r3, #9
 8009836:	d00e      	beq.n	8009856 <USART_SetConfig+0x87e>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	2b0a      	cmp	r3, #10
 800983e:	d008      	beq.n	8009852 <USART_SetConfig+0x87a>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	2b0b      	cmp	r3, #11
 8009846:	d102      	bne.n	800984e <USART_SetConfig+0x876>
 8009848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800984c:	e016      	b.n	800987c <USART_SetConfig+0x8a4>
 800984e:	2301      	movs	r3, #1
 8009850:	e014      	b.n	800987c <USART_SetConfig+0x8a4>
 8009852:	2380      	movs	r3, #128	; 0x80
 8009854:	e012      	b.n	800987c <USART_SetConfig+0x8a4>
 8009856:	2340      	movs	r3, #64	; 0x40
 8009858:	e010      	b.n	800987c <USART_SetConfig+0x8a4>
 800985a:	2320      	movs	r3, #32
 800985c:	e00e      	b.n	800987c <USART_SetConfig+0x8a4>
 800985e:	2310      	movs	r3, #16
 8009860:	e00c      	b.n	800987c <USART_SetConfig+0x8a4>
 8009862:	230c      	movs	r3, #12
 8009864:	e00a      	b.n	800987c <USART_SetConfig+0x8a4>
 8009866:	230a      	movs	r3, #10
 8009868:	e008      	b.n	800987c <USART_SetConfig+0x8a4>
 800986a:	2308      	movs	r3, #8
 800986c:	e006      	b.n	800987c <USART_SetConfig+0x8a4>
 800986e:	2306      	movs	r3, #6
 8009870:	e004      	b.n	800987c <USART_SetConfig+0x8a4>
 8009872:	2304      	movs	r3, #4
 8009874:	e002      	b.n	800987c <USART_SetConfig+0x8a4>
 8009876:	2302      	movs	r3, #2
 8009878:	e000      	b.n	800987c <USART_SetConfig+0x8a4>
 800987a:	2301      	movs	r3, #1
 800987c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009880:	005a      	lsls	r2, r3, #1
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	085b      	lsrs	r3, r3, #1
 8009888:	441a      	add	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009892:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 8009894:	e113      	b.n	8009abe <USART_SetConfig+0xae6>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989a:	2b00      	cmp	r3, #0
 800989c:	d044      	beq.n	8009928 <USART_SetConfig+0x950>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d03e      	beq.n	8009924 <USART_SetConfig+0x94c>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d038      	beq.n	8009920 <USART_SetConfig+0x948>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d032      	beq.n	800991c <USART_SetConfig+0x944>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d02c      	beq.n	8009918 <USART_SetConfig+0x940>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c2:	2b05      	cmp	r3, #5
 80098c4:	d026      	beq.n	8009914 <USART_SetConfig+0x93c>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ca:	2b06      	cmp	r3, #6
 80098cc:	d020      	beq.n	8009910 <USART_SetConfig+0x938>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d2:	2b07      	cmp	r3, #7
 80098d4:	d01a      	beq.n	800990c <USART_SetConfig+0x934>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098da:	2b08      	cmp	r3, #8
 80098dc:	d014      	beq.n	8009908 <USART_SetConfig+0x930>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	2b09      	cmp	r3, #9
 80098e4:	d00e      	beq.n	8009904 <USART_SetConfig+0x92c>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ea:	2b0a      	cmp	r3, #10
 80098ec:	d008      	beq.n	8009900 <USART_SetConfig+0x928>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f2:	2b0b      	cmp	r3, #11
 80098f4:	d102      	bne.n	80098fc <USART_SetConfig+0x924>
 80098f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098fa:	e016      	b.n	800992a <USART_SetConfig+0x952>
 80098fc:	2301      	movs	r3, #1
 80098fe:	e014      	b.n	800992a <USART_SetConfig+0x952>
 8009900:	2380      	movs	r3, #128	; 0x80
 8009902:	e012      	b.n	800992a <USART_SetConfig+0x952>
 8009904:	2340      	movs	r3, #64	; 0x40
 8009906:	e010      	b.n	800992a <USART_SetConfig+0x952>
 8009908:	2320      	movs	r3, #32
 800990a:	e00e      	b.n	800992a <USART_SetConfig+0x952>
 800990c:	2310      	movs	r3, #16
 800990e:	e00c      	b.n	800992a <USART_SetConfig+0x952>
 8009910:	230c      	movs	r3, #12
 8009912:	e00a      	b.n	800992a <USART_SetConfig+0x952>
 8009914:	230a      	movs	r3, #10
 8009916:	e008      	b.n	800992a <USART_SetConfig+0x952>
 8009918:	2308      	movs	r3, #8
 800991a:	e006      	b.n	800992a <USART_SetConfig+0x952>
 800991c:	2306      	movs	r3, #6
 800991e:	e004      	b.n	800992a <USART_SetConfig+0x952>
 8009920:	2304      	movs	r3, #4
 8009922:	e002      	b.n	800992a <USART_SetConfig+0x952>
 8009924:	2302      	movs	r3, #2
 8009926:	e000      	b.n	800992a <USART_SetConfig+0x952>
 8009928:	2301      	movs	r3, #1
 800992a:	4a34      	ldr	r2, [pc, #208]	; (80099fc <USART_SetConfig+0xa24>)
 800992c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009930:	005a      	lsls	r2, r3, #1
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	085b      	lsrs	r3, r3, #1
 8009938:	441a      	add	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009942:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009944:	e0bb      	b.n	8009abe <USART_SetConfig+0xae6>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	2b00      	cmp	r3, #0
 800994c:	d044      	beq.n	80099d8 <USART_SetConfig+0xa00>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	2b01      	cmp	r3, #1
 8009954:	d03e      	beq.n	80099d4 <USART_SetConfig+0x9fc>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	2b02      	cmp	r3, #2
 800995c:	d038      	beq.n	80099d0 <USART_SetConfig+0x9f8>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	2b03      	cmp	r3, #3
 8009964:	d032      	beq.n	80099cc <USART_SetConfig+0x9f4>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996a:	2b04      	cmp	r3, #4
 800996c:	d02c      	beq.n	80099c8 <USART_SetConfig+0x9f0>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	2b05      	cmp	r3, #5
 8009974:	d026      	beq.n	80099c4 <USART_SetConfig+0x9ec>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	2b06      	cmp	r3, #6
 800997c:	d020      	beq.n	80099c0 <USART_SetConfig+0x9e8>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	2b07      	cmp	r3, #7
 8009984:	d01a      	beq.n	80099bc <USART_SetConfig+0x9e4>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998a:	2b08      	cmp	r3, #8
 800998c:	d014      	beq.n	80099b8 <USART_SetConfig+0x9e0>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	2b09      	cmp	r3, #9
 8009994:	d00e      	beq.n	80099b4 <USART_SetConfig+0x9dc>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999a:	2b0a      	cmp	r3, #10
 800999c:	d008      	beq.n	80099b0 <USART_SetConfig+0x9d8>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a2:	2b0b      	cmp	r3, #11
 80099a4:	d102      	bne.n	80099ac <USART_SetConfig+0x9d4>
 80099a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099aa:	e016      	b.n	80099da <USART_SetConfig+0xa02>
 80099ac:	2301      	movs	r3, #1
 80099ae:	e014      	b.n	80099da <USART_SetConfig+0xa02>
 80099b0:	2380      	movs	r3, #128	; 0x80
 80099b2:	e012      	b.n	80099da <USART_SetConfig+0xa02>
 80099b4:	2340      	movs	r3, #64	; 0x40
 80099b6:	e010      	b.n	80099da <USART_SetConfig+0xa02>
 80099b8:	2320      	movs	r3, #32
 80099ba:	e00e      	b.n	80099da <USART_SetConfig+0xa02>
 80099bc:	2310      	movs	r3, #16
 80099be:	e00c      	b.n	80099da <USART_SetConfig+0xa02>
 80099c0:	230c      	movs	r3, #12
 80099c2:	e00a      	b.n	80099da <USART_SetConfig+0xa02>
 80099c4:	230a      	movs	r3, #10
 80099c6:	e008      	b.n	80099da <USART_SetConfig+0xa02>
 80099c8:	2308      	movs	r3, #8
 80099ca:	e006      	b.n	80099da <USART_SetConfig+0xa02>
 80099cc:	2306      	movs	r3, #6
 80099ce:	e004      	b.n	80099da <USART_SetConfig+0xa02>
 80099d0:	2304      	movs	r3, #4
 80099d2:	e002      	b.n	80099da <USART_SetConfig+0xa02>
 80099d4:	2302      	movs	r3, #2
 80099d6:	e000      	b.n	80099da <USART_SetConfig+0xa02>
 80099d8:	2301      	movs	r3, #1
 80099da:	4a09      	ldr	r2, [pc, #36]	; (8009a00 <USART_SetConfig+0xa28>)
 80099dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e0:	005a      	lsls	r2, r3, #1
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	085b      	lsrs	r3, r3, #1
 80099e8:	441a      	add	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80099f4:	e063      	b.n	8009abe <USART_SetConfig+0xae6>
 80099f6:	bf00      	nop
 80099f8:	58024400 	.word	0x58024400
 80099fc:	03d09000 	.word	0x03d09000
 8009a00:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d044      	beq.n	8009a96 <USART_SetConfig+0xabe>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d03e      	beq.n	8009a92 <USART_SetConfig+0xaba>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d038      	beq.n	8009a8e <USART_SetConfig+0xab6>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d032      	beq.n	8009a8a <USART_SetConfig+0xab2>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	2b04      	cmp	r3, #4
 8009a2a:	d02c      	beq.n	8009a86 <USART_SetConfig+0xaae>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	2b05      	cmp	r3, #5
 8009a32:	d026      	beq.n	8009a82 <USART_SetConfig+0xaaa>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b06      	cmp	r3, #6
 8009a3a:	d020      	beq.n	8009a7e <USART_SetConfig+0xaa6>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2b07      	cmp	r3, #7
 8009a42:	d01a      	beq.n	8009a7a <USART_SetConfig+0xaa2>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d014      	beq.n	8009a76 <USART_SetConfig+0xa9e>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a50:	2b09      	cmp	r3, #9
 8009a52:	d00e      	beq.n	8009a72 <USART_SetConfig+0xa9a>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b0a      	cmp	r3, #10
 8009a5a:	d008      	beq.n	8009a6e <USART_SetConfig+0xa96>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2b0b      	cmp	r3, #11
 8009a62:	d102      	bne.n	8009a6a <USART_SetConfig+0xa92>
 8009a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a68:	e016      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e014      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a6e:	2380      	movs	r3, #128	; 0x80
 8009a70:	e012      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a72:	2340      	movs	r3, #64	; 0x40
 8009a74:	e010      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a76:	2320      	movs	r3, #32
 8009a78:	e00e      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a7a:	2310      	movs	r3, #16
 8009a7c:	e00c      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a7e:	230c      	movs	r3, #12
 8009a80:	e00a      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a82:	230a      	movs	r3, #10
 8009a84:	e008      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a86:	2308      	movs	r3, #8
 8009a88:	e006      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a8a:	2306      	movs	r3, #6
 8009a8c:	e004      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a8e:	2304      	movs	r3, #4
 8009a90:	e002      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a92:	2302      	movs	r3, #2
 8009a94:	e000      	b.n	8009a98 <USART_SetConfig+0xac0>
 8009a96:	2301      	movs	r3, #1
 8009a98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa0:	005a      	lsls	r2, r3, #1
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	085b      	lsrs	r3, r3, #1
 8009aa8:	441a      	add	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009ab4:	e003      	b.n	8009abe <USART_SetConfig+0xae6>
    default:
      ret = HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 8009abc:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	2b0f      	cmp	r3, #15
 8009ac2:	d916      	bls.n	8009af2 <USART_SetConfig+0xb1a>
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aca:	d212      	bcs.n	8009af2 <USART_SetConfig+0xb1a>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	f023 030f 	bic.w	r3, r3, #15
 8009ad4:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	085b      	lsrs	r3, r3, #1
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009aee:	60da      	str	r2, [r3, #12]
 8009af0:	e002      	b.n	8009af8 <USART_SetConfig+0xb20>
  }
  else
  {
    ret = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009b10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3738      	adds	r7, #56	; 0x38
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af02      	add	r7, sp, #8
 8009b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b2a:	f7f8 fa41 	bl	8001fb0 <HAL_GetTick>
 8009b2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0308 	and.w	r3, r3, #8
 8009b3a:	2b08      	cmp	r3, #8
 8009b3c:	d10e      	bne.n	8009b5c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff fa0d 	bl	8008f6c <USART_WaitOnFlagUntilTimeout>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e01e      	b.n	8009b9a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0304 	and.w	r3, r3, #4
 8009b66:	2b04      	cmp	r3, #4
 8009b68:	d10e      	bne.n	8009b88 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff f9f7 	bl	8008f6c <USART_WaitOnFlagUntilTimeout>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e008      	b.n	8009b9a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b085      	sub	sp, #20
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d101      	bne.n	8009bb8 <HAL_USARTEx_DisableFifoMode+0x16>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e027      	b.n	8009c08 <HAL_USARTEx_DisableFifoMode+0x66>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0201 	bic.w	r2, r2, #1
 8009bde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009be6:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e02d      	b.n	8009c88 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2202      	movs	r2, #2
 8009c38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0201 	bic.w	r2, r2, #1
 8009c52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f84f 	bl	8009d0c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e02d      	b.n	8009d04 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0201 	bic.w	r2, r2, #1
 8009cce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f811 	bl	8009d0c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d106      	bne.n	8009d2a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d28:	e02f      	b.n	8009d8a <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d2a:	2310      	movs	r3, #16
 8009d2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d2e:	2310      	movs	r3, #16
 8009d30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8009d38:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	f003 0307 	and.w	r3, r3, #7
 8009d40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8009d48:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	f003 0307 	and.w	r3, r3, #7
 8009d50:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d52:	7bbb      	ldrb	r3, [r7, #14]
 8009d54:	7b3a      	ldrb	r2, [r7, #12]
 8009d56:	4910      	ldr	r1, [pc, #64]	; (8009d98 <USARTEx_SetNbDataToProcess+0x8c>)
 8009d58:	5c8a      	ldrb	r2, [r1, r2]
 8009d5a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8009d5e:	7b3a      	ldrb	r2, [r7, #12]
 8009d60:	490e      	ldr	r1, [pc, #56]	; (8009d9c <USARTEx_SetNbDataToProcess+0x90>)
 8009d62:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d64:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d6e:	7bfb      	ldrb	r3, [r7, #15]
 8009d70:	7b7a      	ldrb	r2, [r7, #13]
 8009d72:	4909      	ldr	r1, [pc, #36]	; (8009d98 <USARTEx_SetNbDataToProcess+0x8c>)
 8009d74:	5c8a      	ldrb	r2, [r1, r2]
 8009d76:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8009d7a:	7b7a      	ldrb	r2, [r7, #13]
 8009d7c:	4907      	ldr	r1, [pc, #28]	; (8009d9c <USARTEx_SetNbDataToProcess+0x90>)
 8009d7e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d80:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d84:	b29a      	uxth	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 8009d8a:	bf00      	nop
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	08009e88 	.word	0x08009e88
 8009d9c:	08009e90 	.word	0x08009e90

08009da0 <__libc_init_array>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	4d0d      	ldr	r5, [pc, #52]	; (8009dd8 <__libc_init_array+0x38>)
 8009da4:	4c0d      	ldr	r4, [pc, #52]	; (8009ddc <__libc_init_array+0x3c>)
 8009da6:	1b64      	subs	r4, r4, r5
 8009da8:	10a4      	asrs	r4, r4, #2
 8009daa:	2600      	movs	r6, #0
 8009dac:	42a6      	cmp	r6, r4
 8009dae:	d109      	bne.n	8009dc4 <__libc_init_array+0x24>
 8009db0:	4d0b      	ldr	r5, [pc, #44]	; (8009de0 <__libc_init_array+0x40>)
 8009db2:	4c0c      	ldr	r4, [pc, #48]	; (8009de4 <__libc_init_array+0x44>)
 8009db4:	f000 f82e 	bl	8009e14 <_init>
 8009db8:	1b64      	subs	r4, r4, r5
 8009dba:	10a4      	asrs	r4, r4, #2
 8009dbc:	2600      	movs	r6, #0
 8009dbe:	42a6      	cmp	r6, r4
 8009dc0:	d105      	bne.n	8009dce <__libc_init_array+0x2e>
 8009dc2:	bd70      	pop	{r4, r5, r6, pc}
 8009dc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dc8:	4798      	blx	r3
 8009dca:	3601      	adds	r6, #1
 8009dcc:	e7ee      	b.n	8009dac <__libc_init_array+0xc>
 8009dce:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dd2:	4798      	blx	r3
 8009dd4:	3601      	adds	r6, #1
 8009dd6:	e7f2      	b.n	8009dbe <__libc_init_array+0x1e>
 8009dd8:	08009e98 	.word	0x08009e98
 8009ddc:	08009e98 	.word	0x08009e98
 8009de0:	08009e98 	.word	0x08009e98
 8009de4:	08009e9c 	.word	0x08009e9c

08009de8 <memcpy>:
 8009de8:	440a      	add	r2, r1
 8009dea:	4291      	cmp	r1, r2
 8009dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8009df0:	d100      	bne.n	8009df4 <memcpy+0xc>
 8009df2:	4770      	bx	lr
 8009df4:	b510      	push	{r4, lr}
 8009df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dfe:	4291      	cmp	r1, r2
 8009e00:	d1f9      	bne.n	8009df6 <memcpy+0xe>
 8009e02:	bd10      	pop	{r4, pc}

08009e04 <memset>:
 8009e04:	4402      	add	r2, r0
 8009e06:	4603      	mov	r3, r0
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d100      	bne.n	8009e0e <memset+0xa>
 8009e0c:	4770      	bx	lr
 8009e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e12:	e7f9      	b.n	8009e08 <memset+0x4>

08009e14 <_init>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	bf00      	nop
 8009e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1a:	bc08      	pop	{r3}
 8009e1c:	469e      	mov	lr, r3
 8009e1e:	4770      	bx	lr

08009e20 <_fini>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	bf00      	nop
 8009e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e26:	bc08      	pop	{r3}
 8009e28:	469e      	mov	lr, r3
 8009e2a:	4770      	bx	lr
